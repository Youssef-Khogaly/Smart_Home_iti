
Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000624c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000002d2  00800060  0000624c  000062e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000023  00800332  00800332  000065b2  2**0
                  ALLOC
  3 .stab         00005ae4  00000000  00000000  000065b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000029c8  00000000  00000000  0000c098  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  0000ea60  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000214  00000000  00000000  0000ec20  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002612  00000000  00000000  0000ee34  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014ce  00000000  00000000  00011446  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000130b  00000000  00000000  00012914  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  00013c20  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000307  00000000  00000000  00013e00  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a1a  00000000  00000000  00014107  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00014b21  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 84 0c 	jmp	0x1908	; 0x1908 <__vector_1>
       8:	0c 94 b7 0c 	jmp	0x196e	; 0x196e <__vector_2>
       c:	0c 94 ea 0c 	jmp	0x19d4	; 0x19d4 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 0c 0b 	jmp	0x1618	; 0x1618 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 a6 0a 	jmp	0x154c	; 0x154c <__vector_10>
      2c:	0c 94 d9 0a 	jmp	0x15b2	; 0x15b2 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 41 08 	jmp	0x1082	; 0x1082 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 b3 10 	jmp	0x2166	; 0x2166 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	13 e0       	ldi	r17, 0x03	; 3
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e4       	ldi	r30, 0x4C	; 76
      68:	f2 e6       	ldi	r31, 0x62	; 98
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 33       	cpi	r26, 0x32	; 50
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	13 e0       	ldi	r17, 0x03	; 3
      78:	a2 e3       	ldi	r26, 0x32	; 50
      7a:	b3 e0       	ldi	r27, 0x03	; 3
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 35       	cpi	r26, 0x55	; 85
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 58 27 	call	0x4eb0	; 0x4eb0 <main>
      8a:	0c 94 24 31 	jmp	0x6248	; 0x6248 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 3f 2e 	jmp	0x5c7e	; 0x5c7e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ab ed       	ldi	r26, 0xDB	; 219
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 5b 2e 	jmp	0x5cb6	; 0x5cb6 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 4b 2e 	jmp	0x5c96	; 0x5c96 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 67 2e 	jmp	0x5cce	; 0x5cce <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 4b 2e 	jmp	0x5c96	; 0x5c96 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 67 2e 	jmp	0x5cce	; 0x5cce <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 3f 2e 	jmp	0x5c7e	; 0x5c7e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8b ed       	ldi	r24, 0xDB	; 219
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 5b 2e 	jmp	0x5cb6	; 0x5cb6 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 47 2e 	jmp	0x5c8e	; 0x5c8e <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6b ed       	ldi	r22, 0xDB	; 219
     69c:	71 e0       	ldi	r23, 0x01	; 1
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 63 2e 	jmp	0x5cc6	; 0x5cc6 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 4b 2e 	jmp	0x5c96	; 0x5c96 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 67 2e 	jmp	0x5cce	; 0x5cce <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 4b 2e 	jmp	0x5c96	; 0x5c96 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 67 2e 	jmp	0x5cce	; 0x5cce <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 4b 2e 	jmp	0x5c96	; 0x5c96 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 67 2e 	jmp	0x5cce	; 0x5cce <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 48 2e 	jmp	0x5c90	; 0x5c90 <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 64 2e 	jmp	0x5cc8	; 0x5cc8 <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 4f 2e 	jmp	0x5c9e	; 0x5c9e <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 6b 2e 	jmp	0x5cd6	; 0x5cd6 <__epilogue_restores__+0x20>

00000a0e <__floatunsisf>:
     a0e:	a8 e0       	ldi	r26, 0x08	; 8
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	ed e0       	ldi	r30, 0x0D	; 13
     a14:	f5 e0       	ldi	r31, 0x05	; 5
     a16:	0c 94 47 2e 	jmp	0x5c8e	; 0x5c8e <__prologue_saves__+0x10>
     a1a:	7b 01       	movw	r14, r22
     a1c:	8c 01       	movw	r16, r24
     a1e:	61 15       	cp	r22, r1
     a20:	71 05       	cpc	r23, r1
     a22:	81 05       	cpc	r24, r1
     a24:	91 05       	cpc	r25, r1
     a26:	19 f4       	brne	.+6      	; 0xa2e <__floatunsisf+0x20>
     a28:	82 e0       	ldi	r24, 0x02	; 2
     a2a:	89 83       	std	Y+1, r24	; 0x01
     a2c:	60 c0       	rjmp	.+192    	; 0xaee <__floatunsisf+0xe0>
     a2e:	83 e0       	ldi	r24, 0x03	; 3
     a30:	89 83       	std	Y+1, r24	; 0x01
     a32:	8e e1       	ldi	r24, 0x1E	; 30
     a34:	c8 2e       	mov	r12, r24
     a36:	d1 2c       	mov	r13, r1
     a38:	dc 82       	std	Y+4, r13	; 0x04
     a3a:	cb 82       	std	Y+3, r12	; 0x03
     a3c:	ed 82       	std	Y+5, r14	; 0x05
     a3e:	fe 82       	std	Y+6, r15	; 0x06
     a40:	0f 83       	std	Y+7, r16	; 0x07
     a42:	18 87       	std	Y+8, r17	; 0x08
     a44:	c8 01       	movw	r24, r16
     a46:	b7 01       	movw	r22, r14
     a48:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     a4c:	fc 01       	movw	r30, r24
     a4e:	31 97       	sbiw	r30, 0x01	; 1
     a50:	f7 ff       	sbrs	r31, 7
     a52:	3b c0       	rjmp	.+118    	; 0xaca <__floatunsisf+0xbc>
     a54:	22 27       	eor	r18, r18
     a56:	33 27       	eor	r19, r19
     a58:	2e 1b       	sub	r18, r30
     a5a:	3f 0b       	sbc	r19, r31
     a5c:	57 01       	movw	r10, r14
     a5e:	68 01       	movw	r12, r16
     a60:	02 2e       	mov	r0, r18
     a62:	04 c0       	rjmp	.+8      	; 0xa6c <__floatunsisf+0x5e>
     a64:	d6 94       	lsr	r13
     a66:	c7 94       	ror	r12
     a68:	b7 94       	ror	r11
     a6a:	a7 94       	ror	r10
     a6c:	0a 94       	dec	r0
     a6e:	d2 f7       	brpl	.-12     	; 0xa64 <__floatunsisf+0x56>
     a70:	40 e0       	ldi	r20, 0x00	; 0
     a72:	50 e0       	ldi	r21, 0x00	; 0
     a74:	60 e0       	ldi	r22, 0x00	; 0
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	a0 e0       	ldi	r26, 0x00	; 0
     a7e:	b0 e0       	ldi	r27, 0x00	; 0
     a80:	04 c0       	rjmp	.+8      	; 0xa8a <__floatunsisf+0x7c>
     a82:	88 0f       	add	r24, r24
     a84:	99 1f       	adc	r25, r25
     a86:	aa 1f       	adc	r26, r26
     a88:	bb 1f       	adc	r27, r27
     a8a:	2a 95       	dec	r18
     a8c:	d2 f7       	brpl	.-12     	; 0xa82 <__floatunsisf+0x74>
     a8e:	01 97       	sbiw	r24, 0x01	; 1
     a90:	a1 09       	sbc	r26, r1
     a92:	b1 09       	sbc	r27, r1
     a94:	8e 21       	and	r24, r14
     a96:	9f 21       	and	r25, r15
     a98:	a0 23       	and	r26, r16
     a9a:	b1 23       	and	r27, r17
     a9c:	00 97       	sbiw	r24, 0x00	; 0
     a9e:	a1 05       	cpc	r26, r1
     aa0:	b1 05       	cpc	r27, r1
     aa2:	21 f0       	breq	.+8      	; 0xaac <__floatunsisf+0x9e>
     aa4:	41 e0       	ldi	r20, 0x01	; 1
     aa6:	50 e0       	ldi	r21, 0x00	; 0
     aa8:	60 e0       	ldi	r22, 0x00	; 0
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	4a 29       	or	r20, r10
     aae:	5b 29       	or	r21, r11
     ab0:	6c 29       	or	r22, r12
     ab2:	7d 29       	or	r23, r13
     ab4:	4d 83       	std	Y+5, r20	; 0x05
     ab6:	5e 83       	std	Y+6, r21	; 0x06
     ab8:	6f 83       	std	Y+7, r22	; 0x07
     aba:	78 87       	std	Y+8, r23	; 0x08
     abc:	8e e1       	ldi	r24, 0x1E	; 30
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	8e 1b       	sub	r24, r30
     ac2:	9f 0b       	sbc	r25, r31
     ac4:	9c 83       	std	Y+4, r25	; 0x04
     ac6:	8b 83       	std	Y+3, r24	; 0x03
     ac8:	12 c0       	rjmp	.+36     	; 0xaee <__floatunsisf+0xe0>
     aca:	30 97       	sbiw	r30, 0x00	; 0
     acc:	81 f0       	breq	.+32     	; 0xaee <__floatunsisf+0xe0>
     ace:	0e 2e       	mov	r0, r30
     ad0:	04 c0       	rjmp	.+8      	; 0xada <__floatunsisf+0xcc>
     ad2:	ee 0c       	add	r14, r14
     ad4:	ff 1c       	adc	r15, r15
     ad6:	00 1f       	adc	r16, r16
     ad8:	11 1f       	adc	r17, r17
     ada:	0a 94       	dec	r0
     adc:	d2 f7       	brpl	.-12     	; 0xad2 <__floatunsisf+0xc4>
     ade:	ed 82       	std	Y+5, r14	; 0x05
     ae0:	fe 82       	std	Y+6, r15	; 0x06
     ae2:	0f 83       	std	Y+7, r16	; 0x07
     ae4:	18 87       	std	Y+8, r17	; 0x08
     ae6:	ce 1a       	sub	r12, r30
     ae8:	df 0a       	sbc	r13, r31
     aea:	dc 82       	std	Y+4, r13	; 0x04
     aec:	cb 82       	std	Y+3, r12	; 0x03
     aee:	1a 82       	std	Y+2, r1	; 0x02
     af0:	ce 01       	movw	r24, r28
     af2:	01 96       	adiw	r24, 0x01	; 1
     af4:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     af8:	28 96       	adiw	r28, 0x08	; 8
     afa:	ea e0       	ldi	r30, 0x0A	; 10
     afc:	0c 94 63 2e 	jmp	0x5cc6	; 0x5cc6 <__epilogue_restores__+0x10>

00000b00 <__clzsi2>:
     b00:	ef 92       	push	r14
     b02:	ff 92       	push	r15
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	7b 01       	movw	r14, r22
     b0a:	8c 01       	movw	r16, r24
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	e8 16       	cp	r14, r24
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	f8 06       	cpc	r15, r24
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	08 07       	cpc	r16, r24
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	18 07       	cpc	r17, r24
     b1c:	88 f4       	brcc	.+34     	; 0xb40 <__clzsi2+0x40>
     b1e:	8f ef       	ldi	r24, 0xFF	; 255
     b20:	e8 16       	cp	r14, r24
     b22:	f1 04       	cpc	r15, r1
     b24:	01 05       	cpc	r16, r1
     b26:	11 05       	cpc	r17, r1
     b28:	31 f0       	breq	.+12     	; 0xb36 <__clzsi2+0x36>
     b2a:	28 f0       	brcs	.+10     	; 0xb36 <__clzsi2+0x36>
     b2c:	88 e0       	ldi	r24, 0x08	; 8
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	a0 e0       	ldi	r26, 0x00	; 0
     b32:	b0 e0       	ldi	r27, 0x00	; 0
     b34:	17 c0       	rjmp	.+46     	; 0xb64 <__clzsi2+0x64>
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	12 c0       	rjmp	.+36     	; 0xb64 <__clzsi2+0x64>
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	e8 16       	cp	r14, r24
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	f8 06       	cpc	r15, r24
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	08 07       	cpc	r16, r24
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	18 07       	cpc	r17, r24
     b50:	28 f0       	brcs	.+10     	; 0xb5c <__clzsi2+0x5c>
     b52:	88 e1       	ldi	r24, 0x18	; 24
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	a0 e0       	ldi	r26, 0x00	; 0
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	04 c0       	rjmp	.+8      	; 0xb64 <__clzsi2+0x64>
     b5c:	80 e1       	ldi	r24, 0x10	; 16
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	20 e2       	ldi	r18, 0x20	; 32
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	40 e0       	ldi	r20, 0x00	; 0
     b6a:	50 e0       	ldi	r21, 0x00	; 0
     b6c:	28 1b       	sub	r18, r24
     b6e:	39 0b       	sbc	r19, r25
     b70:	4a 0b       	sbc	r20, r26
     b72:	5b 0b       	sbc	r21, r27
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__clzsi2+0x7e>
     b76:	16 95       	lsr	r17
     b78:	07 95       	ror	r16
     b7a:	f7 94       	ror	r15
     b7c:	e7 94       	ror	r14
     b7e:	8a 95       	dec	r24
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__clzsi2+0x76>
     b82:	f7 01       	movw	r30, r14
     b84:	ed 51       	subi	r30, 0x1D	; 29
     b86:	fe 4f       	sbci	r31, 0xFE	; 254
     b88:	80 81       	ld	r24, Z
     b8a:	28 1b       	sub	r18, r24
     b8c:	31 09       	sbc	r19, r1
     b8e:	41 09       	sbc	r20, r1
     b90:	51 09       	sbc	r21, r1
     b92:	c9 01       	movw	r24, r18
     b94:	1f 91       	pop	r17
     b96:	0f 91       	pop	r16
     b98:	ff 90       	pop	r15
     b9a:	ef 90       	pop	r14
     b9c:	08 95       	ret

00000b9e <__pack_f>:
     b9e:	df 92       	push	r13
     ba0:	ef 92       	push	r14
     ba2:	ff 92       	push	r15
     ba4:	0f 93       	push	r16
     ba6:	1f 93       	push	r17
     ba8:	fc 01       	movw	r30, r24
     baa:	e4 80       	ldd	r14, Z+4	; 0x04
     bac:	f5 80       	ldd	r15, Z+5	; 0x05
     bae:	06 81       	ldd	r16, Z+6	; 0x06
     bb0:	17 81       	ldd	r17, Z+7	; 0x07
     bb2:	d1 80       	ldd	r13, Z+1	; 0x01
     bb4:	80 81       	ld	r24, Z
     bb6:	82 30       	cpi	r24, 0x02	; 2
     bb8:	48 f4       	brcc	.+18     	; 0xbcc <__pack_f+0x2e>
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	a0 e1       	ldi	r26, 0x10	; 16
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e8 2a       	or	r14, r24
     bc4:	f9 2a       	or	r15, r25
     bc6:	0a 2b       	or	r16, r26
     bc8:	1b 2b       	or	r17, r27
     bca:	a5 c0       	rjmp	.+330    	; 0xd16 <__pack_f+0x178>
     bcc:	84 30       	cpi	r24, 0x04	; 4
     bce:	09 f4       	brne	.+2      	; 0xbd2 <__pack_f+0x34>
     bd0:	9f c0       	rjmp	.+318    	; 0xd10 <__pack_f+0x172>
     bd2:	82 30       	cpi	r24, 0x02	; 2
     bd4:	21 f4       	brne	.+8      	; 0xbde <__pack_f+0x40>
     bd6:	ee 24       	eor	r14, r14
     bd8:	ff 24       	eor	r15, r15
     bda:	87 01       	movw	r16, r14
     bdc:	05 c0       	rjmp	.+10     	; 0xbe8 <__pack_f+0x4a>
     bde:	e1 14       	cp	r14, r1
     be0:	f1 04       	cpc	r15, r1
     be2:	01 05       	cpc	r16, r1
     be4:	11 05       	cpc	r17, r1
     be6:	19 f4       	brne	.+6      	; 0xbee <__pack_f+0x50>
     be8:	e0 e0       	ldi	r30, 0x00	; 0
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	96 c0       	rjmp	.+300    	; 0xd1a <__pack_f+0x17c>
     bee:	62 81       	ldd	r22, Z+2	; 0x02
     bf0:	73 81       	ldd	r23, Z+3	; 0x03
     bf2:	9f ef       	ldi	r25, 0xFF	; 255
     bf4:	62 38       	cpi	r22, 0x82	; 130
     bf6:	79 07       	cpc	r23, r25
     bf8:	0c f0       	brlt	.+2      	; 0xbfc <__pack_f+0x5e>
     bfa:	5b c0       	rjmp	.+182    	; 0xcb2 <__pack_f+0x114>
     bfc:	22 e8       	ldi	r18, 0x82	; 130
     bfe:	3f ef       	ldi	r19, 0xFF	; 255
     c00:	26 1b       	sub	r18, r22
     c02:	37 0b       	sbc	r19, r23
     c04:	2a 31       	cpi	r18, 0x1A	; 26
     c06:	31 05       	cpc	r19, r1
     c08:	2c f0       	brlt	.+10     	; 0xc14 <__pack_f+0x76>
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	40 e0       	ldi	r20, 0x00	; 0
     c10:	50 e0       	ldi	r21, 0x00	; 0
     c12:	2a c0       	rjmp	.+84     	; 0xc68 <__pack_f+0xca>
     c14:	b8 01       	movw	r22, r16
     c16:	a7 01       	movw	r20, r14
     c18:	02 2e       	mov	r0, r18
     c1a:	04 c0       	rjmp	.+8      	; 0xc24 <__pack_f+0x86>
     c1c:	76 95       	lsr	r23
     c1e:	67 95       	ror	r22
     c20:	57 95       	ror	r21
     c22:	47 95       	ror	r20
     c24:	0a 94       	dec	r0
     c26:	d2 f7       	brpl	.-12     	; 0xc1c <__pack_f+0x7e>
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	a0 e0       	ldi	r26, 0x00	; 0
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	04 c0       	rjmp	.+8      	; 0xc3a <__pack_f+0x9c>
     c32:	88 0f       	add	r24, r24
     c34:	99 1f       	adc	r25, r25
     c36:	aa 1f       	adc	r26, r26
     c38:	bb 1f       	adc	r27, r27
     c3a:	2a 95       	dec	r18
     c3c:	d2 f7       	brpl	.-12     	; 0xc32 <__pack_f+0x94>
     c3e:	01 97       	sbiw	r24, 0x01	; 1
     c40:	a1 09       	sbc	r26, r1
     c42:	b1 09       	sbc	r27, r1
     c44:	8e 21       	and	r24, r14
     c46:	9f 21       	and	r25, r15
     c48:	a0 23       	and	r26, r16
     c4a:	b1 23       	and	r27, r17
     c4c:	00 97       	sbiw	r24, 0x00	; 0
     c4e:	a1 05       	cpc	r26, r1
     c50:	b1 05       	cpc	r27, r1
     c52:	21 f0       	breq	.+8      	; 0xc5c <__pack_f+0xbe>
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	a0 e0       	ldi	r26, 0x00	; 0
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	9a 01       	movw	r18, r20
     c5e:	ab 01       	movw	r20, r22
     c60:	28 2b       	or	r18, r24
     c62:	39 2b       	or	r19, r25
     c64:	4a 2b       	or	r20, r26
     c66:	5b 2b       	or	r21, r27
     c68:	da 01       	movw	r26, r20
     c6a:	c9 01       	movw	r24, r18
     c6c:	8f 77       	andi	r24, 0x7F	; 127
     c6e:	90 70       	andi	r25, 0x00	; 0
     c70:	a0 70       	andi	r26, 0x00	; 0
     c72:	b0 70       	andi	r27, 0x00	; 0
     c74:	80 34       	cpi	r24, 0x40	; 64
     c76:	91 05       	cpc	r25, r1
     c78:	a1 05       	cpc	r26, r1
     c7a:	b1 05       	cpc	r27, r1
     c7c:	39 f4       	brne	.+14     	; 0xc8c <__pack_f+0xee>
     c7e:	27 ff       	sbrs	r18, 7
     c80:	09 c0       	rjmp	.+18     	; 0xc94 <__pack_f+0xf6>
     c82:	20 5c       	subi	r18, 0xC0	; 192
     c84:	3f 4f       	sbci	r19, 0xFF	; 255
     c86:	4f 4f       	sbci	r20, 0xFF	; 255
     c88:	5f 4f       	sbci	r21, 0xFF	; 255
     c8a:	04 c0       	rjmp	.+8      	; 0xc94 <__pack_f+0xf6>
     c8c:	21 5c       	subi	r18, 0xC1	; 193
     c8e:	3f 4f       	sbci	r19, 0xFF	; 255
     c90:	4f 4f       	sbci	r20, 0xFF	; 255
     c92:	5f 4f       	sbci	r21, 0xFF	; 255
     c94:	e0 e0       	ldi	r30, 0x00	; 0
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	20 30       	cpi	r18, 0x00	; 0
     c9a:	a0 e0       	ldi	r26, 0x00	; 0
     c9c:	3a 07       	cpc	r19, r26
     c9e:	a0 e0       	ldi	r26, 0x00	; 0
     ca0:	4a 07       	cpc	r20, r26
     ca2:	a0 e4       	ldi	r26, 0x40	; 64
     ca4:	5a 07       	cpc	r21, r26
     ca6:	10 f0       	brcs	.+4      	; 0xcac <__pack_f+0x10e>
     ca8:	e1 e0       	ldi	r30, 0x01	; 1
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	79 01       	movw	r14, r18
     cae:	8a 01       	movw	r16, r20
     cb0:	27 c0       	rjmp	.+78     	; 0xd00 <__pack_f+0x162>
     cb2:	60 38       	cpi	r22, 0x80	; 128
     cb4:	71 05       	cpc	r23, r1
     cb6:	64 f5       	brge	.+88     	; 0xd10 <__pack_f+0x172>
     cb8:	fb 01       	movw	r30, r22
     cba:	e1 58       	subi	r30, 0x81	; 129
     cbc:	ff 4f       	sbci	r31, 0xFF	; 255
     cbe:	d8 01       	movw	r26, r16
     cc0:	c7 01       	movw	r24, r14
     cc2:	8f 77       	andi	r24, 0x7F	; 127
     cc4:	90 70       	andi	r25, 0x00	; 0
     cc6:	a0 70       	andi	r26, 0x00	; 0
     cc8:	b0 70       	andi	r27, 0x00	; 0
     cca:	80 34       	cpi	r24, 0x40	; 64
     ccc:	91 05       	cpc	r25, r1
     cce:	a1 05       	cpc	r26, r1
     cd0:	b1 05       	cpc	r27, r1
     cd2:	39 f4       	brne	.+14     	; 0xce2 <__pack_f+0x144>
     cd4:	e7 fe       	sbrs	r14, 7
     cd6:	0d c0       	rjmp	.+26     	; 0xcf2 <__pack_f+0x154>
     cd8:	80 e4       	ldi	r24, 0x40	; 64
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	a0 e0       	ldi	r26, 0x00	; 0
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	04 c0       	rjmp	.+8      	; 0xcea <__pack_f+0x14c>
     ce2:	8f e3       	ldi	r24, 0x3F	; 63
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	a0 e0       	ldi	r26, 0x00	; 0
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e8 0e       	add	r14, r24
     cec:	f9 1e       	adc	r15, r25
     cee:	0a 1f       	adc	r16, r26
     cf0:	1b 1f       	adc	r17, r27
     cf2:	17 ff       	sbrs	r17, 7
     cf4:	05 c0       	rjmp	.+10     	; 0xd00 <__pack_f+0x162>
     cf6:	16 95       	lsr	r17
     cf8:	07 95       	ror	r16
     cfa:	f7 94       	ror	r15
     cfc:	e7 94       	ror	r14
     cfe:	31 96       	adiw	r30, 0x01	; 1
     d00:	87 e0       	ldi	r24, 0x07	; 7
     d02:	16 95       	lsr	r17
     d04:	07 95       	ror	r16
     d06:	f7 94       	ror	r15
     d08:	e7 94       	ror	r14
     d0a:	8a 95       	dec	r24
     d0c:	d1 f7       	brne	.-12     	; 0xd02 <__pack_f+0x164>
     d0e:	05 c0       	rjmp	.+10     	; 0xd1a <__pack_f+0x17c>
     d10:	ee 24       	eor	r14, r14
     d12:	ff 24       	eor	r15, r15
     d14:	87 01       	movw	r16, r14
     d16:	ef ef       	ldi	r30, 0xFF	; 255
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	6e 2f       	mov	r22, r30
     d1c:	67 95       	ror	r22
     d1e:	66 27       	eor	r22, r22
     d20:	67 95       	ror	r22
     d22:	90 2f       	mov	r25, r16
     d24:	9f 77       	andi	r25, 0x7F	; 127
     d26:	d7 94       	ror	r13
     d28:	dd 24       	eor	r13, r13
     d2a:	d7 94       	ror	r13
     d2c:	8e 2f       	mov	r24, r30
     d2e:	86 95       	lsr	r24
     d30:	49 2f       	mov	r20, r25
     d32:	46 2b       	or	r20, r22
     d34:	58 2f       	mov	r21, r24
     d36:	5d 29       	or	r21, r13
     d38:	b7 01       	movw	r22, r14
     d3a:	ca 01       	movw	r24, r20
     d3c:	1f 91       	pop	r17
     d3e:	0f 91       	pop	r16
     d40:	ff 90       	pop	r15
     d42:	ef 90       	pop	r14
     d44:	df 90       	pop	r13
     d46:	08 95       	ret

00000d48 <__unpack_f>:
     d48:	fc 01       	movw	r30, r24
     d4a:	db 01       	movw	r26, r22
     d4c:	40 81       	ld	r20, Z
     d4e:	51 81       	ldd	r21, Z+1	; 0x01
     d50:	22 81       	ldd	r18, Z+2	; 0x02
     d52:	62 2f       	mov	r22, r18
     d54:	6f 77       	andi	r22, 0x7F	; 127
     d56:	70 e0       	ldi	r23, 0x00	; 0
     d58:	22 1f       	adc	r18, r18
     d5a:	22 27       	eor	r18, r18
     d5c:	22 1f       	adc	r18, r18
     d5e:	93 81       	ldd	r25, Z+3	; 0x03
     d60:	89 2f       	mov	r24, r25
     d62:	88 0f       	add	r24, r24
     d64:	82 2b       	or	r24, r18
     d66:	28 2f       	mov	r18, r24
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	99 1f       	adc	r25, r25
     d6c:	99 27       	eor	r25, r25
     d6e:	99 1f       	adc	r25, r25
     d70:	11 96       	adiw	r26, 0x01	; 1
     d72:	9c 93       	st	X, r25
     d74:	11 97       	sbiw	r26, 0x01	; 1
     d76:	21 15       	cp	r18, r1
     d78:	31 05       	cpc	r19, r1
     d7a:	a9 f5       	brne	.+106    	; 0xde6 <__unpack_f+0x9e>
     d7c:	41 15       	cp	r20, r1
     d7e:	51 05       	cpc	r21, r1
     d80:	61 05       	cpc	r22, r1
     d82:	71 05       	cpc	r23, r1
     d84:	11 f4       	brne	.+4      	; 0xd8a <__unpack_f+0x42>
     d86:	82 e0       	ldi	r24, 0x02	; 2
     d88:	37 c0       	rjmp	.+110    	; 0xdf8 <__unpack_f+0xb0>
     d8a:	82 e8       	ldi	r24, 0x82	; 130
     d8c:	9f ef       	ldi	r25, 0xFF	; 255
     d8e:	13 96       	adiw	r26, 0x03	; 3
     d90:	9c 93       	st	X, r25
     d92:	8e 93       	st	-X, r24
     d94:	12 97       	sbiw	r26, 0x02	; 2
     d96:	9a 01       	movw	r18, r20
     d98:	ab 01       	movw	r20, r22
     d9a:	67 e0       	ldi	r22, 0x07	; 7
     d9c:	22 0f       	add	r18, r18
     d9e:	33 1f       	adc	r19, r19
     da0:	44 1f       	adc	r20, r20
     da2:	55 1f       	adc	r21, r21
     da4:	6a 95       	dec	r22
     da6:	d1 f7       	brne	.-12     	; 0xd9c <__unpack_f+0x54>
     da8:	83 e0       	ldi	r24, 0x03	; 3
     daa:	8c 93       	st	X, r24
     dac:	0d c0       	rjmp	.+26     	; 0xdc8 <__unpack_f+0x80>
     dae:	22 0f       	add	r18, r18
     db0:	33 1f       	adc	r19, r19
     db2:	44 1f       	adc	r20, r20
     db4:	55 1f       	adc	r21, r21
     db6:	12 96       	adiw	r26, 0x02	; 2
     db8:	8d 91       	ld	r24, X+
     dba:	9c 91       	ld	r25, X
     dbc:	13 97       	sbiw	r26, 0x03	; 3
     dbe:	01 97       	sbiw	r24, 0x01	; 1
     dc0:	13 96       	adiw	r26, 0x03	; 3
     dc2:	9c 93       	st	X, r25
     dc4:	8e 93       	st	-X, r24
     dc6:	12 97       	sbiw	r26, 0x02	; 2
     dc8:	20 30       	cpi	r18, 0x00	; 0
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	38 07       	cpc	r19, r24
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	48 07       	cpc	r20, r24
     dd2:	80 e4       	ldi	r24, 0x40	; 64
     dd4:	58 07       	cpc	r21, r24
     dd6:	58 f3       	brcs	.-42     	; 0xdae <__unpack_f+0x66>
     dd8:	14 96       	adiw	r26, 0x04	; 4
     dda:	2d 93       	st	X+, r18
     ddc:	3d 93       	st	X+, r19
     dde:	4d 93       	st	X+, r20
     de0:	5c 93       	st	X, r21
     de2:	17 97       	sbiw	r26, 0x07	; 7
     de4:	08 95       	ret
     de6:	2f 3f       	cpi	r18, 0xFF	; 255
     de8:	31 05       	cpc	r19, r1
     dea:	79 f4       	brne	.+30     	; 0xe0a <__unpack_f+0xc2>
     dec:	41 15       	cp	r20, r1
     dee:	51 05       	cpc	r21, r1
     df0:	61 05       	cpc	r22, r1
     df2:	71 05       	cpc	r23, r1
     df4:	19 f4       	brne	.+6      	; 0xdfc <__unpack_f+0xb4>
     df6:	84 e0       	ldi	r24, 0x04	; 4
     df8:	8c 93       	st	X, r24
     dfa:	08 95       	ret
     dfc:	64 ff       	sbrs	r22, 4
     dfe:	03 c0       	rjmp	.+6      	; 0xe06 <__unpack_f+0xbe>
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	8c 93       	st	X, r24
     e04:	12 c0       	rjmp	.+36     	; 0xe2a <__unpack_f+0xe2>
     e06:	1c 92       	st	X, r1
     e08:	10 c0       	rjmp	.+32     	; 0xe2a <__unpack_f+0xe2>
     e0a:	2f 57       	subi	r18, 0x7F	; 127
     e0c:	30 40       	sbci	r19, 0x00	; 0
     e0e:	13 96       	adiw	r26, 0x03	; 3
     e10:	3c 93       	st	X, r19
     e12:	2e 93       	st	-X, r18
     e14:	12 97       	sbiw	r26, 0x02	; 2
     e16:	83 e0       	ldi	r24, 0x03	; 3
     e18:	8c 93       	st	X, r24
     e1a:	87 e0       	ldi	r24, 0x07	; 7
     e1c:	44 0f       	add	r20, r20
     e1e:	55 1f       	adc	r21, r21
     e20:	66 1f       	adc	r22, r22
     e22:	77 1f       	adc	r23, r23
     e24:	8a 95       	dec	r24
     e26:	d1 f7       	brne	.-12     	; 0xe1c <__unpack_f+0xd4>
     e28:	70 64       	ori	r23, 0x40	; 64
     e2a:	14 96       	adiw	r26, 0x04	; 4
     e2c:	4d 93       	st	X+, r20
     e2e:	5d 93       	st	X+, r21
     e30:	6d 93       	st	X+, r22
     e32:	7c 93       	st	X, r23
     e34:	17 97       	sbiw	r26, 0x07	; 7
     e36:	08 95       	ret

00000e38 <__fpcmp_parts_f>:
     e38:	1f 93       	push	r17
     e3a:	dc 01       	movw	r26, r24
     e3c:	fb 01       	movw	r30, r22
     e3e:	9c 91       	ld	r25, X
     e40:	92 30       	cpi	r25, 0x02	; 2
     e42:	08 f4       	brcc	.+2      	; 0xe46 <__fpcmp_parts_f+0xe>
     e44:	47 c0       	rjmp	.+142    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e46:	80 81       	ld	r24, Z
     e48:	82 30       	cpi	r24, 0x02	; 2
     e4a:	08 f4       	brcc	.+2      	; 0xe4e <__fpcmp_parts_f+0x16>
     e4c:	43 c0       	rjmp	.+134    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e4e:	94 30       	cpi	r25, 0x04	; 4
     e50:	51 f4       	brne	.+20     	; 0xe66 <__fpcmp_parts_f+0x2e>
     e52:	11 96       	adiw	r26, 0x01	; 1
     e54:	1c 91       	ld	r17, X
     e56:	84 30       	cpi	r24, 0x04	; 4
     e58:	99 f5       	brne	.+102    	; 0xec0 <__fpcmp_parts_f+0x88>
     e5a:	81 81       	ldd	r24, Z+1	; 0x01
     e5c:	68 2f       	mov	r22, r24
     e5e:	70 e0       	ldi	r23, 0x00	; 0
     e60:	61 1b       	sub	r22, r17
     e62:	71 09       	sbc	r23, r1
     e64:	3f c0       	rjmp	.+126    	; 0xee4 <__fpcmp_parts_f+0xac>
     e66:	84 30       	cpi	r24, 0x04	; 4
     e68:	21 f0       	breq	.+8      	; 0xe72 <__fpcmp_parts_f+0x3a>
     e6a:	92 30       	cpi	r25, 0x02	; 2
     e6c:	31 f4       	brne	.+12     	; 0xe7a <__fpcmp_parts_f+0x42>
     e6e:	82 30       	cpi	r24, 0x02	; 2
     e70:	b9 f1       	breq	.+110    	; 0xee0 <__fpcmp_parts_f+0xa8>
     e72:	81 81       	ldd	r24, Z+1	; 0x01
     e74:	88 23       	and	r24, r24
     e76:	89 f1       	breq	.+98     	; 0xeda <__fpcmp_parts_f+0xa2>
     e78:	2d c0       	rjmp	.+90     	; 0xed4 <__fpcmp_parts_f+0x9c>
     e7a:	11 96       	adiw	r26, 0x01	; 1
     e7c:	1c 91       	ld	r17, X
     e7e:	11 97       	sbiw	r26, 0x01	; 1
     e80:	82 30       	cpi	r24, 0x02	; 2
     e82:	f1 f0       	breq	.+60     	; 0xec0 <__fpcmp_parts_f+0x88>
     e84:	81 81       	ldd	r24, Z+1	; 0x01
     e86:	18 17       	cp	r17, r24
     e88:	d9 f4       	brne	.+54     	; 0xec0 <__fpcmp_parts_f+0x88>
     e8a:	12 96       	adiw	r26, 0x02	; 2
     e8c:	2d 91       	ld	r18, X+
     e8e:	3c 91       	ld	r19, X
     e90:	13 97       	sbiw	r26, 0x03	; 3
     e92:	82 81       	ldd	r24, Z+2	; 0x02
     e94:	93 81       	ldd	r25, Z+3	; 0x03
     e96:	82 17       	cp	r24, r18
     e98:	93 07       	cpc	r25, r19
     e9a:	94 f0       	brlt	.+36     	; 0xec0 <__fpcmp_parts_f+0x88>
     e9c:	28 17       	cp	r18, r24
     e9e:	39 07       	cpc	r19, r25
     ea0:	bc f0       	brlt	.+46     	; 0xed0 <__fpcmp_parts_f+0x98>
     ea2:	14 96       	adiw	r26, 0x04	; 4
     ea4:	8d 91       	ld	r24, X+
     ea6:	9d 91       	ld	r25, X+
     ea8:	0d 90       	ld	r0, X+
     eaa:	bc 91       	ld	r27, X
     eac:	a0 2d       	mov	r26, r0
     eae:	24 81       	ldd	r18, Z+4	; 0x04
     eb0:	35 81       	ldd	r19, Z+5	; 0x05
     eb2:	46 81       	ldd	r20, Z+6	; 0x06
     eb4:	57 81       	ldd	r21, Z+7	; 0x07
     eb6:	28 17       	cp	r18, r24
     eb8:	39 07       	cpc	r19, r25
     eba:	4a 07       	cpc	r20, r26
     ebc:	5b 07       	cpc	r21, r27
     ebe:	18 f4       	brcc	.+6      	; 0xec6 <__fpcmp_parts_f+0x8e>
     ec0:	11 23       	and	r17, r17
     ec2:	41 f0       	breq	.+16     	; 0xed4 <__fpcmp_parts_f+0x9c>
     ec4:	0a c0       	rjmp	.+20     	; 0xeda <__fpcmp_parts_f+0xa2>
     ec6:	82 17       	cp	r24, r18
     ec8:	93 07       	cpc	r25, r19
     eca:	a4 07       	cpc	r26, r20
     ecc:	b5 07       	cpc	r27, r21
     ece:	40 f4       	brcc	.+16     	; 0xee0 <__fpcmp_parts_f+0xa8>
     ed0:	11 23       	and	r17, r17
     ed2:	19 f0       	breq	.+6      	; 0xeda <__fpcmp_parts_f+0xa2>
     ed4:	61 e0       	ldi	r22, 0x01	; 1
     ed6:	70 e0       	ldi	r23, 0x00	; 0
     ed8:	05 c0       	rjmp	.+10     	; 0xee4 <__fpcmp_parts_f+0xac>
     eda:	6f ef       	ldi	r22, 0xFF	; 255
     edc:	7f ef       	ldi	r23, 0xFF	; 255
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <__fpcmp_parts_f+0xac>
     ee0:	60 e0       	ldi	r22, 0x00	; 0
     ee2:	70 e0       	ldi	r23, 0x00	; 0
     ee4:	cb 01       	movw	r24, r22
     ee6:	1f 91       	pop	r17
     ee8:	08 95       	ret

00000eea <UART_VoidInit>:

void __vector_13(void) __attribute__((signal,used));

ISR_FuncPtr_t ISR_UAST_RX_CBF = NULL;
void UART_VoidInit(void)
{
     eea:	df 93       	push	r29
     eec:	cf 93       	push	r28
     eee:	cd b7       	in	r28, 0x3d	; 61
     ef0:	de b7       	in	r29, 0x3e	; 62
	// select double speed config
	UART_UCSRA_REG |= (UART_D_TXSPEED_CFG <<  UART_UCSRA_U2X_BIT );
     ef2:	ab e2       	ldi	r26, 0x2B	; 43
     ef4:	b0 e0       	ldi	r27, 0x00	; 0
     ef6:	eb e2       	ldi	r30, 0x2B	; 43
     ef8:	f0 e0       	ldi	r31, 0x00	; 0
     efa:	80 81       	ld	r24, Z
     efc:	8c 93       	st	X, r24

	// enable write to UCSRC
	Set_Bit(UART_UCSRC_REG,UART_UCSRC_URSEL_BIT);
     efe:	a0 e4       	ldi	r26, 0x40	; 64
     f00:	b0 e0       	ldi	r27, 0x00	; 0
     f02:	e0 e4       	ldi	r30, 0x40	; 64
     f04:	f0 e0       	ldi	r31, 0x00	; 0
     f06:	80 81       	ld	r24, Z
     f08:	80 68       	ori	r24, 0x80	; 128
     f0a:	8c 93       	st	X, r24

	//select data lenth
	UART_UCSRB_REG |=  ( (Get_Bit(UART_DATA_LEN_CFG , 2)) << UART_UCSRB_UCSZ2_BIT); //bit2 in data lenth
     f0c:	aa e2       	ldi	r26, 0x2A	; 42
     f0e:	b0 e0       	ldi	r27, 0x00	; 0
     f10:	ea e2       	ldi	r30, 0x2A	; 42
     f12:	f0 e0       	ldi	r31, 0x00	; 0
     f14:	80 81       	ld	r24, Z
     f16:	8c 93       	st	X, r24

	// USCRC CONFIG
	UART_UCSRC_REG = UART_UCSRC_VAL_CFG ;
     f18:	e0 e4       	ldi	r30, 0x40	; 64
     f1a:	f0 e0       	ldi	r31, 0x00	; 0
     f1c:	88 e0       	ldi	r24, 0x08	; 8
     f1e:	80 83       	st	Z, r24

	// access  UBRRH
	Clr_Bit(UART_UCSRC_REG,UART_UCSRC_URSEL_BIT);
     f20:	a0 e4       	ldi	r26, 0x40	; 64
     f22:	b0 e0       	ldi	r27, 0x00	; 0
     f24:	e0 e4       	ldi	r30, 0x40	; 64
     f26:	f0 e0       	ldi	r31, 0x00	; 0
     f28:	80 81       	ld	r24, Z
     f2a:	8f 77       	andi	r24, 0x7F	; 127
     f2c:	8c 93       	st	X, r24

	// select Baud rate
	UART_UBRRL_REG = (u8)UART_BAUDRATE_CFG;
     f2e:	e9 e2       	ldi	r30, 0x29	; 41
     f30:	f0 e0       	ldi	r31, 0x00	; 0
     f32:	83 e3       	ldi	r24, 0x33	; 51
     f34:	80 83       	st	Z, r24
	UART_UBRRH_REG = (u8)(UART_BAUDRATE_CFG>>8);
     f36:	e0 e4       	ldi	r30, 0x40	; 64
     f38:	f0 e0       	ldi	r31, 0x00	; 0
     f3a:	10 82       	st	Z, r1
	GIE_ENABLE();
	// enable interrupt on data recived
	UART_UCSRB_REG |= (UART_UCSRB_RXCIE_BIT << 0x01);
#endif
	//rx enable
	UART_UCSRB_REG |= (0x01 << UART_UCSRB_RXEN_BIT);
     f3c:	aa e2       	ldi	r26, 0x2A	; 42
     f3e:	b0 e0       	ldi	r27, 0x00	; 0
     f40:	ea e2       	ldi	r30, 0x2A	; 42
     f42:	f0 e0       	ldi	r31, 0x00	; 0
     f44:	80 81       	ld	r24, Z
     f46:	80 61       	ori	r24, 0x10	; 16
     f48:	8c 93       	st	X, r24
	//tx enable
	UART_UCSRB_REG |= (0x01 << UART_UCSRB_TXEN_BIT);
     f4a:	aa e2       	ldi	r26, 0x2A	; 42
     f4c:	b0 e0       	ldi	r27, 0x00	; 0
     f4e:	ea e2       	ldi	r30, 0x2A	; 42
     f50:	f0 e0       	ldi	r31, 0x00	; 0
     f52:	80 81       	ld	r24, Z
     f54:	88 60       	ori	r24, 0x08	; 8
     f56:	8c 93       	st	X, r24
}
     f58:	cf 91       	pop	r28
     f5a:	df 91       	pop	r29
     f5c:	08 95       	ret

00000f5e <UART_VoidSetRxCBF>:


void UART_VoidSetRxCBF(ISR_FuncPtr_t copy_ISR_FuncPtr_t)
{
     f5e:	df 93       	push	r29
     f60:	cf 93       	push	r28
     f62:	00 d0       	rcall	.+0      	; 0xf64 <UART_VoidSetRxCBF+0x6>
     f64:	cd b7       	in	r28, 0x3d	; 61
     f66:	de b7       	in	r29, 0x3e	; 62
     f68:	9a 83       	std	Y+2, r25	; 0x02
     f6a:	89 83       	std	Y+1, r24	; 0x01
	if(copy_ISR_FuncPtr_t)
     f6c:	89 81       	ldd	r24, Y+1	; 0x01
     f6e:	9a 81       	ldd	r25, Y+2	; 0x02
     f70:	00 97       	sbiw	r24, 0x00	; 0
     f72:	31 f0       	breq	.+12     	; 0xf80 <UART_VoidSetRxCBF+0x22>
		ISR_UAST_RX_CBF = copy_ISR_FuncPtr_t;
     f74:	89 81       	ldd	r24, Y+1	; 0x01
     f76:	9a 81       	ldd	r25, Y+2	; 0x02
     f78:	90 93 33 03 	sts	0x0333, r25
     f7c:	80 93 32 03 	sts	0x0332, r24
}
     f80:	0f 90       	pop	r0
     f82:	0f 90       	pop	r0
     f84:	cf 91       	pop	r28
     f86:	df 91       	pop	r29
     f88:	08 95       	ret

00000f8a <UART_Send>:
void UART_Send(u8 Copy_u8Data)
{
     f8a:	df 93       	push	r29
     f8c:	cf 93       	push	r28
     f8e:	0f 92       	push	r0
     f90:	cd b7       	in	r28, 0x3d	; 61
     f92:	de b7       	in	r29, 0x3e	; 62
     f94:	89 83       	std	Y+1, r24	; 0x01
	while( Get_Bit(UART_UCSRA_REG,UART_UCSRA_UDRE_BIT) != 1)
     f96:	eb e2       	ldi	r30, 0x2B	; 43
     f98:	f0 e0       	ldi	r31, 0x00	; 0
     f9a:	80 81       	ld	r24, Z
     f9c:	82 95       	swap	r24
     f9e:	86 95       	lsr	r24
     fa0:	87 70       	andi	r24, 0x07	; 7
     fa2:	88 2f       	mov	r24, r24
     fa4:	90 e0       	ldi	r25, 0x00	; 0
     fa6:	81 70       	andi	r24, 0x01	; 1
     fa8:	90 70       	andi	r25, 0x00	; 0
     faa:	00 97       	sbiw	r24, 0x00	; 0
     fac:	a1 f3       	breq	.-24     	; 0xf96 <UART_Send+0xc>
		;
	UART_UDR_REG = Copy_u8Data;
     fae:	ec e2       	ldi	r30, 0x2C	; 44
     fb0:	f0 e0       	ldi	r31, 0x00	; 0
     fb2:	89 81       	ldd	r24, Y+1	; 0x01
     fb4:	80 83       	st	Z, r24

}
     fb6:	0f 90       	pop	r0
     fb8:	cf 91       	pop	r28
     fba:	df 91       	pop	r29
     fbc:	08 95       	ret

00000fbe <UART_Receive>:

void UART_Receive(u8* Copy_pu8GetData)
{
     fbe:	df 93       	push	r29
     fc0:	cf 93       	push	r28
     fc2:	00 d0       	rcall	.+0      	; 0xfc4 <UART_Receive+0x6>
     fc4:	cd b7       	in	r28, 0x3d	; 61
     fc6:	de b7       	in	r29, 0x3e	; 62
     fc8:	9a 83       	std	Y+2, r25	; 0x02
     fca:	89 83       	std	Y+1, r24	; 0x01

	while( Get_Bit(UART_UCSRA_REG,UART_UCSRA_RXC_BIT) != 1)
     fcc:	eb e2       	ldi	r30, 0x2B	; 43
     fce:	f0 e0       	ldi	r31, 0x00	; 0
     fd0:	80 81       	ld	r24, Z
     fd2:	88 1f       	adc	r24, r24
     fd4:	88 27       	eor	r24, r24
     fd6:	88 1f       	adc	r24, r24
     fd8:	81 30       	cpi	r24, 0x01	; 1
     fda:	c1 f7       	brne	.-16     	; 0xfcc <UART_Receive+0xe>
		;
	*Copy_pu8GetData = UART_UDR_REG;
     fdc:	ec e2       	ldi	r30, 0x2C	; 44
     fde:	f0 e0       	ldi	r31, 0x00	; 0
     fe0:	80 81       	ld	r24, Z
     fe2:	e9 81       	ldd	r30, Y+1	; 0x01
     fe4:	fa 81       	ldd	r31, Y+2	; 0x02
     fe6:	80 83       	st	Z, r24

}
     fe8:	0f 90       	pop	r0
     fea:	0f 90       	pop	r0
     fec:	cf 91       	pop	r28
     fee:	df 91       	pop	r29
     ff0:	08 95       	ret

00000ff2 <UART_Receive_interrupt>:

void UART_Receive_interrupt(u8* Copy_pu8GetData)
{
     ff2:	df 93       	push	r29
     ff4:	cf 93       	push	r28
     ff6:	00 d0       	rcall	.+0      	; 0xff8 <UART_Receive_interrupt+0x6>
     ff8:	cd b7       	in	r28, 0x3d	; 61
     ffa:	de b7       	in	r29, 0x3e	; 62
     ffc:	9a 83       	std	Y+2, r25	; 0x02
     ffe:	89 83       	std	Y+1, r24	; 0x01
	*Copy_pu8GetData = UART_UDR_REG;
    1000:	ec e2       	ldi	r30, 0x2C	; 44
    1002:	f0 e0       	ldi	r31, 0x00	; 0
    1004:	80 81       	ld	r24, Z
    1006:	e9 81       	ldd	r30, Y+1	; 0x01
    1008:	fa 81       	ldd	r31, Y+2	; 0x02
    100a:	80 83       	st	Z, r24
}
    100c:	0f 90       	pop	r0
    100e:	0f 90       	pop	r0
    1010:	cf 91       	pop	r28
    1012:	df 91       	pop	r29
    1014:	08 95       	ret

00001016 <UART_SendString>:

void UART_SendString(u8* Copy_pu8Data)
{
    1016:	df 93       	push	r29
    1018:	cf 93       	push	r28
    101a:	00 d0       	rcall	.+0      	; 0x101c <UART_SendString+0x6>
    101c:	0f 92       	push	r0
    101e:	cd b7       	in	r28, 0x3d	; 61
    1020:	de b7       	in	r29, 0x3e	; 62
    1022:	9b 83       	std	Y+3, r25	; 0x03
    1024:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0;
    1026:	19 82       	std	Y+1, r1	; 0x01
	while( Get_Bit(UART_UCSRA_REG,UART_UCSRA_UDRE_BIT) != 1)
    1028:	eb e2       	ldi	r30, 0x2B	; 43
    102a:	f0 e0       	ldi	r31, 0x00	; 0
    102c:	80 81       	ld	r24, Z
    102e:	82 95       	swap	r24
    1030:	86 95       	lsr	r24
    1032:	87 70       	andi	r24, 0x07	; 7
    1034:	88 2f       	mov	r24, r24
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	81 70       	andi	r24, 0x01	; 1
    103a:	90 70       	andi	r25, 0x00	; 0
    103c:	00 97       	sbiw	r24, 0x00	; 0
    103e:	a1 f3       	breq	.-24     	; 0x1028 <UART_SendString+0x12>
    1040:	0f c0       	rjmp	.+30     	; 0x1060 <UART_SendString+0x4a>
			;
	while(Copy_pu8Data[i])
	{
		UART_Send(Copy_pu8Data[i++]);
    1042:	89 81       	ldd	r24, Y+1	; 0x01
    1044:	28 2f       	mov	r18, r24
    1046:	30 e0       	ldi	r19, 0x00	; 0
    1048:	8a 81       	ldd	r24, Y+2	; 0x02
    104a:	9b 81       	ldd	r25, Y+3	; 0x03
    104c:	fc 01       	movw	r30, r24
    104e:	e2 0f       	add	r30, r18
    1050:	f3 1f       	adc	r31, r19
    1052:	90 81       	ld	r25, Z
    1054:	89 81       	ldd	r24, Y+1	; 0x01
    1056:	8f 5f       	subi	r24, 0xFF	; 255
    1058:	89 83       	std	Y+1, r24	; 0x01
    105a:	89 2f       	mov	r24, r25
    105c:	0e 94 c5 07 	call	0xf8a	; 0xf8a <UART_Send>
void UART_SendString(u8* Copy_pu8Data)
{
	u8 i = 0;
	while( Get_Bit(UART_UCSRA_REG,UART_UCSRA_UDRE_BIT) != 1)
			;
	while(Copy_pu8Data[i])
    1060:	89 81       	ldd	r24, Y+1	; 0x01
    1062:	28 2f       	mov	r18, r24
    1064:	30 e0       	ldi	r19, 0x00	; 0
    1066:	8a 81       	ldd	r24, Y+2	; 0x02
    1068:	9b 81       	ldd	r25, Y+3	; 0x03
    106a:	fc 01       	movw	r30, r24
    106c:	e2 0f       	add	r30, r18
    106e:	f3 1f       	adc	r31, r19
    1070:	80 81       	ld	r24, Z
    1072:	88 23       	and	r24, r24
    1074:	31 f7       	brne	.-52     	; 0x1042 <UART_SendString+0x2c>
	{
		UART_Send(Copy_pu8Data[i++]);
	}

}
    1076:	0f 90       	pop	r0
    1078:	0f 90       	pop	r0
    107a:	0f 90       	pop	r0
    107c:	cf 91       	pop	r28
    107e:	df 91       	pop	r29
    1080:	08 95       	ret

00001082 <__vector_13>:




void __vector_13(void)
{
    1082:	1f 92       	push	r1
    1084:	0f 92       	push	r0
    1086:	0f b6       	in	r0, 0x3f	; 63
    1088:	0f 92       	push	r0
    108a:	11 24       	eor	r1, r1
    108c:	2f 93       	push	r18
    108e:	3f 93       	push	r19
    1090:	4f 93       	push	r20
    1092:	5f 93       	push	r21
    1094:	6f 93       	push	r22
    1096:	7f 93       	push	r23
    1098:	8f 93       	push	r24
    109a:	9f 93       	push	r25
    109c:	af 93       	push	r26
    109e:	bf 93       	push	r27
    10a0:	ef 93       	push	r30
    10a2:	ff 93       	push	r31
    10a4:	df 93       	push	r29
    10a6:	cf 93       	push	r28
    10a8:	cd b7       	in	r28, 0x3d	; 61
    10aa:	de b7       	in	r29, 0x3e	; 62
	if(ISR_UAST_RX_CBF)
    10ac:	80 91 32 03 	lds	r24, 0x0332
    10b0:	90 91 33 03 	lds	r25, 0x0333
    10b4:	00 97       	sbiw	r24, 0x00	; 0
    10b6:	29 f0       	breq	.+10     	; 0x10c2 <__vector_13+0x40>
		ISR_UAST_RX_CBF();
    10b8:	e0 91 32 03 	lds	r30, 0x0332
    10bc:	f0 91 33 03 	lds	r31, 0x0333
    10c0:	09 95       	icall
}
    10c2:	cf 91       	pop	r28
    10c4:	df 91       	pop	r29
    10c6:	ff 91       	pop	r31
    10c8:	ef 91       	pop	r30
    10ca:	bf 91       	pop	r27
    10cc:	af 91       	pop	r26
    10ce:	9f 91       	pop	r25
    10d0:	8f 91       	pop	r24
    10d2:	7f 91       	pop	r23
    10d4:	6f 91       	pop	r22
    10d6:	5f 91       	pop	r21
    10d8:	4f 91       	pop	r20
    10da:	3f 91       	pop	r19
    10dc:	2f 91       	pop	r18
    10de:	0f 90       	pop	r0
    10e0:	0f be       	out	0x3f, r0	; 63
    10e2:	0f 90       	pop	r0
    10e4:	1f 90       	pop	r1
    10e6:	18 95       	reti

000010e8 <INT_EEPROM_VoidWriteByte>:
#include "../../LIB/STD_TYPES.h"
#include "../../LIB/Bit_Math.h"
#include "intEEPROM_private.h"
#include "intEEPROM_interface.h"
void INT_EEPROM_VoidWriteByte(u8 copy_u8Data ,  u16 copy_u16Address)
{
    10e8:	df 93       	push	r29
    10ea:	cf 93       	push	r28
    10ec:	00 d0       	rcall	.+0      	; 0x10ee <INT_EEPROM_VoidWriteByte+0x6>
    10ee:	0f 92       	push	r0
    10f0:	cd b7       	in	r28, 0x3d	; 61
    10f2:	de b7       	in	r29, 0x3e	; 62
    10f4:	89 83       	std	Y+1, r24	; 0x01
    10f6:	7b 83       	std	Y+3, r23	; 0x03
    10f8:	6a 83       	std	Y+2, r22	; 0x02
	// busy wait untill prev write operation finish
	while( Get_Bit(INTEEPROM_EECR_REG,INTEEPROM_EECR_EEWE_BIT) == 1 )
    10fa:	ec e3       	ldi	r30, 0x3C	; 60
    10fc:	f0 e0       	ldi	r31, 0x00	; 0
    10fe:	80 81       	ld	r24, Z
    1100:	86 95       	lsr	r24
    1102:	88 2f       	mov	r24, r24
    1104:	90 e0       	ldi	r25, 0x00	; 0
    1106:	81 70       	andi	r24, 0x01	; 1
    1108:	90 70       	andi	r25, 0x00	; 0
    110a:	88 23       	and	r24, r24
    110c:	b1 f7       	brne	.-20     	; 0x10fa <INT_EEPROM_VoidWriteByte+0x12>
		;
	// setup address
	INTEEPROM_EEAR_REG = copy_u16Address;
    110e:	ee e3       	ldi	r30, 0x3E	; 62
    1110:	f0 e0       	ldi	r31, 0x00	; 0
    1112:	8a 81       	ldd	r24, Y+2	; 0x02
    1114:	9b 81       	ldd	r25, Y+3	; 0x03
    1116:	91 83       	std	Z+1, r25	; 0x01
    1118:	80 83       	st	Z, r24
	// setup data in data reg
	INTEEPROM_EEDR_REG = copy_u8Data;
    111a:	ed e3       	ldi	r30, 0x3D	; 61
    111c:	f0 e0       	ldi	r31, 0x00	; 0
    111e:	89 81       	ldd	r24, Y+1	; 0x01
    1120:	80 83       	st	Z, r24
	// set EEMWE within 4 cycles

	__asm__( 	" sbi 0x1c , 2 "	);
    1122:	e2 9a       	sbi	0x1c, 2	; 28


	// set EEME within 4 cycles


	__asm__( 	" sbi 0x1c,1 "	);
    1124:	e1 9a       	sbi	0x1c, 1	; 28


}
    1126:	0f 90       	pop	r0
    1128:	0f 90       	pop	r0
    112a:	0f 90       	pop	r0
    112c:	cf 91       	pop	r28
    112e:	df 91       	pop	r29
    1130:	08 95       	ret

00001132 <INT_EEPROM_VoidReadByte>:
void INT_EEPROM_VoidReadByte(u8* copy_pu8Data , u16 copy_u16Address)
{
    1132:	df 93       	push	r29
    1134:	cf 93       	push	r28
    1136:	00 d0       	rcall	.+0      	; 0x1138 <INT_EEPROM_VoidReadByte+0x6>
    1138:	00 d0       	rcall	.+0      	; 0x113a <INT_EEPROM_VoidReadByte+0x8>
    113a:	cd b7       	in	r28, 0x3d	; 61
    113c:	de b7       	in	r29, 0x3e	; 62
    113e:	9a 83       	std	Y+2, r25	; 0x02
    1140:	89 83       	std	Y+1, r24	; 0x01
    1142:	7c 83       	std	Y+4, r23	; 0x04
    1144:	6b 83       	std	Y+3, r22	; 0x03
	if(copy_pu8Data)
    1146:	89 81       	ldd	r24, Y+1	; 0x01
    1148:	9a 81       	ldd	r25, Y+2	; 0x02
    114a:	00 97       	sbiw	r24, 0x00	; 0
    114c:	b9 f0       	breq	.+46     	; 0x117c <INT_EEPROM_VoidReadByte+0x4a>
	{
		// busy wait untill prev write operation finish
		while( Get_Bit(INTEEPROM_EECR_REG,INTEEPROM_EECR_EEWE_BIT) == 1 )
    114e:	ec e3       	ldi	r30, 0x3C	; 60
    1150:	f0 e0       	ldi	r31, 0x00	; 0
    1152:	80 81       	ld	r24, Z
    1154:	86 95       	lsr	r24
    1156:	88 2f       	mov	r24, r24
    1158:	90 e0       	ldi	r25, 0x00	; 0
    115a:	81 70       	andi	r24, 0x01	; 1
    115c:	90 70       	andi	r25, 0x00	; 0
    115e:	88 23       	and	r24, r24
    1160:	b1 f7       	brne	.-20     	; 0x114e <INT_EEPROM_VoidReadByte+0x1c>
			;
		// setup address
		INTEEPROM_EEAR_REG = copy_u16Address;
    1162:	ee e3       	ldi	r30, 0x3E	; 62
    1164:	f0 e0       	ldi	r31, 0x00	; 0
    1166:	8b 81       	ldd	r24, Y+3	; 0x03
    1168:	9c 81       	ldd	r25, Y+4	; 0x04
    116a:	91 83       	std	Z+1, r25	; 0x01
    116c:	80 83       	st	Z, r24
		// set EERE within 4 cycles
		__asm__( 	" sbi 0x1c,0 "	);
    116e:	e0 9a       	sbi	0x1c, 0	; 28
		*copy_pu8Data = INTEEPROM_EEDR_REG;
    1170:	ed e3       	ldi	r30, 0x3D	; 61
    1172:	f0 e0       	ldi	r31, 0x00	; 0
    1174:	80 81       	ld	r24, Z
    1176:	e9 81       	ldd	r30, Y+1	; 0x01
    1178:	fa 81       	ldd	r31, Y+2	; 0x02
    117a:	80 83       	st	Z, r24
	else
	{
		// nothing
	}

}
    117c:	0f 90       	pop	r0
    117e:	0f 90       	pop	r0
    1180:	0f 90       	pop	r0
    1182:	0f 90       	pop	r0
    1184:	cf 91       	pop	r28
    1186:	df 91       	pop	r29
    1188:	08 95       	ret

0000118a <INT_EEPROM_VoidWrite_Num_Bytes>:

void INT_EEPROM_VoidWrite_Num_Bytes(u32 copy_u8Data ,  u16 copy_u16StartAddress , u8 copy_u8NumberOFbytes)
{
    118a:	df 93       	push	r29
    118c:	cf 93       	push	r28
    118e:	cd b7       	in	r28, 0x3d	; 61
    1190:	de b7       	in	r29, 0x3e	; 62
    1192:	2c 97       	sbiw	r28, 0x0c	; 12
    1194:	0f b6       	in	r0, 0x3f	; 63
    1196:	f8 94       	cli
    1198:	de bf       	out	0x3e, r29	; 62
    119a:	0f be       	out	0x3f, r0	; 63
    119c:	cd bf       	out	0x3d, r28	; 61
    119e:	6e 83       	std	Y+6, r22	; 0x06
    11a0:	7f 83       	std	Y+7, r23	; 0x07
    11a2:	88 87       	std	Y+8, r24	; 0x08
    11a4:	99 87       	std	Y+9, r25	; 0x09
    11a6:	5b 87       	std	Y+11, r21	; 0x0b
    11a8:	4a 87       	std	Y+10, r20	; 0x0a
    11aa:	2c 87       	std	Y+12, r18	; 0x0c
	if(copy_u8NumberOFbytes <= 4 && copy_u16StartAddress <= (EEPROM_MAXADDRESS-copy_u8NumberOFbytes+1))
    11ac:	8c 85       	ldd	r24, Y+12	; 0x0c
    11ae:	85 30       	cpi	r24, 0x05	; 5
    11b0:	08 f0       	brcs	.+2      	; 0x11b4 <INT_EEPROM_VoidWrite_Num_Bytes+0x2a>
    11b2:	3f c0       	rjmp	.+126    	; 0x1232 <INT_EEPROM_VoidWrite_Num_Bytes+0xa8>
    11b4:	8c 85       	ldd	r24, Y+12	; 0x0c
    11b6:	28 2f       	mov	r18, r24
    11b8:	30 e0       	ldi	r19, 0x00	; 0
    11ba:	80 e0       	ldi	r24, 0x00	; 0
    11bc:	94 e0       	ldi	r25, 0x04	; 4
    11be:	82 1b       	sub	r24, r18
    11c0:	93 0b       	sbc	r25, r19
    11c2:	9c 01       	movw	r18, r24
    11c4:	8a 85       	ldd	r24, Y+10	; 0x0a
    11c6:	9b 85       	ldd	r25, Y+11	; 0x0b
    11c8:	28 17       	cp	r18, r24
    11ca:	39 07       	cpc	r19, r25
    11cc:	90 f1       	brcs	.+100    	; 0x1232 <INT_EEPROM_VoidWrite_Num_Bytes+0xa8>
	{
		u32 l_temp = copy_u8Data;
    11ce:	8e 81       	ldd	r24, Y+6	; 0x06
    11d0:	9f 81       	ldd	r25, Y+7	; 0x07
    11d2:	a8 85       	ldd	r26, Y+8	; 0x08
    11d4:	b9 85       	ldd	r27, Y+9	; 0x09
    11d6:	8a 83       	std	Y+2, r24	; 0x02
    11d8:	9b 83       	std	Y+3, r25	; 0x03
    11da:	ac 83       	std	Y+4, r26	; 0x04
    11dc:	bd 83       	std	Y+5, r27	; 0x05
		u8 l_counter = 0;
    11de:	19 82       	std	Y+1, r1	; 0x01
    11e0:	24 c0       	rjmp	.+72     	; 0x122a <INT_EEPROM_VoidWrite_Num_Bytes+0xa0>
		for(; l_counter < copy_u8NumberOFbytes ; ++l_counter)
			INT_EEPROM_VoidWriteByte(	(l_temp >> (l_counter* 8)) & 0xFF	,  (copy_u16StartAddress+l_counter) );
    11e2:	89 81       	ldd	r24, Y+1	; 0x01
    11e4:	88 2f       	mov	r24, r24
    11e6:	90 e0       	ldi	r25, 0x00	; 0
    11e8:	9c 01       	movw	r18, r24
    11ea:	22 0f       	add	r18, r18
    11ec:	33 1f       	adc	r19, r19
    11ee:	22 0f       	add	r18, r18
    11f0:	33 1f       	adc	r19, r19
    11f2:	22 0f       	add	r18, r18
    11f4:	33 1f       	adc	r19, r19
    11f6:	8a 81       	ldd	r24, Y+2	; 0x02
    11f8:	9b 81       	ldd	r25, Y+3	; 0x03
    11fa:	ac 81       	ldd	r26, Y+4	; 0x04
    11fc:	bd 81       	ldd	r27, Y+5	; 0x05
    11fe:	04 c0       	rjmp	.+8      	; 0x1208 <INT_EEPROM_VoidWrite_Num_Bytes+0x7e>
    1200:	b6 95       	lsr	r27
    1202:	a7 95       	ror	r26
    1204:	97 95       	ror	r25
    1206:	87 95       	ror	r24
    1208:	2a 95       	dec	r18
    120a:	d2 f7       	brpl	.-12     	; 0x1200 <INT_EEPROM_VoidWrite_Num_Bytes+0x76>
    120c:	48 2f       	mov	r20, r24
    120e:	89 81       	ldd	r24, Y+1	; 0x01
    1210:	28 2f       	mov	r18, r24
    1212:	30 e0       	ldi	r19, 0x00	; 0
    1214:	8a 85       	ldd	r24, Y+10	; 0x0a
    1216:	9b 85       	ldd	r25, Y+11	; 0x0b
    1218:	28 0f       	add	r18, r24
    121a:	39 1f       	adc	r19, r25
    121c:	84 2f       	mov	r24, r20
    121e:	b9 01       	movw	r22, r18
    1220:	0e 94 74 08 	call	0x10e8	; 0x10e8 <INT_EEPROM_VoidWriteByte>
{
	if(copy_u8NumberOFbytes <= 4 && copy_u16StartAddress <= (EEPROM_MAXADDRESS-copy_u8NumberOFbytes+1))
	{
		u32 l_temp = copy_u8Data;
		u8 l_counter = 0;
		for(; l_counter < copy_u8NumberOFbytes ; ++l_counter)
    1224:	89 81       	ldd	r24, Y+1	; 0x01
    1226:	8f 5f       	subi	r24, 0xFF	; 255
    1228:	89 83       	std	Y+1, r24	; 0x01
    122a:	99 81       	ldd	r25, Y+1	; 0x01
    122c:	8c 85       	ldd	r24, Y+12	; 0x0c
    122e:	98 17       	cp	r25, r24
    1230:	c0 f2       	brcs	.-80     	; 0x11e2 <INT_EEPROM_VoidWrite_Num_Bytes+0x58>
			INT_EEPROM_VoidWriteByte(	(l_temp >> (l_counter* 8)) & 0xFF	,  (copy_u16StartAddress+l_counter) );
	}

}
    1232:	2c 96       	adiw	r28, 0x0c	; 12
    1234:	0f b6       	in	r0, 0x3f	; 63
    1236:	f8 94       	cli
    1238:	de bf       	out	0x3e, r29	; 62
    123a:	0f be       	out	0x3f, r0	; 63
    123c:	cd bf       	out	0x3d, r28	; 61
    123e:	cf 91       	pop	r28
    1240:	df 91       	pop	r29
    1242:	08 95       	ret

00001244 <INT_EEPROM_VoidReadByte_Num_Bytes>:
void INT_EEPROM_VoidReadByte_Num_Bytes(u32* copy_pu8Data , u16 copy_u16StartAddress,u8 copy_u8NumberOFbytes)
{
    1244:	df 93       	push	r29
    1246:	cf 93       	push	r28
    1248:	cd b7       	in	r28, 0x3d	; 61
    124a:	de b7       	in	r29, 0x3e	; 62
    124c:	2b 97       	sbiw	r28, 0x0b	; 11
    124e:	0f b6       	in	r0, 0x3f	; 63
    1250:	f8 94       	cli
    1252:	de bf       	out	0x3e, r29	; 62
    1254:	0f be       	out	0x3f, r0	; 63
    1256:	cd bf       	out	0x3d, r28	; 61
    1258:	98 87       	std	Y+8, r25	; 0x08
    125a:	8f 83       	std	Y+7, r24	; 0x07
    125c:	7a 87       	std	Y+10, r23	; 0x0a
    125e:	69 87       	std	Y+9, r22	; 0x09
    1260:	4b 87       	std	Y+11, r20	; 0x0b
	if(copy_pu8Data &&copy_u8NumberOFbytes <= 4 && copy_u16StartAddress <= (EEPROM_MAXADDRESS-copy_u8NumberOFbytes+1))
    1262:	8f 81       	ldd	r24, Y+7	; 0x07
    1264:	98 85       	ldd	r25, Y+8	; 0x08
    1266:	00 97       	sbiw	r24, 0x00	; 0
    1268:	09 f4       	brne	.+2      	; 0x126c <INT_EEPROM_VoidReadByte_Num_Bytes+0x28>
    126a:	5a c0       	rjmp	.+180    	; 0x1320 <INT_EEPROM_VoidReadByte_Num_Bytes+0xdc>
    126c:	8b 85       	ldd	r24, Y+11	; 0x0b
    126e:	85 30       	cpi	r24, 0x05	; 5
    1270:	08 f0       	brcs	.+2      	; 0x1274 <INT_EEPROM_VoidReadByte_Num_Bytes+0x30>
    1272:	56 c0       	rjmp	.+172    	; 0x1320 <INT_EEPROM_VoidReadByte_Num_Bytes+0xdc>
    1274:	8b 85       	ldd	r24, Y+11	; 0x0b
    1276:	28 2f       	mov	r18, r24
    1278:	30 e0       	ldi	r19, 0x00	; 0
    127a:	80 e0       	ldi	r24, 0x00	; 0
    127c:	94 e0       	ldi	r25, 0x04	; 4
    127e:	82 1b       	sub	r24, r18
    1280:	93 0b       	sbc	r25, r19
    1282:	9c 01       	movw	r18, r24
    1284:	89 85       	ldd	r24, Y+9	; 0x09
    1286:	9a 85       	ldd	r25, Y+10	; 0x0a
    1288:	28 17       	cp	r18, r24
    128a:	39 07       	cpc	r19, r25
    128c:	08 f4       	brcc	.+2      	; 0x1290 <INT_EEPROM_VoidReadByte_Num_Bytes+0x4c>
    128e:	48 c0       	rjmp	.+144    	; 0x1320 <INT_EEPROM_VoidReadByte_Num_Bytes+0xdc>
	{
		u8 l_temp_read = 0;
    1290:	1e 82       	std	Y+6, r1	; 0x06
		u32 l_result_temp = 0;
    1292:	1a 82       	std	Y+2, r1	; 0x02
    1294:	1b 82       	std	Y+3, r1	; 0x03
    1296:	1c 82       	std	Y+4, r1	; 0x04
    1298:	1d 82       	std	Y+5, r1	; 0x05
		u8 l_counter = 0;
    129a:	19 82       	std	Y+1, r1	; 0x01
    129c:	33 c0       	rjmp	.+102    	; 0x1304 <INT_EEPROM_VoidReadByte_Num_Bytes+0xc0>
		for(; l_counter < copy_u8NumberOFbytes ; ++l_counter)
		{
			INT_EEPROM_VoidReadByte(&l_temp_read , (copy_u16StartAddress+l_counter) );
    129e:	89 81       	ldd	r24, Y+1	; 0x01
    12a0:	28 2f       	mov	r18, r24
    12a2:	30 e0       	ldi	r19, 0x00	; 0
    12a4:	89 85       	ldd	r24, Y+9	; 0x09
    12a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    12a8:	28 0f       	add	r18, r24
    12aa:	39 1f       	adc	r19, r25
    12ac:	ce 01       	movw	r24, r28
    12ae:	06 96       	adiw	r24, 0x06	; 6
    12b0:	b9 01       	movw	r22, r18
    12b2:	0e 94 99 08 	call	0x1132	; 0x1132 <INT_EEPROM_VoidReadByte>
			l_result_temp |= (l_temp_read << (l_counter* 8) );
    12b6:	8e 81       	ldd	r24, Y+6	; 0x06
    12b8:	28 2f       	mov	r18, r24
    12ba:	30 e0       	ldi	r19, 0x00	; 0
    12bc:	89 81       	ldd	r24, Y+1	; 0x01
    12be:	88 2f       	mov	r24, r24
    12c0:	90 e0       	ldi	r25, 0x00	; 0
    12c2:	88 0f       	add	r24, r24
    12c4:	99 1f       	adc	r25, r25
    12c6:	88 0f       	add	r24, r24
    12c8:	99 1f       	adc	r25, r25
    12ca:	88 0f       	add	r24, r24
    12cc:	99 1f       	adc	r25, r25
    12ce:	a9 01       	movw	r20, r18
    12d0:	02 c0       	rjmp	.+4      	; 0x12d6 <INT_EEPROM_VoidReadByte_Num_Bytes+0x92>
    12d2:	44 0f       	add	r20, r20
    12d4:	55 1f       	adc	r21, r21
    12d6:	8a 95       	dec	r24
    12d8:	e2 f7       	brpl	.-8      	; 0x12d2 <INT_EEPROM_VoidReadByte_Num_Bytes+0x8e>
    12da:	ca 01       	movw	r24, r20
    12dc:	9c 01       	movw	r18, r24
    12de:	44 27       	eor	r20, r20
    12e0:	37 fd       	sbrc	r19, 7
    12e2:	40 95       	com	r20
    12e4:	54 2f       	mov	r21, r20
    12e6:	8a 81       	ldd	r24, Y+2	; 0x02
    12e8:	9b 81       	ldd	r25, Y+3	; 0x03
    12ea:	ac 81       	ldd	r26, Y+4	; 0x04
    12ec:	bd 81       	ldd	r27, Y+5	; 0x05
    12ee:	82 2b       	or	r24, r18
    12f0:	93 2b       	or	r25, r19
    12f2:	a4 2b       	or	r26, r20
    12f4:	b5 2b       	or	r27, r21
    12f6:	8a 83       	std	Y+2, r24	; 0x02
    12f8:	9b 83       	std	Y+3, r25	; 0x03
    12fa:	ac 83       	std	Y+4, r26	; 0x04
    12fc:	bd 83       	std	Y+5, r27	; 0x05
	if(copy_pu8Data &&copy_u8NumberOFbytes <= 4 && copy_u16StartAddress <= (EEPROM_MAXADDRESS-copy_u8NumberOFbytes+1))
	{
		u8 l_temp_read = 0;
		u32 l_result_temp = 0;
		u8 l_counter = 0;
		for(; l_counter < copy_u8NumberOFbytes ; ++l_counter)
    12fe:	89 81       	ldd	r24, Y+1	; 0x01
    1300:	8f 5f       	subi	r24, 0xFF	; 255
    1302:	89 83       	std	Y+1, r24	; 0x01
    1304:	99 81       	ldd	r25, Y+1	; 0x01
    1306:	8b 85       	ldd	r24, Y+11	; 0x0b
    1308:	98 17       	cp	r25, r24
    130a:	48 f2       	brcs	.-110    	; 0x129e <INT_EEPROM_VoidReadByte_Num_Bytes+0x5a>
		{
			INT_EEPROM_VoidReadByte(&l_temp_read , (copy_u16StartAddress+l_counter) );
			l_result_temp |= (l_temp_read << (l_counter* 8) );
		}
		*copy_pu8Data = l_result_temp;
    130c:	ef 81       	ldd	r30, Y+7	; 0x07
    130e:	f8 85       	ldd	r31, Y+8	; 0x08
    1310:	8a 81       	ldd	r24, Y+2	; 0x02
    1312:	9b 81       	ldd	r25, Y+3	; 0x03
    1314:	ac 81       	ldd	r26, Y+4	; 0x04
    1316:	bd 81       	ldd	r27, Y+5	; 0x05
    1318:	80 83       	st	Z, r24
    131a:	91 83       	std	Z+1, r25	; 0x01
    131c:	a2 83       	std	Z+2, r26	; 0x02
    131e:	b3 83       	std	Z+3, r27	; 0x03
	}
}
    1320:	2b 96       	adiw	r28, 0x0b	; 11
    1322:	0f b6       	in	r0, 0x3f	; 63
    1324:	f8 94       	cli
    1326:	de bf       	out	0x3e, r29	; 62
    1328:	0f be       	out	0x3f, r0	; 63
    132a:	cd bf       	out	0x3d, r28	; 61
    132c:	cf 91       	pop	r28
    132e:	df 91       	pop	r29
    1330:	08 95       	ret

00001332 <GPT_VoidInit>:
static ISR_FuncPtr_t G_TIMER0_OVF_CBF = NULL;
static ISR_FuncPtr_t G_TIMER0_CTC_CBF = NULL;

static ISR_FuncPtr_t G_TIMER1_CTCA_CBF = NULL;

void GPT_VoidInit(GPT_stConfig* copy_pGPT_stConfig) {
    1332:	df 93       	push	r29
    1334:	cf 93       	push	r28
    1336:	00 d0       	rcall	.+0      	; 0x1338 <GPT_VoidInit+0x6>
    1338:	cd b7       	in	r28, 0x3d	; 61
    133a:	de b7       	in	r29, 0x3e	; 62
    133c:	9a 83       	std	Y+2, r25	; 0x02
    133e:	89 83       	std	Y+1, r24	; 0x01
	if (copy_pGPT_stConfig) {
    1340:	89 81       	ldd	r24, Y+1	; 0x01
    1342:	9a 81       	ldd	r25, Y+2	; 0x02
    1344:	00 97       	sbiw	r24, 0x00	; 0
    1346:	09 f4       	brne	.+2      	; 0x134a <GPT_VoidInit+0x18>
    1348:	cd c0       	rjmp	.+410    	; 0x14e4 <GPT_VoidInit+0x1b2>
		if (copy_pGPT_stConfig->GPT_timer == GPT_Timer0)
    134a:	e9 81       	ldd	r30, Y+1	; 0x01
    134c:	fa 81       	ldd	r31, Y+2	; 0x02
    134e:	80 81       	ld	r24, Z
    1350:	88 23       	and	r24, r24
    1352:	09 f0       	breq	.+2      	; 0x1356 <GPT_VoidInit+0x24>
    1354:	76 c0       	rjmp	.+236    	; 0x1442 <GPT_VoidInit+0x110>
		{
			if (copy_pGPT_stConfig->GPT_Mode == GPT_NormalMode)
    1356:	e9 81       	ldd	r30, Y+1	; 0x01
    1358:	fa 81       	ldd	r31, Y+2	; 0x02
    135a:	81 81       	ldd	r24, Z+1	; 0x01
    135c:	88 23       	and	r24, r24
    135e:	a9 f5       	brne	.+106    	; 0x13ca <GPT_VoidInit+0x98>
			{

				// set call back func
				G_TIMER0_OVF_CBF = copy_pGPT_stConfig->GPT_Timer_CBF;
    1360:	e9 81       	ldd	r30, Y+1	; 0x01
    1362:	fa 81       	ldd	r31, Y+2	; 0x02
    1364:	86 81       	ldd	r24, Z+6	; 0x06
    1366:	97 81       	ldd	r25, Z+7	; 0x07
    1368:	90 93 35 03 	sts	0x0335, r25
    136c:	80 93 34 03 	sts	0x0334, r24
				/*select mode*/
				Clr_Bit(GPT_TCCR0_REG, GPT_TCCR0_WGM00_BIT);
    1370:	a3 e5       	ldi	r26, 0x53	; 83
    1372:	b0 e0       	ldi	r27, 0x00	; 0
    1374:	e3 e5       	ldi	r30, 0x53	; 83
    1376:	f0 e0       	ldi	r31, 0x00	; 0
    1378:	80 81       	ld	r24, Z
    137a:	8f 7b       	andi	r24, 0xBF	; 191
    137c:	8c 93       	st	X, r24
				Clr_Bit(GPT_TCCR0_REG, GPT_TCCR0_WGM01_BIT);
    137e:	a3 e5       	ldi	r26, 0x53	; 83
    1380:	b0 e0       	ldi	r27, 0x00	; 0
    1382:	e3 e5       	ldi	r30, 0x53	; 83
    1384:	f0 e0       	ldi	r31, 0x00	; 0
    1386:	80 81       	ld	r24, Z
    1388:	87 7f       	andi	r24, 0xF7	; 247
    138a:	8c 93       	st	X, r24
				// select clock source
				GPT_TCCR0_REG |= copy_pGPT_stConfig->GPT_Prescaler;
    138c:	a3 e5       	ldi	r26, 0x53	; 83
    138e:	b0 e0       	ldi	r27, 0x00	; 0
    1390:	e3 e5       	ldi	r30, 0x53	; 83
    1392:	f0 e0       	ldi	r31, 0x00	; 0
    1394:	90 81       	ld	r25, Z
    1396:	e9 81       	ldd	r30, Y+1	; 0x01
    1398:	fa 81       	ldd	r31, Y+2	; 0x02
    139a:	82 81       	ldd	r24, Z+2	; 0x02
    139c:	89 2b       	or	r24, r25
    139e:	8c 93       	st	X, r24
				// set preloaded value
				GPT_TCNT0_REG = copy_pGPT_stConfig->GPT_Preloaded;
    13a0:	a2 e5       	ldi	r26, 0x52	; 82
    13a2:	b0 e0       	ldi	r27, 0x00	; 0
    13a4:	e9 81       	ldd	r30, Y+1	; 0x01
    13a6:	fa 81       	ldd	r31, Y+2	; 0x02
    13a8:	83 81       	ldd	r24, Z+3	; 0x03
    13aa:	8c 93       	st	X, r24
				//enable timer ovf interrupt
				GPT_TIMSK_REG |= 0x01;
    13ac:	a9 e5       	ldi	r26, 0x59	; 89
    13ae:	b0 e0       	ldi	r27, 0x00	; 0
    13b0:	e9 e5       	ldi	r30, 0x59	; 89
    13b2:	f0 e0       	ldi	r31, 0x00	; 0
    13b4:	80 81       	ld	r24, Z
    13b6:	81 60       	ori	r24, 0x01	; 1
    13b8:	8c 93       	st	X, r24
				// enable gloable interrupt
				GIE_ENABLE();
    13ba:	af e5       	ldi	r26, 0x5F	; 95
    13bc:	b0 e0       	ldi	r27, 0x00	; 0
    13be:	ef e5       	ldi	r30, 0x5F	; 95
    13c0:	f0 e0       	ldi	r31, 0x00	; 0
    13c2:	80 81       	ld	r24, Z
    13c4:	80 68       	ori	r24, 0x80	; 128
    13c6:	8c 93       	st	X, r24
    13c8:	8d c0       	rjmp	.+282    	; 0x14e4 <GPT_VoidInit+0x1b2>

			}
			else if (copy_pGPT_stConfig->GPT_Mode == GPT_CTCMode)
    13ca:	e9 81       	ldd	r30, Y+1	; 0x01
    13cc:	fa 81       	ldd	r31, Y+2	; 0x02
    13ce:	81 81       	ldd	r24, Z+1	; 0x01
    13d0:	82 30       	cpi	r24, 0x02	; 2
    13d2:	09 f0       	breq	.+2      	; 0x13d6 <GPT_VoidInit+0xa4>
    13d4:	87 c0       	rjmp	.+270    	; 0x14e4 <GPT_VoidInit+0x1b2>
			{
				/* set call back func*/
				G_TIMER0_CTC_CBF = copy_pGPT_stConfig->GPT_Timer_CBF;
    13d6:	e9 81       	ldd	r30, Y+1	; 0x01
    13d8:	fa 81       	ldd	r31, Y+2	; 0x02
    13da:	86 81       	ldd	r24, Z+6	; 0x06
    13dc:	97 81       	ldd	r25, Z+7	; 0x07
    13de:	90 93 37 03 	sts	0x0337, r25
    13e2:	80 93 36 03 	sts	0x0336, r24
				/*select mode*/
				Clr_Bit(GPT_TCCR0_REG, GPT_TCCR0_WGM00_BIT);
    13e6:	a3 e5       	ldi	r26, 0x53	; 83
    13e8:	b0 e0       	ldi	r27, 0x00	; 0
    13ea:	e3 e5       	ldi	r30, 0x53	; 83
    13ec:	f0 e0       	ldi	r31, 0x00	; 0
    13ee:	80 81       	ld	r24, Z
    13f0:	8f 7b       	andi	r24, 0xBF	; 191
    13f2:	8c 93       	st	X, r24
				Set_Bit(GPT_TCCR0_REG, GPT_TCCR0_WGM01_BIT);
    13f4:	a3 e5       	ldi	r26, 0x53	; 83
    13f6:	b0 e0       	ldi	r27, 0x00	; 0
    13f8:	e3 e5       	ldi	r30, 0x53	; 83
    13fa:	f0 e0       	ldi	r31, 0x00	; 0
    13fc:	80 81       	ld	r24, Z
    13fe:	88 60       	ori	r24, 0x08	; 8
    1400:	8c 93       	st	X, r24
				// select clock source
				GPT_TCCR0_REG |= copy_pGPT_stConfig->GPT_Prescaler;
    1402:	a3 e5       	ldi	r26, 0x53	; 83
    1404:	b0 e0       	ldi	r27, 0x00	; 0
    1406:	e3 e5       	ldi	r30, 0x53	; 83
    1408:	f0 e0       	ldi	r31, 0x00	; 0
    140a:	90 81       	ld	r25, Z
    140c:	e9 81       	ldd	r30, Y+1	; 0x01
    140e:	fa 81       	ldd	r31, Y+2	; 0x02
    1410:	82 81       	ldd	r24, Z+2	; 0x02
    1412:	89 2b       	or	r24, r25
    1414:	8c 93       	st	X, r24
				/* set cmp value*/
				GPT_OCR0_REG = copy_pGPT_stConfig->GPT_u8CmpMatchVal;
    1416:	ac e5       	ldi	r26, 0x5C	; 92
    1418:	b0 e0       	ldi	r27, 0x00	; 0
    141a:	e9 81       	ldd	r30, Y+1	; 0x01
    141c:	fa 81       	ldd	r31, Y+2	; 0x02
    141e:	84 81       	ldd	r24, Z+4	; 0x04
    1420:	95 81       	ldd	r25, Z+5	; 0x05
    1422:	8c 93       	st	X, r24
				//enable timer0 compare match interrupt
				GPT_TIMSK_REG |= (0x01 << GPT_TIMSK_OCIE0_BIT);
    1424:	a9 e5       	ldi	r26, 0x59	; 89
    1426:	b0 e0       	ldi	r27, 0x00	; 0
    1428:	e9 e5       	ldi	r30, 0x59	; 89
    142a:	f0 e0       	ldi	r31, 0x00	; 0
    142c:	80 81       	ld	r24, Z
    142e:	82 60       	ori	r24, 0x02	; 2
    1430:	8c 93       	st	X, r24
				/*enable gloable interrupt*/
				GIE_ENABLE();
    1432:	af e5       	ldi	r26, 0x5F	; 95
    1434:	b0 e0       	ldi	r27, 0x00	; 0
    1436:	ef e5       	ldi	r30, 0x5F	; 95
    1438:	f0 e0       	ldi	r31, 0x00	; 0
    143a:	80 81       	ld	r24, Z
    143c:	80 68       	ori	r24, 0x80	; 128
    143e:	8c 93       	st	X, r24
    1440:	51 c0       	rjmp	.+162    	; 0x14e4 <GPT_VoidInit+0x1b2>

			}
		}
		else if (copy_pGPT_stConfig->GPT_timer == GPT_Timer1)
    1442:	e9 81       	ldd	r30, Y+1	; 0x01
    1444:	fa 81       	ldd	r31, Y+2	; 0x02
    1446:	80 81       	ld	r24, Z
    1448:	81 30       	cpi	r24, 0x01	; 1
    144a:	09 f0       	breq	.+2      	; 0x144e <GPT_VoidInit+0x11c>
    144c:	4b c0       	rjmp	.+150    	; 0x14e4 <GPT_VoidInit+0x1b2>
		{
			 if (copy_pGPT_stConfig->GPT_Mode == GPT_CTCMode)
    144e:	e9 81       	ldd	r30, Y+1	; 0x01
    1450:	fa 81       	ldd	r31, Y+2	; 0x02
    1452:	81 81       	ldd	r24, Z+1	; 0x01
    1454:	82 30       	cpi	r24, 0x02	; 2
    1456:	09 f0       	breq	.+2      	; 0x145a <GPT_VoidInit+0x128>
    1458:	45 c0       	rjmp	.+138    	; 0x14e4 <GPT_VoidInit+0x1b2>
			 {
				 // set call back func
				 G_TIMER1_CTCA_CBF = copy_pGPT_stConfig->GPT_Timer_CBF;
    145a:	e9 81       	ldd	r30, Y+1	; 0x01
    145c:	fa 81       	ldd	r31, Y+2	; 0x02
    145e:	86 81       	ldd	r24, Z+6	; 0x06
    1460:	97 81       	ldd	r25, Z+7	; 0x07
    1462:	90 93 39 03 	sts	0x0339, r25
    1466:	80 93 38 03 	sts	0x0338, r24
				 /*select mode*/
				 Clr_Bit(GPT_TCCR1A_REG , GPT_TCCR1A_WMG10_BIT);
    146a:	af e4       	ldi	r26, 0x4F	; 79
    146c:	b0 e0       	ldi	r27, 0x00	; 0
    146e:	ef e4       	ldi	r30, 0x4F	; 79
    1470:	f0 e0       	ldi	r31, 0x00	; 0
    1472:	80 81       	ld	r24, Z
    1474:	8e 7f       	andi	r24, 0xFE	; 254
    1476:	8c 93       	st	X, r24
				 Clr_Bit(GPT_TCCR1A_REG , GPT_TCCR1A_WMG11_BIT);
    1478:	af e4       	ldi	r26, 0x4F	; 79
    147a:	b0 e0       	ldi	r27, 0x00	; 0
    147c:	ef e4       	ldi	r30, 0x4F	; 79
    147e:	f0 e0       	ldi	r31, 0x00	; 0
    1480:	80 81       	ld	r24, Z
    1482:	8d 7f       	andi	r24, 0xFD	; 253
    1484:	8c 93       	st	X, r24
				 Set_Bit(GPT_TCCR1B_REG , GPT_TCCR1B_WGM12_BIT);
    1486:	ae e4       	ldi	r26, 0x4E	; 78
    1488:	b0 e0       	ldi	r27, 0x00	; 0
    148a:	ee e4       	ldi	r30, 0x4E	; 78
    148c:	f0 e0       	ldi	r31, 0x00	; 0
    148e:	80 81       	ld	r24, Z
    1490:	88 60       	ori	r24, 0x08	; 8
    1492:	8c 93       	st	X, r24
				 Clr_Bit(GPT_TCCR1B_REG , GPT_TCCR1B_WGM13_BIT);
    1494:	ae e4       	ldi	r26, 0x4E	; 78
    1496:	b0 e0       	ldi	r27, 0x00	; 0
    1498:	ee e4       	ldi	r30, 0x4E	; 78
    149a:	f0 e0       	ldi	r31, 0x00	; 0
    149c:	80 81       	ld	r24, Z
    149e:	8f 7e       	andi	r24, 0xEF	; 239
    14a0:	8c 93       	st	X, r24
				 // select prescaler
				 GPT_TCCR1B_REG |= copy_pGPT_stConfig->GPT_Prescaler;
    14a2:	ae e4       	ldi	r26, 0x4E	; 78
    14a4:	b0 e0       	ldi	r27, 0x00	; 0
    14a6:	ee e4       	ldi	r30, 0x4E	; 78
    14a8:	f0 e0       	ldi	r31, 0x00	; 0
    14aa:	90 81       	ld	r25, Z
    14ac:	e9 81       	ldd	r30, Y+1	; 0x01
    14ae:	fa 81       	ldd	r31, Y+2	; 0x02
    14b0:	82 81       	ldd	r24, Z+2	; 0x02
    14b2:	89 2b       	or	r24, r25
    14b4:	8c 93       	st	X, r24
				 // set cmp
				 GPT_OCR1A_REG = copy_pGPT_stConfig->GPT_u8CmpMatchVal;
    14b6:	aa e4       	ldi	r26, 0x4A	; 74
    14b8:	b0 e0       	ldi	r27, 0x00	; 0
    14ba:	e9 81       	ldd	r30, Y+1	; 0x01
    14bc:	fa 81       	ldd	r31, Y+2	; 0x02
    14be:	84 81       	ldd	r24, Z+4	; 0x04
    14c0:	95 81       	ldd	r25, Z+5	; 0x05
    14c2:	11 96       	adiw	r26, 0x01	; 1
    14c4:	9c 93       	st	X, r25
    14c6:	8e 93       	st	-X, r24
				 //enable timer1 cmp interrupt
				 GPT_TIMSK_REG |= (0x01 << GPT_TIMSK_OCIE1A_BIT);
    14c8:	a9 e5       	ldi	r26, 0x59	; 89
    14ca:	b0 e0       	ldi	r27, 0x00	; 0
    14cc:	e9 e5       	ldi	r30, 0x59	; 89
    14ce:	f0 e0       	ldi	r31, 0x00	; 0
    14d0:	80 81       	ld	r24, Z
    14d2:	80 61       	ori	r24, 0x10	; 16
    14d4:	8c 93       	st	X, r24
				/*enable gloable interrupt*/
				GIE_ENABLE();
    14d6:	af e5       	ldi	r26, 0x5F	; 95
    14d8:	b0 e0       	ldi	r27, 0x00	; 0
    14da:	ef e5       	ldi	r30, 0x5F	; 95
    14dc:	f0 e0       	ldi	r31, 0x00	; 0
    14de:	80 81       	ld	r24, Z
    14e0:	80 68       	ori	r24, 0x80	; 128
    14e2:	8c 93       	st	X, r24
			// to continue
		}
	} else {

	}
}
    14e4:	0f 90       	pop	r0
    14e6:	0f 90       	pop	r0
    14e8:	cf 91       	pop	r28
    14ea:	df 91       	pop	r29
    14ec:	08 95       	ret

000014ee <GPT_voidReadTimer>:

void GPT_voidReadTimer(GPT_stConfig* copy_pGPT_stConfig , u8* copy_pu8Timer_read)
{
    14ee:	df 93       	push	r29
    14f0:	cf 93       	push	r28
    14f2:	00 d0       	rcall	.+0      	; 0x14f4 <GPT_voidReadTimer+0x6>
    14f4:	00 d0       	rcall	.+0      	; 0x14f6 <GPT_voidReadTimer+0x8>
    14f6:	cd b7       	in	r28, 0x3d	; 61
    14f8:	de b7       	in	r29, 0x3e	; 62
    14fa:	9a 83       	std	Y+2, r25	; 0x02
    14fc:	89 83       	std	Y+1, r24	; 0x01
    14fe:	7c 83       	std	Y+4, r23	; 0x04
    1500:	6b 83       	std	Y+3, r22	; 0x03
	if(copy_pGPT_stConfig->GPT_timer == GPT_Timer0)
    1502:	e9 81       	ldd	r30, Y+1	; 0x01
    1504:	fa 81       	ldd	r31, Y+2	; 0x02
    1506:	80 81       	ld	r24, Z
    1508:	88 23       	and	r24, r24
    150a:	31 f4       	brne	.+12     	; 0x1518 <GPT_voidReadTimer+0x2a>
	{
		*copy_pu8Timer_read = GPT_TCNT0_REG;
    150c:	e2 e5       	ldi	r30, 0x52	; 82
    150e:	f0 e0       	ldi	r31, 0x00	; 0
    1510:	80 81       	ld	r24, Z
    1512:	eb 81       	ldd	r30, Y+3	; 0x03
    1514:	fc 81       	ldd	r31, Y+4	; 0x04
    1516:	80 83       	st	Z, r24
	}
}
    1518:	0f 90       	pop	r0
    151a:	0f 90       	pop	r0
    151c:	0f 90       	pop	r0
    151e:	0f 90       	pop	r0
    1520:	cf 91       	pop	r28
    1522:	df 91       	pop	r29
    1524:	08 95       	ret

00001526 <GPT_VoidSetPreload>:
void GPT_VoidSetPreload(GPT_enTimer Copy_GPT_enTimer, u8 Copy_u8PreloadVal) {
    1526:	df 93       	push	r29
    1528:	cf 93       	push	r28
    152a:	00 d0       	rcall	.+0      	; 0x152c <GPT_VoidSetPreload+0x6>
    152c:	cd b7       	in	r28, 0x3d	; 61
    152e:	de b7       	in	r29, 0x3e	; 62
    1530:	89 83       	std	Y+1, r24	; 0x01
    1532:	6a 83       	std	Y+2, r22	; 0x02
	if (Copy_GPT_enTimer == GPT_Timer0) {
    1534:	89 81       	ldd	r24, Y+1	; 0x01
    1536:	88 23       	and	r24, r24
    1538:	21 f4       	brne	.+8      	; 0x1542 <GPT_VoidSetPreload+0x1c>
		GPT_TCNT0_REG = Copy_u8PreloadVal;
    153a:	e2 e5       	ldi	r30, 0x52	; 82
    153c:	f0 e0       	ldi	r31, 0x00	; 0
    153e:	8a 81       	ldd	r24, Y+2	; 0x02
    1540:	80 83       	st	Z, r24
	}
}
    1542:	0f 90       	pop	r0
    1544:	0f 90       	pop	r0
    1546:	cf 91       	pop	r28
    1548:	df 91       	pop	r29
    154a:	08 95       	ret

0000154c <__vector_10>:

void __vector_10(void)
{
    154c:	1f 92       	push	r1
    154e:	0f 92       	push	r0
    1550:	0f b6       	in	r0, 0x3f	; 63
    1552:	0f 92       	push	r0
    1554:	11 24       	eor	r1, r1
    1556:	2f 93       	push	r18
    1558:	3f 93       	push	r19
    155a:	4f 93       	push	r20
    155c:	5f 93       	push	r21
    155e:	6f 93       	push	r22
    1560:	7f 93       	push	r23
    1562:	8f 93       	push	r24
    1564:	9f 93       	push	r25
    1566:	af 93       	push	r26
    1568:	bf 93       	push	r27
    156a:	ef 93       	push	r30
    156c:	ff 93       	push	r31
    156e:	df 93       	push	r29
    1570:	cf 93       	push	r28
    1572:	cd b7       	in	r28, 0x3d	; 61
    1574:	de b7       	in	r29, 0x3e	; 62
	if(G_TIMER0_CTC_CBF)
    1576:	80 91 36 03 	lds	r24, 0x0336
    157a:	90 91 37 03 	lds	r25, 0x0337
    157e:	00 97       	sbiw	r24, 0x00	; 0
    1580:	29 f0       	breq	.+10     	; 0x158c <__vector_10+0x40>
		G_TIMER0_CTC_CBF();
    1582:	e0 91 36 03 	lds	r30, 0x0336
    1586:	f0 91 37 03 	lds	r31, 0x0337
    158a:	09 95       	icall
}
    158c:	cf 91       	pop	r28
    158e:	df 91       	pop	r29
    1590:	ff 91       	pop	r31
    1592:	ef 91       	pop	r30
    1594:	bf 91       	pop	r27
    1596:	af 91       	pop	r26
    1598:	9f 91       	pop	r25
    159a:	8f 91       	pop	r24
    159c:	7f 91       	pop	r23
    159e:	6f 91       	pop	r22
    15a0:	5f 91       	pop	r21
    15a2:	4f 91       	pop	r20
    15a4:	3f 91       	pop	r19
    15a6:	2f 91       	pop	r18
    15a8:	0f 90       	pop	r0
    15aa:	0f be       	out	0x3f, r0	; 63
    15ac:	0f 90       	pop	r0
    15ae:	1f 90       	pop	r1
    15b0:	18 95       	reti

000015b2 <__vector_11>:
void __vector_11(void) {
    15b2:	1f 92       	push	r1
    15b4:	0f 92       	push	r0
    15b6:	0f b6       	in	r0, 0x3f	; 63
    15b8:	0f 92       	push	r0
    15ba:	11 24       	eor	r1, r1
    15bc:	2f 93       	push	r18
    15be:	3f 93       	push	r19
    15c0:	4f 93       	push	r20
    15c2:	5f 93       	push	r21
    15c4:	6f 93       	push	r22
    15c6:	7f 93       	push	r23
    15c8:	8f 93       	push	r24
    15ca:	9f 93       	push	r25
    15cc:	af 93       	push	r26
    15ce:	bf 93       	push	r27
    15d0:	ef 93       	push	r30
    15d2:	ff 93       	push	r31
    15d4:	df 93       	push	r29
    15d6:	cf 93       	push	r28
    15d8:	cd b7       	in	r28, 0x3d	; 61
    15da:	de b7       	in	r29, 0x3e	; 62
	if (G_TIMER0_OVF_CBF)
    15dc:	80 91 34 03 	lds	r24, 0x0334
    15e0:	90 91 35 03 	lds	r25, 0x0335
    15e4:	00 97       	sbiw	r24, 0x00	; 0
    15e6:	29 f0       	breq	.+10     	; 0x15f2 <__vector_11+0x40>
		G_TIMER0_OVF_CBF();
    15e8:	e0 91 34 03 	lds	r30, 0x0334
    15ec:	f0 91 35 03 	lds	r31, 0x0335
    15f0:	09 95       	icall
}
    15f2:	cf 91       	pop	r28
    15f4:	df 91       	pop	r29
    15f6:	ff 91       	pop	r31
    15f8:	ef 91       	pop	r30
    15fa:	bf 91       	pop	r27
    15fc:	af 91       	pop	r26
    15fe:	9f 91       	pop	r25
    1600:	8f 91       	pop	r24
    1602:	7f 91       	pop	r23
    1604:	6f 91       	pop	r22
    1606:	5f 91       	pop	r21
    1608:	4f 91       	pop	r20
    160a:	3f 91       	pop	r19
    160c:	2f 91       	pop	r18
    160e:	0f 90       	pop	r0
    1610:	0f be       	out	0x3f, r0	; 63
    1612:	0f 90       	pop	r0
    1614:	1f 90       	pop	r1
    1616:	18 95       	reti

00001618 <__vector_7>:

void __vector_7(void)
{
    1618:	1f 92       	push	r1
    161a:	0f 92       	push	r0
    161c:	0f b6       	in	r0, 0x3f	; 63
    161e:	0f 92       	push	r0
    1620:	11 24       	eor	r1, r1
    1622:	2f 93       	push	r18
    1624:	3f 93       	push	r19
    1626:	4f 93       	push	r20
    1628:	5f 93       	push	r21
    162a:	6f 93       	push	r22
    162c:	7f 93       	push	r23
    162e:	8f 93       	push	r24
    1630:	9f 93       	push	r25
    1632:	af 93       	push	r26
    1634:	bf 93       	push	r27
    1636:	ef 93       	push	r30
    1638:	ff 93       	push	r31
    163a:	df 93       	push	r29
    163c:	cf 93       	push	r28
    163e:	cd b7       	in	r28, 0x3d	; 61
    1640:	de b7       	in	r29, 0x3e	; 62
	if (G_TIMER1_CTCA_CBF)
    1642:	80 91 38 03 	lds	r24, 0x0338
    1646:	90 91 39 03 	lds	r25, 0x0339
    164a:	00 97       	sbiw	r24, 0x00	; 0
    164c:	29 f0       	breq	.+10     	; 0x1658 <__vector_7+0x40>
		G_TIMER1_CTCA_CBF();
    164e:	e0 91 38 03 	lds	r30, 0x0338
    1652:	f0 91 39 03 	lds	r31, 0x0339
    1656:	09 95       	icall
}
    1658:	cf 91       	pop	r28
    165a:	df 91       	pop	r29
    165c:	ff 91       	pop	r31
    165e:	ef 91       	pop	r30
    1660:	bf 91       	pop	r27
    1662:	af 91       	pop	r26
    1664:	9f 91       	pop	r25
    1666:	8f 91       	pop	r24
    1668:	7f 91       	pop	r23
    166a:	6f 91       	pop	r22
    166c:	5f 91       	pop	r21
    166e:	4f 91       	pop	r20
    1670:	3f 91       	pop	r19
    1672:	2f 91       	pop	r18
    1674:	0f 90       	pop	r0
    1676:	0f be       	out	0x3f, r0	; 63
    1678:	0f 90       	pop	r0
    167a:	1f 90       	pop	r1
    167c:	18 95       	reti

0000167e <ExtINT_VoidInit>:
void __vector_1(void) __attribute__ ((signal, used));
void __vector_2(void) __attribute__ ((signal , used));
void __vector_3(void) __attribute__ ((signal , used));

void ExtINT_VoidInit(ExtInt_stCfg* copy_pExtInt_stCfg)
{
    167e:	df 93       	push	r29
    1680:	cf 93       	push	r28
    1682:	00 d0       	rcall	.+0      	; 0x1684 <ExtINT_VoidInit+0x6>
    1684:	cd b7       	in	r28, 0x3d	; 61
    1686:	de b7       	in	r29, 0x3e	; 62
    1688:	9a 83       	std	Y+2, r25	; 0x02
    168a:	89 83       	std	Y+1, r24	; 0x01
	if(NULL != copy_pExtInt_stCfg && ( copy_pExtInt_stCfg->EXT_INT0_SC != EX_INT_DISABLE || copy_pExtInt_stCfg->EXT_INT1_SC != EX_INT_DISABLE || copy_pExtInt_stCfg->EXT_INT2_SC != EX_INT_DISABLE  ) )
    168c:	89 81       	ldd	r24, Y+1	; 0x01
    168e:	9a 81       	ldd	r25, Y+2	; 0x02
    1690:	00 97       	sbiw	r24, 0x00	; 0
    1692:	09 f4       	brne	.+2      	; 0x1696 <ExtINT_VoidInit+0x18>
    1694:	bf c0       	rjmp	.+382    	; 0x1814 <ExtINT_VoidInit+0x196>
    1696:	e9 81       	ldd	r30, Y+1	; 0x01
    1698:	fa 81       	ldd	r31, Y+2	; 0x02
    169a:	80 81       	ld	r24, Z
    169c:	87 70       	andi	r24, 0x07	; 7
    169e:	84 30       	cpi	r24, 0x04	; 4
    16a0:	b1 f4       	brne	.+44     	; 0x16ce <ExtINT_VoidInit+0x50>
    16a2:	e9 81       	ldd	r30, Y+1	; 0x01
    16a4:	fa 81       	ldd	r31, Y+2	; 0x02
    16a6:	80 81       	ld	r24, Z
    16a8:	88 73       	andi	r24, 0x38	; 56
    16aa:	80 32       	cpi	r24, 0x20	; 32
    16ac:	81 f4       	brne	.+32     	; 0x16ce <ExtINT_VoidInit+0x50>
    16ae:	e9 81       	ldd	r30, Y+1	; 0x01
    16b0:	fa 81       	ldd	r31, Y+2	; 0x02
    16b2:	80 81       	ld	r24, Z
    16b4:	98 2f       	mov	r25, r24
    16b6:	92 95       	swap	r25
    16b8:	96 95       	lsr	r25
    16ba:	96 95       	lsr	r25
    16bc:	93 70       	andi	r25, 0x03	; 3
    16be:	81 81       	ldd	r24, Z+1	; 0x01
    16c0:	81 70       	andi	r24, 0x01	; 1
    16c2:	88 0f       	add	r24, r24
    16c4:	88 0f       	add	r24, r24
    16c6:	89 2b       	or	r24, r25
    16c8:	84 30       	cpi	r24, 0x04	; 4
    16ca:	09 f4       	brne	.+2      	; 0x16ce <ExtINT_VoidInit+0x50>
    16cc:	a3 c0       	rjmp	.+326    	; 0x1814 <ExtINT_VoidInit+0x196>
	{
		/*Enable Global Interrupt*/
		GIE_ENABLE();
    16ce:	af e5       	ldi	r26, 0x5F	; 95
    16d0:	b0 e0       	ldi	r27, 0x00	; 0
    16d2:	ef e5       	ldi	r30, 0x5F	; 95
    16d4:	f0 e0       	ldi	r31, 0x00	; 0
    16d6:	80 81       	ld	r24, Z
    16d8:	80 68       	ori	r24, 0x80	; 128
    16da:	8c 93       	st	X, r24

		if(copy_pExtInt_stCfg->EXT_INT0_SC != EX_INT_DISABLE)
    16dc:	e9 81       	ldd	r30, Y+1	; 0x01
    16de:	fa 81       	ldd	r31, Y+2	; 0x02
    16e0:	80 81       	ld	r24, Z
    16e2:	87 70       	andi	r24, 0x07	; 7
    16e4:	84 30       	cpi	r24, 0x04	; 4
    16e6:	09 f1       	breq	.+66     	; 0x172a <ExtINT_VoidInit+0xac>
			 *		same if pin was input
			 *		ext_int_config.h handle this cases to check if the user want internal pullup resistance or not
			 *
			 * */
#if	EXT_INT0_INTERNAL_PULLUP == EXT_INT_INT_PULLUP_ENABLE
			DIO_VoidSetPinValue(DIO_PORTD_IDX , DIO_PIN2 , DIO_PIN_LOGIC_HIGH);
    16e8:	83 e0       	ldi	r24, 0x03	; 3
    16ea:	62 e0       	ldi	r22, 0x02	; 2
    16ec:	41 e0       	ldi	r20, 0x01	; 1
    16ee:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <DIO_VoidSetPinValue>
			DIO_VoidSetPinValue(DIO_PORTD_IDX , DIO_PIN2,DIO_PIN_LOGIC_LOW);
#else
#warning "Check EXT_INT_Config.h please"
#endif
			/*configure sense control*/
			EXT_INT0_ISC_SET(copy_pExtInt_stCfg->EXT_INT0_SC);
    16f2:	a5 e5       	ldi	r26, 0x55	; 85
    16f4:	b0 e0       	ldi	r27, 0x00	; 0
    16f6:	e5 e5       	ldi	r30, 0x55	; 85
    16f8:	f0 e0       	ldi	r31, 0x00	; 0
    16fa:	80 81       	ld	r24, Z
    16fc:	98 2f       	mov	r25, r24
    16fe:	9c 7f       	andi	r25, 0xFC	; 252
    1700:	e9 81       	ldd	r30, Y+1	; 0x01
    1702:	fa 81       	ldd	r31, Y+2	; 0x02
    1704:	80 81       	ld	r24, Z
    1706:	87 70       	andi	r24, 0x07	; 7
    1708:	89 2b       	or	r24, r25
    170a:	8c 93       	st	X, r24
			/*set ISR Function*/
			ptrFunc_Int0CallBack = copy_pExtInt_stCfg->ExtInt0_CBF;
    170c:	e9 81       	ldd	r30, Y+1	; 0x01
    170e:	fa 81       	ldd	r31, Y+2	; 0x02
    1710:	82 81       	ldd	r24, Z+2	; 0x02
    1712:	93 81       	ldd	r25, Z+3	; 0x03
    1714:	90 93 3b 03 	sts	0x033B, r25
    1718:	80 93 3a 03 	sts	0x033A, r24
			/*enable INT0 interrupt*/
			EXT_INT0_ENABLE();
    171c:	ab e5       	ldi	r26, 0x5B	; 91
    171e:	b0 e0       	ldi	r27, 0x00	; 0
    1720:	eb e5       	ldi	r30, 0x5B	; 91
    1722:	f0 e0       	ldi	r31, 0x00	; 0
    1724:	80 81       	ld	r24, Z
    1726:	80 64       	ori	r24, 0x40	; 64
    1728:	8c 93       	st	X, r24

		}
		else{/*Nothing*/}
		if(copy_pExtInt_stCfg->EXT_INT1_SC != EX_INT_DISABLE)
    172a:	e9 81       	ldd	r30, Y+1	; 0x01
    172c:	fa 81       	ldd	r31, Y+2	; 0x02
    172e:	80 81       	ld	r24, Z
    1730:	88 73       	andi	r24, 0x38	; 56
    1732:	80 32       	cpi	r24, 0x20	; 32
    1734:	51 f1       	breq	.+84     	; 0x178a <ExtINT_VoidInit+0x10c>
		{
#if	EXT_INT1_INTERNAL_PULLUP == EXT_INT_INT_PULLUP_ENABLE
			DIO_VoidSetPinValue(DIO_PORTD_IDX , DIO_PIN3 , DIO_PIN_LOGIC_HIGH);
#elif EXT_INT1_INTERNAL_PULLUP == EXT_INT_INT_PULLUP_DISABLE
			DIO_VoidSetPinValue(DIO_PORTD_IDX , DIO_PIN3,DIO_PIN_LOGIC_LOW);
    1736:	83 e0       	ldi	r24, 0x03	; 3
    1738:	63 e0       	ldi	r22, 0x03	; 3
    173a:	40 e0       	ldi	r20, 0x00	; 0
    173c:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <DIO_VoidSetPinValue>
#else
#warning "Check EXT_INT_Config.h please"
#endif
			/*configure sense control*/
			EXT_INT1_ISC_SET(copy_pExtInt_stCfg->EXT_INT1_SC);
    1740:	a5 e5       	ldi	r26, 0x55	; 85
    1742:	b0 e0       	ldi	r27, 0x00	; 0
    1744:	e5 e5       	ldi	r30, 0x55	; 85
    1746:	f0 e0       	ldi	r31, 0x00	; 0
    1748:	80 81       	ld	r24, Z
    174a:	28 2f       	mov	r18, r24
    174c:	23 7f       	andi	r18, 0xF3	; 243
    174e:	e9 81       	ldd	r30, Y+1	; 0x01
    1750:	fa 81       	ldd	r31, Y+2	; 0x02
    1752:	80 81       	ld	r24, Z
    1754:	86 95       	lsr	r24
    1756:	86 95       	lsr	r24
    1758:	86 95       	lsr	r24
    175a:	87 70       	andi	r24, 0x07	; 7
    175c:	88 2f       	mov	r24, r24
    175e:	90 e0       	ldi	r25, 0x00	; 0
    1760:	88 0f       	add	r24, r24
    1762:	99 1f       	adc	r25, r25
    1764:	88 0f       	add	r24, r24
    1766:	99 1f       	adc	r25, r25
    1768:	82 2b       	or	r24, r18
    176a:	8c 93       	st	X, r24
			/*set ISR Function*/
			ptrFunc_Int1CallBack = copy_pExtInt_stCfg->ExtInt1_CBF;
    176c:	e9 81       	ldd	r30, Y+1	; 0x01
    176e:	fa 81       	ldd	r31, Y+2	; 0x02
    1770:	84 81       	ldd	r24, Z+4	; 0x04
    1772:	95 81       	ldd	r25, Z+5	; 0x05
    1774:	90 93 3d 03 	sts	0x033D, r25
    1778:	80 93 3c 03 	sts	0x033C, r24
			/*enable INT1 interrupt*/
			EXT_INT1_ENABLE();
    177c:	ab e5       	ldi	r26, 0x5B	; 91
    177e:	b0 e0       	ldi	r27, 0x00	; 0
    1780:	eb e5       	ldi	r30, 0x5B	; 91
    1782:	f0 e0       	ldi	r31, 0x00	; 0
    1784:	80 81       	ld	r24, Z
    1786:	80 68       	ori	r24, 0x80	; 128
    1788:	8c 93       	st	X, r24
		}
		else{/*Nothing*/}
		if(copy_pExtInt_stCfg->EXT_INT2_SC != EX_INT_DISABLE)
    178a:	e9 81       	ldd	r30, Y+1	; 0x01
    178c:	fa 81       	ldd	r31, Y+2	; 0x02
    178e:	80 81       	ld	r24, Z
    1790:	98 2f       	mov	r25, r24
    1792:	92 95       	swap	r25
    1794:	96 95       	lsr	r25
    1796:	96 95       	lsr	r25
    1798:	93 70       	andi	r25, 0x03	; 3
    179a:	81 81       	ldd	r24, Z+1	; 0x01
    179c:	81 70       	andi	r24, 0x01	; 1
    179e:	88 0f       	add	r24, r24
    17a0:	88 0f       	add	r24, r24
    17a2:	89 2b       	or	r24, r25
    17a4:	84 30       	cpi	r24, 0x04	; 4
    17a6:	b1 f1       	breq	.+108    	; 0x1814 <ExtINT_VoidInit+0x196>
		{
#if	EXT_INT2_INTERNAL_PULLUP == EXT_INT_INT_PULLUP_ENABLE
			DIO_VoidSetPinValue(DIO_PORTB_IDX , DIO_PIN2 , DIO_PIN_LOGIC_HIGH);
#elif EXT_INT2_INTERNAL_PULLUP == EXT_INT_INT_PULLUP_DISABLE
			DIO_VoidSetPinValue(DIO_PORTB_IDX , DIO_PIN2,DIO_PIN_LOGIC_LOW);
    17a8:	81 e0       	ldi	r24, 0x01	; 1
    17aa:	62 e0       	ldi	r22, 0x02	; 2
    17ac:	40 e0       	ldi	r20, 0x00	; 0
    17ae:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <DIO_VoidSetPinValue>
#else
#warning "Check EXT_INT_Config.h please"
#endif
			/*configure sense control*/
			EXT_INT2_ISC_SET(copy_pExtInt_stCfg->EXT_INT2_SC);
    17b2:	a4 e5       	ldi	r26, 0x54	; 84
    17b4:	b0 e0       	ldi	r27, 0x00	; 0
    17b6:	e4 e5       	ldi	r30, 0x54	; 84
    17b8:	f0 e0       	ldi	r31, 0x00	; 0
    17ba:	80 81       	ld	r24, Z
    17bc:	28 2f       	mov	r18, r24
    17be:	e9 81       	ldd	r30, Y+1	; 0x01
    17c0:	fa 81       	ldd	r31, Y+2	; 0x02
    17c2:	80 81       	ld	r24, Z
    17c4:	98 2f       	mov	r25, r24
    17c6:	92 95       	swap	r25
    17c8:	96 95       	lsr	r25
    17ca:	96 95       	lsr	r25
    17cc:	93 70       	andi	r25, 0x03	; 3
    17ce:	81 81       	ldd	r24, Z+1	; 0x01
    17d0:	81 70       	andi	r24, 0x01	; 1
    17d2:	88 0f       	add	r24, r24
    17d4:	88 0f       	add	r24, r24
    17d6:	89 2b       	or	r24, r25
    17d8:	88 2f       	mov	r24, r24
    17da:	90 e0       	ldi	r25, 0x00	; 0
    17dc:	81 70       	andi	r24, 0x01	; 1
    17de:	90 70       	andi	r25, 0x00	; 0
    17e0:	00 24       	eor	r0, r0
    17e2:	96 95       	lsr	r25
    17e4:	87 95       	ror	r24
    17e6:	07 94       	ror	r0
    17e8:	96 95       	lsr	r25
    17ea:	87 95       	ror	r24
    17ec:	07 94       	ror	r0
    17ee:	98 2f       	mov	r25, r24
    17f0:	80 2d       	mov	r24, r0
    17f2:	82 2b       	or	r24, r18
    17f4:	8c 93       	st	X, r24
			/*set ISR Function*/
			ptrFunc_Int2CallBack = copy_pExtInt_stCfg->ExtInt2_CBF;
    17f6:	e9 81       	ldd	r30, Y+1	; 0x01
    17f8:	fa 81       	ldd	r31, Y+2	; 0x02
    17fa:	86 81       	ldd	r24, Z+6	; 0x06
    17fc:	97 81       	ldd	r25, Z+7	; 0x07
    17fe:	90 93 3f 03 	sts	0x033F, r25
    1802:	80 93 3e 03 	sts	0x033E, r24
			/*enable INT2 interrupt*/
			EXT_INT2_ENABLE();
    1806:	ab e5       	ldi	r26, 0x5B	; 91
    1808:	b0 e0       	ldi	r27, 0x00	; 0
    180a:	eb e5       	ldi	r30, 0x5B	; 91
    180c:	f0 e0       	ldi	r31, 0x00	; 0
    180e:	80 81       	ld	r24, Z
    1810:	80 62       	ori	r24, 0x20	; 32
    1812:	8c 93       	st	X, r24
	else
	{

	}
	return;
}
    1814:	0f 90       	pop	r0
    1816:	0f 90       	pop	r0
    1818:	cf 91       	pop	r28
    181a:	df 91       	pop	r29
    181c:	08 95       	ret

0000181e <ExtINT_VoidDeInit>:

void ExtINT_VoidDeInit(ExtInt_stCfg* copy_pExtInt_stCfg)
{
    181e:	df 93       	push	r29
    1820:	cf 93       	push	r28
    1822:	00 d0       	rcall	.+0      	; 0x1824 <ExtINT_VoidDeInit+0x6>
    1824:	cd b7       	in	r28, 0x3d	; 61
    1826:	de b7       	in	r29, 0x3e	; 62
    1828:	9a 83       	std	Y+2, r25	; 0x02
    182a:	89 83       	std	Y+1, r24	; 0x01
	EXT_INT0_DISABLE();
    182c:	ab e5       	ldi	r26, 0x5B	; 91
    182e:	b0 e0       	ldi	r27, 0x00	; 0
    1830:	eb e5       	ldi	r30, 0x5B	; 91
    1832:	f0 e0       	ldi	r31, 0x00	; 0
    1834:	80 81       	ld	r24, Z
    1836:	8f 7b       	andi	r24, 0xBF	; 191
    1838:	8c 93       	st	X, r24
	EXT_INT1_DISABLE();
    183a:	ab e5       	ldi	r26, 0x5B	; 91
    183c:	b0 e0       	ldi	r27, 0x00	; 0
    183e:	eb e5       	ldi	r30, 0x5B	; 91
    1840:	f0 e0       	ldi	r31, 0x00	; 0
    1842:	80 81       	ld	r24, Z
    1844:	8f 77       	andi	r24, 0x7F	; 127
    1846:	8c 93       	st	X, r24
	EXT_INT2_DISABLE();
    1848:	ab e5       	ldi	r26, 0x5B	; 91
    184a:	b0 e0       	ldi	r27, 0x00	; 0
    184c:	eb e5       	ldi	r30, 0x5B	; 91
    184e:	f0 e0       	ldi	r31, 0x00	; 0
    1850:	80 81       	ld	r24, Z
    1852:	8f 7d       	andi	r24, 0xDF	; 223
    1854:	8c 93       	st	X, r24
}
    1856:	0f 90       	pop	r0
    1858:	0f 90       	pop	r0
    185a:	cf 91       	pop	r28
    185c:	df 91       	pop	r29
    185e:	08 95       	ret

00001860 <ExtINT_changeSense>:
void ExtINT_changeSense(u8 copy_u8Ext_INT , u8 copy_u8NewSens)
{
    1860:	df 93       	push	r29
    1862:	cf 93       	push	r28
    1864:	00 d0       	rcall	.+0      	; 0x1866 <ExtINT_changeSense+0x6>
    1866:	00 d0       	rcall	.+0      	; 0x1868 <ExtINT_changeSense+0x8>
    1868:	cd b7       	in	r28, 0x3d	; 61
    186a:	de b7       	in	r29, 0x3e	; 62
    186c:	89 83       	std	Y+1, r24	; 0x01
    186e:	6a 83       	std	Y+2, r22	; 0x02
	switch(copy_u8Ext_INT)
    1870:	89 81       	ldd	r24, Y+1	; 0x01
    1872:	28 2f       	mov	r18, r24
    1874:	30 e0       	ldi	r19, 0x00	; 0
    1876:	3c 83       	std	Y+4, r19	; 0x04
    1878:	2b 83       	std	Y+3, r18	; 0x03
    187a:	8b 81       	ldd	r24, Y+3	; 0x03
    187c:	9c 81       	ldd	r25, Y+4	; 0x04
    187e:	81 30       	cpi	r24, 0x01	; 1
    1880:	91 05       	cpc	r25, r1
    1882:	a1 f0       	breq	.+40     	; 0x18ac <ExtINT_changeSense+0x4c>
    1884:	2b 81       	ldd	r18, Y+3	; 0x03
    1886:	3c 81       	ldd	r19, Y+4	; 0x04
    1888:	22 30       	cpi	r18, 0x02	; 2
    188a:	31 05       	cpc	r19, r1
    188c:	01 f1       	breq	.+64     	; 0x18ce <ExtINT_changeSense+0x6e>
    188e:	8b 81       	ldd	r24, Y+3	; 0x03
    1890:	9c 81       	ldd	r25, Y+4	; 0x04
    1892:	00 97       	sbiw	r24, 0x00	; 0
    1894:	91 f5       	brne	.+100    	; 0x18fa <ExtINT_changeSense+0x9a>
	{
	case EXT_INT0:
		EXT_INT0_ISC_SET(copy_u8NewSens);
    1896:	a5 e5       	ldi	r26, 0x55	; 85
    1898:	b0 e0       	ldi	r27, 0x00	; 0
    189a:	e5 e5       	ldi	r30, 0x55	; 85
    189c:	f0 e0       	ldi	r31, 0x00	; 0
    189e:	80 81       	ld	r24, Z
    18a0:	98 2f       	mov	r25, r24
    18a2:	9c 7f       	andi	r25, 0xFC	; 252
    18a4:	8a 81       	ldd	r24, Y+2	; 0x02
    18a6:	89 2b       	or	r24, r25
    18a8:	8c 93       	st	X, r24
    18aa:	27 c0       	rjmp	.+78     	; 0x18fa <ExtINT_changeSense+0x9a>
		break;
	case EXT_INT1:
		EXT_INT1_ISC_SET(copy_u8NewSens);
    18ac:	a5 e5       	ldi	r26, 0x55	; 85
    18ae:	b0 e0       	ldi	r27, 0x00	; 0
    18b0:	e5 e5       	ldi	r30, 0x55	; 85
    18b2:	f0 e0       	ldi	r31, 0x00	; 0
    18b4:	80 81       	ld	r24, Z
    18b6:	28 2f       	mov	r18, r24
    18b8:	23 7f       	andi	r18, 0xF3	; 243
    18ba:	8a 81       	ldd	r24, Y+2	; 0x02
    18bc:	88 2f       	mov	r24, r24
    18be:	90 e0       	ldi	r25, 0x00	; 0
    18c0:	88 0f       	add	r24, r24
    18c2:	99 1f       	adc	r25, r25
    18c4:	88 0f       	add	r24, r24
    18c6:	99 1f       	adc	r25, r25
    18c8:	82 2b       	or	r24, r18
    18ca:	8c 93       	st	X, r24
    18cc:	16 c0       	rjmp	.+44     	; 0x18fa <ExtINT_changeSense+0x9a>
		break;
	case EXT_INT2:
		EXT_INT2_ISC_SET(copy_u8NewSens);
    18ce:	a4 e5       	ldi	r26, 0x54	; 84
    18d0:	b0 e0       	ldi	r27, 0x00	; 0
    18d2:	e4 e5       	ldi	r30, 0x54	; 84
    18d4:	f0 e0       	ldi	r31, 0x00	; 0
    18d6:	80 81       	ld	r24, Z
    18d8:	28 2f       	mov	r18, r24
    18da:	8a 81       	ldd	r24, Y+2	; 0x02
    18dc:	88 2f       	mov	r24, r24
    18de:	90 e0       	ldi	r25, 0x00	; 0
    18e0:	81 70       	andi	r24, 0x01	; 1
    18e2:	90 70       	andi	r25, 0x00	; 0
    18e4:	00 24       	eor	r0, r0
    18e6:	96 95       	lsr	r25
    18e8:	87 95       	ror	r24
    18ea:	07 94       	ror	r0
    18ec:	96 95       	lsr	r25
    18ee:	87 95       	ror	r24
    18f0:	07 94       	ror	r0
    18f2:	98 2f       	mov	r25, r24
    18f4:	80 2d       	mov	r24, r0
    18f6:	82 2b       	or	r24, r18
    18f8:	8c 93       	st	X, r24
		break;
	}

}
    18fa:	0f 90       	pop	r0
    18fc:	0f 90       	pop	r0
    18fe:	0f 90       	pop	r0
    1900:	0f 90       	pop	r0
    1902:	cf 91       	pop	r28
    1904:	df 91       	pop	r29
    1906:	08 95       	ret

00001908 <__vector_1>:



void __vector_1(void)
{
    1908:	1f 92       	push	r1
    190a:	0f 92       	push	r0
    190c:	0f b6       	in	r0, 0x3f	; 63
    190e:	0f 92       	push	r0
    1910:	11 24       	eor	r1, r1
    1912:	2f 93       	push	r18
    1914:	3f 93       	push	r19
    1916:	4f 93       	push	r20
    1918:	5f 93       	push	r21
    191a:	6f 93       	push	r22
    191c:	7f 93       	push	r23
    191e:	8f 93       	push	r24
    1920:	9f 93       	push	r25
    1922:	af 93       	push	r26
    1924:	bf 93       	push	r27
    1926:	ef 93       	push	r30
    1928:	ff 93       	push	r31
    192a:	df 93       	push	r29
    192c:	cf 93       	push	r28
    192e:	cd b7       	in	r28, 0x3d	; 61
    1930:	de b7       	in	r29, 0x3e	; 62
	if(NULL != ptrFunc_Int0CallBack)
    1932:	80 91 3a 03 	lds	r24, 0x033A
    1936:	90 91 3b 03 	lds	r25, 0x033B
    193a:	00 97       	sbiw	r24, 0x00	; 0
    193c:	29 f0       	breq	.+10     	; 0x1948 <__vector_1+0x40>
		ptrFunc_Int0CallBack();
    193e:	e0 91 3a 03 	lds	r30, 0x033A
    1942:	f0 91 3b 03 	lds	r31, 0x033B
    1946:	09 95       	icall
}
    1948:	cf 91       	pop	r28
    194a:	df 91       	pop	r29
    194c:	ff 91       	pop	r31
    194e:	ef 91       	pop	r30
    1950:	bf 91       	pop	r27
    1952:	af 91       	pop	r26
    1954:	9f 91       	pop	r25
    1956:	8f 91       	pop	r24
    1958:	7f 91       	pop	r23
    195a:	6f 91       	pop	r22
    195c:	5f 91       	pop	r21
    195e:	4f 91       	pop	r20
    1960:	3f 91       	pop	r19
    1962:	2f 91       	pop	r18
    1964:	0f 90       	pop	r0
    1966:	0f be       	out	0x3f, r0	; 63
    1968:	0f 90       	pop	r0
    196a:	1f 90       	pop	r1
    196c:	18 95       	reti

0000196e <__vector_2>:

void __vector_2(void)
{
    196e:	1f 92       	push	r1
    1970:	0f 92       	push	r0
    1972:	0f b6       	in	r0, 0x3f	; 63
    1974:	0f 92       	push	r0
    1976:	11 24       	eor	r1, r1
    1978:	2f 93       	push	r18
    197a:	3f 93       	push	r19
    197c:	4f 93       	push	r20
    197e:	5f 93       	push	r21
    1980:	6f 93       	push	r22
    1982:	7f 93       	push	r23
    1984:	8f 93       	push	r24
    1986:	9f 93       	push	r25
    1988:	af 93       	push	r26
    198a:	bf 93       	push	r27
    198c:	ef 93       	push	r30
    198e:	ff 93       	push	r31
    1990:	df 93       	push	r29
    1992:	cf 93       	push	r28
    1994:	cd b7       	in	r28, 0x3d	; 61
    1996:	de b7       	in	r29, 0x3e	; 62
	if(NULL != ptrFunc_Int1CallBack)
    1998:	80 91 3c 03 	lds	r24, 0x033C
    199c:	90 91 3d 03 	lds	r25, 0x033D
    19a0:	00 97       	sbiw	r24, 0x00	; 0
    19a2:	29 f0       	breq	.+10     	; 0x19ae <__vector_2+0x40>
		ptrFunc_Int1CallBack();
    19a4:	e0 91 3c 03 	lds	r30, 0x033C
    19a8:	f0 91 3d 03 	lds	r31, 0x033D
    19ac:	09 95       	icall
}
    19ae:	cf 91       	pop	r28
    19b0:	df 91       	pop	r29
    19b2:	ff 91       	pop	r31
    19b4:	ef 91       	pop	r30
    19b6:	bf 91       	pop	r27
    19b8:	af 91       	pop	r26
    19ba:	9f 91       	pop	r25
    19bc:	8f 91       	pop	r24
    19be:	7f 91       	pop	r23
    19c0:	6f 91       	pop	r22
    19c2:	5f 91       	pop	r21
    19c4:	4f 91       	pop	r20
    19c6:	3f 91       	pop	r19
    19c8:	2f 91       	pop	r18
    19ca:	0f 90       	pop	r0
    19cc:	0f be       	out	0x3f, r0	; 63
    19ce:	0f 90       	pop	r0
    19d0:	1f 90       	pop	r1
    19d2:	18 95       	reti

000019d4 <__vector_3>:

void __vector_3(void)
{
    19d4:	1f 92       	push	r1
    19d6:	0f 92       	push	r0
    19d8:	0f b6       	in	r0, 0x3f	; 63
    19da:	0f 92       	push	r0
    19dc:	11 24       	eor	r1, r1
    19de:	2f 93       	push	r18
    19e0:	3f 93       	push	r19
    19e2:	4f 93       	push	r20
    19e4:	5f 93       	push	r21
    19e6:	6f 93       	push	r22
    19e8:	7f 93       	push	r23
    19ea:	8f 93       	push	r24
    19ec:	9f 93       	push	r25
    19ee:	af 93       	push	r26
    19f0:	bf 93       	push	r27
    19f2:	ef 93       	push	r30
    19f4:	ff 93       	push	r31
    19f6:	df 93       	push	r29
    19f8:	cf 93       	push	r28
    19fa:	cd b7       	in	r28, 0x3d	; 61
    19fc:	de b7       	in	r29, 0x3e	; 62
	if(NULL != ptrFunc_Int2CallBack)
    19fe:	80 91 3e 03 	lds	r24, 0x033E
    1a02:	90 91 3f 03 	lds	r25, 0x033F
    1a06:	00 97       	sbiw	r24, 0x00	; 0
    1a08:	29 f0       	breq	.+10     	; 0x1a14 <__vector_3+0x40>
		ptrFunc_Int2CallBack();
    1a0a:	e0 91 3e 03 	lds	r30, 0x033E
    1a0e:	f0 91 3f 03 	lds	r31, 0x033F
    1a12:	09 95       	icall
}
    1a14:	cf 91       	pop	r28
    1a16:	df 91       	pop	r29
    1a18:	ff 91       	pop	r31
    1a1a:	ef 91       	pop	r30
    1a1c:	bf 91       	pop	r27
    1a1e:	af 91       	pop	r26
    1a20:	9f 91       	pop	r25
    1a22:	8f 91       	pop	r24
    1a24:	7f 91       	pop	r23
    1a26:	6f 91       	pop	r22
    1a28:	5f 91       	pop	r21
    1a2a:	4f 91       	pop	r20
    1a2c:	3f 91       	pop	r19
    1a2e:	2f 91       	pop	r18
    1a30:	0f 90       	pop	r0
    1a32:	0f be       	out	0x3f, r0	; 63
    1a34:	0f 90       	pop	r0
    1a36:	1f 90       	pop	r1
    1a38:	18 95       	reti

00001a3a <DIO_VoidSetPinDirection>:
static volatile u8* DIO_ARR_PIN[4] = {DIO_PINA_REG,DIO_PINB_REG,DIO_PINC_REG,DIO_PIND_REG};



void DIO_VoidSetPinDirection(u8 Copy_u8port,u8 Copy_u8pin,u8 Copy_u8direction)
{
    1a3a:	df 93       	push	r29
    1a3c:	cf 93       	push	r28
    1a3e:	00 d0       	rcall	.+0      	; 0x1a40 <DIO_VoidSetPinDirection+0x6>
    1a40:	00 d0       	rcall	.+0      	; 0x1a42 <DIO_VoidSetPinDirection+0x8>
    1a42:	0f 92       	push	r0
    1a44:	cd b7       	in	r28, 0x3d	; 61
    1a46:	de b7       	in	r29, 0x3e	; 62
    1a48:	89 83       	std	Y+1, r24	; 0x01
    1a4a:	6a 83       	std	Y+2, r22	; 0x02
    1a4c:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8port <= DIO_PORTD_IDX  && Copy_u8pin <= DIO_PIN7 )
    1a4e:	89 81       	ldd	r24, Y+1	; 0x01
    1a50:	84 30       	cpi	r24, 0x04	; 4
    1a52:	08 f0       	brcs	.+2      	; 0x1a56 <DIO_VoidSetPinDirection+0x1c>
    1a54:	5d c0       	rjmp	.+186    	; 0x1b10 <DIO_VoidSetPinDirection+0xd6>
    1a56:	8a 81       	ldd	r24, Y+2	; 0x02
    1a58:	88 30       	cpi	r24, 0x08	; 8
    1a5a:	08 f0       	brcs	.+2      	; 0x1a5e <DIO_VoidSetPinDirection+0x24>
    1a5c:	59 c0       	rjmp	.+178    	; 0x1b10 <DIO_VoidSetPinDirection+0xd6>
	{
		switch(Copy_u8direction)
    1a5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a60:	28 2f       	mov	r18, r24
    1a62:	30 e0       	ldi	r19, 0x00	; 0
    1a64:	3d 83       	std	Y+5, r19	; 0x05
    1a66:	2c 83       	std	Y+4, r18	; 0x04
    1a68:	8c 81       	ldd	r24, Y+4	; 0x04
    1a6a:	9d 81       	ldd	r25, Y+5	; 0x05
    1a6c:	00 97       	sbiw	r24, 0x00	; 0
    1a6e:	31 f0       	breq	.+12     	; 0x1a7c <DIO_VoidSetPinDirection+0x42>
    1a70:	2c 81       	ldd	r18, Y+4	; 0x04
    1a72:	3d 81       	ldd	r19, Y+5	; 0x05
    1a74:	21 30       	cpi	r18, 0x01	; 1
    1a76:	31 05       	cpc	r19, r1
    1a78:	39 f1       	breq	.+78     	; 0x1ac8 <DIO_VoidSetPinDirection+0x8e>
    1a7a:	4a c0       	rjmp	.+148    	; 0x1b10 <DIO_VoidSetPinDirection+0xd6>
		{
		case DIO_PIN_DIR_INPUT:
			Clr_Bit( (*DIO_ARR_DDR[Copy_u8port]) , Copy_u8pin);
    1a7c:	89 81       	ldd	r24, Y+1	; 0x01
    1a7e:	88 2f       	mov	r24, r24
    1a80:	90 e0       	ldi	r25, 0x00	; 0
    1a82:	88 0f       	add	r24, r24
    1a84:	99 1f       	adc	r25, r25
    1a86:	fc 01       	movw	r30, r24
    1a88:	e5 51       	subi	r30, 0x15	; 21
    1a8a:	fd 4f       	sbci	r31, 0xFD	; 253
    1a8c:	a0 81       	ld	r26, Z
    1a8e:	b1 81       	ldd	r27, Z+1	; 0x01
    1a90:	89 81       	ldd	r24, Y+1	; 0x01
    1a92:	88 2f       	mov	r24, r24
    1a94:	90 e0       	ldi	r25, 0x00	; 0
    1a96:	88 0f       	add	r24, r24
    1a98:	99 1f       	adc	r25, r25
    1a9a:	fc 01       	movw	r30, r24
    1a9c:	e5 51       	subi	r30, 0x15	; 21
    1a9e:	fd 4f       	sbci	r31, 0xFD	; 253
    1aa0:	01 90       	ld	r0, Z+
    1aa2:	f0 81       	ld	r31, Z
    1aa4:	e0 2d       	mov	r30, r0
    1aa6:	80 81       	ld	r24, Z
    1aa8:	48 2f       	mov	r20, r24
    1aaa:	8a 81       	ldd	r24, Y+2	; 0x02
    1aac:	28 2f       	mov	r18, r24
    1aae:	30 e0       	ldi	r19, 0x00	; 0
    1ab0:	81 e0       	ldi	r24, 0x01	; 1
    1ab2:	90 e0       	ldi	r25, 0x00	; 0
    1ab4:	02 2e       	mov	r0, r18
    1ab6:	02 c0       	rjmp	.+4      	; 0x1abc <DIO_VoidSetPinDirection+0x82>
    1ab8:	88 0f       	add	r24, r24
    1aba:	99 1f       	adc	r25, r25
    1abc:	0a 94       	dec	r0
    1abe:	e2 f7       	brpl	.-8      	; 0x1ab8 <DIO_VoidSetPinDirection+0x7e>
    1ac0:	80 95       	com	r24
    1ac2:	84 23       	and	r24, r20
    1ac4:	8c 93       	st	X, r24
    1ac6:	24 c0       	rjmp	.+72     	; 0x1b10 <DIO_VoidSetPinDirection+0xd6>
			break;
		case DIO_PIN_DIR_OUTPUT:
			Set_Bit( (*DIO_ARR_DDR[Copy_u8port]) , Copy_u8pin);
    1ac8:	89 81       	ldd	r24, Y+1	; 0x01
    1aca:	88 2f       	mov	r24, r24
    1acc:	90 e0       	ldi	r25, 0x00	; 0
    1ace:	88 0f       	add	r24, r24
    1ad0:	99 1f       	adc	r25, r25
    1ad2:	fc 01       	movw	r30, r24
    1ad4:	e5 51       	subi	r30, 0x15	; 21
    1ad6:	fd 4f       	sbci	r31, 0xFD	; 253
    1ad8:	a0 81       	ld	r26, Z
    1ada:	b1 81       	ldd	r27, Z+1	; 0x01
    1adc:	89 81       	ldd	r24, Y+1	; 0x01
    1ade:	88 2f       	mov	r24, r24
    1ae0:	90 e0       	ldi	r25, 0x00	; 0
    1ae2:	88 0f       	add	r24, r24
    1ae4:	99 1f       	adc	r25, r25
    1ae6:	fc 01       	movw	r30, r24
    1ae8:	e5 51       	subi	r30, 0x15	; 21
    1aea:	fd 4f       	sbci	r31, 0xFD	; 253
    1aec:	01 90       	ld	r0, Z+
    1aee:	f0 81       	ld	r31, Z
    1af0:	e0 2d       	mov	r30, r0
    1af2:	80 81       	ld	r24, Z
    1af4:	48 2f       	mov	r20, r24
    1af6:	8a 81       	ldd	r24, Y+2	; 0x02
    1af8:	28 2f       	mov	r18, r24
    1afa:	30 e0       	ldi	r19, 0x00	; 0
    1afc:	81 e0       	ldi	r24, 0x01	; 1
    1afe:	90 e0       	ldi	r25, 0x00	; 0
    1b00:	02 2e       	mov	r0, r18
    1b02:	02 c0       	rjmp	.+4      	; 0x1b08 <DIO_VoidSetPinDirection+0xce>
    1b04:	88 0f       	add	r24, r24
    1b06:	99 1f       	adc	r25, r25
    1b08:	0a 94       	dec	r0
    1b0a:	e2 f7       	brpl	.-8      	; 0x1b04 <DIO_VoidSetPinDirection+0xca>
    1b0c:	84 2b       	or	r24, r20
    1b0e:	8c 93       	st	X, r24
	else
	{
		// nothing
	}
	return;
}
    1b10:	0f 90       	pop	r0
    1b12:	0f 90       	pop	r0
    1b14:	0f 90       	pop	r0
    1b16:	0f 90       	pop	r0
    1b18:	0f 90       	pop	r0
    1b1a:	cf 91       	pop	r28
    1b1c:	df 91       	pop	r29
    1b1e:	08 95       	ret

00001b20 <DIO_VoidSetPinValue>:

void DIO_VoidSetPinValue(u8 Copy_u8port,u8 Copy_u8pin,u8 Copy_u8value)
{
    1b20:	df 93       	push	r29
    1b22:	cf 93       	push	r28
    1b24:	00 d0       	rcall	.+0      	; 0x1b26 <DIO_VoidSetPinValue+0x6>
    1b26:	00 d0       	rcall	.+0      	; 0x1b28 <DIO_VoidSetPinValue+0x8>
    1b28:	0f 92       	push	r0
    1b2a:	cd b7       	in	r28, 0x3d	; 61
    1b2c:	de b7       	in	r29, 0x3e	; 62
    1b2e:	89 83       	std	Y+1, r24	; 0x01
    1b30:	6a 83       	std	Y+2, r22	; 0x02
    1b32:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8port <= DIO_PORTD_IDX  && Copy_u8pin <= DIO_PIN7 )
    1b34:	89 81       	ldd	r24, Y+1	; 0x01
    1b36:	84 30       	cpi	r24, 0x04	; 4
    1b38:	08 f0       	brcs	.+2      	; 0x1b3c <DIO_VoidSetPinValue+0x1c>
    1b3a:	5d c0       	rjmp	.+186    	; 0x1bf6 <DIO_VoidSetPinValue+0xd6>
    1b3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b3e:	88 30       	cpi	r24, 0x08	; 8
    1b40:	08 f0       	brcs	.+2      	; 0x1b44 <DIO_VoidSetPinValue+0x24>
    1b42:	59 c0       	rjmp	.+178    	; 0x1bf6 <DIO_VoidSetPinValue+0xd6>
	{
		switch(Copy_u8value)
    1b44:	8b 81       	ldd	r24, Y+3	; 0x03
    1b46:	28 2f       	mov	r18, r24
    1b48:	30 e0       	ldi	r19, 0x00	; 0
    1b4a:	3d 83       	std	Y+5, r19	; 0x05
    1b4c:	2c 83       	std	Y+4, r18	; 0x04
    1b4e:	8c 81       	ldd	r24, Y+4	; 0x04
    1b50:	9d 81       	ldd	r25, Y+5	; 0x05
    1b52:	00 97       	sbiw	r24, 0x00	; 0
    1b54:	31 f0       	breq	.+12     	; 0x1b62 <DIO_VoidSetPinValue+0x42>
    1b56:	2c 81       	ldd	r18, Y+4	; 0x04
    1b58:	3d 81       	ldd	r19, Y+5	; 0x05
    1b5a:	21 30       	cpi	r18, 0x01	; 1
    1b5c:	31 05       	cpc	r19, r1
    1b5e:	39 f1       	breq	.+78     	; 0x1bae <DIO_VoidSetPinValue+0x8e>
    1b60:	4a c0       	rjmp	.+148    	; 0x1bf6 <DIO_VoidSetPinValue+0xd6>
		{
		case DIO_PIN_LOGIC_LOW:
			Clr_Bit((*DIO_ARR_PORT[Copy_u8port]) , Copy_u8pin);
    1b62:	89 81       	ldd	r24, Y+1	; 0x01
    1b64:	88 2f       	mov	r24, r24
    1b66:	90 e0       	ldi	r25, 0x00	; 0
    1b68:	88 0f       	add	r24, r24
    1b6a:	99 1f       	adc	r25, r25
    1b6c:	fc 01       	movw	r30, r24
    1b6e:	ed 51       	subi	r30, 0x1D	; 29
    1b70:	fd 4f       	sbci	r31, 0xFD	; 253
    1b72:	a0 81       	ld	r26, Z
    1b74:	b1 81       	ldd	r27, Z+1	; 0x01
    1b76:	89 81       	ldd	r24, Y+1	; 0x01
    1b78:	88 2f       	mov	r24, r24
    1b7a:	90 e0       	ldi	r25, 0x00	; 0
    1b7c:	88 0f       	add	r24, r24
    1b7e:	99 1f       	adc	r25, r25
    1b80:	fc 01       	movw	r30, r24
    1b82:	ed 51       	subi	r30, 0x1D	; 29
    1b84:	fd 4f       	sbci	r31, 0xFD	; 253
    1b86:	01 90       	ld	r0, Z+
    1b88:	f0 81       	ld	r31, Z
    1b8a:	e0 2d       	mov	r30, r0
    1b8c:	80 81       	ld	r24, Z
    1b8e:	48 2f       	mov	r20, r24
    1b90:	8a 81       	ldd	r24, Y+2	; 0x02
    1b92:	28 2f       	mov	r18, r24
    1b94:	30 e0       	ldi	r19, 0x00	; 0
    1b96:	81 e0       	ldi	r24, 0x01	; 1
    1b98:	90 e0       	ldi	r25, 0x00	; 0
    1b9a:	02 2e       	mov	r0, r18
    1b9c:	02 c0       	rjmp	.+4      	; 0x1ba2 <DIO_VoidSetPinValue+0x82>
    1b9e:	88 0f       	add	r24, r24
    1ba0:	99 1f       	adc	r25, r25
    1ba2:	0a 94       	dec	r0
    1ba4:	e2 f7       	brpl	.-8      	; 0x1b9e <DIO_VoidSetPinValue+0x7e>
    1ba6:	80 95       	com	r24
    1ba8:	84 23       	and	r24, r20
    1baa:	8c 93       	st	X, r24
    1bac:	24 c0       	rjmp	.+72     	; 0x1bf6 <DIO_VoidSetPinValue+0xd6>
			break;
		case DIO_PIN_LOGIC_HIGH:
			Set_Bit((*DIO_ARR_PORT[Copy_u8port]) , Copy_u8pin);
    1bae:	89 81       	ldd	r24, Y+1	; 0x01
    1bb0:	88 2f       	mov	r24, r24
    1bb2:	90 e0       	ldi	r25, 0x00	; 0
    1bb4:	88 0f       	add	r24, r24
    1bb6:	99 1f       	adc	r25, r25
    1bb8:	fc 01       	movw	r30, r24
    1bba:	ed 51       	subi	r30, 0x1D	; 29
    1bbc:	fd 4f       	sbci	r31, 0xFD	; 253
    1bbe:	a0 81       	ld	r26, Z
    1bc0:	b1 81       	ldd	r27, Z+1	; 0x01
    1bc2:	89 81       	ldd	r24, Y+1	; 0x01
    1bc4:	88 2f       	mov	r24, r24
    1bc6:	90 e0       	ldi	r25, 0x00	; 0
    1bc8:	88 0f       	add	r24, r24
    1bca:	99 1f       	adc	r25, r25
    1bcc:	fc 01       	movw	r30, r24
    1bce:	ed 51       	subi	r30, 0x1D	; 29
    1bd0:	fd 4f       	sbci	r31, 0xFD	; 253
    1bd2:	01 90       	ld	r0, Z+
    1bd4:	f0 81       	ld	r31, Z
    1bd6:	e0 2d       	mov	r30, r0
    1bd8:	80 81       	ld	r24, Z
    1bda:	48 2f       	mov	r20, r24
    1bdc:	8a 81       	ldd	r24, Y+2	; 0x02
    1bde:	28 2f       	mov	r18, r24
    1be0:	30 e0       	ldi	r19, 0x00	; 0
    1be2:	81 e0       	ldi	r24, 0x01	; 1
    1be4:	90 e0       	ldi	r25, 0x00	; 0
    1be6:	02 2e       	mov	r0, r18
    1be8:	02 c0       	rjmp	.+4      	; 0x1bee <DIO_VoidSetPinValue+0xce>
    1bea:	88 0f       	add	r24, r24
    1bec:	99 1f       	adc	r25, r25
    1bee:	0a 94       	dec	r0
    1bf0:	e2 f7       	brpl	.-8      	; 0x1bea <DIO_VoidSetPinValue+0xca>
    1bf2:	84 2b       	or	r24, r20
    1bf4:	8c 93       	st	X, r24
		}
	}
	else
	{/*nothing*/}
	return;
}
    1bf6:	0f 90       	pop	r0
    1bf8:	0f 90       	pop	r0
    1bfa:	0f 90       	pop	r0
    1bfc:	0f 90       	pop	r0
    1bfe:	0f 90       	pop	r0
    1c00:	cf 91       	pop	r28
    1c02:	df 91       	pop	r29
    1c04:	08 95       	ret

00001c06 <DIO_VoidTogglePinValue>:
void DIO_VoidTogglePinValue(u8 Copy_u8port,u8 Copy_u8pin)
{
    1c06:	df 93       	push	r29
    1c08:	cf 93       	push	r28
    1c0a:	00 d0       	rcall	.+0      	; 0x1c0c <DIO_VoidTogglePinValue+0x6>
    1c0c:	cd b7       	in	r28, 0x3d	; 61
    1c0e:	de b7       	in	r29, 0x3e	; 62
    1c10:	89 83       	std	Y+1, r24	; 0x01
    1c12:	6a 83       	std	Y+2, r22	; 0x02
	if(Copy_u8port <= DIO_PORTD_IDX  && Copy_u8pin <= DIO_PIN7 )
    1c14:	89 81       	ldd	r24, Y+1	; 0x01
    1c16:	84 30       	cpi	r24, 0x04	; 4
    1c18:	38 f5       	brcc	.+78     	; 0x1c68 <DIO_VoidTogglePinValue+0x62>
    1c1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c1c:	88 30       	cpi	r24, 0x08	; 8
    1c1e:	20 f5       	brcc	.+72     	; 0x1c68 <DIO_VoidTogglePinValue+0x62>
	{
		Toggle_Bit((*DIO_ARR_PORT[Copy_u8port]) , Copy_u8pin);
    1c20:	89 81       	ldd	r24, Y+1	; 0x01
    1c22:	88 2f       	mov	r24, r24
    1c24:	90 e0       	ldi	r25, 0x00	; 0
    1c26:	88 0f       	add	r24, r24
    1c28:	99 1f       	adc	r25, r25
    1c2a:	fc 01       	movw	r30, r24
    1c2c:	ed 51       	subi	r30, 0x1D	; 29
    1c2e:	fd 4f       	sbci	r31, 0xFD	; 253
    1c30:	a0 81       	ld	r26, Z
    1c32:	b1 81       	ldd	r27, Z+1	; 0x01
    1c34:	89 81       	ldd	r24, Y+1	; 0x01
    1c36:	88 2f       	mov	r24, r24
    1c38:	90 e0       	ldi	r25, 0x00	; 0
    1c3a:	88 0f       	add	r24, r24
    1c3c:	99 1f       	adc	r25, r25
    1c3e:	fc 01       	movw	r30, r24
    1c40:	ed 51       	subi	r30, 0x1D	; 29
    1c42:	fd 4f       	sbci	r31, 0xFD	; 253
    1c44:	01 90       	ld	r0, Z+
    1c46:	f0 81       	ld	r31, Z
    1c48:	e0 2d       	mov	r30, r0
    1c4a:	80 81       	ld	r24, Z
    1c4c:	48 2f       	mov	r20, r24
    1c4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c50:	28 2f       	mov	r18, r24
    1c52:	30 e0       	ldi	r19, 0x00	; 0
    1c54:	81 e0       	ldi	r24, 0x01	; 1
    1c56:	90 e0       	ldi	r25, 0x00	; 0
    1c58:	02 2e       	mov	r0, r18
    1c5a:	02 c0       	rjmp	.+4      	; 0x1c60 <DIO_VoidTogglePinValue+0x5a>
    1c5c:	88 0f       	add	r24, r24
    1c5e:	99 1f       	adc	r25, r25
    1c60:	0a 94       	dec	r0
    1c62:	e2 f7       	brpl	.-8      	; 0x1c5c <DIO_VoidTogglePinValue+0x56>
    1c64:	84 27       	eor	r24, r20
    1c66:	8c 93       	st	X, r24
	}
	else
	{/*nothing*/}
	return;
}
    1c68:	0f 90       	pop	r0
    1c6a:	0f 90       	pop	r0
    1c6c:	cf 91       	pop	r28
    1c6e:	df 91       	pop	r29
    1c70:	08 95       	ret

00001c72 <DIO_VoidGetPinValue>:
void DIO_VoidGetPinValue(u8 Copy_u8port,u8 Copy_u8pin,u8 *Copy_pu8Return)
{
    1c72:	df 93       	push	r29
    1c74:	cf 93       	push	r28
    1c76:	00 d0       	rcall	.+0      	; 0x1c78 <DIO_VoidGetPinValue+0x6>
    1c78:	00 d0       	rcall	.+0      	; 0x1c7a <DIO_VoidGetPinValue+0x8>
    1c7a:	cd b7       	in	r28, 0x3d	; 61
    1c7c:	de b7       	in	r29, 0x3e	; 62
    1c7e:	89 83       	std	Y+1, r24	; 0x01
    1c80:	6a 83       	std	Y+2, r22	; 0x02
    1c82:	5c 83       	std	Y+4, r21	; 0x04
    1c84:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8port <= DIO_PORTD_IDX  && Copy_u8pin <= DIO_PIN7 && Copy_pu8Return )
    1c86:	89 81       	ldd	r24, Y+1	; 0x01
    1c88:	84 30       	cpi	r24, 0x04	; 4
    1c8a:	18 f5       	brcc	.+70     	; 0x1cd2 <DIO_VoidGetPinValue+0x60>
    1c8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c8e:	88 30       	cpi	r24, 0x08	; 8
    1c90:	00 f5       	brcc	.+64     	; 0x1cd2 <DIO_VoidGetPinValue+0x60>
    1c92:	8b 81       	ldd	r24, Y+3	; 0x03
    1c94:	9c 81       	ldd	r25, Y+4	; 0x04
    1c96:	00 97       	sbiw	r24, 0x00	; 0
    1c98:	e1 f0       	breq	.+56     	; 0x1cd2 <DIO_VoidGetPinValue+0x60>
	{
		*Copy_pu8Return = Get_Bit(*(DIO_ARR_PIN[Copy_u8port]) , Copy_u8pin);
    1c9a:	89 81       	ldd	r24, Y+1	; 0x01
    1c9c:	88 2f       	mov	r24, r24
    1c9e:	90 e0       	ldi	r25, 0x00	; 0
    1ca0:	88 0f       	add	r24, r24
    1ca2:	99 1f       	adc	r25, r25
    1ca4:	fc 01       	movw	r30, r24
    1ca6:	ed 50       	subi	r30, 0x0D	; 13
    1ca8:	fd 4f       	sbci	r31, 0xFD	; 253
    1caa:	01 90       	ld	r0, Z+
    1cac:	f0 81       	ld	r31, Z
    1cae:	e0 2d       	mov	r30, r0
    1cb0:	80 81       	ld	r24, Z
    1cb2:	28 2f       	mov	r18, r24
    1cb4:	30 e0       	ldi	r19, 0x00	; 0
    1cb6:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb8:	88 2f       	mov	r24, r24
    1cba:	90 e0       	ldi	r25, 0x00	; 0
    1cbc:	a9 01       	movw	r20, r18
    1cbe:	02 c0       	rjmp	.+4      	; 0x1cc4 <DIO_VoidGetPinValue+0x52>
    1cc0:	55 95       	asr	r21
    1cc2:	47 95       	ror	r20
    1cc4:	8a 95       	dec	r24
    1cc6:	e2 f7       	brpl	.-8      	; 0x1cc0 <DIO_VoidGetPinValue+0x4e>
    1cc8:	ca 01       	movw	r24, r20
    1cca:	81 70       	andi	r24, 0x01	; 1
    1ccc:	eb 81       	ldd	r30, Y+3	; 0x03
    1cce:	fc 81       	ldd	r31, Y+4	; 0x04
    1cd0:	80 83       	st	Z, r24
	}
	else
	{/*nothing*/}
	return;
}
    1cd2:	0f 90       	pop	r0
    1cd4:	0f 90       	pop	r0
    1cd6:	0f 90       	pop	r0
    1cd8:	0f 90       	pop	r0
    1cda:	cf 91       	pop	r28
    1cdc:	df 91       	pop	r29
    1cde:	08 95       	ret

00001ce0 <DIO_VoidSetPortDirection>:

void DIO_VoidSetPortDirection(u8 Copy_u8port,u8 Copy_u8direction)
{
    1ce0:	df 93       	push	r29
    1ce2:	cf 93       	push	r28
    1ce4:	00 d0       	rcall	.+0      	; 0x1ce6 <DIO_VoidSetPortDirection+0x6>
    1ce6:	cd b7       	in	r28, 0x3d	; 61
    1ce8:	de b7       	in	r29, 0x3e	; 62
    1cea:	89 83       	std	Y+1, r24	; 0x01
    1cec:	6a 83       	std	Y+2, r22	; 0x02
	if(Copy_u8port <= DIO_PORTD_IDX)
    1cee:	89 81       	ldd	r24, Y+1	; 0x01
    1cf0:	84 30       	cpi	r24, 0x04	; 4
    1cf2:	68 f4       	brcc	.+26     	; 0x1d0e <DIO_VoidSetPortDirection+0x2e>
	{
		*DIO_ARR_DDR[Copy_u8port] = Copy_u8direction;
    1cf4:	89 81       	ldd	r24, Y+1	; 0x01
    1cf6:	88 2f       	mov	r24, r24
    1cf8:	90 e0       	ldi	r25, 0x00	; 0
    1cfa:	88 0f       	add	r24, r24
    1cfc:	99 1f       	adc	r25, r25
    1cfe:	fc 01       	movw	r30, r24
    1d00:	e5 51       	subi	r30, 0x15	; 21
    1d02:	fd 4f       	sbci	r31, 0xFD	; 253
    1d04:	01 90       	ld	r0, Z+
    1d06:	f0 81       	ld	r31, Z
    1d08:	e0 2d       	mov	r30, r0
    1d0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d0c:	80 83       	st	Z, r24
	}
	else {/*nothing*/}
	return;
}
    1d0e:	0f 90       	pop	r0
    1d10:	0f 90       	pop	r0
    1d12:	cf 91       	pop	r28
    1d14:	df 91       	pop	r29
    1d16:	08 95       	ret

00001d18 <DIO_VoidSetPortValue>:
void DIO_VoidSetPortValue(u8 Copy_u8port,u8 Copy_u8value)
{
    1d18:	df 93       	push	r29
    1d1a:	cf 93       	push	r28
    1d1c:	00 d0       	rcall	.+0      	; 0x1d1e <DIO_VoidSetPortValue+0x6>
    1d1e:	cd b7       	in	r28, 0x3d	; 61
    1d20:	de b7       	in	r29, 0x3e	; 62
    1d22:	89 83       	std	Y+1, r24	; 0x01
    1d24:	6a 83       	std	Y+2, r22	; 0x02
	if(Copy_u8port <= DIO_PORTD_IDX)
    1d26:	89 81       	ldd	r24, Y+1	; 0x01
    1d28:	84 30       	cpi	r24, 0x04	; 4
    1d2a:	68 f4       	brcc	.+26     	; 0x1d46 <DIO_VoidSetPortValue+0x2e>
	{
		*DIO_ARR_PORT[Copy_u8port] = Copy_u8value;
    1d2c:	89 81       	ldd	r24, Y+1	; 0x01
    1d2e:	88 2f       	mov	r24, r24
    1d30:	90 e0       	ldi	r25, 0x00	; 0
    1d32:	88 0f       	add	r24, r24
    1d34:	99 1f       	adc	r25, r25
    1d36:	fc 01       	movw	r30, r24
    1d38:	ed 51       	subi	r30, 0x1D	; 29
    1d3a:	fd 4f       	sbci	r31, 0xFD	; 253
    1d3c:	01 90       	ld	r0, Z+
    1d3e:	f0 81       	ld	r31, Z
    1d40:	e0 2d       	mov	r30, r0
    1d42:	8a 81       	ldd	r24, Y+2	; 0x02
    1d44:	80 83       	st	Z, r24
	}
	else {/*nothing*/}
	return;
}
    1d46:	0f 90       	pop	r0
    1d48:	0f 90       	pop	r0
    1d4a:	cf 91       	pop	r28
    1d4c:	df 91       	pop	r29
    1d4e:	08 95       	ret

00001d50 <DIO_VoidTogglePortValue>:

void DIO_VoidTogglePortValue(u8 Copy_u8port)
{
    1d50:	df 93       	push	r29
    1d52:	cf 93       	push	r28
    1d54:	0f 92       	push	r0
    1d56:	cd b7       	in	r28, 0x3d	; 61
    1d58:	de b7       	in	r29, 0x3e	; 62
    1d5a:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8port <= DIO_PORTD_IDX)
    1d5c:	89 81       	ldd	r24, Y+1	; 0x01
    1d5e:	84 30       	cpi	r24, 0x04	; 4
    1d60:	c0 f4       	brcc	.+48     	; 0x1d92 <DIO_VoidTogglePortValue+0x42>
	{
		( *DIO_ARR_PORT[Copy_u8port] ) ^= (0xff);
    1d62:	89 81       	ldd	r24, Y+1	; 0x01
    1d64:	88 2f       	mov	r24, r24
    1d66:	90 e0       	ldi	r25, 0x00	; 0
    1d68:	88 0f       	add	r24, r24
    1d6a:	99 1f       	adc	r25, r25
    1d6c:	fc 01       	movw	r30, r24
    1d6e:	ed 51       	subi	r30, 0x1D	; 29
    1d70:	fd 4f       	sbci	r31, 0xFD	; 253
    1d72:	a0 81       	ld	r26, Z
    1d74:	b1 81       	ldd	r27, Z+1	; 0x01
    1d76:	89 81       	ldd	r24, Y+1	; 0x01
    1d78:	88 2f       	mov	r24, r24
    1d7a:	90 e0       	ldi	r25, 0x00	; 0
    1d7c:	88 0f       	add	r24, r24
    1d7e:	99 1f       	adc	r25, r25
    1d80:	fc 01       	movw	r30, r24
    1d82:	ed 51       	subi	r30, 0x1D	; 29
    1d84:	fd 4f       	sbci	r31, 0xFD	; 253
    1d86:	01 90       	ld	r0, Z+
    1d88:	f0 81       	ld	r31, Z
    1d8a:	e0 2d       	mov	r30, r0
    1d8c:	80 81       	ld	r24, Z
    1d8e:	80 95       	com	r24
    1d90:	8c 93       	st	X, r24
	}
	else {/*nothing*/}
	return;
}
    1d92:	0f 90       	pop	r0
    1d94:	cf 91       	pop	r28
    1d96:	df 91       	pop	r29
    1d98:	08 95       	ret

00001d9a <DIO_VoidGetPortValue>:
void DIO_VoidGetPortValue(u8 Copy_u8port,u8 *Copy_pu8Return)
{
    1d9a:	df 93       	push	r29
    1d9c:	cf 93       	push	r28
    1d9e:	00 d0       	rcall	.+0      	; 0x1da0 <DIO_VoidGetPortValue+0x6>
    1da0:	0f 92       	push	r0
    1da2:	cd b7       	in	r28, 0x3d	; 61
    1da4:	de b7       	in	r29, 0x3e	; 62
    1da6:	89 83       	std	Y+1, r24	; 0x01
    1da8:	7b 83       	std	Y+3, r23	; 0x03
    1daa:	6a 83       	std	Y+2, r22	; 0x02
	if(Copy_u8port <= DIO_PORTD_IDX && Copy_pu8Return)
    1dac:	89 81       	ldd	r24, Y+1	; 0x01
    1dae:	84 30       	cpi	r24, 0x04	; 4
    1db0:	98 f4       	brcc	.+38     	; 0x1dd8 <DIO_VoidGetPortValue+0x3e>
    1db2:	8a 81       	ldd	r24, Y+2	; 0x02
    1db4:	9b 81       	ldd	r25, Y+3	; 0x03
    1db6:	00 97       	sbiw	r24, 0x00	; 0
    1db8:	79 f0       	breq	.+30     	; 0x1dd8 <DIO_VoidGetPortValue+0x3e>
	{
		*Copy_pu8Return = *DIO_ARR_PIN[Copy_u8port];
    1dba:	89 81       	ldd	r24, Y+1	; 0x01
    1dbc:	88 2f       	mov	r24, r24
    1dbe:	90 e0       	ldi	r25, 0x00	; 0
    1dc0:	88 0f       	add	r24, r24
    1dc2:	99 1f       	adc	r25, r25
    1dc4:	fc 01       	movw	r30, r24
    1dc6:	ed 50       	subi	r30, 0x0D	; 13
    1dc8:	fd 4f       	sbci	r31, 0xFD	; 253
    1dca:	01 90       	ld	r0, Z+
    1dcc:	f0 81       	ld	r31, Z
    1dce:	e0 2d       	mov	r30, r0
    1dd0:	80 81       	ld	r24, Z
    1dd2:	ea 81       	ldd	r30, Y+2	; 0x02
    1dd4:	fb 81       	ldd	r31, Y+3	; 0x03
    1dd6:	80 83       	st	Z, r24
	}
	else {/*nothing*/}
	return;
}
    1dd8:	0f 90       	pop	r0
    1dda:	0f 90       	pop	r0
    1ddc:	0f 90       	pop	r0
    1dde:	cf 91       	pop	r28
    1de0:	df 91       	pop	r29
    1de2:	08 95       	ret

00001de4 <DIO_VoidSet4bitsValue>:

void DIO_VoidSet4bitsValue(u8 Copy_u8port,u8 Copy_u8value,u8 Copy_u8Bitselection)
{
    1de4:	df 93       	push	r29
    1de6:	cf 93       	push	r28
    1de8:	00 d0       	rcall	.+0      	; 0x1dea <DIO_VoidSet4bitsValue+0x6>
    1dea:	0f 92       	push	r0
    1dec:	cd b7       	in	r28, 0x3d	; 61
    1dee:	de b7       	in	r29, 0x3e	; 62
    1df0:	89 83       	std	Y+1, r24	; 0x01
    1df2:	6a 83       	std	Y+2, r22	; 0x02
    1df4:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8port <= DIO_PORTD_IDX && Copy_u8value <= 15 && Copy_u8Bitselection <= DIO_PIN5 )
    1df6:	89 81       	ldd	r24, Y+1	; 0x01
    1df8:	84 30       	cpi	r24, 0x04	; 4
    1dfa:	08 f0       	brcs	.+2      	; 0x1dfe <DIO_VoidSet4bitsValue+0x1a>
    1dfc:	52 c0       	rjmp	.+164    	; 0x1ea2 <DIO_VoidSet4bitsValue+0xbe>
    1dfe:	8a 81       	ldd	r24, Y+2	; 0x02
    1e00:	80 31       	cpi	r24, 0x10	; 16
    1e02:	08 f0       	brcs	.+2      	; 0x1e06 <DIO_VoidSet4bitsValue+0x22>
    1e04:	4e c0       	rjmp	.+156    	; 0x1ea2 <DIO_VoidSet4bitsValue+0xbe>
    1e06:	8b 81       	ldd	r24, Y+3	; 0x03
    1e08:	86 30       	cpi	r24, 0x06	; 6
    1e0a:	08 f0       	brcs	.+2      	; 0x1e0e <DIO_VoidSet4bitsValue+0x2a>
    1e0c:	4a c0       	rjmp	.+148    	; 0x1ea2 <DIO_VoidSet4bitsValue+0xbe>
	{
		(*DIO_ARR_PORT[Copy_u8port]) &= ~(0x0f << Copy_u8Bitselection); // to delete old value
    1e0e:	89 81       	ldd	r24, Y+1	; 0x01
    1e10:	88 2f       	mov	r24, r24
    1e12:	90 e0       	ldi	r25, 0x00	; 0
    1e14:	88 0f       	add	r24, r24
    1e16:	99 1f       	adc	r25, r25
    1e18:	fc 01       	movw	r30, r24
    1e1a:	ed 51       	subi	r30, 0x1D	; 29
    1e1c:	fd 4f       	sbci	r31, 0xFD	; 253
    1e1e:	a0 81       	ld	r26, Z
    1e20:	b1 81       	ldd	r27, Z+1	; 0x01
    1e22:	89 81       	ldd	r24, Y+1	; 0x01
    1e24:	88 2f       	mov	r24, r24
    1e26:	90 e0       	ldi	r25, 0x00	; 0
    1e28:	88 0f       	add	r24, r24
    1e2a:	99 1f       	adc	r25, r25
    1e2c:	fc 01       	movw	r30, r24
    1e2e:	ed 51       	subi	r30, 0x1D	; 29
    1e30:	fd 4f       	sbci	r31, 0xFD	; 253
    1e32:	01 90       	ld	r0, Z+
    1e34:	f0 81       	ld	r31, Z
    1e36:	e0 2d       	mov	r30, r0
    1e38:	80 81       	ld	r24, Z
    1e3a:	48 2f       	mov	r20, r24
    1e3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e3e:	28 2f       	mov	r18, r24
    1e40:	30 e0       	ldi	r19, 0x00	; 0
    1e42:	8f e0       	ldi	r24, 0x0F	; 15
    1e44:	90 e0       	ldi	r25, 0x00	; 0
    1e46:	02 c0       	rjmp	.+4      	; 0x1e4c <DIO_VoidSet4bitsValue+0x68>
    1e48:	88 0f       	add	r24, r24
    1e4a:	99 1f       	adc	r25, r25
    1e4c:	2a 95       	dec	r18
    1e4e:	e2 f7       	brpl	.-8      	; 0x1e48 <DIO_VoidSet4bitsValue+0x64>
    1e50:	80 95       	com	r24
    1e52:	84 23       	and	r24, r20
    1e54:	8c 93       	st	X, r24
		(*DIO_ARR_PORT[Copy_u8port]) |=  (Copy_u8value << Copy_u8Bitselection); // write new value
    1e56:	89 81       	ldd	r24, Y+1	; 0x01
    1e58:	88 2f       	mov	r24, r24
    1e5a:	90 e0       	ldi	r25, 0x00	; 0
    1e5c:	88 0f       	add	r24, r24
    1e5e:	99 1f       	adc	r25, r25
    1e60:	fc 01       	movw	r30, r24
    1e62:	ed 51       	subi	r30, 0x1D	; 29
    1e64:	fd 4f       	sbci	r31, 0xFD	; 253
    1e66:	a0 81       	ld	r26, Z
    1e68:	b1 81       	ldd	r27, Z+1	; 0x01
    1e6a:	89 81       	ldd	r24, Y+1	; 0x01
    1e6c:	88 2f       	mov	r24, r24
    1e6e:	90 e0       	ldi	r25, 0x00	; 0
    1e70:	88 0f       	add	r24, r24
    1e72:	99 1f       	adc	r25, r25
    1e74:	fc 01       	movw	r30, r24
    1e76:	ed 51       	subi	r30, 0x1D	; 29
    1e78:	fd 4f       	sbci	r31, 0xFD	; 253
    1e7a:	01 90       	ld	r0, Z+
    1e7c:	f0 81       	ld	r31, Z
    1e7e:	e0 2d       	mov	r30, r0
    1e80:	80 81       	ld	r24, Z
    1e82:	48 2f       	mov	r20, r24
    1e84:	8a 81       	ldd	r24, Y+2	; 0x02
    1e86:	28 2f       	mov	r18, r24
    1e88:	30 e0       	ldi	r19, 0x00	; 0
    1e8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e8c:	88 2f       	mov	r24, r24
    1e8e:	90 e0       	ldi	r25, 0x00	; 0
    1e90:	b9 01       	movw	r22, r18
    1e92:	02 c0       	rjmp	.+4      	; 0x1e98 <DIO_VoidSet4bitsValue+0xb4>
    1e94:	66 0f       	add	r22, r22
    1e96:	77 1f       	adc	r23, r23
    1e98:	8a 95       	dec	r24
    1e9a:	e2 f7       	brpl	.-8      	; 0x1e94 <DIO_VoidSet4bitsValue+0xb0>
    1e9c:	cb 01       	movw	r24, r22
    1e9e:	84 2b       	or	r24, r20
    1ea0:	8c 93       	st	X, r24

	}
	else {/*nothing*/}
	return;
}
    1ea2:	0f 90       	pop	r0
    1ea4:	0f 90       	pop	r0
    1ea6:	0f 90       	pop	r0
    1ea8:	cf 91       	pop	r28
    1eaa:	df 91       	pop	r29
    1eac:	08 95       	ret

00001eae <DIO_VoidGet4bitsValue>:

void DIO_VoidGet4bitsValue(u8 Copy_u8port,u8* Copy_u8value,u8 Copy_u8Bitselection)
{
    1eae:	df 93       	push	r29
    1eb0:	cf 93       	push	r28
    1eb2:	00 d0       	rcall	.+0      	; 0x1eb4 <DIO_VoidGet4bitsValue+0x6>
    1eb4:	00 d0       	rcall	.+0      	; 0x1eb6 <DIO_VoidGet4bitsValue+0x8>
    1eb6:	0f 92       	push	r0
    1eb8:	cd b7       	in	r28, 0x3d	; 61
    1eba:	de b7       	in	r29, 0x3e	; 62
    1ebc:	8a 83       	std	Y+2, r24	; 0x02
    1ebe:	7c 83       	std	Y+4, r23	; 0x04
    1ec0:	6b 83       	std	Y+3, r22	; 0x03
    1ec2:	4d 83       	std	Y+5, r20	; 0x05
	u8 l_copyOfPinVal = *DIO_ARR_PIN[Copy_u8port];
    1ec4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ec6:	88 2f       	mov	r24, r24
    1ec8:	90 e0       	ldi	r25, 0x00	; 0
    1eca:	88 0f       	add	r24, r24
    1ecc:	99 1f       	adc	r25, r25
    1ece:	fc 01       	movw	r30, r24
    1ed0:	ed 50       	subi	r30, 0x0D	; 13
    1ed2:	fd 4f       	sbci	r31, 0xFD	; 253
    1ed4:	01 90       	ld	r0, Z+
    1ed6:	f0 81       	ld	r31, Z
    1ed8:	e0 2d       	mov	r30, r0
    1eda:	80 81       	ld	r24, Z
    1edc:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8port <= DIO_PORTD_IDX && Copy_u8value  && Copy_u8Bitselection <= DIO_PIN5 )
    1ede:	8a 81       	ldd	r24, Y+2	; 0x02
    1ee0:	84 30       	cpi	r24, 0x04	; 4
    1ee2:	c0 f4       	brcc	.+48     	; 0x1f14 <DIO_VoidGet4bitsValue+0x66>
    1ee4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ee6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ee8:	00 97       	sbiw	r24, 0x00	; 0
    1eea:	a1 f0       	breq	.+40     	; 0x1f14 <DIO_VoidGet4bitsValue+0x66>
    1eec:	8d 81       	ldd	r24, Y+5	; 0x05
    1eee:	86 30       	cpi	r24, 0x06	; 6
    1ef0:	88 f4       	brcc	.+34     	; 0x1f14 <DIO_VoidGet4bitsValue+0x66>
	{
		(*Copy_u8value) = (l_copyOfPinVal >> Copy_u8Bitselection) & 0x0f;
    1ef2:	89 81       	ldd	r24, Y+1	; 0x01
    1ef4:	28 2f       	mov	r18, r24
    1ef6:	30 e0       	ldi	r19, 0x00	; 0
    1ef8:	8d 81       	ldd	r24, Y+5	; 0x05
    1efa:	88 2f       	mov	r24, r24
    1efc:	90 e0       	ldi	r25, 0x00	; 0
    1efe:	a9 01       	movw	r20, r18
    1f00:	02 c0       	rjmp	.+4      	; 0x1f06 <DIO_VoidGet4bitsValue+0x58>
    1f02:	55 95       	asr	r21
    1f04:	47 95       	ror	r20
    1f06:	8a 95       	dec	r24
    1f08:	e2 f7       	brpl	.-8      	; 0x1f02 <DIO_VoidGet4bitsValue+0x54>
    1f0a:	ca 01       	movw	r24, r20
    1f0c:	8f 70       	andi	r24, 0x0F	; 15
    1f0e:	eb 81       	ldd	r30, Y+3	; 0x03
    1f10:	fc 81       	ldd	r31, Y+4	; 0x04
    1f12:	80 83       	st	Z, r24

	}
	else {/*nothing*/}
	return;
}
    1f14:	0f 90       	pop	r0
    1f16:	0f 90       	pop	r0
    1f18:	0f 90       	pop	r0
    1f1a:	0f 90       	pop	r0
    1f1c:	0f 90       	pop	r0
    1f1e:	cf 91       	pop	r28
    1f20:	df 91       	pop	r29
    1f22:	08 95       	ret

00001f24 <DIO_voidPortInit>:

void DIO_voidPortInit(u8 Copy_u8port , u8 Copy_u8direction , u8 Copy_u8value)
{
    1f24:	df 93       	push	r29
    1f26:	cf 93       	push	r28
    1f28:	00 d0       	rcall	.+0      	; 0x1f2a <DIO_voidPortInit+0x6>
    1f2a:	0f 92       	push	r0
    1f2c:	cd b7       	in	r28, 0x3d	; 61
    1f2e:	de b7       	in	r29, 0x3e	; 62
    1f30:	89 83       	std	Y+1, r24	; 0x01
    1f32:	6a 83       	std	Y+2, r22	; 0x02
    1f34:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8port <= DIO_PORTD_IDX)
    1f36:	89 81       	ldd	r24, Y+1	; 0x01
    1f38:	84 30       	cpi	r24, 0x04	; 4
    1f3a:	d0 f4       	brcc	.+52     	; 0x1f70 <DIO_voidPortInit+0x4c>
	{
		*DIO_ARR_DDR[Copy_u8port] = Copy_u8direction;
    1f3c:	89 81       	ldd	r24, Y+1	; 0x01
    1f3e:	88 2f       	mov	r24, r24
    1f40:	90 e0       	ldi	r25, 0x00	; 0
    1f42:	88 0f       	add	r24, r24
    1f44:	99 1f       	adc	r25, r25
    1f46:	fc 01       	movw	r30, r24
    1f48:	e5 51       	subi	r30, 0x15	; 21
    1f4a:	fd 4f       	sbci	r31, 0xFD	; 253
    1f4c:	01 90       	ld	r0, Z+
    1f4e:	f0 81       	ld	r31, Z
    1f50:	e0 2d       	mov	r30, r0
    1f52:	8a 81       	ldd	r24, Y+2	; 0x02
    1f54:	80 83       	st	Z, r24
		*DIO_ARR_PORT[Copy_u8port] = Copy_u8value;
    1f56:	89 81       	ldd	r24, Y+1	; 0x01
    1f58:	88 2f       	mov	r24, r24
    1f5a:	90 e0       	ldi	r25, 0x00	; 0
    1f5c:	88 0f       	add	r24, r24
    1f5e:	99 1f       	adc	r25, r25
    1f60:	fc 01       	movw	r30, r24
    1f62:	ed 51       	subi	r30, 0x1D	; 29
    1f64:	fd 4f       	sbci	r31, 0xFD	; 253
    1f66:	01 90       	ld	r0, Z+
    1f68:	f0 81       	ld	r31, Z
    1f6a:	e0 2d       	mov	r30, r0
    1f6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f6e:	80 83       	st	Z, r24
	}
	else {/*nothing*/}
	return;
}
    1f70:	0f 90       	pop	r0
    1f72:	0f 90       	pop	r0
    1f74:	0f 90       	pop	r0
    1f76:	cf 91       	pop	r28
    1f78:	df 91       	pop	r29
    1f7a:	08 95       	ret

00001f7c <DIO_voidPinInit>:

void DIO_voidPinInit(u8 Copy_u8port ,u8 Copy_u8pin,u8 Copy_u8direction , u8 Copy_u8value)
{
    1f7c:	df 93       	push	r29
    1f7e:	cf 93       	push	r28
    1f80:	00 d0       	rcall	.+0      	; 0x1f82 <DIO_voidPinInit+0x6>
    1f82:	00 d0       	rcall	.+0      	; 0x1f84 <DIO_voidPinInit+0x8>
    1f84:	cd b7       	in	r28, 0x3d	; 61
    1f86:	de b7       	in	r29, 0x3e	; 62
    1f88:	89 83       	std	Y+1, r24	; 0x01
    1f8a:	6a 83       	std	Y+2, r22	; 0x02
    1f8c:	4b 83       	std	Y+3, r20	; 0x03
    1f8e:	2c 83       	std	Y+4, r18	; 0x04
	if(Copy_u8port <= DIO_PORTD_IDX  && Copy_u8pin <= DIO_PIN7 )
    1f90:	89 81       	ldd	r24, Y+1	; 0x01
    1f92:	84 30       	cpi	r24, 0x04	; 4
    1f94:	68 f4       	brcc	.+26     	; 0x1fb0 <DIO_voidPinInit+0x34>
    1f96:	8a 81       	ldd	r24, Y+2	; 0x02
    1f98:	88 30       	cpi	r24, 0x08	; 8
    1f9a:	50 f4       	brcc	.+20     	; 0x1fb0 <DIO_voidPinInit+0x34>
	{
		DIO_VoidSetPinValue(Copy_u8port,Copy_u8pin,Copy_u8value);
    1f9c:	89 81       	ldd	r24, Y+1	; 0x01
    1f9e:	6a 81       	ldd	r22, Y+2	; 0x02
    1fa0:	4c 81       	ldd	r20, Y+4	; 0x04
    1fa2:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <DIO_VoidSetPinValue>
		DIO_VoidSetPinDirection(Copy_u8port,Copy_u8pin,Copy_u8direction);
    1fa6:	89 81       	ldd	r24, Y+1	; 0x01
    1fa8:	6a 81       	ldd	r22, Y+2	; 0x02
    1faa:	4b 81       	ldd	r20, Y+3	; 0x03
    1fac:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <DIO_VoidSetPinDirection>

	}
	else {/*nothing*/}
	return;
}
    1fb0:	0f 90       	pop	r0
    1fb2:	0f 90       	pop	r0
    1fb4:	0f 90       	pop	r0
    1fb6:	0f 90       	pop	r0
    1fb8:	cf 91       	pop	r28
    1fba:	df 91       	pop	r29
    1fbc:	08 95       	ret

00001fbe <ADC_VoidInit>:


#if ADC_INTERRUPT_CFG == ADC_INTERRUPT_DISABLE_CFG

void ADC_VoidInit(void)
{
    1fbe:	df 93       	push	r29
    1fc0:	cf 93       	push	r28
    1fc2:	cd b7       	in	r28, 0x3d	; 61
    1fc4:	de b7       	in	r29, 0x3e	; 62
	/*Set ADC Voltage Ref*/
	AD_VREF_SELECT(ADC_VOLTAGE_REF_CFG);
    1fc6:	a7 e2       	ldi	r26, 0x27	; 39
    1fc8:	b0 e0       	ldi	r27, 0x00	; 0
    1fca:	e7 e2       	ldi	r30, 0x27	; 39
    1fcc:	f0 e0       	ldi	r31, 0x00	; 0
    1fce:	80 81       	ld	r24, Z
    1fd0:	8f 73       	andi	r24, 0x3F	; 63
    1fd2:	80 64       	ori	r24, 0x40	; 64
    1fd4:	8c 93       	st	X, r24

	/*Set ADC PRESCALER*/
	AD_PRESCALER_SELECT(ADC_PRESCALER_CFG);
    1fd6:	a6 e2       	ldi	r26, 0x26	; 38
    1fd8:	b0 e0       	ldi	r27, 0x00	; 0
    1fda:	e6 e2       	ldi	r30, 0x26	; 38
    1fdc:	f0 e0       	ldi	r31, 0x00	; 0
    1fde:	80 81       	ld	r24, Z
    1fe0:	87 60       	ori	r24, 0x07	; 7
    1fe2:	8c 93       	st	X, r24

	/*set ADC Result read as right Adjust clear ADLAR*/
	AD_ADMUX_REG &=	~(0x01 << AD_ADMUX_ADLAR_BIT);
    1fe4:	a7 e2       	ldi	r26, 0x27	; 39
    1fe6:	b0 e0       	ldi	r27, 0x00	; 0
    1fe8:	e7 e2       	ldi	r30, 0x27	; 39
    1fea:	f0 e0       	ldi	r31, 0x00	; 0
    1fec:	80 81       	ld	r24, Z
    1fee:	8f 7d       	andi	r24, 0xDF	; 223
    1ff0:	8c 93       	st	X, r24

	/*Enable ADC*/
	AD_ENABLE();
    1ff2:	a6 e2       	ldi	r26, 0x26	; 38
    1ff4:	b0 e0       	ldi	r27, 0x00	; 0
    1ff6:	e6 e2       	ldi	r30, 0x26	; 38
    1ff8:	f0 e0       	ldi	r31, 0x00	; 0
    1ffa:	80 81       	ld	r24, Z
    1ffc:	80 68       	ori	r24, 0x80	; 128
    1ffe:	8c 93       	st	X, r24

	return;
}
    2000:	cf 91       	pop	r28
    2002:	df 91       	pop	r29
    2004:	08 95       	ret

00002006 <ADC_VoidStartConv_Blocking>:

void ADC_VoidStartConv_Blocking(u8 copy_u8ADChannel , u16* copy_pu16ReadVal )
{
    2006:	df 93       	push	r29
    2008:	cf 93       	push	r28
    200a:	00 d0       	rcall	.+0      	; 0x200c <ADC_VoidStartConv_Blocking+0x6>
    200c:	0f 92       	push	r0
    200e:	cd b7       	in	r28, 0x3d	; 61
    2010:	de b7       	in	r29, 0x3e	; 62
    2012:	89 83       	std	Y+1, r24	; 0x01
    2014:	7b 83       	std	Y+3, r23	; 0x03
    2016:	6a 83       	std	Y+2, r22	; 0x02
	if(copy_pu16ReadVal && copy_u8ADChannel <= ADC_CHANNEL7)
    2018:	8a 81       	ldd	r24, Y+2	; 0x02
    201a:	9b 81       	ldd	r25, Y+3	; 0x03
    201c:	00 97       	sbiw	r24, 0x00	; 0
    201e:	99 f1       	breq	.+102    	; 0x2086 <ADC_VoidStartConv_Blocking+0x80>
    2020:	89 81       	ldd	r24, Y+1	; 0x01
    2022:	88 30       	cpi	r24, 0x08	; 8
    2024:	80 f5       	brcc	.+96     	; 0x2086 <ADC_VoidStartConv_Blocking+0x80>
	{
		// select adc channel before start adc conversion
		AD_CHANNEL_SELECT(copy_u8ADChannel);
    2026:	a7 e2       	ldi	r26, 0x27	; 39
    2028:	b0 e0       	ldi	r27, 0x00	; 0
    202a:	e7 e2       	ldi	r30, 0x27	; 39
    202c:	f0 e0       	ldi	r31, 0x00	; 0
    202e:	80 81       	ld	r24, Z
    2030:	98 2f       	mov	r25, r24
    2032:	90 7e       	andi	r25, 0xE0	; 224
    2034:	89 81       	ldd	r24, Y+1	; 0x01
    2036:	89 2b       	or	r24, r25
    2038:	8c 93       	st	X, r24
		// start adc convertion
		AD_STARTCONV();
    203a:	a6 e2       	ldi	r26, 0x26	; 38
    203c:	b0 e0       	ldi	r27, 0x00	; 0
    203e:	e6 e2       	ldi	r30, 0x26	; 38
    2040:	f0 e0       	ldi	r31, 0x00	; 0
    2042:	80 81       	ld	r24, Z
    2044:	80 64       	ori	r24, 0x40	; 64
    2046:	8c 93       	st	X, r24
		// wait till adc finsh conversion
		while( AD_READ_CONVSTAT() == ADC_CONV_INPROGRESS_CFG )
    2048:	e6 e2       	ldi	r30, 0x26	; 38
    204a:	f0 e0       	ldi	r31, 0x00	; 0
    204c:	80 81       	ld	r24, Z
    204e:	82 95       	swap	r24
    2050:	86 95       	lsr	r24
    2052:	86 95       	lsr	r24
    2054:	83 70       	andi	r24, 0x03	; 3
    2056:	88 2f       	mov	r24, r24
    2058:	90 e0       	ldi	r25, 0x00	; 0
    205a:	81 70       	andi	r24, 0x01	; 1
    205c:	90 70       	andi	r25, 0x00	; 0
    205e:	88 23       	and	r24, r24
    2060:	99 f7       	brne	.-26     	; 0x2048 <ADC_VoidStartConv_Blocking+0x42>
			;
		// return adc result in pointer
		*copy_pu16ReadVal = AD_READ_RESULT();
    2062:	e4 e2       	ldi	r30, 0x24	; 36
    2064:	f0 e0       	ldi	r31, 0x00	; 0
    2066:	80 81       	ld	r24, Z
    2068:	28 2f       	mov	r18, r24
    206a:	30 e0       	ldi	r19, 0x00	; 0
    206c:	e5 e2       	ldi	r30, 0x25	; 37
    206e:	f0 e0       	ldi	r31, 0x00	; 0
    2070:	80 81       	ld	r24, Z
    2072:	88 2f       	mov	r24, r24
    2074:	90 e0       	ldi	r25, 0x00	; 0
    2076:	98 2f       	mov	r25, r24
    2078:	88 27       	eor	r24, r24
    207a:	82 2b       	or	r24, r18
    207c:	93 2b       	or	r25, r19
    207e:	ea 81       	ldd	r30, Y+2	; 0x02
    2080:	fb 81       	ldd	r31, Y+3	; 0x03
    2082:	91 83       	std	Z+1, r25	; 0x01
    2084:	80 83       	st	Z, r24
	else
	{
		/*nothing*/
	}
	return;
}
    2086:	0f 90       	pop	r0
    2088:	0f 90       	pop	r0
    208a:	0f 90       	pop	r0
    208c:	cf 91       	pop	r28
    208e:	df 91       	pop	r29
    2090:	08 95       	ret

00002092 <ADC_voidReadResult>:


#endif

void ADC_voidReadResult(u16* copy_pu16AdcResult)
{
    2092:	df 93       	push	r29
    2094:	cf 93       	push	r28
    2096:	00 d0       	rcall	.+0      	; 0x2098 <ADC_voidReadResult+0x6>
    2098:	cd b7       	in	r28, 0x3d	; 61
    209a:	de b7       	in	r29, 0x3e	; 62
    209c:	9a 83       	std	Y+2, r25	; 0x02
    209e:	89 83       	std	Y+1, r24	; 0x01
	if(copy_pu16AdcResult)
    20a0:	89 81       	ldd	r24, Y+1	; 0x01
    20a2:	9a 81       	ldd	r25, Y+2	; 0x02
    20a4:	00 97       	sbiw	r24, 0x00	; 0
    20a6:	91 f0       	breq	.+36     	; 0x20cc <ADC_voidReadResult+0x3a>
	{
		*copy_pu16AdcResult = AD_READ_RESULT();
    20a8:	e4 e2       	ldi	r30, 0x24	; 36
    20aa:	f0 e0       	ldi	r31, 0x00	; 0
    20ac:	80 81       	ld	r24, Z
    20ae:	28 2f       	mov	r18, r24
    20b0:	30 e0       	ldi	r19, 0x00	; 0
    20b2:	e5 e2       	ldi	r30, 0x25	; 37
    20b4:	f0 e0       	ldi	r31, 0x00	; 0
    20b6:	80 81       	ld	r24, Z
    20b8:	88 2f       	mov	r24, r24
    20ba:	90 e0       	ldi	r25, 0x00	; 0
    20bc:	98 2f       	mov	r25, r24
    20be:	88 27       	eor	r24, r24
    20c0:	82 2b       	or	r24, r18
    20c2:	93 2b       	or	r25, r19
    20c4:	e9 81       	ldd	r30, Y+1	; 0x01
    20c6:	fa 81       	ldd	r31, Y+2	; 0x02
    20c8:	91 83       	std	Z+1, r25	; 0x01
    20ca:	80 83       	st	Z, r24
	}
	else
	{
		/*nothing*/
	}
}
    20cc:	0f 90       	pop	r0
    20ce:	0f 90       	pop	r0
    20d0:	cf 91       	pop	r28
    20d2:	df 91       	pop	r29
    20d4:	08 95       	ret

000020d6 <ADC_voidGetCurrChannel>:

void ADC_voidGetCurrChannel(u8* copy_pu8CurrAdcChannel)
{
    20d6:	df 93       	push	r29
    20d8:	cf 93       	push	r28
    20da:	00 d0       	rcall	.+0      	; 0x20dc <ADC_voidGetCurrChannel+0x6>
    20dc:	cd b7       	in	r28, 0x3d	; 61
    20de:	de b7       	in	r29, 0x3e	; 62
    20e0:	9a 83       	std	Y+2, r25	; 0x02
    20e2:	89 83       	std	Y+1, r24	; 0x01
		*copy_pu8CurrAdcChannel = (AD_ADMUX_REG &0x1F);
    20e4:	e7 e2       	ldi	r30, 0x27	; 39
    20e6:	f0 e0       	ldi	r31, 0x00	; 0
    20e8:	80 81       	ld	r24, Z
    20ea:	8f 71       	andi	r24, 0x1F	; 31
    20ec:	e9 81       	ldd	r30, Y+1	; 0x01
    20ee:	fa 81       	ldd	r31, Y+2	; 0x02
    20f0:	80 83       	st	Z, r24
}
    20f2:	0f 90       	pop	r0
    20f4:	0f 90       	pop	r0
    20f6:	cf 91       	pop	r28
    20f8:	df 91       	pop	r29
    20fa:	08 95       	ret

000020fc <ADC_VoidSelectChannel>:

void ADC_VoidSelectChannel(u8 copy_u8Channel)
{
    20fc:	df 93       	push	r29
    20fe:	cf 93       	push	r28
    2100:	0f 92       	push	r0
    2102:	cd b7       	in	r28, 0x3d	; 61
    2104:	de b7       	in	r29, 0x3e	; 62
    2106:	89 83       	std	Y+1, r24	; 0x01
	AD_CHANNEL_SELECT(copy_u8Channel);
    2108:	a7 e2       	ldi	r26, 0x27	; 39
    210a:	b0 e0       	ldi	r27, 0x00	; 0
    210c:	e7 e2       	ldi	r30, 0x27	; 39
    210e:	f0 e0       	ldi	r31, 0x00	; 0
    2110:	80 81       	ld	r24, Z
    2112:	98 2f       	mov	r25, r24
    2114:	90 7e       	andi	r25, 0xE0	; 224
    2116:	89 81       	ldd	r24, Y+1	; 0x01
    2118:	89 2b       	or	r24, r25
    211a:	8c 93       	st	X, r24
}
    211c:	0f 90       	pop	r0
    211e:	cf 91       	pop	r28
    2120:	df 91       	pop	r29
    2122:	08 95       	ret

00002124 <ADC_VoidRefresh_freeRunning>:
void ADC_VoidRefresh_freeRunning(void)
{
    2124:	df 93       	push	r29
    2126:	cf 93       	push	r28
    2128:	cd b7       	in	r28, 0x3d	; 61
    212a:	de b7       	in	r29, 0x3e	; 62
	ADC_CURR_CHANNEL_IDX = 0;
    212c:	10 92 42 03 	sts	0x0342, r1
	AD_CHANNEL_SELECT(ADC_CHANNEL_AT_ARR[ADC_CURR_CHANNEL_IDX]);
    2130:	a7 e2       	ldi	r26, 0x27	; 39
    2132:	b0 e0       	ldi	r27, 0x00	; 0
    2134:	e7 e2       	ldi	r30, 0x27	; 39
    2136:	f0 e0       	ldi	r31, 0x00	; 0
    2138:	80 81       	ld	r24, Z
    213a:	28 2f       	mov	r18, r24
    213c:	20 7e       	andi	r18, 0xE0	; 224
    213e:	80 91 42 03 	lds	r24, 0x0342
    2142:	88 2f       	mov	r24, r24
    2144:	90 e0       	ldi	r25, 0x00	; 0
    2146:	fc 01       	movw	r30, r24
    2148:	e5 50       	subi	r30, 0x05	; 5
    214a:	fd 4f       	sbci	r31, 0xFD	; 253
    214c:	80 81       	ld	r24, Z
    214e:	82 2b       	or	r24, r18
    2150:	8c 93       	st	X, r24
	AD_STARTCONV();
    2152:	a6 e2       	ldi	r26, 0x26	; 38
    2154:	b0 e0       	ldi	r27, 0x00	; 0
    2156:	e6 e2       	ldi	r30, 0x26	; 38
    2158:	f0 e0       	ldi	r31, 0x00	; 0
    215a:	80 81       	ld	r24, Z
    215c:	80 64       	ori	r24, 0x40	; 64
    215e:	8c 93       	st	X, r24
}
    2160:	cf 91       	pop	r28
    2162:	df 91       	pop	r29
    2164:	08 95       	ret

00002166 <__vector_16>:

void __vector_16(void)
{
    2166:	1f 92       	push	r1
    2168:	0f 92       	push	r0
    216a:	0f b6       	in	r0, 0x3f	; 63
    216c:	0f 92       	push	r0
    216e:	11 24       	eor	r1, r1
    2170:	2f 93       	push	r18
    2172:	3f 93       	push	r19
    2174:	4f 93       	push	r20
    2176:	5f 93       	push	r21
    2178:	6f 93       	push	r22
    217a:	7f 93       	push	r23
    217c:	8f 93       	push	r24
    217e:	9f 93       	push	r25
    2180:	af 93       	push	r26
    2182:	bf 93       	push	r27
    2184:	ef 93       	push	r30
    2186:	ff 93       	push	r31
    2188:	df 93       	push	r29
    218a:	cf 93       	push	r28
    218c:	cd b7       	in	r28, 0x3d	; 61
    218e:	de b7       	in	r29, 0x3e	; 62
			AD_STARTCONV();
		}
	}

#else
	if(Global_pADC_ISR)
    2190:	80 91 40 03 	lds	r24, 0x0340
    2194:	90 91 41 03 	lds	r25, 0x0341
    2198:	00 97       	sbiw	r24, 0x00	; 0
    219a:	29 f0       	breq	.+10     	; 0x21a6 <__vector_16+0x40>
		Global_pADC_ISR();
    219c:	e0 91 40 03 	lds	r30, 0x0340
    21a0:	f0 91 41 03 	lds	r31, 0x0341
    21a4:	09 95       	icall
#endif


}
    21a6:	cf 91       	pop	r28
    21a8:	df 91       	pop	r29
    21aa:	ff 91       	pop	r31
    21ac:	ef 91       	pop	r30
    21ae:	bf 91       	pop	r27
    21b0:	af 91       	pop	r26
    21b2:	9f 91       	pop	r25
    21b4:	8f 91       	pop	r24
    21b6:	7f 91       	pop	r23
    21b8:	6f 91       	pop	r22
    21ba:	5f 91       	pop	r21
    21bc:	4f 91       	pop	r20
    21be:	3f 91       	pop	r19
    21c0:	2f 91       	pop	r18
    21c2:	0f 90       	pop	r0
    21c4:	0f be       	out	0x3f, r0	; 63
    21c6:	0f 90       	pop	r0
    21c8:	1f 90       	pop	r1
    21ca:	18 95       	reti

000021cc <StepperMotor_VoidInit>:
#include "StepperMotor_config.h"
#include "StepperMotor_interface.h"


void StepperMotor_VoidInit(const StepMotor_st* Copy_pStepMotor_st_Config)
{
    21cc:	df 93       	push	r29
    21ce:	cf 93       	push	r28
    21d0:	00 d0       	rcall	.+0      	; 0x21d2 <StepperMotor_VoidInit+0x6>
    21d2:	cd b7       	in	r28, 0x3d	; 61
    21d4:	de b7       	in	r29, 0x3e	; 62
    21d6:	9a 83       	std	Y+2, r25	; 0x02
    21d8:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pStepMotor_st_Config)
    21da:	89 81       	ldd	r24, Y+1	; 0x01
    21dc:	9a 81       	ldd	r25, Y+2	; 0x02
    21de:	00 97       	sbiw	r24, 0x00	; 0
    21e0:	09 f4       	brne	.+2      	; 0x21e4 <StepperMotor_VoidInit+0x18>
    21e2:	4a c0       	rjmp	.+148    	; 0x2278 <StepperMotor_VoidInit+0xac>
	{
		// init blue pin
		DIO_VoidSetPinDirection(Copy_pStepMotor_st_Config->Motor_BluePort, Copy_pStepMotor_st_Config->Motor_BluePin , DIO_PIN_DIR_OUTPUT);
    21e4:	e9 81       	ldd	r30, Y+1	; 0x01
    21e6:	fa 81       	ldd	r31, Y+2	; 0x02
    21e8:	84 81       	ldd	r24, Z+4	; 0x04
    21ea:	82 95       	swap	r24
    21ec:	86 95       	lsr	r24
    21ee:	86 95       	lsr	r24
    21f0:	83 70       	andi	r24, 0x03	; 3
    21f2:	28 2f       	mov	r18, r24
    21f4:	e9 81       	ldd	r30, Y+1	; 0x01
    21f6:	fa 81       	ldd	r31, Y+2	; 0x02
    21f8:	84 81       	ldd	r24, Z+4	; 0x04
    21fa:	87 70       	andi	r24, 0x07	; 7
    21fc:	98 2f       	mov	r25, r24
    21fe:	82 2f       	mov	r24, r18
    2200:	69 2f       	mov	r22, r25
    2202:	41 e0       	ldi	r20, 0x01	; 1
    2204:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <DIO_VoidSetPinDirection>
		//pink
		DIO_VoidSetPinDirection(Copy_pStepMotor_st_Config->Motor_PinkPort, Copy_pStepMotor_st_Config->Motor_PinkPin , DIO_PIN_DIR_OUTPUT);
    2208:	e9 81       	ldd	r30, Y+1	; 0x01
    220a:	fa 81       	ldd	r31, Y+2	; 0x02
    220c:	85 81       	ldd	r24, Z+5	; 0x05
    220e:	82 95       	swap	r24
    2210:	86 95       	lsr	r24
    2212:	86 95       	lsr	r24
    2214:	83 70       	andi	r24, 0x03	; 3
    2216:	28 2f       	mov	r18, r24
    2218:	e9 81       	ldd	r30, Y+1	; 0x01
    221a:	fa 81       	ldd	r31, Y+2	; 0x02
    221c:	84 81       	ldd	r24, Z+4	; 0x04
    221e:	86 95       	lsr	r24
    2220:	86 95       	lsr	r24
    2222:	86 95       	lsr	r24
    2224:	87 70       	andi	r24, 0x07	; 7
    2226:	98 2f       	mov	r25, r24
    2228:	82 2f       	mov	r24, r18
    222a:	69 2f       	mov	r22, r25
    222c:	41 e0       	ldi	r20, 0x01	; 1
    222e:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <DIO_VoidSetPinDirection>
		//orange
		DIO_VoidSetPinDirection(Copy_pStepMotor_st_Config->Motor_OrangePort, Copy_pStepMotor_st_Config->Motor_OrangePin , DIO_PIN_DIR_OUTPUT);
    2232:	e9 81       	ldd	r30, Y+1	; 0x01
    2234:	fa 81       	ldd	r31, Y+2	; 0x02
    2236:	86 81       	ldd	r24, Z+6	; 0x06
    2238:	83 70       	andi	r24, 0x03	; 3
    223a:	28 2f       	mov	r18, r24
    223c:	e9 81       	ldd	r30, Y+1	; 0x01
    223e:	fa 81       	ldd	r31, Y+2	; 0x02
    2240:	85 81       	ldd	r24, Z+5	; 0x05
    2242:	87 70       	andi	r24, 0x07	; 7
    2244:	98 2f       	mov	r25, r24
    2246:	82 2f       	mov	r24, r18
    2248:	69 2f       	mov	r22, r25
    224a:	41 e0       	ldi	r20, 0x01	; 1
    224c:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <DIO_VoidSetPinDirection>
		//yellow
		DIO_VoidSetPinDirection(Copy_pStepMotor_st_Config->Motor_YellowPort, Copy_pStepMotor_st_Config->Motor_YellowPin , DIO_PIN_DIR_OUTPUT);
    2250:	e9 81       	ldd	r30, Y+1	; 0x01
    2252:	fa 81       	ldd	r31, Y+2	; 0x02
    2254:	86 81       	ldd	r24, Z+6	; 0x06
    2256:	86 95       	lsr	r24
    2258:	86 95       	lsr	r24
    225a:	83 70       	andi	r24, 0x03	; 3
    225c:	28 2f       	mov	r18, r24
    225e:	e9 81       	ldd	r30, Y+1	; 0x01
    2260:	fa 81       	ldd	r31, Y+2	; 0x02
    2262:	85 81       	ldd	r24, Z+5	; 0x05
    2264:	86 95       	lsr	r24
    2266:	86 95       	lsr	r24
    2268:	86 95       	lsr	r24
    226a:	87 70       	andi	r24, 0x07	; 7
    226c:	98 2f       	mov	r25, r24
    226e:	82 2f       	mov	r24, r18
    2270:	69 2f       	mov	r22, r25
    2272:	41 e0       	ldi	r20, 0x01	; 1
    2274:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <DIO_VoidSetPinDirection>
	else
	{

	}
	return;
}
    2278:	0f 90       	pop	r0
    227a:	0f 90       	pop	r0
    227c:	cf 91       	pop	r28
    227e:	df 91       	pop	r29
    2280:	08 95       	ret

00002282 <StepperMotor_VoidStepClockWise>:

void StepperMotor_VoidStepClockWise(const StepMotor_st* Copy_pStepMotor_st_Config)
{
    2282:	0f 93       	push	r16
    2284:	1f 93       	push	r17
    2286:	df 93       	push	r29
    2288:	cf 93       	push	r28
    228a:	cd b7       	in	r28, 0x3d	; 61
    228c:	de b7       	in	r29, 0x3e	; 62
    228e:	c8 54       	subi	r28, 0x48	; 72
    2290:	d0 40       	sbci	r29, 0x00	; 0
    2292:	0f b6       	in	r0, 0x3f	; 63
    2294:	f8 94       	cli
    2296:	de bf       	out	0x3e, r29	; 62
    2298:	0f be       	out	0x3f, r0	; 63
    229a:	cd bf       	out	0x3d, r28	; 61
    229c:	fe 01       	movw	r30, r28
    229e:	e9 5b       	subi	r30, 0xB9	; 185
    22a0:	ff 4f       	sbci	r31, 0xFF	; 255
    22a2:	91 83       	std	Z+1, r25	; 0x01
    22a4:	80 83       	st	Z, r24
	if(Copy_pStepMotor_st_Config)
    22a6:	fe 01       	movw	r30, r28
    22a8:	e9 5b       	subi	r30, 0xB9	; 185
    22aa:	ff 4f       	sbci	r31, 0xFF	; 255
    22ac:	80 81       	ld	r24, Z
    22ae:	91 81       	ldd	r25, Z+1	; 0x01
    22b0:	00 97       	sbiw	r24, 0x00	; 0
    22b2:	09 f4       	brne	.+2      	; 0x22b6 <StepperMotor_VoidStepClockWise+0x34>
    22b4:	21 c3       	rjmp	.+1602   	; 0x28f8 <StepperMotor_VoidStepClockWise+0x676>
	{
		DIO_VoidSetPinValue(Copy_pStepMotor_st_Config->Motor_BluePort, Copy_pStepMotor_st_Config->Motor_BluePin , DIO_PIN_LOGIC_HIGH);
    22b6:	fe 01       	movw	r30, r28
    22b8:	e9 5b       	subi	r30, 0xB9	; 185
    22ba:	ff 4f       	sbci	r31, 0xFF	; 255
    22bc:	01 90       	ld	r0, Z+
    22be:	f0 81       	ld	r31, Z
    22c0:	e0 2d       	mov	r30, r0
    22c2:	84 81       	ldd	r24, Z+4	; 0x04
    22c4:	82 95       	swap	r24
    22c6:	86 95       	lsr	r24
    22c8:	86 95       	lsr	r24
    22ca:	83 70       	andi	r24, 0x03	; 3
    22cc:	28 2f       	mov	r18, r24
    22ce:	fe 01       	movw	r30, r28
    22d0:	e9 5b       	subi	r30, 0xB9	; 185
    22d2:	ff 4f       	sbci	r31, 0xFF	; 255
    22d4:	01 90       	ld	r0, Z+
    22d6:	f0 81       	ld	r31, Z
    22d8:	e0 2d       	mov	r30, r0
    22da:	84 81       	ldd	r24, Z+4	; 0x04
    22dc:	87 70       	andi	r24, 0x07	; 7
    22de:	98 2f       	mov	r25, r24
    22e0:	82 2f       	mov	r24, r18
    22e2:	69 2f       	mov	r22, r25
    22e4:	41 e0       	ldi	r20, 0x01	; 1
    22e6:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <DIO_VoidSetPinValue>
    22ea:	fe 01       	movw	r30, r28
    22ec:	ed 5b       	subi	r30, 0xBD	; 189
    22ee:	ff 4f       	sbci	r31, 0xFF	; 255
    22f0:	80 e0       	ldi	r24, 0x00	; 0
    22f2:	90 e0       	ldi	r25, 0x00	; 0
    22f4:	a0 e2       	ldi	r26, 0x20	; 32
    22f6:	b1 e4       	ldi	r27, 0x41	; 65
    22f8:	80 83       	st	Z, r24
    22fa:	91 83       	std	Z+1, r25	; 0x01
    22fc:	a2 83       	std	Z+2, r26	; 0x02
    22fe:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2300:	8e 01       	movw	r16, r28
    2302:	01 5c       	subi	r16, 0xC1	; 193
    2304:	1f 4f       	sbci	r17, 0xFF	; 255
    2306:	fe 01       	movw	r30, r28
    2308:	ed 5b       	subi	r30, 0xBD	; 189
    230a:	ff 4f       	sbci	r31, 0xFF	; 255
    230c:	60 81       	ld	r22, Z
    230e:	71 81       	ldd	r23, Z+1	; 0x01
    2310:	82 81       	ldd	r24, Z+2	; 0x02
    2312:	93 81       	ldd	r25, Z+3	; 0x03
    2314:	20 e0       	ldi	r18, 0x00	; 0
    2316:	30 e0       	ldi	r19, 0x00	; 0
    2318:	4a ef       	ldi	r20, 0xFA	; 250
    231a:	54 e4       	ldi	r21, 0x44	; 68
    231c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2320:	dc 01       	movw	r26, r24
    2322:	cb 01       	movw	r24, r22
    2324:	f8 01       	movw	r30, r16
    2326:	80 83       	st	Z, r24
    2328:	91 83       	std	Z+1, r25	; 0x01
    232a:	a2 83       	std	Z+2, r26	; 0x02
    232c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    232e:	fe 01       	movw	r30, r28
    2330:	ff 96       	adiw	r30, 0x3f	; 63
    2332:	60 81       	ld	r22, Z
    2334:	71 81       	ldd	r23, Z+1	; 0x01
    2336:	82 81       	ldd	r24, Z+2	; 0x02
    2338:	93 81       	ldd	r25, Z+3	; 0x03
    233a:	20 e0       	ldi	r18, 0x00	; 0
    233c:	30 e0       	ldi	r19, 0x00	; 0
    233e:	40 e8       	ldi	r20, 0x80	; 128
    2340:	5f e3       	ldi	r21, 0x3F	; 63
    2342:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2346:	88 23       	and	r24, r24
    2348:	2c f4       	brge	.+10     	; 0x2354 <StepperMotor_VoidStepClockWise+0xd2>
		__ticks = 1;
    234a:	81 e0       	ldi	r24, 0x01	; 1
    234c:	90 e0       	ldi	r25, 0x00	; 0
    234e:	9e af       	std	Y+62, r25	; 0x3e
    2350:	8d af       	std	Y+61, r24	; 0x3d
    2352:	46 c0       	rjmp	.+140    	; 0x23e0 <StepperMotor_VoidStepClockWise+0x15e>
	else if (__tmp > 65535)
    2354:	fe 01       	movw	r30, r28
    2356:	ff 96       	adiw	r30, 0x3f	; 63
    2358:	60 81       	ld	r22, Z
    235a:	71 81       	ldd	r23, Z+1	; 0x01
    235c:	82 81       	ldd	r24, Z+2	; 0x02
    235e:	93 81       	ldd	r25, Z+3	; 0x03
    2360:	20 e0       	ldi	r18, 0x00	; 0
    2362:	3f ef       	ldi	r19, 0xFF	; 255
    2364:	4f e7       	ldi	r20, 0x7F	; 127
    2366:	57 e4       	ldi	r21, 0x47	; 71
    2368:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    236c:	18 16       	cp	r1, r24
    236e:	64 f5       	brge	.+88     	; 0x23c8 <StepperMotor_VoidStepClockWise+0x146>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2370:	fe 01       	movw	r30, r28
    2372:	ed 5b       	subi	r30, 0xBD	; 189
    2374:	ff 4f       	sbci	r31, 0xFF	; 255
    2376:	60 81       	ld	r22, Z
    2378:	71 81       	ldd	r23, Z+1	; 0x01
    237a:	82 81       	ldd	r24, Z+2	; 0x02
    237c:	93 81       	ldd	r25, Z+3	; 0x03
    237e:	20 e0       	ldi	r18, 0x00	; 0
    2380:	30 e0       	ldi	r19, 0x00	; 0
    2382:	40 e2       	ldi	r20, 0x20	; 32
    2384:	51 e4       	ldi	r21, 0x41	; 65
    2386:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    238a:	dc 01       	movw	r26, r24
    238c:	cb 01       	movw	r24, r22
    238e:	bc 01       	movw	r22, r24
    2390:	cd 01       	movw	r24, r26
    2392:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2396:	dc 01       	movw	r26, r24
    2398:	cb 01       	movw	r24, r22
    239a:	9e af       	std	Y+62, r25	; 0x3e
    239c:	8d af       	std	Y+61, r24	; 0x3d
    239e:	0f c0       	rjmp	.+30     	; 0x23be <StepperMotor_VoidStepClockWise+0x13c>
    23a0:	88 ec       	ldi	r24, 0xC8	; 200
    23a2:	90 e0       	ldi	r25, 0x00	; 0
    23a4:	9c af       	std	Y+60, r25	; 0x3c
    23a6:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    23a8:	8b ad       	ldd	r24, Y+59	; 0x3b
    23aa:	9c ad       	ldd	r25, Y+60	; 0x3c
    23ac:	01 97       	sbiw	r24, 0x01	; 1
    23ae:	f1 f7       	brne	.-4      	; 0x23ac <StepperMotor_VoidStepClockWise+0x12a>
    23b0:	9c af       	std	Y+60, r25	; 0x3c
    23b2:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23b4:	8d ad       	ldd	r24, Y+61	; 0x3d
    23b6:	9e ad       	ldd	r25, Y+62	; 0x3e
    23b8:	01 97       	sbiw	r24, 0x01	; 1
    23ba:	9e af       	std	Y+62, r25	; 0x3e
    23bc:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23be:	8d ad       	ldd	r24, Y+61	; 0x3d
    23c0:	9e ad       	ldd	r25, Y+62	; 0x3e
    23c2:	00 97       	sbiw	r24, 0x00	; 0
    23c4:	69 f7       	brne	.-38     	; 0x23a0 <StepperMotor_VoidStepClockWise+0x11e>
    23c6:	16 c0       	rjmp	.+44     	; 0x23f4 <StepperMotor_VoidStepClockWise+0x172>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23c8:	fe 01       	movw	r30, r28
    23ca:	ff 96       	adiw	r30, 0x3f	; 63
    23cc:	60 81       	ld	r22, Z
    23ce:	71 81       	ldd	r23, Z+1	; 0x01
    23d0:	82 81       	ldd	r24, Z+2	; 0x02
    23d2:	93 81       	ldd	r25, Z+3	; 0x03
    23d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23d8:	dc 01       	movw	r26, r24
    23da:	cb 01       	movw	r24, r22
    23dc:	9e af       	std	Y+62, r25	; 0x3e
    23de:	8d af       	std	Y+61, r24	; 0x3d
    23e0:	8d ad       	ldd	r24, Y+61	; 0x3d
    23e2:	9e ad       	ldd	r25, Y+62	; 0x3e
    23e4:	9a af       	std	Y+58, r25	; 0x3a
    23e6:	89 af       	std	Y+57, r24	; 0x39
    23e8:	89 ad       	ldd	r24, Y+57	; 0x39
    23ea:	9a ad       	ldd	r25, Y+58	; 0x3a
    23ec:	01 97       	sbiw	r24, 0x01	; 1
    23ee:	f1 f7       	brne	.-4      	; 0x23ec <StepperMotor_VoidStepClockWise+0x16a>
    23f0:	9a af       	std	Y+58, r25	; 0x3a
    23f2:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(10);

		DIO_VoidSetPinValue(Copy_pStepMotor_st_Config->Motor_BluePort, Copy_pStepMotor_st_Config->Motor_BluePin , DIO_PIN_LOGIC_LOW);
    23f4:	fe 01       	movw	r30, r28
    23f6:	e9 5b       	subi	r30, 0xB9	; 185
    23f8:	ff 4f       	sbci	r31, 0xFF	; 255
    23fa:	01 90       	ld	r0, Z+
    23fc:	f0 81       	ld	r31, Z
    23fe:	e0 2d       	mov	r30, r0
    2400:	84 81       	ldd	r24, Z+4	; 0x04
    2402:	82 95       	swap	r24
    2404:	86 95       	lsr	r24
    2406:	86 95       	lsr	r24
    2408:	83 70       	andi	r24, 0x03	; 3
    240a:	28 2f       	mov	r18, r24
    240c:	fe 01       	movw	r30, r28
    240e:	e9 5b       	subi	r30, 0xB9	; 185
    2410:	ff 4f       	sbci	r31, 0xFF	; 255
    2412:	01 90       	ld	r0, Z+
    2414:	f0 81       	ld	r31, Z
    2416:	e0 2d       	mov	r30, r0
    2418:	84 81       	ldd	r24, Z+4	; 0x04
    241a:	87 70       	andi	r24, 0x07	; 7
    241c:	98 2f       	mov	r25, r24
    241e:	82 2f       	mov	r24, r18
    2420:	69 2f       	mov	r22, r25
    2422:	40 e0       	ldi	r20, 0x00	; 0
    2424:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <DIO_VoidSetPinValue>
		DIO_VoidSetPinValue(Copy_pStepMotor_st_Config->Motor_PinkPort, Copy_pStepMotor_st_Config->Motor_PinkPin , DIO_PIN_LOGIC_HIGH);
    2428:	fe 01       	movw	r30, r28
    242a:	e9 5b       	subi	r30, 0xB9	; 185
    242c:	ff 4f       	sbci	r31, 0xFF	; 255
    242e:	01 90       	ld	r0, Z+
    2430:	f0 81       	ld	r31, Z
    2432:	e0 2d       	mov	r30, r0
    2434:	85 81       	ldd	r24, Z+5	; 0x05
    2436:	82 95       	swap	r24
    2438:	86 95       	lsr	r24
    243a:	86 95       	lsr	r24
    243c:	83 70       	andi	r24, 0x03	; 3
    243e:	28 2f       	mov	r18, r24
    2440:	fe 01       	movw	r30, r28
    2442:	e9 5b       	subi	r30, 0xB9	; 185
    2444:	ff 4f       	sbci	r31, 0xFF	; 255
    2446:	01 90       	ld	r0, Z+
    2448:	f0 81       	ld	r31, Z
    244a:	e0 2d       	mov	r30, r0
    244c:	84 81       	ldd	r24, Z+4	; 0x04
    244e:	86 95       	lsr	r24
    2450:	86 95       	lsr	r24
    2452:	86 95       	lsr	r24
    2454:	87 70       	andi	r24, 0x07	; 7
    2456:	98 2f       	mov	r25, r24
    2458:	82 2f       	mov	r24, r18
    245a:	69 2f       	mov	r22, r25
    245c:	41 e0       	ldi	r20, 0x01	; 1
    245e:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <DIO_VoidSetPinValue>
    2462:	80 e0       	ldi	r24, 0x00	; 0
    2464:	90 e0       	ldi	r25, 0x00	; 0
    2466:	a0 e2       	ldi	r26, 0x20	; 32
    2468:	b1 e4       	ldi	r27, 0x41	; 65
    246a:	8d ab       	std	Y+53, r24	; 0x35
    246c:	9e ab       	std	Y+54, r25	; 0x36
    246e:	af ab       	std	Y+55, r26	; 0x37
    2470:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2472:	6d a9       	ldd	r22, Y+53	; 0x35
    2474:	7e a9       	ldd	r23, Y+54	; 0x36
    2476:	8f a9       	ldd	r24, Y+55	; 0x37
    2478:	98 ad       	ldd	r25, Y+56	; 0x38
    247a:	20 e0       	ldi	r18, 0x00	; 0
    247c:	30 e0       	ldi	r19, 0x00	; 0
    247e:	4a ef       	ldi	r20, 0xFA	; 250
    2480:	54 e4       	ldi	r21, 0x44	; 68
    2482:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2486:	dc 01       	movw	r26, r24
    2488:	cb 01       	movw	r24, r22
    248a:	89 ab       	std	Y+49, r24	; 0x31
    248c:	9a ab       	std	Y+50, r25	; 0x32
    248e:	ab ab       	std	Y+51, r26	; 0x33
    2490:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2492:	69 a9       	ldd	r22, Y+49	; 0x31
    2494:	7a a9       	ldd	r23, Y+50	; 0x32
    2496:	8b a9       	ldd	r24, Y+51	; 0x33
    2498:	9c a9       	ldd	r25, Y+52	; 0x34
    249a:	20 e0       	ldi	r18, 0x00	; 0
    249c:	30 e0       	ldi	r19, 0x00	; 0
    249e:	40 e8       	ldi	r20, 0x80	; 128
    24a0:	5f e3       	ldi	r21, 0x3F	; 63
    24a2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    24a6:	88 23       	and	r24, r24
    24a8:	2c f4       	brge	.+10     	; 0x24b4 <StepperMotor_VoidStepClockWise+0x232>
		__ticks = 1;
    24aa:	81 e0       	ldi	r24, 0x01	; 1
    24ac:	90 e0       	ldi	r25, 0x00	; 0
    24ae:	98 ab       	std	Y+48, r25	; 0x30
    24b0:	8f a7       	std	Y+47, r24	; 0x2f
    24b2:	3f c0       	rjmp	.+126    	; 0x2532 <StepperMotor_VoidStepClockWise+0x2b0>
	else if (__tmp > 65535)
    24b4:	69 a9       	ldd	r22, Y+49	; 0x31
    24b6:	7a a9       	ldd	r23, Y+50	; 0x32
    24b8:	8b a9       	ldd	r24, Y+51	; 0x33
    24ba:	9c a9       	ldd	r25, Y+52	; 0x34
    24bc:	20 e0       	ldi	r18, 0x00	; 0
    24be:	3f ef       	ldi	r19, 0xFF	; 255
    24c0:	4f e7       	ldi	r20, 0x7F	; 127
    24c2:	57 e4       	ldi	r21, 0x47	; 71
    24c4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    24c8:	18 16       	cp	r1, r24
    24ca:	4c f5       	brge	.+82     	; 0x251e <StepperMotor_VoidStepClockWise+0x29c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24cc:	6d a9       	ldd	r22, Y+53	; 0x35
    24ce:	7e a9       	ldd	r23, Y+54	; 0x36
    24d0:	8f a9       	ldd	r24, Y+55	; 0x37
    24d2:	98 ad       	ldd	r25, Y+56	; 0x38
    24d4:	20 e0       	ldi	r18, 0x00	; 0
    24d6:	30 e0       	ldi	r19, 0x00	; 0
    24d8:	40 e2       	ldi	r20, 0x20	; 32
    24da:	51 e4       	ldi	r21, 0x41	; 65
    24dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24e0:	dc 01       	movw	r26, r24
    24e2:	cb 01       	movw	r24, r22
    24e4:	bc 01       	movw	r22, r24
    24e6:	cd 01       	movw	r24, r26
    24e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24ec:	dc 01       	movw	r26, r24
    24ee:	cb 01       	movw	r24, r22
    24f0:	98 ab       	std	Y+48, r25	; 0x30
    24f2:	8f a7       	std	Y+47, r24	; 0x2f
    24f4:	0f c0       	rjmp	.+30     	; 0x2514 <StepperMotor_VoidStepClockWise+0x292>
    24f6:	88 ec       	ldi	r24, 0xC8	; 200
    24f8:	90 e0       	ldi	r25, 0x00	; 0
    24fa:	9e a7       	std	Y+46, r25	; 0x2e
    24fc:	8d a7       	std	Y+45, r24	; 0x2d
    24fe:	8d a5       	ldd	r24, Y+45	; 0x2d
    2500:	9e a5       	ldd	r25, Y+46	; 0x2e
    2502:	01 97       	sbiw	r24, 0x01	; 1
    2504:	f1 f7       	brne	.-4      	; 0x2502 <StepperMotor_VoidStepClockWise+0x280>
    2506:	9e a7       	std	Y+46, r25	; 0x2e
    2508:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    250a:	8f a5       	ldd	r24, Y+47	; 0x2f
    250c:	98 a9       	ldd	r25, Y+48	; 0x30
    250e:	01 97       	sbiw	r24, 0x01	; 1
    2510:	98 ab       	std	Y+48, r25	; 0x30
    2512:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2514:	8f a5       	ldd	r24, Y+47	; 0x2f
    2516:	98 a9       	ldd	r25, Y+48	; 0x30
    2518:	00 97       	sbiw	r24, 0x00	; 0
    251a:	69 f7       	brne	.-38     	; 0x24f6 <StepperMotor_VoidStepClockWise+0x274>
    251c:	14 c0       	rjmp	.+40     	; 0x2546 <StepperMotor_VoidStepClockWise+0x2c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    251e:	69 a9       	ldd	r22, Y+49	; 0x31
    2520:	7a a9       	ldd	r23, Y+50	; 0x32
    2522:	8b a9       	ldd	r24, Y+51	; 0x33
    2524:	9c a9       	ldd	r25, Y+52	; 0x34
    2526:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    252a:	dc 01       	movw	r26, r24
    252c:	cb 01       	movw	r24, r22
    252e:	98 ab       	std	Y+48, r25	; 0x30
    2530:	8f a7       	std	Y+47, r24	; 0x2f
    2532:	8f a5       	ldd	r24, Y+47	; 0x2f
    2534:	98 a9       	ldd	r25, Y+48	; 0x30
    2536:	9c a7       	std	Y+44, r25	; 0x2c
    2538:	8b a7       	std	Y+43, r24	; 0x2b
    253a:	8b a5       	ldd	r24, Y+43	; 0x2b
    253c:	9c a5       	ldd	r25, Y+44	; 0x2c
    253e:	01 97       	sbiw	r24, 0x01	; 1
    2540:	f1 f7       	brne	.-4      	; 0x253e <StepperMotor_VoidStepClockWise+0x2bc>
    2542:	9c a7       	std	Y+44, r25	; 0x2c
    2544:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(10);

		DIO_VoidSetPinValue(Copy_pStepMotor_st_Config->Motor_PinkPort, Copy_pStepMotor_st_Config->Motor_PinkPin , DIO_PIN_LOGIC_LOW);
    2546:	fe 01       	movw	r30, r28
    2548:	e9 5b       	subi	r30, 0xB9	; 185
    254a:	ff 4f       	sbci	r31, 0xFF	; 255
    254c:	01 90       	ld	r0, Z+
    254e:	f0 81       	ld	r31, Z
    2550:	e0 2d       	mov	r30, r0
    2552:	85 81       	ldd	r24, Z+5	; 0x05
    2554:	82 95       	swap	r24
    2556:	86 95       	lsr	r24
    2558:	86 95       	lsr	r24
    255a:	83 70       	andi	r24, 0x03	; 3
    255c:	28 2f       	mov	r18, r24
    255e:	fe 01       	movw	r30, r28
    2560:	e9 5b       	subi	r30, 0xB9	; 185
    2562:	ff 4f       	sbci	r31, 0xFF	; 255
    2564:	01 90       	ld	r0, Z+
    2566:	f0 81       	ld	r31, Z
    2568:	e0 2d       	mov	r30, r0
    256a:	84 81       	ldd	r24, Z+4	; 0x04
    256c:	86 95       	lsr	r24
    256e:	86 95       	lsr	r24
    2570:	86 95       	lsr	r24
    2572:	87 70       	andi	r24, 0x07	; 7
    2574:	98 2f       	mov	r25, r24
    2576:	82 2f       	mov	r24, r18
    2578:	69 2f       	mov	r22, r25
    257a:	40 e0       	ldi	r20, 0x00	; 0
    257c:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <DIO_VoidSetPinValue>
		DIO_VoidSetPinValue(Copy_pStepMotor_st_Config->Motor_OrangePort, Copy_pStepMotor_st_Config->Motor_OrangePin , DIO_PIN_LOGIC_HIGH);
    2580:	fe 01       	movw	r30, r28
    2582:	e9 5b       	subi	r30, 0xB9	; 185
    2584:	ff 4f       	sbci	r31, 0xFF	; 255
    2586:	01 90       	ld	r0, Z+
    2588:	f0 81       	ld	r31, Z
    258a:	e0 2d       	mov	r30, r0
    258c:	86 81       	ldd	r24, Z+6	; 0x06
    258e:	83 70       	andi	r24, 0x03	; 3
    2590:	28 2f       	mov	r18, r24
    2592:	fe 01       	movw	r30, r28
    2594:	e9 5b       	subi	r30, 0xB9	; 185
    2596:	ff 4f       	sbci	r31, 0xFF	; 255
    2598:	01 90       	ld	r0, Z+
    259a:	f0 81       	ld	r31, Z
    259c:	e0 2d       	mov	r30, r0
    259e:	85 81       	ldd	r24, Z+5	; 0x05
    25a0:	87 70       	andi	r24, 0x07	; 7
    25a2:	98 2f       	mov	r25, r24
    25a4:	82 2f       	mov	r24, r18
    25a6:	69 2f       	mov	r22, r25
    25a8:	41 e0       	ldi	r20, 0x01	; 1
    25aa:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <DIO_VoidSetPinValue>
    25ae:	80 e0       	ldi	r24, 0x00	; 0
    25b0:	90 e0       	ldi	r25, 0x00	; 0
    25b2:	a0 e2       	ldi	r26, 0x20	; 32
    25b4:	b1 e4       	ldi	r27, 0x41	; 65
    25b6:	8f a3       	std	Y+39, r24	; 0x27
    25b8:	98 a7       	std	Y+40, r25	; 0x28
    25ba:	a9 a7       	std	Y+41, r26	; 0x29
    25bc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25be:	6f a1       	ldd	r22, Y+39	; 0x27
    25c0:	78 a5       	ldd	r23, Y+40	; 0x28
    25c2:	89 a5       	ldd	r24, Y+41	; 0x29
    25c4:	9a a5       	ldd	r25, Y+42	; 0x2a
    25c6:	20 e0       	ldi	r18, 0x00	; 0
    25c8:	30 e0       	ldi	r19, 0x00	; 0
    25ca:	4a ef       	ldi	r20, 0xFA	; 250
    25cc:	54 e4       	ldi	r21, 0x44	; 68
    25ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25d2:	dc 01       	movw	r26, r24
    25d4:	cb 01       	movw	r24, r22
    25d6:	8b a3       	std	Y+35, r24	; 0x23
    25d8:	9c a3       	std	Y+36, r25	; 0x24
    25da:	ad a3       	std	Y+37, r26	; 0x25
    25dc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    25de:	6b a1       	ldd	r22, Y+35	; 0x23
    25e0:	7c a1       	ldd	r23, Y+36	; 0x24
    25e2:	8d a1       	ldd	r24, Y+37	; 0x25
    25e4:	9e a1       	ldd	r25, Y+38	; 0x26
    25e6:	20 e0       	ldi	r18, 0x00	; 0
    25e8:	30 e0       	ldi	r19, 0x00	; 0
    25ea:	40 e8       	ldi	r20, 0x80	; 128
    25ec:	5f e3       	ldi	r21, 0x3F	; 63
    25ee:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    25f2:	88 23       	and	r24, r24
    25f4:	2c f4       	brge	.+10     	; 0x2600 <StepperMotor_VoidStepClockWise+0x37e>
		__ticks = 1;
    25f6:	81 e0       	ldi	r24, 0x01	; 1
    25f8:	90 e0       	ldi	r25, 0x00	; 0
    25fa:	9a a3       	std	Y+34, r25	; 0x22
    25fc:	89 a3       	std	Y+33, r24	; 0x21
    25fe:	3f c0       	rjmp	.+126    	; 0x267e <StepperMotor_VoidStepClockWise+0x3fc>
	else if (__tmp > 65535)
    2600:	6b a1       	ldd	r22, Y+35	; 0x23
    2602:	7c a1       	ldd	r23, Y+36	; 0x24
    2604:	8d a1       	ldd	r24, Y+37	; 0x25
    2606:	9e a1       	ldd	r25, Y+38	; 0x26
    2608:	20 e0       	ldi	r18, 0x00	; 0
    260a:	3f ef       	ldi	r19, 0xFF	; 255
    260c:	4f e7       	ldi	r20, 0x7F	; 127
    260e:	57 e4       	ldi	r21, 0x47	; 71
    2610:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2614:	18 16       	cp	r1, r24
    2616:	4c f5       	brge	.+82     	; 0x266a <StepperMotor_VoidStepClockWise+0x3e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2618:	6f a1       	ldd	r22, Y+39	; 0x27
    261a:	78 a5       	ldd	r23, Y+40	; 0x28
    261c:	89 a5       	ldd	r24, Y+41	; 0x29
    261e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2620:	20 e0       	ldi	r18, 0x00	; 0
    2622:	30 e0       	ldi	r19, 0x00	; 0
    2624:	40 e2       	ldi	r20, 0x20	; 32
    2626:	51 e4       	ldi	r21, 0x41	; 65
    2628:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    262c:	dc 01       	movw	r26, r24
    262e:	cb 01       	movw	r24, r22
    2630:	bc 01       	movw	r22, r24
    2632:	cd 01       	movw	r24, r26
    2634:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2638:	dc 01       	movw	r26, r24
    263a:	cb 01       	movw	r24, r22
    263c:	9a a3       	std	Y+34, r25	; 0x22
    263e:	89 a3       	std	Y+33, r24	; 0x21
    2640:	0f c0       	rjmp	.+30     	; 0x2660 <StepperMotor_VoidStepClockWise+0x3de>
    2642:	88 ec       	ldi	r24, 0xC8	; 200
    2644:	90 e0       	ldi	r25, 0x00	; 0
    2646:	98 a3       	std	Y+32, r25	; 0x20
    2648:	8f 8f       	std	Y+31, r24	; 0x1f
    264a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    264c:	98 a1       	ldd	r25, Y+32	; 0x20
    264e:	01 97       	sbiw	r24, 0x01	; 1
    2650:	f1 f7       	brne	.-4      	; 0x264e <StepperMotor_VoidStepClockWise+0x3cc>
    2652:	98 a3       	std	Y+32, r25	; 0x20
    2654:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2656:	89 a1       	ldd	r24, Y+33	; 0x21
    2658:	9a a1       	ldd	r25, Y+34	; 0x22
    265a:	01 97       	sbiw	r24, 0x01	; 1
    265c:	9a a3       	std	Y+34, r25	; 0x22
    265e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2660:	89 a1       	ldd	r24, Y+33	; 0x21
    2662:	9a a1       	ldd	r25, Y+34	; 0x22
    2664:	00 97       	sbiw	r24, 0x00	; 0
    2666:	69 f7       	brne	.-38     	; 0x2642 <StepperMotor_VoidStepClockWise+0x3c0>
    2668:	14 c0       	rjmp	.+40     	; 0x2692 <StepperMotor_VoidStepClockWise+0x410>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    266a:	6b a1       	ldd	r22, Y+35	; 0x23
    266c:	7c a1       	ldd	r23, Y+36	; 0x24
    266e:	8d a1       	ldd	r24, Y+37	; 0x25
    2670:	9e a1       	ldd	r25, Y+38	; 0x26
    2672:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2676:	dc 01       	movw	r26, r24
    2678:	cb 01       	movw	r24, r22
    267a:	9a a3       	std	Y+34, r25	; 0x22
    267c:	89 a3       	std	Y+33, r24	; 0x21
    267e:	89 a1       	ldd	r24, Y+33	; 0x21
    2680:	9a a1       	ldd	r25, Y+34	; 0x22
    2682:	9e 8f       	std	Y+30, r25	; 0x1e
    2684:	8d 8f       	std	Y+29, r24	; 0x1d
    2686:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2688:	9e 8d       	ldd	r25, Y+30	; 0x1e
    268a:	01 97       	sbiw	r24, 0x01	; 1
    268c:	f1 f7       	brne	.-4      	; 0x268a <StepperMotor_VoidStepClockWise+0x408>
    268e:	9e 8f       	std	Y+30, r25	; 0x1e
    2690:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(10);
		DIO_VoidSetPinValue(Copy_pStepMotor_st_Config->Motor_OrangePort, Copy_pStepMotor_st_Config->Motor_OrangePin , DIO_PIN_LOGIC_LOW);
    2692:	fe 01       	movw	r30, r28
    2694:	e9 5b       	subi	r30, 0xB9	; 185
    2696:	ff 4f       	sbci	r31, 0xFF	; 255
    2698:	01 90       	ld	r0, Z+
    269a:	f0 81       	ld	r31, Z
    269c:	e0 2d       	mov	r30, r0
    269e:	86 81       	ldd	r24, Z+6	; 0x06
    26a0:	83 70       	andi	r24, 0x03	; 3
    26a2:	28 2f       	mov	r18, r24
    26a4:	fe 01       	movw	r30, r28
    26a6:	e9 5b       	subi	r30, 0xB9	; 185
    26a8:	ff 4f       	sbci	r31, 0xFF	; 255
    26aa:	01 90       	ld	r0, Z+
    26ac:	f0 81       	ld	r31, Z
    26ae:	e0 2d       	mov	r30, r0
    26b0:	85 81       	ldd	r24, Z+5	; 0x05
    26b2:	87 70       	andi	r24, 0x07	; 7
    26b4:	98 2f       	mov	r25, r24
    26b6:	82 2f       	mov	r24, r18
    26b8:	69 2f       	mov	r22, r25
    26ba:	40 e0       	ldi	r20, 0x00	; 0
    26bc:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <DIO_VoidSetPinValue>
		DIO_VoidSetPinValue(Copy_pStepMotor_st_Config->Motor_YellowPort, Copy_pStepMotor_st_Config->Motor_YellowPin , DIO_PIN_LOGIC_HIGH);
    26c0:	fe 01       	movw	r30, r28
    26c2:	e9 5b       	subi	r30, 0xB9	; 185
    26c4:	ff 4f       	sbci	r31, 0xFF	; 255
    26c6:	01 90       	ld	r0, Z+
    26c8:	f0 81       	ld	r31, Z
    26ca:	e0 2d       	mov	r30, r0
    26cc:	86 81       	ldd	r24, Z+6	; 0x06
    26ce:	86 95       	lsr	r24
    26d0:	86 95       	lsr	r24
    26d2:	83 70       	andi	r24, 0x03	; 3
    26d4:	28 2f       	mov	r18, r24
    26d6:	fe 01       	movw	r30, r28
    26d8:	e9 5b       	subi	r30, 0xB9	; 185
    26da:	ff 4f       	sbci	r31, 0xFF	; 255
    26dc:	01 90       	ld	r0, Z+
    26de:	f0 81       	ld	r31, Z
    26e0:	e0 2d       	mov	r30, r0
    26e2:	85 81       	ldd	r24, Z+5	; 0x05
    26e4:	86 95       	lsr	r24
    26e6:	86 95       	lsr	r24
    26e8:	86 95       	lsr	r24
    26ea:	87 70       	andi	r24, 0x07	; 7
    26ec:	98 2f       	mov	r25, r24
    26ee:	82 2f       	mov	r24, r18
    26f0:	69 2f       	mov	r22, r25
    26f2:	41 e0       	ldi	r20, 0x01	; 1
    26f4:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <DIO_VoidSetPinValue>
    26f8:	80 e0       	ldi	r24, 0x00	; 0
    26fa:	90 e0       	ldi	r25, 0x00	; 0
    26fc:	a0 e2       	ldi	r26, 0x20	; 32
    26fe:	b1 e4       	ldi	r27, 0x41	; 65
    2700:	89 8f       	std	Y+25, r24	; 0x19
    2702:	9a 8f       	std	Y+26, r25	; 0x1a
    2704:	ab 8f       	std	Y+27, r26	; 0x1b
    2706:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2708:	69 8d       	ldd	r22, Y+25	; 0x19
    270a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    270c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    270e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2710:	20 e0       	ldi	r18, 0x00	; 0
    2712:	30 e0       	ldi	r19, 0x00	; 0
    2714:	4a ef       	ldi	r20, 0xFA	; 250
    2716:	54 e4       	ldi	r21, 0x44	; 68
    2718:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    271c:	dc 01       	movw	r26, r24
    271e:	cb 01       	movw	r24, r22
    2720:	8d 8b       	std	Y+21, r24	; 0x15
    2722:	9e 8b       	std	Y+22, r25	; 0x16
    2724:	af 8b       	std	Y+23, r26	; 0x17
    2726:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2728:	6d 89       	ldd	r22, Y+21	; 0x15
    272a:	7e 89       	ldd	r23, Y+22	; 0x16
    272c:	8f 89       	ldd	r24, Y+23	; 0x17
    272e:	98 8d       	ldd	r25, Y+24	; 0x18
    2730:	20 e0       	ldi	r18, 0x00	; 0
    2732:	30 e0       	ldi	r19, 0x00	; 0
    2734:	40 e8       	ldi	r20, 0x80	; 128
    2736:	5f e3       	ldi	r21, 0x3F	; 63
    2738:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    273c:	88 23       	and	r24, r24
    273e:	2c f4       	brge	.+10     	; 0x274a <StepperMotor_VoidStepClockWise+0x4c8>
		__ticks = 1;
    2740:	81 e0       	ldi	r24, 0x01	; 1
    2742:	90 e0       	ldi	r25, 0x00	; 0
    2744:	9c 8b       	std	Y+20, r25	; 0x14
    2746:	8b 8b       	std	Y+19, r24	; 0x13
    2748:	3f c0       	rjmp	.+126    	; 0x27c8 <StepperMotor_VoidStepClockWise+0x546>
	else if (__tmp > 65535)
    274a:	6d 89       	ldd	r22, Y+21	; 0x15
    274c:	7e 89       	ldd	r23, Y+22	; 0x16
    274e:	8f 89       	ldd	r24, Y+23	; 0x17
    2750:	98 8d       	ldd	r25, Y+24	; 0x18
    2752:	20 e0       	ldi	r18, 0x00	; 0
    2754:	3f ef       	ldi	r19, 0xFF	; 255
    2756:	4f e7       	ldi	r20, 0x7F	; 127
    2758:	57 e4       	ldi	r21, 0x47	; 71
    275a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    275e:	18 16       	cp	r1, r24
    2760:	4c f5       	brge	.+82     	; 0x27b4 <StepperMotor_VoidStepClockWise+0x532>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2762:	69 8d       	ldd	r22, Y+25	; 0x19
    2764:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2766:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2768:	9c 8d       	ldd	r25, Y+28	; 0x1c
    276a:	20 e0       	ldi	r18, 0x00	; 0
    276c:	30 e0       	ldi	r19, 0x00	; 0
    276e:	40 e2       	ldi	r20, 0x20	; 32
    2770:	51 e4       	ldi	r21, 0x41	; 65
    2772:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2776:	dc 01       	movw	r26, r24
    2778:	cb 01       	movw	r24, r22
    277a:	bc 01       	movw	r22, r24
    277c:	cd 01       	movw	r24, r26
    277e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2782:	dc 01       	movw	r26, r24
    2784:	cb 01       	movw	r24, r22
    2786:	9c 8b       	std	Y+20, r25	; 0x14
    2788:	8b 8b       	std	Y+19, r24	; 0x13
    278a:	0f c0       	rjmp	.+30     	; 0x27aa <StepperMotor_VoidStepClockWise+0x528>
    278c:	88 ec       	ldi	r24, 0xC8	; 200
    278e:	90 e0       	ldi	r25, 0x00	; 0
    2790:	9a 8b       	std	Y+18, r25	; 0x12
    2792:	89 8b       	std	Y+17, r24	; 0x11
    2794:	89 89       	ldd	r24, Y+17	; 0x11
    2796:	9a 89       	ldd	r25, Y+18	; 0x12
    2798:	01 97       	sbiw	r24, 0x01	; 1
    279a:	f1 f7       	brne	.-4      	; 0x2798 <StepperMotor_VoidStepClockWise+0x516>
    279c:	9a 8b       	std	Y+18, r25	; 0x12
    279e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27a0:	8b 89       	ldd	r24, Y+19	; 0x13
    27a2:	9c 89       	ldd	r25, Y+20	; 0x14
    27a4:	01 97       	sbiw	r24, 0x01	; 1
    27a6:	9c 8b       	std	Y+20, r25	; 0x14
    27a8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27aa:	8b 89       	ldd	r24, Y+19	; 0x13
    27ac:	9c 89       	ldd	r25, Y+20	; 0x14
    27ae:	00 97       	sbiw	r24, 0x00	; 0
    27b0:	69 f7       	brne	.-38     	; 0x278c <StepperMotor_VoidStepClockWise+0x50a>
    27b2:	14 c0       	rjmp	.+40     	; 0x27dc <StepperMotor_VoidStepClockWise+0x55a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27b4:	6d 89       	ldd	r22, Y+21	; 0x15
    27b6:	7e 89       	ldd	r23, Y+22	; 0x16
    27b8:	8f 89       	ldd	r24, Y+23	; 0x17
    27ba:	98 8d       	ldd	r25, Y+24	; 0x18
    27bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27c0:	dc 01       	movw	r26, r24
    27c2:	cb 01       	movw	r24, r22
    27c4:	9c 8b       	std	Y+20, r25	; 0x14
    27c6:	8b 8b       	std	Y+19, r24	; 0x13
    27c8:	8b 89       	ldd	r24, Y+19	; 0x13
    27ca:	9c 89       	ldd	r25, Y+20	; 0x14
    27cc:	98 8b       	std	Y+16, r25	; 0x10
    27ce:	8f 87       	std	Y+15, r24	; 0x0f
    27d0:	8f 85       	ldd	r24, Y+15	; 0x0f
    27d2:	98 89       	ldd	r25, Y+16	; 0x10
    27d4:	01 97       	sbiw	r24, 0x01	; 1
    27d6:	f1 f7       	brne	.-4      	; 0x27d4 <StepperMotor_VoidStepClockWise+0x552>
    27d8:	98 8b       	std	Y+16, r25	; 0x10
    27da:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(10);
		DIO_VoidSetPinValue(Copy_pStepMotor_st_Config->Motor_YellowPort, Copy_pStepMotor_st_Config->Motor_YellowPin , DIO_PIN_LOGIC_LOW);
    27dc:	fe 01       	movw	r30, r28
    27de:	e9 5b       	subi	r30, 0xB9	; 185
    27e0:	ff 4f       	sbci	r31, 0xFF	; 255
    27e2:	01 90       	ld	r0, Z+
    27e4:	f0 81       	ld	r31, Z
    27e6:	e0 2d       	mov	r30, r0
    27e8:	86 81       	ldd	r24, Z+6	; 0x06
    27ea:	86 95       	lsr	r24
    27ec:	86 95       	lsr	r24
    27ee:	83 70       	andi	r24, 0x03	; 3
    27f0:	28 2f       	mov	r18, r24
    27f2:	fe 01       	movw	r30, r28
    27f4:	e9 5b       	subi	r30, 0xB9	; 185
    27f6:	ff 4f       	sbci	r31, 0xFF	; 255
    27f8:	01 90       	ld	r0, Z+
    27fa:	f0 81       	ld	r31, Z
    27fc:	e0 2d       	mov	r30, r0
    27fe:	85 81       	ldd	r24, Z+5	; 0x05
    2800:	86 95       	lsr	r24
    2802:	86 95       	lsr	r24
    2804:	86 95       	lsr	r24
    2806:	87 70       	andi	r24, 0x07	; 7
    2808:	98 2f       	mov	r25, r24
    280a:	82 2f       	mov	r24, r18
    280c:	69 2f       	mov	r22, r25
    280e:	40 e0       	ldi	r20, 0x00	; 0
    2810:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <DIO_VoidSetPinValue>
    2814:	80 e0       	ldi	r24, 0x00	; 0
    2816:	90 e0       	ldi	r25, 0x00	; 0
    2818:	a0 e2       	ldi	r26, 0x20	; 32
    281a:	b1 e4       	ldi	r27, 0x41	; 65
    281c:	8b 87       	std	Y+11, r24	; 0x0b
    281e:	9c 87       	std	Y+12, r25	; 0x0c
    2820:	ad 87       	std	Y+13, r26	; 0x0d
    2822:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2824:	6b 85       	ldd	r22, Y+11	; 0x0b
    2826:	7c 85       	ldd	r23, Y+12	; 0x0c
    2828:	8d 85       	ldd	r24, Y+13	; 0x0d
    282a:	9e 85       	ldd	r25, Y+14	; 0x0e
    282c:	20 e0       	ldi	r18, 0x00	; 0
    282e:	30 e0       	ldi	r19, 0x00	; 0
    2830:	4a ef       	ldi	r20, 0xFA	; 250
    2832:	54 e4       	ldi	r21, 0x44	; 68
    2834:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2838:	dc 01       	movw	r26, r24
    283a:	cb 01       	movw	r24, r22
    283c:	8f 83       	std	Y+7, r24	; 0x07
    283e:	98 87       	std	Y+8, r25	; 0x08
    2840:	a9 87       	std	Y+9, r26	; 0x09
    2842:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2844:	6f 81       	ldd	r22, Y+7	; 0x07
    2846:	78 85       	ldd	r23, Y+8	; 0x08
    2848:	89 85       	ldd	r24, Y+9	; 0x09
    284a:	9a 85       	ldd	r25, Y+10	; 0x0a
    284c:	20 e0       	ldi	r18, 0x00	; 0
    284e:	30 e0       	ldi	r19, 0x00	; 0
    2850:	40 e8       	ldi	r20, 0x80	; 128
    2852:	5f e3       	ldi	r21, 0x3F	; 63
    2854:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2858:	88 23       	and	r24, r24
    285a:	2c f4       	brge	.+10     	; 0x2866 <StepperMotor_VoidStepClockWise+0x5e4>
		__ticks = 1;
    285c:	81 e0       	ldi	r24, 0x01	; 1
    285e:	90 e0       	ldi	r25, 0x00	; 0
    2860:	9e 83       	std	Y+6, r25	; 0x06
    2862:	8d 83       	std	Y+5, r24	; 0x05
    2864:	3f c0       	rjmp	.+126    	; 0x28e4 <StepperMotor_VoidStepClockWise+0x662>
	else if (__tmp > 65535)
    2866:	6f 81       	ldd	r22, Y+7	; 0x07
    2868:	78 85       	ldd	r23, Y+8	; 0x08
    286a:	89 85       	ldd	r24, Y+9	; 0x09
    286c:	9a 85       	ldd	r25, Y+10	; 0x0a
    286e:	20 e0       	ldi	r18, 0x00	; 0
    2870:	3f ef       	ldi	r19, 0xFF	; 255
    2872:	4f e7       	ldi	r20, 0x7F	; 127
    2874:	57 e4       	ldi	r21, 0x47	; 71
    2876:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    287a:	18 16       	cp	r1, r24
    287c:	4c f5       	brge	.+82     	; 0x28d0 <StepperMotor_VoidStepClockWise+0x64e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    287e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2880:	7c 85       	ldd	r23, Y+12	; 0x0c
    2882:	8d 85       	ldd	r24, Y+13	; 0x0d
    2884:	9e 85       	ldd	r25, Y+14	; 0x0e
    2886:	20 e0       	ldi	r18, 0x00	; 0
    2888:	30 e0       	ldi	r19, 0x00	; 0
    288a:	40 e2       	ldi	r20, 0x20	; 32
    288c:	51 e4       	ldi	r21, 0x41	; 65
    288e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2892:	dc 01       	movw	r26, r24
    2894:	cb 01       	movw	r24, r22
    2896:	bc 01       	movw	r22, r24
    2898:	cd 01       	movw	r24, r26
    289a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    289e:	dc 01       	movw	r26, r24
    28a0:	cb 01       	movw	r24, r22
    28a2:	9e 83       	std	Y+6, r25	; 0x06
    28a4:	8d 83       	std	Y+5, r24	; 0x05
    28a6:	0f c0       	rjmp	.+30     	; 0x28c6 <StepperMotor_VoidStepClockWise+0x644>
    28a8:	88 ec       	ldi	r24, 0xC8	; 200
    28aa:	90 e0       	ldi	r25, 0x00	; 0
    28ac:	9c 83       	std	Y+4, r25	; 0x04
    28ae:	8b 83       	std	Y+3, r24	; 0x03
    28b0:	8b 81       	ldd	r24, Y+3	; 0x03
    28b2:	9c 81       	ldd	r25, Y+4	; 0x04
    28b4:	01 97       	sbiw	r24, 0x01	; 1
    28b6:	f1 f7       	brne	.-4      	; 0x28b4 <StepperMotor_VoidStepClockWise+0x632>
    28b8:	9c 83       	std	Y+4, r25	; 0x04
    28ba:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28bc:	8d 81       	ldd	r24, Y+5	; 0x05
    28be:	9e 81       	ldd	r25, Y+6	; 0x06
    28c0:	01 97       	sbiw	r24, 0x01	; 1
    28c2:	9e 83       	std	Y+6, r25	; 0x06
    28c4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28c6:	8d 81       	ldd	r24, Y+5	; 0x05
    28c8:	9e 81       	ldd	r25, Y+6	; 0x06
    28ca:	00 97       	sbiw	r24, 0x00	; 0
    28cc:	69 f7       	brne	.-38     	; 0x28a8 <StepperMotor_VoidStepClockWise+0x626>
    28ce:	14 c0       	rjmp	.+40     	; 0x28f8 <StepperMotor_VoidStepClockWise+0x676>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28d0:	6f 81       	ldd	r22, Y+7	; 0x07
    28d2:	78 85       	ldd	r23, Y+8	; 0x08
    28d4:	89 85       	ldd	r24, Y+9	; 0x09
    28d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    28d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28dc:	dc 01       	movw	r26, r24
    28de:	cb 01       	movw	r24, r22
    28e0:	9e 83       	std	Y+6, r25	; 0x06
    28e2:	8d 83       	std	Y+5, r24	; 0x05
    28e4:	8d 81       	ldd	r24, Y+5	; 0x05
    28e6:	9e 81       	ldd	r25, Y+6	; 0x06
    28e8:	9a 83       	std	Y+2, r25	; 0x02
    28ea:	89 83       	std	Y+1, r24	; 0x01
    28ec:	89 81       	ldd	r24, Y+1	; 0x01
    28ee:	9a 81       	ldd	r25, Y+2	; 0x02
    28f0:	01 97       	sbiw	r24, 0x01	; 1
    28f2:	f1 f7       	brne	.-4      	; 0x28f0 <StepperMotor_VoidStepClockWise+0x66e>
    28f4:	9a 83       	std	Y+2, r25	; 0x02
    28f6:	89 83       	std	Y+1, r24	; 0x01
	else
	{

	}
	return;
}
    28f8:	c8 5b       	subi	r28, 0xB8	; 184
    28fa:	df 4f       	sbci	r29, 0xFF	; 255
    28fc:	0f b6       	in	r0, 0x3f	; 63
    28fe:	f8 94       	cli
    2900:	de bf       	out	0x3e, r29	; 62
    2902:	0f be       	out	0x3f, r0	; 63
    2904:	cd bf       	out	0x3d, r28	; 61
    2906:	cf 91       	pop	r28
    2908:	df 91       	pop	r29
    290a:	1f 91       	pop	r17
    290c:	0f 91       	pop	r16
    290e:	08 95       	ret

00002910 <StepperMotor_VoidStepAntiClockWise>:

void StepperMotor_VoidStepAntiClockWise(const StepMotor_st* Copy_pStepMotor_st_Config)
{
    2910:	0f 93       	push	r16
    2912:	1f 93       	push	r17
    2914:	df 93       	push	r29
    2916:	cf 93       	push	r28
    2918:	cd b7       	in	r28, 0x3d	; 61
    291a:	de b7       	in	r29, 0x3e	; 62
    291c:	c8 54       	subi	r28, 0x48	; 72
    291e:	d0 40       	sbci	r29, 0x00	; 0
    2920:	0f b6       	in	r0, 0x3f	; 63
    2922:	f8 94       	cli
    2924:	de bf       	out	0x3e, r29	; 62
    2926:	0f be       	out	0x3f, r0	; 63
    2928:	cd bf       	out	0x3d, r28	; 61
    292a:	fe 01       	movw	r30, r28
    292c:	e9 5b       	subi	r30, 0xB9	; 185
    292e:	ff 4f       	sbci	r31, 0xFF	; 255
    2930:	91 83       	std	Z+1, r25	; 0x01
    2932:	80 83       	st	Z, r24
	if(Copy_pStepMotor_st_Config)
    2934:	fe 01       	movw	r30, r28
    2936:	e9 5b       	subi	r30, 0xB9	; 185
    2938:	ff 4f       	sbci	r31, 0xFF	; 255
    293a:	80 81       	ld	r24, Z
    293c:	91 81       	ldd	r25, Z+1	; 0x01
    293e:	00 97       	sbiw	r24, 0x00	; 0
    2940:	09 f4       	brne	.+2      	; 0x2944 <StepperMotor_VoidStepAntiClockWise+0x34>
    2942:	21 c3       	rjmp	.+1602   	; 0x2f86 <StepperMotor_VoidStepAntiClockWise+0x676>
	{
		DIO_VoidSetPinValue(Copy_pStepMotor_st_Config->Motor_OrangePort, Copy_pStepMotor_st_Config->Motor_OrangePin , DIO_PIN_LOGIC_HIGH);
    2944:	fe 01       	movw	r30, r28
    2946:	e9 5b       	subi	r30, 0xB9	; 185
    2948:	ff 4f       	sbci	r31, 0xFF	; 255
    294a:	01 90       	ld	r0, Z+
    294c:	f0 81       	ld	r31, Z
    294e:	e0 2d       	mov	r30, r0
    2950:	86 81       	ldd	r24, Z+6	; 0x06
    2952:	83 70       	andi	r24, 0x03	; 3
    2954:	28 2f       	mov	r18, r24
    2956:	fe 01       	movw	r30, r28
    2958:	e9 5b       	subi	r30, 0xB9	; 185
    295a:	ff 4f       	sbci	r31, 0xFF	; 255
    295c:	01 90       	ld	r0, Z+
    295e:	f0 81       	ld	r31, Z
    2960:	e0 2d       	mov	r30, r0
    2962:	85 81       	ldd	r24, Z+5	; 0x05
    2964:	87 70       	andi	r24, 0x07	; 7
    2966:	98 2f       	mov	r25, r24
    2968:	82 2f       	mov	r24, r18
    296a:	69 2f       	mov	r22, r25
    296c:	41 e0       	ldi	r20, 0x01	; 1
    296e:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <DIO_VoidSetPinValue>
    2972:	fe 01       	movw	r30, r28
    2974:	ed 5b       	subi	r30, 0xBD	; 189
    2976:	ff 4f       	sbci	r31, 0xFF	; 255
    2978:	80 e0       	ldi	r24, 0x00	; 0
    297a:	90 e0       	ldi	r25, 0x00	; 0
    297c:	a0 e2       	ldi	r26, 0x20	; 32
    297e:	b1 e4       	ldi	r27, 0x41	; 65
    2980:	80 83       	st	Z, r24
    2982:	91 83       	std	Z+1, r25	; 0x01
    2984:	a2 83       	std	Z+2, r26	; 0x02
    2986:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2988:	8e 01       	movw	r16, r28
    298a:	01 5c       	subi	r16, 0xC1	; 193
    298c:	1f 4f       	sbci	r17, 0xFF	; 255
    298e:	fe 01       	movw	r30, r28
    2990:	ed 5b       	subi	r30, 0xBD	; 189
    2992:	ff 4f       	sbci	r31, 0xFF	; 255
    2994:	60 81       	ld	r22, Z
    2996:	71 81       	ldd	r23, Z+1	; 0x01
    2998:	82 81       	ldd	r24, Z+2	; 0x02
    299a:	93 81       	ldd	r25, Z+3	; 0x03
    299c:	20 e0       	ldi	r18, 0x00	; 0
    299e:	30 e0       	ldi	r19, 0x00	; 0
    29a0:	4a ef       	ldi	r20, 0xFA	; 250
    29a2:	54 e4       	ldi	r21, 0x44	; 68
    29a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29a8:	dc 01       	movw	r26, r24
    29aa:	cb 01       	movw	r24, r22
    29ac:	f8 01       	movw	r30, r16
    29ae:	80 83       	st	Z, r24
    29b0:	91 83       	std	Z+1, r25	; 0x01
    29b2:	a2 83       	std	Z+2, r26	; 0x02
    29b4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    29b6:	fe 01       	movw	r30, r28
    29b8:	ff 96       	adiw	r30, 0x3f	; 63
    29ba:	60 81       	ld	r22, Z
    29bc:	71 81       	ldd	r23, Z+1	; 0x01
    29be:	82 81       	ldd	r24, Z+2	; 0x02
    29c0:	93 81       	ldd	r25, Z+3	; 0x03
    29c2:	20 e0       	ldi	r18, 0x00	; 0
    29c4:	30 e0       	ldi	r19, 0x00	; 0
    29c6:	40 e8       	ldi	r20, 0x80	; 128
    29c8:	5f e3       	ldi	r21, 0x3F	; 63
    29ca:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    29ce:	88 23       	and	r24, r24
    29d0:	2c f4       	brge	.+10     	; 0x29dc <StepperMotor_VoidStepAntiClockWise+0xcc>
		__ticks = 1;
    29d2:	81 e0       	ldi	r24, 0x01	; 1
    29d4:	90 e0       	ldi	r25, 0x00	; 0
    29d6:	9e af       	std	Y+62, r25	; 0x3e
    29d8:	8d af       	std	Y+61, r24	; 0x3d
    29da:	46 c0       	rjmp	.+140    	; 0x2a68 <StepperMotor_VoidStepAntiClockWise+0x158>
	else if (__tmp > 65535)
    29dc:	fe 01       	movw	r30, r28
    29de:	ff 96       	adiw	r30, 0x3f	; 63
    29e0:	60 81       	ld	r22, Z
    29e2:	71 81       	ldd	r23, Z+1	; 0x01
    29e4:	82 81       	ldd	r24, Z+2	; 0x02
    29e6:	93 81       	ldd	r25, Z+3	; 0x03
    29e8:	20 e0       	ldi	r18, 0x00	; 0
    29ea:	3f ef       	ldi	r19, 0xFF	; 255
    29ec:	4f e7       	ldi	r20, 0x7F	; 127
    29ee:	57 e4       	ldi	r21, 0x47	; 71
    29f0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    29f4:	18 16       	cp	r1, r24
    29f6:	64 f5       	brge	.+88     	; 0x2a50 <StepperMotor_VoidStepAntiClockWise+0x140>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29f8:	fe 01       	movw	r30, r28
    29fa:	ed 5b       	subi	r30, 0xBD	; 189
    29fc:	ff 4f       	sbci	r31, 0xFF	; 255
    29fe:	60 81       	ld	r22, Z
    2a00:	71 81       	ldd	r23, Z+1	; 0x01
    2a02:	82 81       	ldd	r24, Z+2	; 0x02
    2a04:	93 81       	ldd	r25, Z+3	; 0x03
    2a06:	20 e0       	ldi	r18, 0x00	; 0
    2a08:	30 e0       	ldi	r19, 0x00	; 0
    2a0a:	40 e2       	ldi	r20, 0x20	; 32
    2a0c:	51 e4       	ldi	r21, 0x41	; 65
    2a0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a12:	dc 01       	movw	r26, r24
    2a14:	cb 01       	movw	r24, r22
    2a16:	bc 01       	movw	r22, r24
    2a18:	cd 01       	movw	r24, r26
    2a1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a1e:	dc 01       	movw	r26, r24
    2a20:	cb 01       	movw	r24, r22
    2a22:	9e af       	std	Y+62, r25	; 0x3e
    2a24:	8d af       	std	Y+61, r24	; 0x3d
    2a26:	0f c0       	rjmp	.+30     	; 0x2a46 <StepperMotor_VoidStepAntiClockWise+0x136>
    2a28:	88 ec       	ldi	r24, 0xC8	; 200
    2a2a:	90 e0       	ldi	r25, 0x00	; 0
    2a2c:	9c af       	std	Y+60, r25	; 0x3c
    2a2e:	8b af       	std	Y+59, r24	; 0x3b
    2a30:	8b ad       	ldd	r24, Y+59	; 0x3b
    2a32:	9c ad       	ldd	r25, Y+60	; 0x3c
    2a34:	01 97       	sbiw	r24, 0x01	; 1
    2a36:	f1 f7       	brne	.-4      	; 0x2a34 <StepperMotor_VoidStepAntiClockWise+0x124>
    2a38:	9c af       	std	Y+60, r25	; 0x3c
    2a3a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a3c:	8d ad       	ldd	r24, Y+61	; 0x3d
    2a3e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2a40:	01 97       	sbiw	r24, 0x01	; 1
    2a42:	9e af       	std	Y+62, r25	; 0x3e
    2a44:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a46:	8d ad       	ldd	r24, Y+61	; 0x3d
    2a48:	9e ad       	ldd	r25, Y+62	; 0x3e
    2a4a:	00 97       	sbiw	r24, 0x00	; 0
    2a4c:	69 f7       	brne	.-38     	; 0x2a28 <StepperMotor_VoidStepAntiClockWise+0x118>
    2a4e:	16 c0       	rjmp	.+44     	; 0x2a7c <StepperMotor_VoidStepAntiClockWise+0x16c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a50:	fe 01       	movw	r30, r28
    2a52:	ff 96       	adiw	r30, 0x3f	; 63
    2a54:	60 81       	ld	r22, Z
    2a56:	71 81       	ldd	r23, Z+1	; 0x01
    2a58:	82 81       	ldd	r24, Z+2	; 0x02
    2a5a:	93 81       	ldd	r25, Z+3	; 0x03
    2a5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a60:	dc 01       	movw	r26, r24
    2a62:	cb 01       	movw	r24, r22
    2a64:	9e af       	std	Y+62, r25	; 0x3e
    2a66:	8d af       	std	Y+61, r24	; 0x3d
    2a68:	8d ad       	ldd	r24, Y+61	; 0x3d
    2a6a:	9e ad       	ldd	r25, Y+62	; 0x3e
    2a6c:	9a af       	std	Y+58, r25	; 0x3a
    2a6e:	89 af       	std	Y+57, r24	; 0x39
    2a70:	89 ad       	ldd	r24, Y+57	; 0x39
    2a72:	9a ad       	ldd	r25, Y+58	; 0x3a
    2a74:	01 97       	sbiw	r24, 0x01	; 1
    2a76:	f1 f7       	brne	.-4      	; 0x2a74 <StepperMotor_VoidStepAntiClockWise+0x164>
    2a78:	9a af       	std	Y+58, r25	; 0x3a
    2a7a:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(10);

		DIO_VoidSetPinValue(Copy_pStepMotor_st_Config->Motor_OrangePort, Copy_pStepMotor_st_Config->Motor_OrangePin , DIO_PIN_LOGIC_LOW);
    2a7c:	fe 01       	movw	r30, r28
    2a7e:	e9 5b       	subi	r30, 0xB9	; 185
    2a80:	ff 4f       	sbci	r31, 0xFF	; 255
    2a82:	01 90       	ld	r0, Z+
    2a84:	f0 81       	ld	r31, Z
    2a86:	e0 2d       	mov	r30, r0
    2a88:	86 81       	ldd	r24, Z+6	; 0x06
    2a8a:	83 70       	andi	r24, 0x03	; 3
    2a8c:	28 2f       	mov	r18, r24
    2a8e:	fe 01       	movw	r30, r28
    2a90:	e9 5b       	subi	r30, 0xB9	; 185
    2a92:	ff 4f       	sbci	r31, 0xFF	; 255
    2a94:	01 90       	ld	r0, Z+
    2a96:	f0 81       	ld	r31, Z
    2a98:	e0 2d       	mov	r30, r0
    2a9a:	85 81       	ldd	r24, Z+5	; 0x05
    2a9c:	87 70       	andi	r24, 0x07	; 7
    2a9e:	98 2f       	mov	r25, r24
    2aa0:	82 2f       	mov	r24, r18
    2aa2:	69 2f       	mov	r22, r25
    2aa4:	40 e0       	ldi	r20, 0x00	; 0
    2aa6:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <DIO_VoidSetPinValue>
		DIO_VoidSetPinValue(Copy_pStepMotor_st_Config->Motor_YellowPort, Copy_pStepMotor_st_Config->Motor_YellowPin , DIO_PIN_LOGIC_HIGH);
    2aaa:	fe 01       	movw	r30, r28
    2aac:	e9 5b       	subi	r30, 0xB9	; 185
    2aae:	ff 4f       	sbci	r31, 0xFF	; 255
    2ab0:	01 90       	ld	r0, Z+
    2ab2:	f0 81       	ld	r31, Z
    2ab4:	e0 2d       	mov	r30, r0
    2ab6:	86 81       	ldd	r24, Z+6	; 0x06
    2ab8:	86 95       	lsr	r24
    2aba:	86 95       	lsr	r24
    2abc:	83 70       	andi	r24, 0x03	; 3
    2abe:	28 2f       	mov	r18, r24
    2ac0:	fe 01       	movw	r30, r28
    2ac2:	e9 5b       	subi	r30, 0xB9	; 185
    2ac4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ac6:	01 90       	ld	r0, Z+
    2ac8:	f0 81       	ld	r31, Z
    2aca:	e0 2d       	mov	r30, r0
    2acc:	85 81       	ldd	r24, Z+5	; 0x05
    2ace:	86 95       	lsr	r24
    2ad0:	86 95       	lsr	r24
    2ad2:	86 95       	lsr	r24
    2ad4:	87 70       	andi	r24, 0x07	; 7
    2ad6:	98 2f       	mov	r25, r24
    2ad8:	82 2f       	mov	r24, r18
    2ada:	69 2f       	mov	r22, r25
    2adc:	41 e0       	ldi	r20, 0x01	; 1
    2ade:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <DIO_VoidSetPinValue>
    2ae2:	80 e0       	ldi	r24, 0x00	; 0
    2ae4:	90 e0       	ldi	r25, 0x00	; 0
    2ae6:	a0 e2       	ldi	r26, 0x20	; 32
    2ae8:	b1 e4       	ldi	r27, 0x41	; 65
    2aea:	8d ab       	std	Y+53, r24	; 0x35
    2aec:	9e ab       	std	Y+54, r25	; 0x36
    2aee:	af ab       	std	Y+55, r26	; 0x37
    2af0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2af2:	6d a9       	ldd	r22, Y+53	; 0x35
    2af4:	7e a9       	ldd	r23, Y+54	; 0x36
    2af6:	8f a9       	ldd	r24, Y+55	; 0x37
    2af8:	98 ad       	ldd	r25, Y+56	; 0x38
    2afa:	20 e0       	ldi	r18, 0x00	; 0
    2afc:	30 e0       	ldi	r19, 0x00	; 0
    2afe:	4a ef       	ldi	r20, 0xFA	; 250
    2b00:	54 e4       	ldi	r21, 0x44	; 68
    2b02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b06:	dc 01       	movw	r26, r24
    2b08:	cb 01       	movw	r24, r22
    2b0a:	89 ab       	std	Y+49, r24	; 0x31
    2b0c:	9a ab       	std	Y+50, r25	; 0x32
    2b0e:	ab ab       	std	Y+51, r26	; 0x33
    2b10:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2b12:	69 a9       	ldd	r22, Y+49	; 0x31
    2b14:	7a a9       	ldd	r23, Y+50	; 0x32
    2b16:	8b a9       	ldd	r24, Y+51	; 0x33
    2b18:	9c a9       	ldd	r25, Y+52	; 0x34
    2b1a:	20 e0       	ldi	r18, 0x00	; 0
    2b1c:	30 e0       	ldi	r19, 0x00	; 0
    2b1e:	40 e8       	ldi	r20, 0x80	; 128
    2b20:	5f e3       	ldi	r21, 0x3F	; 63
    2b22:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b26:	88 23       	and	r24, r24
    2b28:	2c f4       	brge	.+10     	; 0x2b34 <StepperMotor_VoidStepAntiClockWise+0x224>
		__ticks = 1;
    2b2a:	81 e0       	ldi	r24, 0x01	; 1
    2b2c:	90 e0       	ldi	r25, 0x00	; 0
    2b2e:	98 ab       	std	Y+48, r25	; 0x30
    2b30:	8f a7       	std	Y+47, r24	; 0x2f
    2b32:	3f c0       	rjmp	.+126    	; 0x2bb2 <StepperMotor_VoidStepAntiClockWise+0x2a2>
	else if (__tmp > 65535)
    2b34:	69 a9       	ldd	r22, Y+49	; 0x31
    2b36:	7a a9       	ldd	r23, Y+50	; 0x32
    2b38:	8b a9       	ldd	r24, Y+51	; 0x33
    2b3a:	9c a9       	ldd	r25, Y+52	; 0x34
    2b3c:	20 e0       	ldi	r18, 0x00	; 0
    2b3e:	3f ef       	ldi	r19, 0xFF	; 255
    2b40:	4f e7       	ldi	r20, 0x7F	; 127
    2b42:	57 e4       	ldi	r21, 0x47	; 71
    2b44:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b48:	18 16       	cp	r1, r24
    2b4a:	4c f5       	brge	.+82     	; 0x2b9e <StepperMotor_VoidStepAntiClockWise+0x28e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b4c:	6d a9       	ldd	r22, Y+53	; 0x35
    2b4e:	7e a9       	ldd	r23, Y+54	; 0x36
    2b50:	8f a9       	ldd	r24, Y+55	; 0x37
    2b52:	98 ad       	ldd	r25, Y+56	; 0x38
    2b54:	20 e0       	ldi	r18, 0x00	; 0
    2b56:	30 e0       	ldi	r19, 0x00	; 0
    2b58:	40 e2       	ldi	r20, 0x20	; 32
    2b5a:	51 e4       	ldi	r21, 0x41	; 65
    2b5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b60:	dc 01       	movw	r26, r24
    2b62:	cb 01       	movw	r24, r22
    2b64:	bc 01       	movw	r22, r24
    2b66:	cd 01       	movw	r24, r26
    2b68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b6c:	dc 01       	movw	r26, r24
    2b6e:	cb 01       	movw	r24, r22
    2b70:	98 ab       	std	Y+48, r25	; 0x30
    2b72:	8f a7       	std	Y+47, r24	; 0x2f
    2b74:	0f c0       	rjmp	.+30     	; 0x2b94 <StepperMotor_VoidStepAntiClockWise+0x284>
    2b76:	88 ec       	ldi	r24, 0xC8	; 200
    2b78:	90 e0       	ldi	r25, 0x00	; 0
    2b7a:	9e a7       	std	Y+46, r25	; 0x2e
    2b7c:	8d a7       	std	Y+45, r24	; 0x2d
    2b7e:	8d a5       	ldd	r24, Y+45	; 0x2d
    2b80:	9e a5       	ldd	r25, Y+46	; 0x2e
    2b82:	01 97       	sbiw	r24, 0x01	; 1
    2b84:	f1 f7       	brne	.-4      	; 0x2b82 <StepperMotor_VoidStepAntiClockWise+0x272>
    2b86:	9e a7       	std	Y+46, r25	; 0x2e
    2b88:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b8a:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b8c:	98 a9       	ldd	r25, Y+48	; 0x30
    2b8e:	01 97       	sbiw	r24, 0x01	; 1
    2b90:	98 ab       	std	Y+48, r25	; 0x30
    2b92:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b94:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b96:	98 a9       	ldd	r25, Y+48	; 0x30
    2b98:	00 97       	sbiw	r24, 0x00	; 0
    2b9a:	69 f7       	brne	.-38     	; 0x2b76 <StepperMotor_VoidStepAntiClockWise+0x266>
    2b9c:	14 c0       	rjmp	.+40     	; 0x2bc6 <StepperMotor_VoidStepAntiClockWise+0x2b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b9e:	69 a9       	ldd	r22, Y+49	; 0x31
    2ba0:	7a a9       	ldd	r23, Y+50	; 0x32
    2ba2:	8b a9       	ldd	r24, Y+51	; 0x33
    2ba4:	9c a9       	ldd	r25, Y+52	; 0x34
    2ba6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2baa:	dc 01       	movw	r26, r24
    2bac:	cb 01       	movw	r24, r22
    2bae:	98 ab       	std	Y+48, r25	; 0x30
    2bb0:	8f a7       	std	Y+47, r24	; 0x2f
    2bb2:	8f a5       	ldd	r24, Y+47	; 0x2f
    2bb4:	98 a9       	ldd	r25, Y+48	; 0x30
    2bb6:	9c a7       	std	Y+44, r25	; 0x2c
    2bb8:	8b a7       	std	Y+43, r24	; 0x2b
    2bba:	8b a5       	ldd	r24, Y+43	; 0x2b
    2bbc:	9c a5       	ldd	r25, Y+44	; 0x2c
    2bbe:	01 97       	sbiw	r24, 0x01	; 1
    2bc0:	f1 f7       	brne	.-4      	; 0x2bbe <StepperMotor_VoidStepAntiClockWise+0x2ae>
    2bc2:	9c a7       	std	Y+44, r25	; 0x2c
    2bc4:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(10);

		DIO_VoidSetPinValue(Copy_pStepMotor_st_Config->Motor_YellowPort , Copy_pStepMotor_st_Config->Motor_YellowPin , DIO_PIN_LOGIC_LOW);
    2bc6:	fe 01       	movw	r30, r28
    2bc8:	e9 5b       	subi	r30, 0xB9	; 185
    2bca:	ff 4f       	sbci	r31, 0xFF	; 255
    2bcc:	01 90       	ld	r0, Z+
    2bce:	f0 81       	ld	r31, Z
    2bd0:	e0 2d       	mov	r30, r0
    2bd2:	86 81       	ldd	r24, Z+6	; 0x06
    2bd4:	86 95       	lsr	r24
    2bd6:	86 95       	lsr	r24
    2bd8:	83 70       	andi	r24, 0x03	; 3
    2bda:	28 2f       	mov	r18, r24
    2bdc:	fe 01       	movw	r30, r28
    2bde:	e9 5b       	subi	r30, 0xB9	; 185
    2be0:	ff 4f       	sbci	r31, 0xFF	; 255
    2be2:	01 90       	ld	r0, Z+
    2be4:	f0 81       	ld	r31, Z
    2be6:	e0 2d       	mov	r30, r0
    2be8:	85 81       	ldd	r24, Z+5	; 0x05
    2bea:	86 95       	lsr	r24
    2bec:	86 95       	lsr	r24
    2bee:	86 95       	lsr	r24
    2bf0:	87 70       	andi	r24, 0x07	; 7
    2bf2:	98 2f       	mov	r25, r24
    2bf4:	82 2f       	mov	r24, r18
    2bf6:	69 2f       	mov	r22, r25
    2bf8:	40 e0       	ldi	r20, 0x00	; 0
    2bfa:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <DIO_VoidSetPinValue>
		DIO_VoidSetPinValue(Copy_pStepMotor_st_Config->Motor_PinkPort, Copy_pStepMotor_st_Config->Motor_PinkPin , DIO_PIN_LOGIC_HIGH);
    2bfe:	fe 01       	movw	r30, r28
    2c00:	e9 5b       	subi	r30, 0xB9	; 185
    2c02:	ff 4f       	sbci	r31, 0xFF	; 255
    2c04:	01 90       	ld	r0, Z+
    2c06:	f0 81       	ld	r31, Z
    2c08:	e0 2d       	mov	r30, r0
    2c0a:	85 81       	ldd	r24, Z+5	; 0x05
    2c0c:	82 95       	swap	r24
    2c0e:	86 95       	lsr	r24
    2c10:	86 95       	lsr	r24
    2c12:	83 70       	andi	r24, 0x03	; 3
    2c14:	28 2f       	mov	r18, r24
    2c16:	fe 01       	movw	r30, r28
    2c18:	e9 5b       	subi	r30, 0xB9	; 185
    2c1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c1c:	01 90       	ld	r0, Z+
    2c1e:	f0 81       	ld	r31, Z
    2c20:	e0 2d       	mov	r30, r0
    2c22:	84 81       	ldd	r24, Z+4	; 0x04
    2c24:	86 95       	lsr	r24
    2c26:	86 95       	lsr	r24
    2c28:	86 95       	lsr	r24
    2c2a:	87 70       	andi	r24, 0x07	; 7
    2c2c:	98 2f       	mov	r25, r24
    2c2e:	82 2f       	mov	r24, r18
    2c30:	69 2f       	mov	r22, r25
    2c32:	41 e0       	ldi	r20, 0x01	; 1
    2c34:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <DIO_VoidSetPinValue>
    2c38:	80 e0       	ldi	r24, 0x00	; 0
    2c3a:	90 e0       	ldi	r25, 0x00	; 0
    2c3c:	a0 e2       	ldi	r26, 0x20	; 32
    2c3e:	b1 e4       	ldi	r27, 0x41	; 65
    2c40:	8f a3       	std	Y+39, r24	; 0x27
    2c42:	98 a7       	std	Y+40, r25	; 0x28
    2c44:	a9 a7       	std	Y+41, r26	; 0x29
    2c46:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c48:	6f a1       	ldd	r22, Y+39	; 0x27
    2c4a:	78 a5       	ldd	r23, Y+40	; 0x28
    2c4c:	89 a5       	ldd	r24, Y+41	; 0x29
    2c4e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2c50:	20 e0       	ldi	r18, 0x00	; 0
    2c52:	30 e0       	ldi	r19, 0x00	; 0
    2c54:	4a ef       	ldi	r20, 0xFA	; 250
    2c56:	54 e4       	ldi	r21, 0x44	; 68
    2c58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c5c:	dc 01       	movw	r26, r24
    2c5e:	cb 01       	movw	r24, r22
    2c60:	8b a3       	std	Y+35, r24	; 0x23
    2c62:	9c a3       	std	Y+36, r25	; 0x24
    2c64:	ad a3       	std	Y+37, r26	; 0x25
    2c66:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2c68:	6b a1       	ldd	r22, Y+35	; 0x23
    2c6a:	7c a1       	ldd	r23, Y+36	; 0x24
    2c6c:	8d a1       	ldd	r24, Y+37	; 0x25
    2c6e:	9e a1       	ldd	r25, Y+38	; 0x26
    2c70:	20 e0       	ldi	r18, 0x00	; 0
    2c72:	30 e0       	ldi	r19, 0x00	; 0
    2c74:	40 e8       	ldi	r20, 0x80	; 128
    2c76:	5f e3       	ldi	r21, 0x3F	; 63
    2c78:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c7c:	88 23       	and	r24, r24
    2c7e:	2c f4       	brge	.+10     	; 0x2c8a <StepperMotor_VoidStepAntiClockWise+0x37a>
		__ticks = 1;
    2c80:	81 e0       	ldi	r24, 0x01	; 1
    2c82:	90 e0       	ldi	r25, 0x00	; 0
    2c84:	9a a3       	std	Y+34, r25	; 0x22
    2c86:	89 a3       	std	Y+33, r24	; 0x21
    2c88:	3f c0       	rjmp	.+126    	; 0x2d08 <StepperMotor_VoidStepAntiClockWise+0x3f8>
	else if (__tmp > 65535)
    2c8a:	6b a1       	ldd	r22, Y+35	; 0x23
    2c8c:	7c a1       	ldd	r23, Y+36	; 0x24
    2c8e:	8d a1       	ldd	r24, Y+37	; 0x25
    2c90:	9e a1       	ldd	r25, Y+38	; 0x26
    2c92:	20 e0       	ldi	r18, 0x00	; 0
    2c94:	3f ef       	ldi	r19, 0xFF	; 255
    2c96:	4f e7       	ldi	r20, 0x7F	; 127
    2c98:	57 e4       	ldi	r21, 0x47	; 71
    2c9a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c9e:	18 16       	cp	r1, r24
    2ca0:	4c f5       	brge	.+82     	; 0x2cf4 <StepperMotor_VoidStepAntiClockWise+0x3e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ca2:	6f a1       	ldd	r22, Y+39	; 0x27
    2ca4:	78 a5       	ldd	r23, Y+40	; 0x28
    2ca6:	89 a5       	ldd	r24, Y+41	; 0x29
    2ca8:	9a a5       	ldd	r25, Y+42	; 0x2a
    2caa:	20 e0       	ldi	r18, 0x00	; 0
    2cac:	30 e0       	ldi	r19, 0x00	; 0
    2cae:	40 e2       	ldi	r20, 0x20	; 32
    2cb0:	51 e4       	ldi	r21, 0x41	; 65
    2cb2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cb6:	dc 01       	movw	r26, r24
    2cb8:	cb 01       	movw	r24, r22
    2cba:	bc 01       	movw	r22, r24
    2cbc:	cd 01       	movw	r24, r26
    2cbe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cc2:	dc 01       	movw	r26, r24
    2cc4:	cb 01       	movw	r24, r22
    2cc6:	9a a3       	std	Y+34, r25	; 0x22
    2cc8:	89 a3       	std	Y+33, r24	; 0x21
    2cca:	0f c0       	rjmp	.+30     	; 0x2cea <StepperMotor_VoidStepAntiClockWise+0x3da>
    2ccc:	88 ec       	ldi	r24, 0xC8	; 200
    2cce:	90 e0       	ldi	r25, 0x00	; 0
    2cd0:	98 a3       	std	Y+32, r25	; 0x20
    2cd2:	8f 8f       	std	Y+31, r24	; 0x1f
    2cd4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2cd6:	98 a1       	ldd	r25, Y+32	; 0x20
    2cd8:	01 97       	sbiw	r24, 0x01	; 1
    2cda:	f1 f7       	brne	.-4      	; 0x2cd8 <StepperMotor_VoidStepAntiClockWise+0x3c8>
    2cdc:	98 a3       	std	Y+32, r25	; 0x20
    2cde:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ce0:	89 a1       	ldd	r24, Y+33	; 0x21
    2ce2:	9a a1       	ldd	r25, Y+34	; 0x22
    2ce4:	01 97       	sbiw	r24, 0x01	; 1
    2ce6:	9a a3       	std	Y+34, r25	; 0x22
    2ce8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cea:	89 a1       	ldd	r24, Y+33	; 0x21
    2cec:	9a a1       	ldd	r25, Y+34	; 0x22
    2cee:	00 97       	sbiw	r24, 0x00	; 0
    2cf0:	69 f7       	brne	.-38     	; 0x2ccc <StepperMotor_VoidStepAntiClockWise+0x3bc>
    2cf2:	14 c0       	rjmp	.+40     	; 0x2d1c <StepperMotor_VoidStepAntiClockWise+0x40c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cf4:	6b a1       	ldd	r22, Y+35	; 0x23
    2cf6:	7c a1       	ldd	r23, Y+36	; 0x24
    2cf8:	8d a1       	ldd	r24, Y+37	; 0x25
    2cfa:	9e a1       	ldd	r25, Y+38	; 0x26
    2cfc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d00:	dc 01       	movw	r26, r24
    2d02:	cb 01       	movw	r24, r22
    2d04:	9a a3       	std	Y+34, r25	; 0x22
    2d06:	89 a3       	std	Y+33, r24	; 0x21
    2d08:	89 a1       	ldd	r24, Y+33	; 0x21
    2d0a:	9a a1       	ldd	r25, Y+34	; 0x22
    2d0c:	9e 8f       	std	Y+30, r25	; 0x1e
    2d0e:	8d 8f       	std	Y+29, r24	; 0x1d
    2d10:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2d12:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2d14:	01 97       	sbiw	r24, 0x01	; 1
    2d16:	f1 f7       	brne	.-4      	; 0x2d14 <StepperMotor_VoidStepAntiClockWise+0x404>
    2d18:	9e 8f       	std	Y+30, r25	; 0x1e
    2d1a:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(10);
		DIO_VoidSetPinValue(Copy_pStepMotor_st_Config->Motor_PinkPort, Copy_pStepMotor_st_Config->Motor_PinkPin , DIO_PIN_LOGIC_LOW);
    2d1c:	fe 01       	movw	r30, r28
    2d1e:	e9 5b       	subi	r30, 0xB9	; 185
    2d20:	ff 4f       	sbci	r31, 0xFF	; 255
    2d22:	01 90       	ld	r0, Z+
    2d24:	f0 81       	ld	r31, Z
    2d26:	e0 2d       	mov	r30, r0
    2d28:	85 81       	ldd	r24, Z+5	; 0x05
    2d2a:	82 95       	swap	r24
    2d2c:	86 95       	lsr	r24
    2d2e:	86 95       	lsr	r24
    2d30:	83 70       	andi	r24, 0x03	; 3
    2d32:	28 2f       	mov	r18, r24
    2d34:	fe 01       	movw	r30, r28
    2d36:	e9 5b       	subi	r30, 0xB9	; 185
    2d38:	ff 4f       	sbci	r31, 0xFF	; 255
    2d3a:	01 90       	ld	r0, Z+
    2d3c:	f0 81       	ld	r31, Z
    2d3e:	e0 2d       	mov	r30, r0
    2d40:	84 81       	ldd	r24, Z+4	; 0x04
    2d42:	86 95       	lsr	r24
    2d44:	86 95       	lsr	r24
    2d46:	86 95       	lsr	r24
    2d48:	87 70       	andi	r24, 0x07	; 7
    2d4a:	98 2f       	mov	r25, r24
    2d4c:	82 2f       	mov	r24, r18
    2d4e:	69 2f       	mov	r22, r25
    2d50:	40 e0       	ldi	r20, 0x00	; 0
    2d52:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <DIO_VoidSetPinValue>
		DIO_VoidSetPinValue(Copy_pStepMotor_st_Config->Motor_BluePort, Copy_pStepMotor_st_Config->Motor_BluePin , DIO_PIN_LOGIC_HIGH);
    2d56:	fe 01       	movw	r30, r28
    2d58:	e9 5b       	subi	r30, 0xB9	; 185
    2d5a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d5c:	01 90       	ld	r0, Z+
    2d5e:	f0 81       	ld	r31, Z
    2d60:	e0 2d       	mov	r30, r0
    2d62:	84 81       	ldd	r24, Z+4	; 0x04
    2d64:	82 95       	swap	r24
    2d66:	86 95       	lsr	r24
    2d68:	86 95       	lsr	r24
    2d6a:	83 70       	andi	r24, 0x03	; 3
    2d6c:	28 2f       	mov	r18, r24
    2d6e:	fe 01       	movw	r30, r28
    2d70:	e9 5b       	subi	r30, 0xB9	; 185
    2d72:	ff 4f       	sbci	r31, 0xFF	; 255
    2d74:	01 90       	ld	r0, Z+
    2d76:	f0 81       	ld	r31, Z
    2d78:	e0 2d       	mov	r30, r0
    2d7a:	84 81       	ldd	r24, Z+4	; 0x04
    2d7c:	87 70       	andi	r24, 0x07	; 7
    2d7e:	98 2f       	mov	r25, r24
    2d80:	82 2f       	mov	r24, r18
    2d82:	69 2f       	mov	r22, r25
    2d84:	41 e0       	ldi	r20, 0x01	; 1
    2d86:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <DIO_VoidSetPinValue>
    2d8a:	80 e0       	ldi	r24, 0x00	; 0
    2d8c:	90 e0       	ldi	r25, 0x00	; 0
    2d8e:	a0 e2       	ldi	r26, 0x20	; 32
    2d90:	b1 e4       	ldi	r27, 0x41	; 65
    2d92:	89 8f       	std	Y+25, r24	; 0x19
    2d94:	9a 8f       	std	Y+26, r25	; 0x1a
    2d96:	ab 8f       	std	Y+27, r26	; 0x1b
    2d98:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d9a:	69 8d       	ldd	r22, Y+25	; 0x19
    2d9c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d9e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2da0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2da2:	20 e0       	ldi	r18, 0x00	; 0
    2da4:	30 e0       	ldi	r19, 0x00	; 0
    2da6:	4a ef       	ldi	r20, 0xFA	; 250
    2da8:	54 e4       	ldi	r21, 0x44	; 68
    2daa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dae:	dc 01       	movw	r26, r24
    2db0:	cb 01       	movw	r24, r22
    2db2:	8d 8b       	std	Y+21, r24	; 0x15
    2db4:	9e 8b       	std	Y+22, r25	; 0x16
    2db6:	af 8b       	std	Y+23, r26	; 0x17
    2db8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2dba:	6d 89       	ldd	r22, Y+21	; 0x15
    2dbc:	7e 89       	ldd	r23, Y+22	; 0x16
    2dbe:	8f 89       	ldd	r24, Y+23	; 0x17
    2dc0:	98 8d       	ldd	r25, Y+24	; 0x18
    2dc2:	20 e0       	ldi	r18, 0x00	; 0
    2dc4:	30 e0       	ldi	r19, 0x00	; 0
    2dc6:	40 e8       	ldi	r20, 0x80	; 128
    2dc8:	5f e3       	ldi	r21, 0x3F	; 63
    2dca:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2dce:	88 23       	and	r24, r24
    2dd0:	2c f4       	brge	.+10     	; 0x2ddc <StepperMotor_VoidStepAntiClockWise+0x4cc>
		__ticks = 1;
    2dd2:	81 e0       	ldi	r24, 0x01	; 1
    2dd4:	90 e0       	ldi	r25, 0x00	; 0
    2dd6:	9c 8b       	std	Y+20, r25	; 0x14
    2dd8:	8b 8b       	std	Y+19, r24	; 0x13
    2dda:	3f c0       	rjmp	.+126    	; 0x2e5a <StepperMotor_VoidStepAntiClockWise+0x54a>
	else if (__tmp > 65535)
    2ddc:	6d 89       	ldd	r22, Y+21	; 0x15
    2dde:	7e 89       	ldd	r23, Y+22	; 0x16
    2de0:	8f 89       	ldd	r24, Y+23	; 0x17
    2de2:	98 8d       	ldd	r25, Y+24	; 0x18
    2de4:	20 e0       	ldi	r18, 0x00	; 0
    2de6:	3f ef       	ldi	r19, 0xFF	; 255
    2de8:	4f e7       	ldi	r20, 0x7F	; 127
    2dea:	57 e4       	ldi	r21, 0x47	; 71
    2dec:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2df0:	18 16       	cp	r1, r24
    2df2:	4c f5       	brge	.+82     	; 0x2e46 <StepperMotor_VoidStepAntiClockWise+0x536>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2df4:	69 8d       	ldd	r22, Y+25	; 0x19
    2df6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2df8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2dfa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2dfc:	20 e0       	ldi	r18, 0x00	; 0
    2dfe:	30 e0       	ldi	r19, 0x00	; 0
    2e00:	40 e2       	ldi	r20, 0x20	; 32
    2e02:	51 e4       	ldi	r21, 0x41	; 65
    2e04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e08:	dc 01       	movw	r26, r24
    2e0a:	cb 01       	movw	r24, r22
    2e0c:	bc 01       	movw	r22, r24
    2e0e:	cd 01       	movw	r24, r26
    2e10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e14:	dc 01       	movw	r26, r24
    2e16:	cb 01       	movw	r24, r22
    2e18:	9c 8b       	std	Y+20, r25	; 0x14
    2e1a:	8b 8b       	std	Y+19, r24	; 0x13
    2e1c:	0f c0       	rjmp	.+30     	; 0x2e3c <StepperMotor_VoidStepAntiClockWise+0x52c>
    2e1e:	88 ec       	ldi	r24, 0xC8	; 200
    2e20:	90 e0       	ldi	r25, 0x00	; 0
    2e22:	9a 8b       	std	Y+18, r25	; 0x12
    2e24:	89 8b       	std	Y+17, r24	; 0x11
    2e26:	89 89       	ldd	r24, Y+17	; 0x11
    2e28:	9a 89       	ldd	r25, Y+18	; 0x12
    2e2a:	01 97       	sbiw	r24, 0x01	; 1
    2e2c:	f1 f7       	brne	.-4      	; 0x2e2a <StepperMotor_VoidStepAntiClockWise+0x51a>
    2e2e:	9a 8b       	std	Y+18, r25	; 0x12
    2e30:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e32:	8b 89       	ldd	r24, Y+19	; 0x13
    2e34:	9c 89       	ldd	r25, Y+20	; 0x14
    2e36:	01 97       	sbiw	r24, 0x01	; 1
    2e38:	9c 8b       	std	Y+20, r25	; 0x14
    2e3a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e3c:	8b 89       	ldd	r24, Y+19	; 0x13
    2e3e:	9c 89       	ldd	r25, Y+20	; 0x14
    2e40:	00 97       	sbiw	r24, 0x00	; 0
    2e42:	69 f7       	brne	.-38     	; 0x2e1e <StepperMotor_VoidStepAntiClockWise+0x50e>
    2e44:	14 c0       	rjmp	.+40     	; 0x2e6e <StepperMotor_VoidStepAntiClockWise+0x55e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e46:	6d 89       	ldd	r22, Y+21	; 0x15
    2e48:	7e 89       	ldd	r23, Y+22	; 0x16
    2e4a:	8f 89       	ldd	r24, Y+23	; 0x17
    2e4c:	98 8d       	ldd	r25, Y+24	; 0x18
    2e4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e52:	dc 01       	movw	r26, r24
    2e54:	cb 01       	movw	r24, r22
    2e56:	9c 8b       	std	Y+20, r25	; 0x14
    2e58:	8b 8b       	std	Y+19, r24	; 0x13
    2e5a:	8b 89       	ldd	r24, Y+19	; 0x13
    2e5c:	9c 89       	ldd	r25, Y+20	; 0x14
    2e5e:	98 8b       	std	Y+16, r25	; 0x10
    2e60:	8f 87       	std	Y+15, r24	; 0x0f
    2e62:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e64:	98 89       	ldd	r25, Y+16	; 0x10
    2e66:	01 97       	sbiw	r24, 0x01	; 1
    2e68:	f1 f7       	brne	.-4      	; 0x2e66 <StepperMotor_VoidStepAntiClockWise+0x556>
    2e6a:	98 8b       	std	Y+16, r25	; 0x10
    2e6c:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(10);
		DIO_VoidSetPinValue(Copy_pStepMotor_st_Config->Motor_BluePort, Copy_pStepMotor_st_Config->Motor_BluePin , DIO_PIN_LOGIC_LOW);
    2e6e:	fe 01       	movw	r30, r28
    2e70:	e9 5b       	subi	r30, 0xB9	; 185
    2e72:	ff 4f       	sbci	r31, 0xFF	; 255
    2e74:	01 90       	ld	r0, Z+
    2e76:	f0 81       	ld	r31, Z
    2e78:	e0 2d       	mov	r30, r0
    2e7a:	84 81       	ldd	r24, Z+4	; 0x04
    2e7c:	82 95       	swap	r24
    2e7e:	86 95       	lsr	r24
    2e80:	86 95       	lsr	r24
    2e82:	83 70       	andi	r24, 0x03	; 3
    2e84:	28 2f       	mov	r18, r24
    2e86:	fe 01       	movw	r30, r28
    2e88:	e9 5b       	subi	r30, 0xB9	; 185
    2e8a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e8c:	01 90       	ld	r0, Z+
    2e8e:	f0 81       	ld	r31, Z
    2e90:	e0 2d       	mov	r30, r0
    2e92:	84 81       	ldd	r24, Z+4	; 0x04
    2e94:	87 70       	andi	r24, 0x07	; 7
    2e96:	98 2f       	mov	r25, r24
    2e98:	82 2f       	mov	r24, r18
    2e9a:	69 2f       	mov	r22, r25
    2e9c:	40 e0       	ldi	r20, 0x00	; 0
    2e9e:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <DIO_VoidSetPinValue>
    2ea2:	80 e0       	ldi	r24, 0x00	; 0
    2ea4:	90 e0       	ldi	r25, 0x00	; 0
    2ea6:	a0 e2       	ldi	r26, 0x20	; 32
    2ea8:	b1 e4       	ldi	r27, 0x41	; 65
    2eaa:	8b 87       	std	Y+11, r24	; 0x0b
    2eac:	9c 87       	std	Y+12, r25	; 0x0c
    2eae:	ad 87       	std	Y+13, r26	; 0x0d
    2eb0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2eb2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2eb4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2eb6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2eb8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2eba:	20 e0       	ldi	r18, 0x00	; 0
    2ebc:	30 e0       	ldi	r19, 0x00	; 0
    2ebe:	4a ef       	ldi	r20, 0xFA	; 250
    2ec0:	54 e4       	ldi	r21, 0x44	; 68
    2ec2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ec6:	dc 01       	movw	r26, r24
    2ec8:	cb 01       	movw	r24, r22
    2eca:	8f 83       	std	Y+7, r24	; 0x07
    2ecc:	98 87       	std	Y+8, r25	; 0x08
    2ece:	a9 87       	std	Y+9, r26	; 0x09
    2ed0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2ed2:	6f 81       	ldd	r22, Y+7	; 0x07
    2ed4:	78 85       	ldd	r23, Y+8	; 0x08
    2ed6:	89 85       	ldd	r24, Y+9	; 0x09
    2ed8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2eda:	20 e0       	ldi	r18, 0x00	; 0
    2edc:	30 e0       	ldi	r19, 0x00	; 0
    2ede:	40 e8       	ldi	r20, 0x80	; 128
    2ee0:	5f e3       	ldi	r21, 0x3F	; 63
    2ee2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ee6:	88 23       	and	r24, r24
    2ee8:	2c f4       	brge	.+10     	; 0x2ef4 <StepperMotor_VoidStepAntiClockWise+0x5e4>
		__ticks = 1;
    2eea:	81 e0       	ldi	r24, 0x01	; 1
    2eec:	90 e0       	ldi	r25, 0x00	; 0
    2eee:	9e 83       	std	Y+6, r25	; 0x06
    2ef0:	8d 83       	std	Y+5, r24	; 0x05
    2ef2:	3f c0       	rjmp	.+126    	; 0x2f72 <StepperMotor_VoidStepAntiClockWise+0x662>
	else if (__tmp > 65535)
    2ef4:	6f 81       	ldd	r22, Y+7	; 0x07
    2ef6:	78 85       	ldd	r23, Y+8	; 0x08
    2ef8:	89 85       	ldd	r24, Y+9	; 0x09
    2efa:	9a 85       	ldd	r25, Y+10	; 0x0a
    2efc:	20 e0       	ldi	r18, 0x00	; 0
    2efe:	3f ef       	ldi	r19, 0xFF	; 255
    2f00:	4f e7       	ldi	r20, 0x7F	; 127
    2f02:	57 e4       	ldi	r21, 0x47	; 71
    2f04:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f08:	18 16       	cp	r1, r24
    2f0a:	4c f5       	brge	.+82     	; 0x2f5e <StepperMotor_VoidStepAntiClockWise+0x64e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f0c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f0e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f10:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f12:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f14:	20 e0       	ldi	r18, 0x00	; 0
    2f16:	30 e0       	ldi	r19, 0x00	; 0
    2f18:	40 e2       	ldi	r20, 0x20	; 32
    2f1a:	51 e4       	ldi	r21, 0x41	; 65
    2f1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f20:	dc 01       	movw	r26, r24
    2f22:	cb 01       	movw	r24, r22
    2f24:	bc 01       	movw	r22, r24
    2f26:	cd 01       	movw	r24, r26
    2f28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f2c:	dc 01       	movw	r26, r24
    2f2e:	cb 01       	movw	r24, r22
    2f30:	9e 83       	std	Y+6, r25	; 0x06
    2f32:	8d 83       	std	Y+5, r24	; 0x05
    2f34:	0f c0       	rjmp	.+30     	; 0x2f54 <StepperMotor_VoidStepAntiClockWise+0x644>
    2f36:	88 ec       	ldi	r24, 0xC8	; 200
    2f38:	90 e0       	ldi	r25, 0x00	; 0
    2f3a:	9c 83       	std	Y+4, r25	; 0x04
    2f3c:	8b 83       	std	Y+3, r24	; 0x03
    2f3e:	8b 81       	ldd	r24, Y+3	; 0x03
    2f40:	9c 81       	ldd	r25, Y+4	; 0x04
    2f42:	01 97       	sbiw	r24, 0x01	; 1
    2f44:	f1 f7       	brne	.-4      	; 0x2f42 <StepperMotor_VoidStepAntiClockWise+0x632>
    2f46:	9c 83       	std	Y+4, r25	; 0x04
    2f48:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f4a:	8d 81       	ldd	r24, Y+5	; 0x05
    2f4c:	9e 81       	ldd	r25, Y+6	; 0x06
    2f4e:	01 97       	sbiw	r24, 0x01	; 1
    2f50:	9e 83       	std	Y+6, r25	; 0x06
    2f52:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f54:	8d 81       	ldd	r24, Y+5	; 0x05
    2f56:	9e 81       	ldd	r25, Y+6	; 0x06
    2f58:	00 97       	sbiw	r24, 0x00	; 0
    2f5a:	69 f7       	brne	.-38     	; 0x2f36 <StepperMotor_VoidStepAntiClockWise+0x626>
    2f5c:	14 c0       	rjmp	.+40     	; 0x2f86 <StepperMotor_VoidStepAntiClockWise+0x676>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f5e:	6f 81       	ldd	r22, Y+7	; 0x07
    2f60:	78 85       	ldd	r23, Y+8	; 0x08
    2f62:	89 85       	ldd	r24, Y+9	; 0x09
    2f64:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f6a:	dc 01       	movw	r26, r24
    2f6c:	cb 01       	movw	r24, r22
    2f6e:	9e 83       	std	Y+6, r25	; 0x06
    2f70:	8d 83       	std	Y+5, r24	; 0x05
    2f72:	8d 81       	ldd	r24, Y+5	; 0x05
    2f74:	9e 81       	ldd	r25, Y+6	; 0x06
    2f76:	9a 83       	std	Y+2, r25	; 0x02
    2f78:	89 83       	std	Y+1, r24	; 0x01
    2f7a:	89 81       	ldd	r24, Y+1	; 0x01
    2f7c:	9a 81       	ldd	r25, Y+2	; 0x02
    2f7e:	01 97       	sbiw	r24, 0x01	; 1
    2f80:	f1 f7       	brne	.-4      	; 0x2f7e <StepperMotor_VoidStepAntiClockWise+0x66e>
    2f82:	9a 83       	std	Y+2, r25	; 0x02
    2f84:	89 83       	std	Y+1, r24	; 0x01
	else
	{

	}
	return;
}
    2f86:	c8 5b       	subi	r28, 0xB8	; 184
    2f88:	df 4f       	sbci	r29, 0xFF	; 255
    2f8a:	0f b6       	in	r0, 0x3f	; 63
    2f8c:	f8 94       	cli
    2f8e:	de bf       	out	0x3e, r29	; 62
    2f90:	0f be       	out	0x3f, r0	; 63
    2f92:	cd bf       	out	0x3d, r28	; 61
    2f94:	cf 91       	pop	r28
    2f96:	df 91       	pop	r29
    2f98:	1f 91       	pop	r17
    2f9a:	0f 91       	pop	r16
    2f9c:	08 95       	ret

00002f9e <StepperMotor_VoidSteps_ClockWise>:


void StepperMotor_VoidSteps_ClockWise(const StepMotor_st* Copy_pStepMotor_st_Config , u32 copy_u8Numsteps)
{
    2f9e:	df 93       	push	r29
    2fa0:	cf 93       	push	r28
    2fa2:	cd b7       	in	r28, 0x3d	; 61
    2fa4:	de b7       	in	r29, 0x3e	; 62
    2fa6:	68 97       	sbiw	r28, 0x18	; 24
    2fa8:	0f b6       	in	r0, 0x3f	; 63
    2faa:	f8 94       	cli
    2fac:	de bf       	out	0x3e, r29	; 62
    2fae:	0f be       	out	0x3f, r0	; 63
    2fb0:	cd bf       	out	0x3d, r28	; 61
    2fb2:	9c 8b       	std	Y+20, r25	; 0x14
    2fb4:	8b 8b       	std	Y+19, r24	; 0x13
    2fb6:	4d 8b       	std	Y+21, r20	; 0x15
    2fb8:	5e 8b       	std	Y+22, r21	; 0x16
    2fba:	6f 8b       	std	Y+23, r22	; 0x17
    2fbc:	78 8f       	std	Y+24, r23	; 0x18
	u32 i = 0;
    2fbe:	1f 86       	std	Y+15, r1	; 0x0f
    2fc0:	18 8a       	std	Y+16, r1	; 0x10
    2fc2:	19 8a       	std	Y+17, r1	; 0x11
    2fc4:	1a 8a       	std	Y+18, r1	; 0x12
    2fc6:	81 c0       	rjmp	.+258    	; 0x30ca <StepperMotor_VoidSteps_ClockWise+0x12c>
	for(; i <copy_u8Numsteps ; ++i)
	{
		StepperMotor_VoidStepClockWise(Copy_pStepMotor_st_Config);
    2fc8:	8b 89       	ldd	r24, Y+19	; 0x13
    2fca:	9c 89       	ldd	r25, Y+20	; 0x14
    2fcc:	0e 94 41 11 	call	0x2282	; 0x2282 <StepperMotor_VoidStepClockWise>
    2fd0:	80 e0       	ldi	r24, 0x00	; 0
    2fd2:	90 e0       	ldi	r25, 0x00	; 0
    2fd4:	a0 e0       	ldi	r26, 0x00	; 0
    2fd6:	b0 e4       	ldi	r27, 0x40	; 64
    2fd8:	8b 87       	std	Y+11, r24	; 0x0b
    2fda:	9c 87       	std	Y+12, r25	; 0x0c
    2fdc:	ad 87       	std	Y+13, r26	; 0x0d
    2fde:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fe0:	6b 85       	ldd	r22, Y+11	; 0x0b
    2fe2:	7c 85       	ldd	r23, Y+12	; 0x0c
    2fe4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fe6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fe8:	20 e0       	ldi	r18, 0x00	; 0
    2fea:	30 e0       	ldi	r19, 0x00	; 0
    2fec:	4a ef       	ldi	r20, 0xFA	; 250
    2fee:	54 e4       	ldi	r21, 0x44	; 68
    2ff0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ff4:	dc 01       	movw	r26, r24
    2ff6:	cb 01       	movw	r24, r22
    2ff8:	8f 83       	std	Y+7, r24	; 0x07
    2ffa:	98 87       	std	Y+8, r25	; 0x08
    2ffc:	a9 87       	std	Y+9, r26	; 0x09
    2ffe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3000:	6f 81       	ldd	r22, Y+7	; 0x07
    3002:	78 85       	ldd	r23, Y+8	; 0x08
    3004:	89 85       	ldd	r24, Y+9	; 0x09
    3006:	9a 85       	ldd	r25, Y+10	; 0x0a
    3008:	20 e0       	ldi	r18, 0x00	; 0
    300a:	30 e0       	ldi	r19, 0x00	; 0
    300c:	40 e8       	ldi	r20, 0x80	; 128
    300e:	5f e3       	ldi	r21, 0x3F	; 63
    3010:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3014:	88 23       	and	r24, r24
    3016:	2c f4       	brge	.+10     	; 0x3022 <StepperMotor_VoidSteps_ClockWise+0x84>
		__ticks = 1;
    3018:	81 e0       	ldi	r24, 0x01	; 1
    301a:	90 e0       	ldi	r25, 0x00	; 0
    301c:	9e 83       	std	Y+6, r25	; 0x06
    301e:	8d 83       	std	Y+5, r24	; 0x05
    3020:	3f c0       	rjmp	.+126    	; 0x30a0 <StepperMotor_VoidSteps_ClockWise+0x102>
	else if (__tmp > 65535)
    3022:	6f 81       	ldd	r22, Y+7	; 0x07
    3024:	78 85       	ldd	r23, Y+8	; 0x08
    3026:	89 85       	ldd	r24, Y+9	; 0x09
    3028:	9a 85       	ldd	r25, Y+10	; 0x0a
    302a:	20 e0       	ldi	r18, 0x00	; 0
    302c:	3f ef       	ldi	r19, 0xFF	; 255
    302e:	4f e7       	ldi	r20, 0x7F	; 127
    3030:	57 e4       	ldi	r21, 0x47	; 71
    3032:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3036:	18 16       	cp	r1, r24
    3038:	4c f5       	brge	.+82     	; 0x308c <StepperMotor_VoidSteps_ClockWise+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    303a:	6b 85       	ldd	r22, Y+11	; 0x0b
    303c:	7c 85       	ldd	r23, Y+12	; 0x0c
    303e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3040:	9e 85       	ldd	r25, Y+14	; 0x0e
    3042:	20 e0       	ldi	r18, 0x00	; 0
    3044:	30 e0       	ldi	r19, 0x00	; 0
    3046:	40 e2       	ldi	r20, 0x20	; 32
    3048:	51 e4       	ldi	r21, 0x41	; 65
    304a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    304e:	dc 01       	movw	r26, r24
    3050:	cb 01       	movw	r24, r22
    3052:	bc 01       	movw	r22, r24
    3054:	cd 01       	movw	r24, r26
    3056:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    305a:	dc 01       	movw	r26, r24
    305c:	cb 01       	movw	r24, r22
    305e:	9e 83       	std	Y+6, r25	; 0x06
    3060:	8d 83       	std	Y+5, r24	; 0x05
    3062:	0f c0       	rjmp	.+30     	; 0x3082 <StepperMotor_VoidSteps_ClockWise+0xe4>
    3064:	88 ec       	ldi	r24, 0xC8	; 200
    3066:	90 e0       	ldi	r25, 0x00	; 0
    3068:	9c 83       	std	Y+4, r25	; 0x04
    306a:	8b 83       	std	Y+3, r24	; 0x03
    306c:	8b 81       	ldd	r24, Y+3	; 0x03
    306e:	9c 81       	ldd	r25, Y+4	; 0x04
    3070:	01 97       	sbiw	r24, 0x01	; 1
    3072:	f1 f7       	brne	.-4      	; 0x3070 <StepperMotor_VoidSteps_ClockWise+0xd2>
    3074:	9c 83       	std	Y+4, r25	; 0x04
    3076:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3078:	8d 81       	ldd	r24, Y+5	; 0x05
    307a:	9e 81       	ldd	r25, Y+6	; 0x06
    307c:	01 97       	sbiw	r24, 0x01	; 1
    307e:	9e 83       	std	Y+6, r25	; 0x06
    3080:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3082:	8d 81       	ldd	r24, Y+5	; 0x05
    3084:	9e 81       	ldd	r25, Y+6	; 0x06
    3086:	00 97       	sbiw	r24, 0x00	; 0
    3088:	69 f7       	brne	.-38     	; 0x3064 <StepperMotor_VoidSteps_ClockWise+0xc6>
    308a:	14 c0       	rjmp	.+40     	; 0x30b4 <StepperMotor_VoidSteps_ClockWise+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    308c:	6f 81       	ldd	r22, Y+7	; 0x07
    308e:	78 85       	ldd	r23, Y+8	; 0x08
    3090:	89 85       	ldd	r24, Y+9	; 0x09
    3092:	9a 85       	ldd	r25, Y+10	; 0x0a
    3094:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3098:	dc 01       	movw	r26, r24
    309a:	cb 01       	movw	r24, r22
    309c:	9e 83       	std	Y+6, r25	; 0x06
    309e:	8d 83       	std	Y+5, r24	; 0x05
    30a0:	8d 81       	ldd	r24, Y+5	; 0x05
    30a2:	9e 81       	ldd	r25, Y+6	; 0x06
    30a4:	9a 83       	std	Y+2, r25	; 0x02
    30a6:	89 83       	std	Y+1, r24	; 0x01
    30a8:	89 81       	ldd	r24, Y+1	; 0x01
    30aa:	9a 81       	ldd	r25, Y+2	; 0x02
    30ac:	01 97       	sbiw	r24, 0x01	; 1
    30ae:	f1 f7       	brne	.-4      	; 0x30ac <StepperMotor_VoidSteps_ClockWise+0x10e>
    30b0:	9a 83       	std	Y+2, r25	; 0x02
    30b2:	89 83       	std	Y+1, r24	; 0x01


void StepperMotor_VoidSteps_ClockWise(const StepMotor_st* Copy_pStepMotor_st_Config , u32 copy_u8Numsteps)
{
	u32 i = 0;
	for(; i <copy_u8Numsteps ; ++i)
    30b4:	8f 85       	ldd	r24, Y+15	; 0x0f
    30b6:	98 89       	ldd	r25, Y+16	; 0x10
    30b8:	a9 89       	ldd	r26, Y+17	; 0x11
    30ba:	ba 89       	ldd	r27, Y+18	; 0x12
    30bc:	01 96       	adiw	r24, 0x01	; 1
    30be:	a1 1d       	adc	r26, r1
    30c0:	b1 1d       	adc	r27, r1
    30c2:	8f 87       	std	Y+15, r24	; 0x0f
    30c4:	98 8b       	std	Y+16, r25	; 0x10
    30c6:	a9 8b       	std	Y+17, r26	; 0x11
    30c8:	ba 8b       	std	Y+18, r27	; 0x12
    30ca:	2f 85       	ldd	r18, Y+15	; 0x0f
    30cc:	38 89       	ldd	r19, Y+16	; 0x10
    30ce:	49 89       	ldd	r20, Y+17	; 0x11
    30d0:	5a 89       	ldd	r21, Y+18	; 0x12
    30d2:	8d 89       	ldd	r24, Y+21	; 0x15
    30d4:	9e 89       	ldd	r25, Y+22	; 0x16
    30d6:	af 89       	ldd	r26, Y+23	; 0x17
    30d8:	b8 8d       	ldd	r27, Y+24	; 0x18
    30da:	28 17       	cp	r18, r24
    30dc:	39 07       	cpc	r19, r25
    30de:	4a 07       	cpc	r20, r26
    30e0:	5b 07       	cpc	r21, r27
    30e2:	08 f4       	brcc	.+2      	; 0x30e6 <StepperMotor_VoidSteps_ClockWise+0x148>
    30e4:	71 cf       	rjmp	.-286    	; 0x2fc8 <StepperMotor_VoidSteps_ClockWise+0x2a>
	{
		StepperMotor_VoidStepClockWise(Copy_pStepMotor_st_Config);
		_delay_ms(2);
	}
	return;
}
    30e6:	68 96       	adiw	r28, 0x18	; 24
    30e8:	0f b6       	in	r0, 0x3f	; 63
    30ea:	f8 94       	cli
    30ec:	de bf       	out	0x3e, r29	; 62
    30ee:	0f be       	out	0x3f, r0	; 63
    30f0:	cd bf       	out	0x3d, r28	; 61
    30f2:	cf 91       	pop	r28
    30f4:	df 91       	pop	r29
    30f6:	08 95       	ret

000030f8 <StepperMotor_VoidSteps_AntiClockWise>:
void StepperMotor_VoidSteps_AntiClockWise(const StepMotor_st* Copy_pStepMotor_st_Config , u32 copy_u8Numsteps)
{
    30f8:	df 93       	push	r29
    30fa:	cf 93       	push	r28
    30fc:	cd b7       	in	r28, 0x3d	; 61
    30fe:	de b7       	in	r29, 0x3e	; 62
    3100:	2a 97       	sbiw	r28, 0x0a	; 10
    3102:	0f b6       	in	r0, 0x3f	; 63
    3104:	f8 94       	cli
    3106:	de bf       	out	0x3e, r29	; 62
    3108:	0f be       	out	0x3f, r0	; 63
    310a:	cd bf       	out	0x3d, r28	; 61
    310c:	9e 83       	std	Y+6, r25	; 0x06
    310e:	8d 83       	std	Y+5, r24	; 0x05
    3110:	4f 83       	std	Y+7, r20	; 0x07
    3112:	58 87       	std	Y+8, r21	; 0x08
    3114:	69 87       	std	Y+9, r22	; 0x09
    3116:	7a 87       	std	Y+10, r23	; 0x0a
	u32 i = 0;
    3118:	19 82       	std	Y+1, r1	; 0x01
    311a:	1a 82       	std	Y+2, r1	; 0x02
    311c:	1b 82       	std	Y+3, r1	; 0x03
    311e:	1c 82       	std	Y+4, r1	; 0x04
    3120:	0f c0       	rjmp	.+30     	; 0x3140 <StepperMotor_VoidSteps_AntiClockWise+0x48>
	for(; i <copy_u8Numsteps ; ++i)
		StepperMotor_VoidStepAntiClockWise(Copy_pStepMotor_st_Config);
    3122:	8d 81       	ldd	r24, Y+5	; 0x05
    3124:	9e 81       	ldd	r25, Y+6	; 0x06
    3126:	0e 94 88 14 	call	0x2910	; 0x2910 <StepperMotor_VoidStepAntiClockWise>
	return;
}
void StepperMotor_VoidSteps_AntiClockWise(const StepMotor_st* Copy_pStepMotor_st_Config , u32 copy_u8Numsteps)
{
	u32 i = 0;
	for(; i <copy_u8Numsteps ; ++i)
    312a:	89 81       	ldd	r24, Y+1	; 0x01
    312c:	9a 81       	ldd	r25, Y+2	; 0x02
    312e:	ab 81       	ldd	r26, Y+3	; 0x03
    3130:	bc 81       	ldd	r27, Y+4	; 0x04
    3132:	01 96       	adiw	r24, 0x01	; 1
    3134:	a1 1d       	adc	r26, r1
    3136:	b1 1d       	adc	r27, r1
    3138:	89 83       	std	Y+1, r24	; 0x01
    313a:	9a 83       	std	Y+2, r25	; 0x02
    313c:	ab 83       	std	Y+3, r26	; 0x03
    313e:	bc 83       	std	Y+4, r27	; 0x04
    3140:	29 81       	ldd	r18, Y+1	; 0x01
    3142:	3a 81       	ldd	r19, Y+2	; 0x02
    3144:	4b 81       	ldd	r20, Y+3	; 0x03
    3146:	5c 81       	ldd	r21, Y+4	; 0x04
    3148:	8f 81       	ldd	r24, Y+7	; 0x07
    314a:	98 85       	ldd	r25, Y+8	; 0x08
    314c:	a9 85       	ldd	r26, Y+9	; 0x09
    314e:	ba 85       	ldd	r27, Y+10	; 0x0a
    3150:	28 17       	cp	r18, r24
    3152:	39 07       	cpc	r19, r25
    3154:	4a 07       	cpc	r20, r26
    3156:	5b 07       	cpc	r21, r27
    3158:	20 f3       	brcs	.-56     	; 0x3122 <StepperMotor_VoidSteps_AntiClockWise+0x2a>
		StepperMotor_VoidStepAntiClockWise(Copy_pStepMotor_st_Config);
}
    315a:	2a 96       	adiw	r28, 0x0a	; 10
    315c:	0f b6       	in	r0, 0x3f	; 63
    315e:	f8 94       	cli
    3160:	de bf       	out	0x3e, r29	; 62
    3162:	0f be       	out	0x3f, r0	; 63
    3164:	cd bf       	out	0x3d, r28	; 61
    3166:	cf 91       	pop	r28
    3168:	df 91       	pop	r29
    316a:	08 95       	ret

0000316c <LED_u8Init>:
#include"Led_interface.h"
#include "Led_private.h"
#include "led_config.h"

u8 LED_u8Init(const LED_t* Copy_pled_tConfig)
{
    316c:	df 93       	push	r29
    316e:	cf 93       	push	r28
    3170:	00 d0       	rcall	.+0      	; 0x3172 <LED_u8Init+0x6>
    3172:	00 d0       	rcall	.+0      	; 0x3174 <LED_u8Init+0x8>
    3174:	0f 92       	push	r0
    3176:	cd b7       	in	r28, 0x3d	; 61
    3178:	de b7       	in	r29, 0x3e	; 62
    317a:	9b 83       	std	Y+3, r25	; 0x03
    317c:	8a 83       	std	Y+2, r24	; 0x02
	u8 ret = 0;
    317e:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pled_tConfig  && Copy_pled_tConfig->Port <= DIO_PORTD_IDX && Copy_pled_tConfig->Pin <= DIO_PIN7 )
    3180:	8a 81       	ldd	r24, Y+2	; 0x02
    3182:	9b 81       	ldd	r25, Y+3	; 0x03
    3184:	00 97       	sbiw	r24, 0x00	; 0
    3186:	09 f4       	brne	.+2      	; 0x318a <LED_u8Init+0x1e>
    3188:	55 c0       	rjmp	.+170    	; 0x3234 <LED_u8Init+0xc8>
    318a:	ea 81       	ldd	r30, Y+2	; 0x02
    318c:	fb 81       	ldd	r31, Y+3	; 0x03
    318e:	80 81       	ld	r24, Z
    3190:	8f 70       	andi	r24, 0x0F	; 15
    3192:	88 2f       	mov	r24, r24
    3194:	90 e0       	ldi	r25, 0x00	; 0
    3196:	84 30       	cpi	r24, 0x04	; 4
    3198:	91 05       	cpc	r25, r1
    319a:	0c f0       	brlt	.+2      	; 0x319e <LED_u8Init+0x32>
    319c:	4b c0       	rjmp	.+150    	; 0x3234 <LED_u8Init+0xc8>
    319e:	ea 81       	ldd	r30, Y+2	; 0x02
    31a0:	fb 81       	ldd	r31, Y+3	; 0x03
    31a2:	80 81       	ld	r24, Z
    31a4:	82 95       	swap	r24
    31a6:	8f 70       	andi	r24, 0x0F	; 15
    31a8:	87 70       	andi	r24, 0x07	; 7
    31aa:	88 2f       	mov	r24, r24
    31ac:	90 e0       	ldi	r25, 0x00	; 0
    31ae:	88 30       	cpi	r24, 0x08	; 8
    31b0:	91 05       	cpc	r25, r1
    31b2:	0c f0       	brlt	.+2      	; 0x31b6 <LED_u8Init+0x4a>
    31b4:	3f c0       	rjmp	.+126    	; 0x3234 <LED_u8Init+0xc8>
	{
		switch(Copy_pled_tConfig->ConType)
    31b6:	ea 81       	ldd	r30, Y+2	; 0x02
    31b8:	fb 81       	ldd	r31, Y+3	; 0x03
    31ba:	80 81       	ld	r24, Z
    31bc:	88 1f       	adc	r24, r24
    31be:	88 27       	eor	r24, r24
    31c0:	88 1f       	adc	r24, r24
    31c2:	28 2f       	mov	r18, r24
    31c4:	30 e0       	ldi	r19, 0x00	; 0
    31c6:	3d 83       	std	Y+5, r19	; 0x05
    31c8:	2c 83       	std	Y+4, r18	; 0x04
    31ca:	8c 81       	ldd	r24, Y+4	; 0x04
    31cc:	9d 81       	ldd	r25, Y+5	; 0x05
    31ce:	00 97       	sbiw	r24, 0x00	; 0
    31d0:	d1 f0       	breq	.+52     	; 0x3206 <LED_u8Init+0x9a>
    31d2:	2c 81       	ldd	r18, Y+4	; 0x04
    31d4:	3d 81       	ldd	r19, Y+5	; 0x05
    31d6:	21 30       	cpi	r18, 0x01	; 1
    31d8:	31 05       	cpc	r19, r1
    31da:	51 f5       	brne	.+84     	; 0x3230 <LED_u8Init+0xc4>
		{
		case LED_Con_Source:
			DIO_voidPinInit(Copy_pled_tConfig->Port , Copy_pled_tConfig->Pin , DIO_PIN_DIR_OUTPUT , DIO_PIN_LOGIC_LOW);
    31dc:	ea 81       	ldd	r30, Y+2	; 0x02
    31de:	fb 81       	ldd	r31, Y+3	; 0x03
    31e0:	80 81       	ld	r24, Z
    31e2:	8f 70       	andi	r24, 0x0F	; 15
    31e4:	28 2f       	mov	r18, r24
    31e6:	ea 81       	ldd	r30, Y+2	; 0x02
    31e8:	fb 81       	ldd	r31, Y+3	; 0x03
    31ea:	80 81       	ld	r24, Z
    31ec:	82 95       	swap	r24
    31ee:	8f 70       	andi	r24, 0x0F	; 15
    31f0:	87 70       	andi	r24, 0x07	; 7
    31f2:	98 2f       	mov	r25, r24
    31f4:	82 2f       	mov	r24, r18
    31f6:	69 2f       	mov	r22, r25
    31f8:	41 e0       	ldi	r20, 0x01	; 1
    31fa:	20 e0       	ldi	r18, 0x00	; 0
    31fc:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <DIO_voidPinInit>
			ret = 1;
    3200:	81 e0       	ldi	r24, 0x01	; 1
    3202:	89 83       	std	Y+1, r24	; 0x01
    3204:	18 c0       	rjmp	.+48     	; 0x3236 <LED_u8Init+0xca>
			break;
		case LED_Con_Sink:
			DIO_voidPinInit(Copy_pled_tConfig->Port , Copy_pled_tConfig->Pin , DIO_PIN_DIR_OUTPUT , DIO_PIN_LOGIC_HIGH);
    3206:	ea 81       	ldd	r30, Y+2	; 0x02
    3208:	fb 81       	ldd	r31, Y+3	; 0x03
    320a:	80 81       	ld	r24, Z
    320c:	8f 70       	andi	r24, 0x0F	; 15
    320e:	28 2f       	mov	r18, r24
    3210:	ea 81       	ldd	r30, Y+2	; 0x02
    3212:	fb 81       	ldd	r31, Y+3	; 0x03
    3214:	80 81       	ld	r24, Z
    3216:	82 95       	swap	r24
    3218:	8f 70       	andi	r24, 0x0F	; 15
    321a:	87 70       	andi	r24, 0x07	; 7
    321c:	98 2f       	mov	r25, r24
    321e:	82 2f       	mov	r24, r18
    3220:	69 2f       	mov	r22, r25
    3222:	41 e0       	ldi	r20, 0x01	; 1
    3224:	21 e0       	ldi	r18, 0x01	; 1
    3226:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <DIO_voidPinInit>
			ret = 1;
    322a:	81 e0       	ldi	r24, 0x01	; 1
    322c:	89 83       	std	Y+1, r24	; 0x01
    322e:	03 c0       	rjmp	.+6      	; 0x3236 <LED_u8Init+0xca>
			break;
		default: ret = 0; break;
    3230:	19 82       	std	Y+1, r1	; 0x01
    3232:	01 c0       	rjmp	.+2      	; 0x3236 <LED_u8Init+0xca>
		}
	}
	else
	{
		ret = 0;
    3234:	19 82       	std	Y+1, r1	; 0x01
	}
	return ret;
    3236:	89 81       	ldd	r24, Y+1	; 0x01
}
    3238:	0f 90       	pop	r0
    323a:	0f 90       	pop	r0
    323c:	0f 90       	pop	r0
    323e:	0f 90       	pop	r0
    3240:	0f 90       	pop	r0
    3242:	cf 91       	pop	r28
    3244:	df 91       	pop	r29
    3246:	08 95       	ret

00003248 <LED_u8TurnOff>:
u8 LED_u8TurnOff(const LED_t* Copy_pled_tConfig)
{
    3248:	df 93       	push	r29
    324a:	cf 93       	push	r28
    324c:	00 d0       	rcall	.+0      	; 0x324e <LED_u8TurnOff+0x6>
    324e:	00 d0       	rcall	.+0      	; 0x3250 <LED_u8TurnOff+0x8>
    3250:	0f 92       	push	r0
    3252:	cd b7       	in	r28, 0x3d	; 61
    3254:	de b7       	in	r29, 0x3e	; 62
    3256:	9b 83       	std	Y+3, r25	; 0x03
    3258:	8a 83       	std	Y+2, r24	; 0x02
	u8 ret = 0;
    325a:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pled_tConfig  && Copy_pled_tConfig->Port <= DIO_PORTD_IDX && Copy_pled_tConfig->Pin <= DIO_PIN7 )
    325c:	8a 81       	ldd	r24, Y+2	; 0x02
    325e:	9b 81       	ldd	r25, Y+3	; 0x03
    3260:	00 97       	sbiw	r24, 0x00	; 0
    3262:	09 f4       	brne	.+2      	; 0x3266 <LED_u8TurnOff+0x1e>
    3264:	52 c0       	rjmp	.+164    	; 0x330a <LED_u8TurnOff+0xc2>
    3266:	ea 81       	ldd	r30, Y+2	; 0x02
    3268:	fb 81       	ldd	r31, Y+3	; 0x03
    326a:	80 81       	ld	r24, Z
    326c:	8f 70       	andi	r24, 0x0F	; 15
    326e:	88 2f       	mov	r24, r24
    3270:	90 e0       	ldi	r25, 0x00	; 0
    3272:	84 30       	cpi	r24, 0x04	; 4
    3274:	91 05       	cpc	r25, r1
    3276:	0c f0       	brlt	.+2      	; 0x327a <LED_u8TurnOff+0x32>
    3278:	48 c0       	rjmp	.+144    	; 0x330a <LED_u8TurnOff+0xc2>
    327a:	ea 81       	ldd	r30, Y+2	; 0x02
    327c:	fb 81       	ldd	r31, Y+3	; 0x03
    327e:	80 81       	ld	r24, Z
    3280:	82 95       	swap	r24
    3282:	8f 70       	andi	r24, 0x0F	; 15
    3284:	87 70       	andi	r24, 0x07	; 7
    3286:	88 2f       	mov	r24, r24
    3288:	90 e0       	ldi	r25, 0x00	; 0
    328a:	88 30       	cpi	r24, 0x08	; 8
    328c:	91 05       	cpc	r25, r1
    328e:	ec f5       	brge	.+122    	; 0x330a <LED_u8TurnOff+0xc2>
	{
		switch(Copy_pled_tConfig->ConType)
    3290:	ea 81       	ldd	r30, Y+2	; 0x02
    3292:	fb 81       	ldd	r31, Y+3	; 0x03
    3294:	80 81       	ld	r24, Z
    3296:	88 1f       	adc	r24, r24
    3298:	88 27       	eor	r24, r24
    329a:	88 1f       	adc	r24, r24
    329c:	28 2f       	mov	r18, r24
    329e:	30 e0       	ldi	r19, 0x00	; 0
    32a0:	3d 83       	std	Y+5, r19	; 0x05
    32a2:	2c 83       	std	Y+4, r18	; 0x04
    32a4:	8c 81       	ldd	r24, Y+4	; 0x04
    32a6:	9d 81       	ldd	r25, Y+5	; 0x05
    32a8:	00 97       	sbiw	r24, 0x00	; 0
    32aa:	c9 f0       	breq	.+50     	; 0x32de <LED_u8TurnOff+0x96>
    32ac:	2c 81       	ldd	r18, Y+4	; 0x04
    32ae:	3d 81       	ldd	r19, Y+5	; 0x05
    32b0:	21 30       	cpi	r18, 0x01	; 1
    32b2:	31 05       	cpc	r19, r1
    32b4:	41 f5       	brne	.+80     	; 0x3306 <LED_u8TurnOff+0xbe>
		{
			case LED_Con_Source:
				DIO_VoidSetPinValue(Copy_pled_tConfig->Port,Copy_pled_tConfig->Pin, DIO_PIN_LOGIC_LOW);
    32b6:	ea 81       	ldd	r30, Y+2	; 0x02
    32b8:	fb 81       	ldd	r31, Y+3	; 0x03
    32ba:	80 81       	ld	r24, Z
    32bc:	8f 70       	andi	r24, 0x0F	; 15
    32be:	28 2f       	mov	r18, r24
    32c0:	ea 81       	ldd	r30, Y+2	; 0x02
    32c2:	fb 81       	ldd	r31, Y+3	; 0x03
    32c4:	80 81       	ld	r24, Z
    32c6:	82 95       	swap	r24
    32c8:	8f 70       	andi	r24, 0x0F	; 15
    32ca:	87 70       	andi	r24, 0x07	; 7
    32cc:	98 2f       	mov	r25, r24
    32ce:	82 2f       	mov	r24, r18
    32d0:	69 2f       	mov	r22, r25
    32d2:	40 e0       	ldi	r20, 0x00	; 0
    32d4:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <DIO_VoidSetPinValue>
				ret = 1;
    32d8:	81 e0       	ldi	r24, 0x01	; 1
    32da:	89 83       	std	Y+1, r24	; 0x01
    32dc:	17 c0       	rjmp	.+46     	; 0x330c <LED_u8TurnOff+0xc4>
				break;
			case LED_Con_Sink:
				DIO_VoidSetPinValue(Copy_pled_tConfig->Port,Copy_pled_tConfig->Pin, DIO_PIN_LOGIC_HIGH);
    32de:	ea 81       	ldd	r30, Y+2	; 0x02
    32e0:	fb 81       	ldd	r31, Y+3	; 0x03
    32e2:	80 81       	ld	r24, Z
    32e4:	8f 70       	andi	r24, 0x0F	; 15
    32e6:	28 2f       	mov	r18, r24
    32e8:	ea 81       	ldd	r30, Y+2	; 0x02
    32ea:	fb 81       	ldd	r31, Y+3	; 0x03
    32ec:	80 81       	ld	r24, Z
    32ee:	82 95       	swap	r24
    32f0:	8f 70       	andi	r24, 0x0F	; 15
    32f2:	87 70       	andi	r24, 0x07	; 7
    32f4:	98 2f       	mov	r25, r24
    32f6:	82 2f       	mov	r24, r18
    32f8:	69 2f       	mov	r22, r25
    32fa:	41 e0       	ldi	r20, 0x01	; 1
    32fc:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <DIO_VoidSetPinValue>
				ret = 1;
    3300:	81 e0       	ldi	r24, 0x01	; 1
    3302:	89 83       	std	Y+1, r24	; 0x01
    3304:	03 c0       	rjmp	.+6      	; 0x330c <LED_u8TurnOff+0xc4>
				break;
			default: ret = 0; break;
    3306:	19 82       	std	Y+1, r1	; 0x01
    3308:	01 c0       	rjmp	.+2      	; 0x330c <LED_u8TurnOff+0xc4>
		}
	}
	else
	{
		ret = 0;
    330a:	19 82       	std	Y+1, r1	; 0x01
	}
	return ret;
    330c:	89 81       	ldd	r24, Y+1	; 0x01
}
    330e:	0f 90       	pop	r0
    3310:	0f 90       	pop	r0
    3312:	0f 90       	pop	r0
    3314:	0f 90       	pop	r0
    3316:	0f 90       	pop	r0
    3318:	cf 91       	pop	r28
    331a:	df 91       	pop	r29
    331c:	08 95       	ret

0000331e <LED_u8TurnOn>:

u8 LED_u8TurnOn(const LED_t* Copy_pled_tConfig)
{
    331e:	df 93       	push	r29
    3320:	cf 93       	push	r28
    3322:	00 d0       	rcall	.+0      	; 0x3324 <LED_u8TurnOn+0x6>
    3324:	00 d0       	rcall	.+0      	; 0x3326 <LED_u8TurnOn+0x8>
    3326:	0f 92       	push	r0
    3328:	cd b7       	in	r28, 0x3d	; 61
    332a:	de b7       	in	r29, 0x3e	; 62
    332c:	9b 83       	std	Y+3, r25	; 0x03
    332e:	8a 83       	std	Y+2, r24	; 0x02
	u8 ret = 0;
    3330:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pled_tConfig  && Copy_pled_tConfig->Port <= DIO_PORTD_IDX && Copy_pled_tConfig->Pin <= DIO_PIN7 )
    3332:	8a 81       	ldd	r24, Y+2	; 0x02
    3334:	9b 81       	ldd	r25, Y+3	; 0x03
    3336:	00 97       	sbiw	r24, 0x00	; 0
    3338:	09 f4       	brne	.+2      	; 0x333c <LED_u8TurnOn+0x1e>
    333a:	52 c0       	rjmp	.+164    	; 0x33e0 <LED_u8TurnOn+0xc2>
    333c:	ea 81       	ldd	r30, Y+2	; 0x02
    333e:	fb 81       	ldd	r31, Y+3	; 0x03
    3340:	80 81       	ld	r24, Z
    3342:	8f 70       	andi	r24, 0x0F	; 15
    3344:	88 2f       	mov	r24, r24
    3346:	90 e0       	ldi	r25, 0x00	; 0
    3348:	84 30       	cpi	r24, 0x04	; 4
    334a:	91 05       	cpc	r25, r1
    334c:	0c f0       	brlt	.+2      	; 0x3350 <LED_u8TurnOn+0x32>
    334e:	48 c0       	rjmp	.+144    	; 0x33e0 <LED_u8TurnOn+0xc2>
    3350:	ea 81       	ldd	r30, Y+2	; 0x02
    3352:	fb 81       	ldd	r31, Y+3	; 0x03
    3354:	80 81       	ld	r24, Z
    3356:	82 95       	swap	r24
    3358:	8f 70       	andi	r24, 0x0F	; 15
    335a:	87 70       	andi	r24, 0x07	; 7
    335c:	88 2f       	mov	r24, r24
    335e:	90 e0       	ldi	r25, 0x00	; 0
    3360:	88 30       	cpi	r24, 0x08	; 8
    3362:	91 05       	cpc	r25, r1
    3364:	ec f5       	brge	.+122    	; 0x33e0 <LED_u8TurnOn+0xc2>
	{
		switch(Copy_pled_tConfig->ConType)
    3366:	ea 81       	ldd	r30, Y+2	; 0x02
    3368:	fb 81       	ldd	r31, Y+3	; 0x03
    336a:	80 81       	ld	r24, Z
    336c:	88 1f       	adc	r24, r24
    336e:	88 27       	eor	r24, r24
    3370:	88 1f       	adc	r24, r24
    3372:	28 2f       	mov	r18, r24
    3374:	30 e0       	ldi	r19, 0x00	; 0
    3376:	3d 83       	std	Y+5, r19	; 0x05
    3378:	2c 83       	std	Y+4, r18	; 0x04
    337a:	8c 81       	ldd	r24, Y+4	; 0x04
    337c:	9d 81       	ldd	r25, Y+5	; 0x05
    337e:	00 97       	sbiw	r24, 0x00	; 0
    3380:	c9 f0       	breq	.+50     	; 0x33b4 <LED_u8TurnOn+0x96>
    3382:	2c 81       	ldd	r18, Y+4	; 0x04
    3384:	3d 81       	ldd	r19, Y+5	; 0x05
    3386:	21 30       	cpi	r18, 0x01	; 1
    3388:	31 05       	cpc	r19, r1
    338a:	41 f5       	brne	.+80     	; 0x33dc <LED_u8TurnOn+0xbe>
		{
			case LED_Con_Source:
				DIO_VoidSetPinValue(Copy_pled_tConfig->Port,Copy_pled_tConfig->Pin, DIO_PIN_LOGIC_HIGH);
    338c:	ea 81       	ldd	r30, Y+2	; 0x02
    338e:	fb 81       	ldd	r31, Y+3	; 0x03
    3390:	80 81       	ld	r24, Z
    3392:	8f 70       	andi	r24, 0x0F	; 15
    3394:	28 2f       	mov	r18, r24
    3396:	ea 81       	ldd	r30, Y+2	; 0x02
    3398:	fb 81       	ldd	r31, Y+3	; 0x03
    339a:	80 81       	ld	r24, Z
    339c:	82 95       	swap	r24
    339e:	8f 70       	andi	r24, 0x0F	; 15
    33a0:	87 70       	andi	r24, 0x07	; 7
    33a2:	98 2f       	mov	r25, r24
    33a4:	82 2f       	mov	r24, r18
    33a6:	69 2f       	mov	r22, r25
    33a8:	41 e0       	ldi	r20, 0x01	; 1
    33aa:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <DIO_VoidSetPinValue>
				ret = 1;
    33ae:	81 e0       	ldi	r24, 0x01	; 1
    33b0:	89 83       	std	Y+1, r24	; 0x01
    33b2:	17 c0       	rjmp	.+46     	; 0x33e2 <LED_u8TurnOn+0xc4>
				break;
			case LED_Con_Sink:
				DIO_VoidSetPinValue(Copy_pled_tConfig->Port,Copy_pled_tConfig->Pin, DIO_PIN_LOGIC_LOW);
    33b4:	ea 81       	ldd	r30, Y+2	; 0x02
    33b6:	fb 81       	ldd	r31, Y+3	; 0x03
    33b8:	80 81       	ld	r24, Z
    33ba:	8f 70       	andi	r24, 0x0F	; 15
    33bc:	28 2f       	mov	r18, r24
    33be:	ea 81       	ldd	r30, Y+2	; 0x02
    33c0:	fb 81       	ldd	r31, Y+3	; 0x03
    33c2:	80 81       	ld	r24, Z
    33c4:	82 95       	swap	r24
    33c6:	8f 70       	andi	r24, 0x0F	; 15
    33c8:	87 70       	andi	r24, 0x07	; 7
    33ca:	98 2f       	mov	r25, r24
    33cc:	82 2f       	mov	r24, r18
    33ce:	69 2f       	mov	r22, r25
    33d0:	40 e0       	ldi	r20, 0x00	; 0
    33d2:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <DIO_VoidSetPinValue>
				ret = 1;
    33d6:	81 e0       	ldi	r24, 0x01	; 1
    33d8:	89 83       	std	Y+1, r24	; 0x01
    33da:	03 c0       	rjmp	.+6      	; 0x33e2 <LED_u8TurnOn+0xc4>
				break;
			default: ret = 0; break;
    33dc:	19 82       	std	Y+1, r1	; 0x01
    33de:	01 c0       	rjmp	.+2      	; 0x33e2 <LED_u8TurnOn+0xc4>
		}
	}
	else
	{
		ret = 0;
    33e0:	19 82       	std	Y+1, r1	; 0x01
	}
	return ret;
    33e2:	89 81       	ldd	r24, Y+1	; 0x01
}
    33e4:	0f 90       	pop	r0
    33e6:	0f 90       	pop	r0
    33e8:	0f 90       	pop	r0
    33ea:	0f 90       	pop	r0
    33ec:	0f 90       	pop	r0
    33ee:	cf 91       	pop	r28
    33f0:	df 91       	pop	r29
    33f2:	08 95       	ret

000033f4 <LED_u8Toggle>:

u8 LED_u8Toggle(const LED_t* Copy_pled_tConfig)
{
    33f4:	df 93       	push	r29
    33f6:	cf 93       	push	r28
    33f8:	00 d0       	rcall	.+0      	; 0x33fa <LED_u8Toggle+0x6>
    33fa:	0f 92       	push	r0
    33fc:	cd b7       	in	r28, 0x3d	; 61
    33fe:	de b7       	in	r29, 0x3e	; 62
    3400:	9b 83       	std	Y+3, r25	; 0x03
    3402:	8a 83       	std	Y+2, r24	; 0x02
	u8 ret = 0;
    3404:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pled_tConfig  && Copy_pled_tConfig->Port <= DIO_PORTD_IDX && Copy_pled_tConfig->Pin <= DIO_PIN7 )
    3406:	8a 81       	ldd	r24, Y+2	; 0x02
    3408:	9b 81       	ldd	r25, Y+3	; 0x03
    340a:	00 97       	sbiw	r24, 0x00	; 0
    340c:	39 f1       	breq	.+78     	; 0x345c <LED_u8Toggle+0x68>
    340e:	ea 81       	ldd	r30, Y+2	; 0x02
    3410:	fb 81       	ldd	r31, Y+3	; 0x03
    3412:	80 81       	ld	r24, Z
    3414:	8f 70       	andi	r24, 0x0F	; 15
    3416:	88 2f       	mov	r24, r24
    3418:	90 e0       	ldi	r25, 0x00	; 0
    341a:	84 30       	cpi	r24, 0x04	; 4
    341c:	91 05       	cpc	r25, r1
    341e:	f4 f4       	brge	.+60     	; 0x345c <LED_u8Toggle+0x68>
    3420:	ea 81       	ldd	r30, Y+2	; 0x02
    3422:	fb 81       	ldd	r31, Y+3	; 0x03
    3424:	80 81       	ld	r24, Z
    3426:	82 95       	swap	r24
    3428:	8f 70       	andi	r24, 0x0F	; 15
    342a:	87 70       	andi	r24, 0x07	; 7
    342c:	88 2f       	mov	r24, r24
    342e:	90 e0       	ldi	r25, 0x00	; 0
    3430:	88 30       	cpi	r24, 0x08	; 8
    3432:	91 05       	cpc	r25, r1
    3434:	9c f4       	brge	.+38     	; 0x345c <LED_u8Toggle+0x68>
	{
		DIO_VoidTogglePinValue(Copy_pled_tConfig->Port , Copy_pled_tConfig->Pin);
    3436:	ea 81       	ldd	r30, Y+2	; 0x02
    3438:	fb 81       	ldd	r31, Y+3	; 0x03
    343a:	80 81       	ld	r24, Z
    343c:	8f 70       	andi	r24, 0x0F	; 15
    343e:	28 2f       	mov	r18, r24
    3440:	ea 81       	ldd	r30, Y+2	; 0x02
    3442:	fb 81       	ldd	r31, Y+3	; 0x03
    3444:	80 81       	ld	r24, Z
    3446:	82 95       	swap	r24
    3448:	8f 70       	andi	r24, 0x0F	; 15
    344a:	87 70       	andi	r24, 0x07	; 7
    344c:	98 2f       	mov	r25, r24
    344e:	82 2f       	mov	r24, r18
    3450:	69 2f       	mov	r22, r25
    3452:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <DIO_VoidTogglePinValue>
		ret = 1;
    3456:	81 e0       	ldi	r24, 0x01	; 1
    3458:	89 83       	std	Y+1, r24	; 0x01
    345a:	01 c0       	rjmp	.+2      	; 0x345e <LED_u8Toggle+0x6a>
	}
	else
	{
		ret = 0;
    345c:	19 82       	std	Y+1, r1	; 0x01
	}
	return ret;
    345e:	89 81       	ldd	r24, Y+1	; 0x01
}
    3460:	0f 90       	pop	r0
    3462:	0f 90       	pop	r0
    3464:	0f 90       	pop	r0
    3466:	cf 91       	pop	r28
    3468:	df 91       	pop	r29
    346a:	08 95       	ret

0000346c <LED_u8Stat>:

u8 LED_u8Stat(const LED_t* Copy_pled_tConfig)
{
    346c:	df 93       	push	r29
    346e:	cf 93       	push	r28
    3470:	00 d0       	rcall	.+0      	; 0x3472 <LED_u8Stat+0x6>
    3472:	0f 92       	push	r0
    3474:	cd b7       	in	r28, 0x3d	; 61
    3476:	de b7       	in	r29, 0x3e	; 62
    3478:	9b 83       	std	Y+3, r25	; 0x03
    347a:	8a 83       	std	Y+2, r24	; 0x02
	u8 ret = 0;
    347c:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pled_tConfig  && Copy_pled_tConfig->Port <= DIO_PORTD_IDX && Copy_pled_tConfig->Pin <= DIO_PIN7 )
    347e:	8a 81       	ldd	r24, Y+2	; 0x02
    3480:	9b 81       	ldd	r25, Y+3	; 0x03
    3482:	00 97       	sbiw	r24, 0x00	; 0
    3484:	41 f1       	breq	.+80     	; 0x34d6 <LED_u8Stat+0x6a>
    3486:	ea 81       	ldd	r30, Y+2	; 0x02
    3488:	fb 81       	ldd	r31, Y+3	; 0x03
    348a:	80 81       	ld	r24, Z
    348c:	8f 70       	andi	r24, 0x0F	; 15
    348e:	88 2f       	mov	r24, r24
    3490:	90 e0       	ldi	r25, 0x00	; 0
    3492:	84 30       	cpi	r24, 0x04	; 4
    3494:	91 05       	cpc	r25, r1
    3496:	fc f4       	brge	.+62     	; 0x34d6 <LED_u8Stat+0x6a>
    3498:	ea 81       	ldd	r30, Y+2	; 0x02
    349a:	fb 81       	ldd	r31, Y+3	; 0x03
    349c:	80 81       	ld	r24, Z
    349e:	82 95       	swap	r24
    34a0:	8f 70       	andi	r24, 0x0F	; 15
    34a2:	87 70       	andi	r24, 0x07	; 7
    34a4:	88 2f       	mov	r24, r24
    34a6:	90 e0       	ldi	r25, 0x00	; 0
    34a8:	88 30       	cpi	r24, 0x08	; 8
    34aa:	91 05       	cpc	r25, r1
    34ac:	a4 f4       	brge	.+40     	; 0x34d6 <LED_u8Stat+0x6a>
	{
		DIO_VoidGetPinValue(Copy_pled_tConfig->Port , Copy_pled_tConfig->Pin , &ret);
    34ae:	ea 81       	ldd	r30, Y+2	; 0x02
    34b0:	fb 81       	ldd	r31, Y+3	; 0x03
    34b2:	80 81       	ld	r24, Z
    34b4:	8f 70       	andi	r24, 0x0F	; 15
    34b6:	28 2f       	mov	r18, r24
    34b8:	ea 81       	ldd	r30, Y+2	; 0x02
    34ba:	fb 81       	ldd	r31, Y+3	; 0x03
    34bc:	80 81       	ld	r24, Z
    34be:	82 95       	swap	r24
    34c0:	8f 70       	andi	r24, 0x0F	; 15
    34c2:	87 70       	andi	r24, 0x07	; 7
    34c4:	98 2f       	mov	r25, r24
    34c6:	82 2f       	mov	r24, r18
    34c8:	69 2f       	mov	r22, r25
    34ca:	9e 01       	movw	r18, r28
    34cc:	2f 5f       	subi	r18, 0xFF	; 255
    34ce:	3f 4f       	sbci	r19, 0xFF	; 255
    34d0:	a9 01       	movw	r20, r18
    34d2:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <DIO_VoidGetPinValue>
	}
	else
	{
	}
	return ret;
    34d6:	89 81       	ldd	r24, Y+1	; 0x01
}
    34d8:	0f 90       	pop	r0
    34da:	0f 90       	pop	r0
    34dc:	0f 90       	pop	r0
    34de:	cf 91       	pop	r28
    34e0:	df 91       	pop	r29
    34e2:	08 95       	ret

000034e4 <LDR_VoidInit>:
#include "../../MCAL/DIO/DIO_Config.h"
#include "../../MCAL/DIO/DIO_Interface.h"


void LDR_VoidInit(ISR_FuncPtr_t Copy_ISR_FuncPtr_tAdcIsR)
{
    34e4:	df 93       	push	r29
    34e6:	cf 93       	push	r28
    34e8:	00 d0       	rcall	.+0      	; 0x34ea <LDR_VoidInit+0x6>
    34ea:	cd b7       	in	r28, 0x3d	; 61
    34ec:	de b7       	in	r29, 0x3e	; 62
    34ee:	9a 83       	std	Y+2, r25	; 0x02
    34f0:	89 83       	std	Y+1, r24	; 0x01
	DIO_VoidSetPinDirection(DIO_PORTA_IDX ,LDR_ADC_CHANNEL_CFG, DIO_PIN_DIR_INPUT);
    34f2:	80 e0       	ldi	r24, 0x00	; 0
    34f4:	60 e0       	ldi	r22, 0x00	; 0
    34f6:	40 e0       	ldi	r20, 0x00	; 0
    34f8:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <DIO_VoidSetPinDirection>
#if ADC_INTERRUPT_CFG == ADC_INTERRUPT_DISABLE_CFG
	ADC_VoidInit();
    34fc:	0e 94 df 0f 	call	0x1fbe	; 0x1fbe <ADC_VoidInit>
#endif
#if ADC_INTERRUPT_ENABLE_CFG == ADC_INTERRUPT_CFG
	ADC_VoidInit_interrupt(Copy_ISR_FuncPtr_tAdcIsR);
#endif
}
    3500:	0f 90       	pop	r0
    3502:	0f 90       	pop	r0
    3504:	cf 91       	pop	r28
    3506:	df 91       	pop	r29
    3508:	08 95       	ret

0000350a <LDR_VoidStartConv>:

void LDR_VoidStartConv(void)
{
    350a:	df 93       	push	r29
    350c:	cf 93       	push	r28
    350e:	cd b7       	in	r28, 0x3d	; 61
    3510:	de b7       	in	r29, 0x3e	; 62
	AD_CHANNEL_SELECT(LDR_ADC_CHANNEL_CFG);
    3512:	a7 e2       	ldi	r26, 0x27	; 39
    3514:	b0 e0       	ldi	r27, 0x00	; 0
    3516:	e7 e2       	ldi	r30, 0x27	; 39
    3518:	f0 e0       	ldi	r31, 0x00	; 0
    351a:	80 81       	ld	r24, Z
    351c:	80 7e       	andi	r24, 0xE0	; 224
    351e:	8c 93       	st	X, r24
	AD_STARTCONV();
    3520:	a6 e2       	ldi	r26, 0x26	; 38
    3522:	b0 e0       	ldi	r27, 0x00	; 0
    3524:	e6 e2       	ldi	r30, 0x26	; 38
    3526:	f0 e0       	ldi	r31, 0x00	; 0
    3528:	80 81       	ld	r24, Z
    352a:	80 64       	ori	r24, 0x40	; 64
    352c:	8c 93       	st	X, r24
}
    352e:	cf 91       	pop	r28
    3530:	df 91       	pop	r29
    3532:	08 95       	ret

00003534 <LDR_VoidGetTime>:


void LDR_VoidGetTime(u8* copy_pu8RetTime)
{
    3534:	df 93       	push	r29
    3536:	cf 93       	push	r28
    3538:	cd b7       	in	r28, 0x3d	; 61
    353a:	de b7       	in	r29, 0x3e	; 62
    353c:	29 97       	sbiw	r28, 0x09	; 9
    353e:	0f b6       	in	r0, 0x3f	; 63
    3540:	f8 94       	cli
    3542:	de bf       	out	0x3e, r29	; 62
    3544:	0f be       	out	0x3f, r0	; 63
    3546:	cd bf       	out	0x3d, r28	; 61
    3548:	98 87       	std	Y+8, r25	; 0x08
    354a:	8f 83       	std	Y+7, r24	; 0x07
	u16 adcVal = 0;
    354c:	1e 82       	std	Y+6, r1	; 0x06
    354e:	1d 82       	std	Y+5, r1	; 0x05
	f32 ldrVolt = 0;
    3550:	80 e0       	ldi	r24, 0x00	; 0
    3552:	90 e0       	ldi	r25, 0x00	; 0
    3554:	a0 e0       	ldi	r26, 0x00	; 0
    3556:	b0 e0       	ldi	r27, 0x00	; 0
    3558:	89 83       	std	Y+1, r24	; 0x01
    355a:	9a 83       	std	Y+2, r25	; 0x02
    355c:	ab 83       	std	Y+3, r26	; 0x03
    355e:	bc 83       	std	Y+4, r27	; 0x04
#if ADC_INTERRUPT_CFG == ADC_INTERRUPT_DISABLE_CFG
	AD_CHANNEL_SELECT(LDR_ADC_CHANNEL_CFG);
    3560:	a7 e2       	ldi	r26, 0x27	; 39
    3562:	b0 e0       	ldi	r27, 0x00	; 0
    3564:	e7 e2       	ldi	r30, 0x27	; 39
    3566:	f0 e0       	ldi	r31, 0x00	; 0
    3568:	80 81       	ld	r24, Z
    356a:	80 7e       	andi	r24, 0xE0	; 224
    356c:	8c 93       	st	X, r24
	AD_STARTCONV();
    356e:	a6 e2       	ldi	r26, 0x26	; 38
    3570:	b0 e0       	ldi	r27, 0x00	; 0
    3572:	e6 e2       	ldi	r30, 0x26	; 38
    3574:	f0 e0       	ldi	r31, 0x00	; 0
    3576:	80 81       	ld	r24, Z
    3578:	80 64       	ori	r24, 0x40	; 64
    357a:	8c 93       	st	X, r24
	while( AD_READ_CONVSTAT() == ADC_CONV_INPROGRESS_CFG )
    357c:	e6 e2       	ldi	r30, 0x26	; 38
    357e:	f0 e0       	ldi	r31, 0x00	; 0
    3580:	80 81       	ld	r24, Z
    3582:	82 95       	swap	r24
    3584:	86 95       	lsr	r24
    3586:	86 95       	lsr	r24
    3588:	83 70       	andi	r24, 0x03	; 3
    358a:	88 2f       	mov	r24, r24
    358c:	90 e0       	ldi	r25, 0x00	; 0
    358e:	81 70       	andi	r24, 0x01	; 1
    3590:	90 70       	andi	r25, 0x00	; 0
    3592:	88 23       	and	r24, r24
    3594:	99 f7       	brne	.-26     	; 0x357c <LDR_VoidGetTime+0x48>
		;
	ADC_voidReadResult(&adcVal);
    3596:	ce 01       	movw	r24, r28
    3598:	05 96       	adiw	r24, 0x05	; 5
    359a:	0e 94 49 10 	call	0x2092	; 0x2092 <ADC_voidReadResult>
	ldrVolt = (adcVal/LDR_adcVal_PER_Volt);
    359e:	8d 81       	ldd	r24, Y+5	; 0x05
    35a0:	9e 81       	ldd	r25, Y+6	; 0x06
    35a2:	cc 01       	movw	r24, r24
    35a4:	a0 e0       	ldi	r26, 0x00	; 0
    35a6:	b0 e0       	ldi	r27, 0x00	; 0
    35a8:	bc 01       	movw	r22, r24
    35aa:	cd 01       	movw	r24, r26
    35ac:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    35b0:	dc 01       	movw	r26, r24
    35b2:	cb 01       	movw	r24, r22
    35b4:	bc 01       	movw	r22, r24
    35b6:	cd 01       	movw	r24, r26
    35b8:	20 e0       	ldi	r18, 0x00	; 0
    35ba:	30 e0       	ldi	r19, 0x00	; 0
    35bc:	48 e4       	ldi	r20, 0x48	; 72
    35be:	53 e4       	ldi	r21, 0x43	; 67
    35c0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    35c4:	dc 01       	movw	r26, r24
    35c6:	cb 01       	movw	r24, r22
    35c8:	89 83       	std	Y+1, r24	; 0x01
    35ca:	9a 83       	std	Y+2, r25	; 0x02
    35cc:	ab 83       	std	Y+3, r26	; 0x03
    35ce:	bc 83       	std	Y+4, r27	; 0x04
	*copy_pu8RetTime = (ldrVolt >= LDR_NIGHT_VOLT) ? LDR_NIGHT_TIME : LDR_SUN_TIME;
    35d0:	19 86       	std	Y+9, r1	; 0x09
    35d2:	69 81       	ldd	r22, Y+1	; 0x01
    35d4:	7a 81       	ldd	r23, Y+2	; 0x02
    35d6:	8b 81       	ldd	r24, Y+3	; 0x03
    35d8:	9c 81       	ldd	r25, Y+4	; 0x04
    35da:	23 e3       	ldi	r18, 0x33	; 51
    35dc:	33 e3       	ldi	r19, 0x33	; 51
    35de:	43 e5       	ldi	r20, 0x53	; 83
    35e0:	50 e4       	ldi	r21, 0x40	; 64
    35e2:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
    35e6:	88 23       	and	r24, r24
    35e8:	14 f0       	brlt	.+4      	; 0x35ee <LDR_VoidGetTime+0xba>
    35ea:	81 e0       	ldi	r24, 0x01	; 1
    35ec:	89 87       	std	Y+9, r24	; 0x09
    35ee:	81 e0       	ldi	r24, 0x01	; 1
    35f0:	99 85       	ldd	r25, Y+9	; 0x09
    35f2:	89 27       	eor	r24, r25
    35f4:	88 2f       	mov	r24, r24
    35f6:	90 e0       	ldi	r25, 0x00	; 0
    35f8:	ef 81       	ldd	r30, Y+7	; 0x07
    35fa:	f8 85       	ldd	r31, Y+8	; 0x08
    35fc:	80 83       	st	Z, r24
#if ADC_INTERRUPT_ENABLE_CFG == ADC_INTERRUPT_CFG
	ADC_voidReadResult(&adcVal);
	ldrVolt = (adcVal/LDR_adcVal_PER_Volt);
	*copy_pu8RetTime = (ldrVolt >= LDR_NIGHT_VOLT) ? LDR_NIGHT_TIME : LDR_SUN_TIME;
#endif
}
    35fe:	29 96       	adiw	r28, 0x09	; 9
    3600:	0f b6       	in	r0, 0x3f	; 63
    3602:	f8 94       	cli
    3604:	de bf       	out	0x3e, r29	; 62
    3606:	0f be       	out	0x3f, r0	; 63
    3608:	cd bf       	out	0x3d, r28	; 61
    360a:	cf 91       	pop	r28
    360c:	df 91       	pop	r29
    360e:	08 95       	ret

00003610 <LCD_voidInit>:
static void LCD_void4Bit_SendChar(LCD_stConfig* copy_pstConfig , u8 copy_u8Char);
#endif


void LCD_voidInit(LCD_stConfig* copy_pstConfig)
{
    3610:	df 93       	push	r29
    3612:	cf 93       	push	r28
    3614:	00 d0       	rcall	.+0      	; 0x3616 <LCD_voidInit+0x6>
    3616:	cd b7       	in	r28, 0x3d	; 61
    3618:	de b7       	in	r29, 0x3e	; 62
    361a:	9a 83       	std	Y+2, r25	; 0x02
    361c:	89 83       	std	Y+1, r24	; 0x01
	if(copy_pstConfig)
    361e:	89 81       	ldd	r24, Y+1	; 0x01
    3620:	9a 81       	ldd	r25, Y+2	; 0x02
    3622:	00 97       	sbiw	r24, 0x00	; 0
    3624:	21 f0       	breq	.+8      	; 0x362e <LCD_voidInit+0x1e>
	{
#if LCD_U8_DataLen_Select == LCD_U8_8BITMODE_CONFIG
		LCD_void8Bit_Init(copy_pstConfig);
    3626:	89 81       	ldd	r24, Y+1	; 0x01
    3628:	9a 81       	ldd	r25, Y+2	; 0x02
    362a:	0e 94 41 1c 	call	0x3882	; 0x3882 <LCD_void8Bit_Init>
#endif
	}
	else {}

	return;
}
    362e:	0f 90       	pop	r0
    3630:	0f 90       	pop	r0
    3632:	cf 91       	pop	r28
    3634:	df 91       	pop	r29
    3636:	08 95       	ret

00003638 <LCD_voidSendCommand>:


void LCD_voidSendCommand(LCD_stConfig* copy_pstConfig, u8 copy_u8Command)
{
    3638:	df 93       	push	r29
    363a:	cf 93       	push	r28
    363c:	00 d0       	rcall	.+0      	; 0x363e <LCD_voidSendCommand+0x6>
    363e:	0f 92       	push	r0
    3640:	cd b7       	in	r28, 0x3d	; 61
    3642:	de b7       	in	r29, 0x3e	; 62
    3644:	9a 83       	std	Y+2, r25	; 0x02
    3646:	89 83       	std	Y+1, r24	; 0x01
    3648:	6b 83       	std	Y+3, r22	; 0x03
	if(copy_pstConfig && copy_u8Command <=255 )
    364a:	89 81       	ldd	r24, Y+1	; 0x01
    364c:	9a 81       	ldd	r25, Y+2	; 0x02
    364e:	00 97       	sbiw	r24, 0x00	; 0
    3650:	29 f0       	breq	.+10     	; 0x365c <LCD_voidSendCommand+0x24>
	{
#if LCD_U8_DataLen_Select == LCD_U8_8BITMODE_CONFIG
		LCD_void8Bit_SendCommand(copy_pstConfig,copy_u8Command);
    3652:	89 81       	ldd	r24, Y+1	; 0x01
    3654:	9a 81       	ldd	r25, Y+2	; 0x02
    3656:	6b 81       	ldd	r22, Y+3	; 0x03
    3658:	0e 94 79 1e 	call	0x3cf2	; 0x3cf2 <LCD_void8Bit_SendCommand>
	else
	{
		/*nothing*/
	}
	return;
}
    365c:	0f 90       	pop	r0
    365e:	0f 90       	pop	r0
    3660:	0f 90       	pop	r0
    3662:	cf 91       	pop	r28
    3664:	df 91       	pop	r29
    3666:	08 95       	ret

00003668 <LCD_voidSendChar>:




void LCD_voidSendChar(LCD_stConfig* copy_pstConfig , u8 copy_u8Char)
{
    3668:	df 93       	push	r29
    366a:	cf 93       	push	r28
    366c:	00 d0       	rcall	.+0      	; 0x366e <LCD_voidSendChar+0x6>
    366e:	0f 92       	push	r0
    3670:	cd b7       	in	r28, 0x3d	; 61
    3672:	de b7       	in	r29, 0x3e	; 62
    3674:	9a 83       	std	Y+2, r25	; 0x02
    3676:	89 83       	std	Y+1, r24	; 0x01
    3678:	6b 83       	std	Y+3, r22	; 0x03
	if(copy_pstConfig && copy_u8Char <=255)
    367a:	89 81       	ldd	r24, Y+1	; 0x01
    367c:	9a 81       	ldd	r25, Y+2	; 0x02
    367e:	00 97       	sbiw	r24, 0x00	; 0
    3680:	29 f0       	breq	.+10     	; 0x368c <LCD_voidSendChar+0x24>
	{
#if LCD_U8_DataLen_Select == LCD_U8_8BITMODE_CONFIG
		LCD_void8Bit_SendChar(copy_pstConfig,copy_u8Char);
    3682:	89 81       	ldd	r24, Y+1	; 0x01
    3684:	9a 81       	ldd	r25, Y+2	; 0x02
    3686:	6b 81       	ldd	r22, Y+3	; 0x03
    3688:	0e 94 d5 1f 	call	0x3faa	; 0x3faa <LCD_void8Bit_SendChar>
	else
	{
		/*nothing*/
	}
	return;
}
    368c:	0f 90       	pop	r0
    368e:	0f 90       	pop	r0
    3690:	0f 90       	pop	r0
    3692:	cf 91       	pop	r28
    3694:	df 91       	pop	r29
    3696:	08 95       	ret

00003698 <LCD_voidSetCursor>:

void LCD_voidSetCursor(LCD_stConfig* copy_pstConfig , u8 copy_u8Row , u8 copy_u8Colum)
{
    3698:	df 93       	push	r29
    369a:	cf 93       	push	r28
    369c:	00 d0       	rcall	.+0      	; 0x369e <LCD_voidSetCursor+0x6>
    369e:	00 d0       	rcall	.+0      	; 0x36a0 <LCD_voidSetCursor+0x8>
    36a0:	cd b7       	in	r28, 0x3d	; 61
    36a2:	de b7       	in	r29, 0x3e	; 62
    36a4:	9a 83       	std	Y+2, r25	; 0x02
    36a6:	89 83       	std	Y+1, r24	; 0x01
    36a8:	6b 83       	std	Y+3, r22	; 0x03
    36aa:	4c 83       	std	Y+4, r20	; 0x04
	if(copy_pstConfig && copy_u8Row <=LCD_U8ROW2 && copy_u8Colum <= LCD_U8COL16 )
    36ac:	89 81       	ldd	r24, Y+1	; 0x01
    36ae:	9a 81       	ldd	r25, Y+2	; 0x02
    36b0:	00 97       	sbiw	r24, 0x00	; 0
    36b2:	81 f0       	breq	.+32     	; 0x36d4 <LCD_voidSetCursor+0x3c>
    36b4:	8b 81       	ldd	r24, Y+3	; 0x03
    36b6:	81 34       	cpi	r24, 0x41	; 65
    36b8:	68 f4       	brcc	.+26     	; 0x36d4 <LCD_voidSetCursor+0x3c>
    36ba:	8c 81       	ldd	r24, Y+4	; 0x04
    36bc:	80 31       	cpi	r24, 0x10	; 16
    36be:	50 f4       	brcc	.+20     	; 0x36d4 <LCD_voidSetCursor+0x3c>
	{
		LCD_voidSendCommand(copy_pstConfig ,  (LCD_U8DDRAM_OFFSET | (copy_u8Row + copy_u8Colum)) );
    36c0:	9b 81       	ldd	r25, Y+3	; 0x03
    36c2:	8c 81       	ldd	r24, Y+4	; 0x04
    36c4:	89 0f       	add	r24, r25
    36c6:	80 68       	ori	r24, 0x80	; 128
    36c8:	28 2f       	mov	r18, r24
    36ca:	89 81       	ldd	r24, Y+1	; 0x01
    36cc:	9a 81       	ldd	r25, Y+2	; 0x02
    36ce:	62 2f       	mov	r22, r18
    36d0:	0e 94 1c 1b 	call	0x3638	; 0x3638 <LCD_voidSendCommand>
	else
	{
		/*nothing*/
	}
	return;
}
    36d4:	0f 90       	pop	r0
    36d6:	0f 90       	pop	r0
    36d8:	0f 90       	pop	r0
    36da:	0f 90       	pop	r0
    36dc:	cf 91       	pop	r28
    36de:	df 91       	pop	r29
    36e0:	08 95       	ret

000036e2 <LCD_voidSendChar_Postion>:

void LCD_voidSendChar_Postion(LCD_stConfig* copy_pstConfig , u8 copy_u8Char , u8 copy_u8Row , u8 copy_u8Colum)
{
    36e2:	df 93       	push	r29
    36e4:	cf 93       	push	r28
    36e6:	00 d0       	rcall	.+0      	; 0x36e8 <LCD_voidSendChar_Postion+0x6>
    36e8:	00 d0       	rcall	.+0      	; 0x36ea <LCD_voidSendChar_Postion+0x8>
    36ea:	0f 92       	push	r0
    36ec:	cd b7       	in	r28, 0x3d	; 61
    36ee:	de b7       	in	r29, 0x3e	; 62
    36f0:	9a 83       	std	Y+2, r25	; 0x02
    36f2:	89 83       	std	Y+1, r24	; 0x01
    36f4:	6b 83       	std	Y+3, r22	; 0x03
    36f6:	4c 83       	std	Y+4, r20	; 0x04
    36f8:	2d 83       	std	Y+5, r18	; 0x05
	LCD_voidSetCursor(copy_pstConfig,copy_u8Row,copy_u8Colum);
    36fa:	89 81       	ldd	r24, Y+1	; 0x01
    36fc:	9a 81       	ldd	r25, Y+2	; 0x02
    36fe:	6c 81       	ldd	r22, Y+4	; 0x04
    3700:	4d 81       	ldd	r20, Y+5	; 0x05
    3702:	0e 94 4c 1b 	call	0x3698	; 0x3698 <LCD_voidSetCursor>
	LCD_voidSendChar(copy_pstConfig,copy_u8Char);
    3706:	89 81       	ldd	r24, Y+1	; 0x01
    3708:	9a 81       	ldd	r25, Y+2	; 0x02
    370a:	6b 81       	ldd	r22, Y+3	; 0x03
    370c:	0e 94 34 1b 	call	0x3668	; 0x3668 <LCD_voidSendChar>
}
    3710:	0f 90       	pop	r0
    3712:	0f 90       	pop	r0
    3714:	0f 90       	pop	r0
    3716:	0f 90       	pop	r0
    3718:	0f 90       	pop	r0
    371a:	cf 91       	pop	r28
    371c:	df 91       	pop	r29
    371e:	08 95       	ret

00003720 <LCD_voidSendString>:

void LCD_voidSendString(LCD_stConfig* copy_pstConfig , u8* copy_pu8str)
{
    3720:	df 93       	push	r29
    3722:	cf 93       	push	r28
    3724:	00 d0       	rcall	.+0      	; 0x3726 <LCD_voidSendString+0x6>
    3726:	00 d0       	rcall	.+0      	; 0x3728 <LCD_voidSendString+0x8>
    3728:	0f 92       	push	r0
    372a:	cd b7       	in	r28, 0x3d	; 61
    372c:	de b7       	in	r29, 0x3e	; 62
    372e:	9b 83       	std	Y+3, r25	; 0x03
    3730:	8a 83       	std	Y+2, r24	; 0x02
    3732:	7d 83       	std	Y+5, r23	; 0x05
    3734:	6c 83       	std	Y+4, r22	; 0x04
	if(copy_pstConfig && copy_pu8str)
    3736:	8a 81       	ldd	r24, Y+2	; 0x02
    3738:	9b 81       	ldd	r25, Y+3	; 0x03
    373a:	00 97       	sbiw	r24, 0x00	; 0
    373c:	11 f1       	breq	.+68     	; 0x3782 <LCD_voidSendString+0x62>
    373e:	8c 81       	ldd	r24, Y+4	; 0x04
    3740:	9d 81       	ldd	r25, Y+5	; 0x05
    3742:	00 97       	sbiw	r24, 0x00	; 0
    3744:	f1 f0       	breq	.+60     	; 0x3782 <LCD_voidSendString+0x62>
	{
		u8 i = 0;
    3746:	19 82       	std	Y+1, r1	; 0x01
    3748:	11 c0       	rjmp	.+34     	; 0x376c <LCD_voidSendString+0x4c>
		while(copy_pu8str[i])
		{
			LCD_voidSendChar(copy_pstConfig,copy_pu8str[i++]);
    374a:	89 81       	ldd	r24, Y+1	; 0x01
    374c:	28 2f       	mov	r18, r24
    374e:	30 e0       	ldi	r19, 0x00	; 0
    3750:	8c 81       	ldd	r24, Y+4	; 0x04
    3752:	9d 81       	ldd	r25, Y+5	; 0x05
    3754:	fc 01       	movw	r30, r24
    3756:	e2 0f       	add	r30, r18
    3758:	f3 1f       	adc	r31, r19
    375a:	20 81       	ld	r18, Z
    375c:	89 81       	ldd	r24, Y+1	; 0x01
    375e:	8f 5f       	subi	r24, 0xFF	; 255
    3760:	89 83       	std	Y+1, r24	; 0x01
    3762:	8a 81       	ldd	r24, Y+2	; 0x02
    3764:	9b 81       	ldd	r25, Y+3	; 0x03
    3766:	62 2f       	mov	r22, r18
    3768:	0e 94 34 1b 	call	0x3668	; 0x3668 <LCD_voidSendChar>
void LCD_voidSendString(LCD_stConfig* copy_pstConfig , u8* copy_pu8str)
{
	if(copy_pstConfig && copy_pu8str)
	{
		u8 i = 0;
		while(copy_pu8str[i])
    376c:	89 81       	ldd	r24, Y+1	; 0x01
    376e:	28 2f       	mov	r18, r24
    3770:	30 e0       	ldi	r19, 0x00	; 0
    3772:	8c 81       	ldd	r24, Y+4	; 0x04
    3774:	9d 81       	ldd	r25, Y+5	; 0x05
    3776:	fc 01       	movw	r30, r24
    3778:	e2 0f       	add	r30, r18
    377a:	f3 1f       	adc	r31, r19
    377c:	80 81       	ld	r24, Z
    377e:	88 23       	and	r24, r24
    3780:	21 f7       	brne	.-56     	; 0x374a <LCD_voidSendString+0x2a>
	else
	{
		/*nothing*/
	}
	return;
}
    3782:	0f 90       	pop	r0
    3784:	0f 90       	pop	r0
    3786:	0f 90       	pop	r0
    3788:	0f 90       	pop	r0
    378a:	0f 90       	pop	r0
    378c:	cf 91       	pop	r28
    378e:	df 91       	pop	r29
    3790:	08 95       	ret

00003792 <LCD_voidSendString_Postion>:
void LCD_voidSendString_Postion(LCD_stConfig* copy_pstConfig , u8* copy_pu8str, u8 copy_u8Row , u8 copy_u8Colum)
{
    3792:	df 93       	push	r29
    3794:	cf 93       	push	r28
    3796:	00 d0       	rcall	.+0      	; 0x3798 <LCD_voidSendString_Postion+0x6>
    3798:	00 d0       	rcall	.+0      	; 0x379a <LCD_voidSendString_Postion+0x8>
    379a:	00 d0       	rcall	.+0      	; 0x379c <LCD_voidSendString_Postion+0xa>
    379c:	cd b7       	in	r28, 0x3d	; 61
    379e:	de b7       	in	r29, 0x3e	; 62
    37a0:	9a 83       	std	Y+2, r25	; 0x02
    37a2:	89 83       	std	Y+1, r24	; 0x01
    37a4:	7c 83       	std	Y+4, r23	; 0x04
    37a6:	6b 83       	std	Y+3, r22	; 0x03
    37a8:	4d 83       	std	Y+5, r20	; 0x05
    37aa:	2e 83       	std	Y+6, r18	; 0x06
	LCD_voidSetCursor(copy_pstConfig,copy_u8Row,copy_u8Colum);
    37ac:	89 81       	ldd	r24, Y+1	; 0x01
    37ae:	9a 81       	ldd	r25, Y+2	; 0x02
    37b0:	6d 81       	ldd	r22, Y+5	; 0x05
    37b2:	4e 81       	ldd	r20, Y+6	; 0x06
    37b4:	0e 94 4c 1b 	call	0x3698	; 0x3698 <LCD_voidSetCursor>
	LCD_voidSendString(copy_pstConfig,copy_pu8str);
    37b8:	89 81       	ldd	r24, Y+1	; 0x01
    37ba:	9a 81       	ldd	r25, Y+2	; 0x02
    37bc:	2b 81       	ldd	r18, Y+3	; 0x03
    37be:	3c 81       	ldd	r19, Y+4	; 0x04
    37c0:	b9 01       	movw	r22, r18
    37c2:	0e 94 90 1b 	call	0x3720	; 0x3720 <LCD_voidSendString>
}
    37c6:	26 96       	adiw	r28, 0x06	; 6
    37c8:	0f b6       	in	r0, 0x3f	; 63
    37ca:	f8 94       	cli
    37cc:	de bf       	out	0x3e, r29	; 62
    37ce:	0f be       	out	0x3f, r0	; 63
    37d0:	cd bf       	out	0x3d, r28	; 61
    37d2:	cf 91       	pop	r28
    37d4:	df 91       	pop	r29
    37d6:	08 95       	ret

000037d8 <LCD_voidShiftScreenLeft>:

void LCD_voidShiftScreenLeft(LCD_stConfig* copy_pstConfig)
{
    37d8:	df 93       	push	r29
    37da:	cf 93       	push	r28
    37dc:	00 d0       	rcall	.+0      	; 0x37de <LCD_voidShiftScreenLeft+0x6>
    37de:	cd b7       	in	r28, 0x3d	; 61
    37e0:	de b7       	in	r29, 0x3e	; 62
    37e2:	9a 83       	std	Y+2, r25	; 0x02
    37e4:	89 83       	std	Y+1, r24	; 0x01
	LCD_voidSendCommand(copy_pstConfig , LCD_u8SHIFTALL_LEFT);
    37e6:	89 81       	ldd	r24, Y+1	; 0x01
    37e8:	9a 81       	ldd	r25, Y+2	; 0x02
    37ea:	6c e1       	ldi	r22, 0x1C	; 28
    37ec:	0e 94 1c 1b 	call	0x3638	; 0x3638 <LCD_voidSendCommand>
}
    37f0:	0f 90       	pop	r0
    37f2:	0f 90       	pop	r0
    37f4:	cf 91       	pop	r28
    37f6:	df 91       	pop	r29
    37f8:	08 95       	ret

000037fa <LCD_voidShiftScreenRight>:
void LCD_voidShiftScreenRight(LCD_stConfig* copy_pstConfig)
{
    37fa:	df 93       	push	r29
    37fc:	cf 93       	push	r28
    37fe:	00 d0       	rcall	.+0      	; 0x3800 <LCD_voidShiftScreenRight+0x6>
    3800:	cd b7       	in	r28, 0x3d	; 61
    3802:	de b7       	in	r29, 0x3e	; 62
    3804:	9a 83       	std	Y+2, r25	; 0x02
    3806:	89 83       	std	Y+1, r24	; 0x01
	LCD_voidSendCommand(copy_pstConfig , LCD_u8SHIFTALL_RIGHT);
    3808:	89 81       	ldd	r24, Y+1	; 0x01
    380a:	9a 81       	ldd	r25, Y+2	; 0x02
    380c:	68 e1       	ldi	r22, 0x18	; 24
    380e:	0e 94 1c 1b 	call	0x3638	; 0x3638 <LCD_voidSendCommand>
}
    3812:	0f 90       	pop	r0
    3814:	0f 90       	pop	r0
    3816:	cf 91       	pop	r28
    3818:	df 91       	pop	r29
    381a:	08 95       	ret

0000381c <LCD_voidShiftCursorLeft>:

void LCD_voidShiftCursorLeft(LCD_stConfig* copy_pstConfig)
{
    381c:	df 93       	push	r29
    381e:	cf 93       	push	r28
    3820:	00 d0       	rcall	.+0      	; 0x3822 <LCD_voidShiftCursorLeft+0x6>
    3822:	cd b7       	in	r28, 0x3d	; 61
    3824:	de b7       	in	r29, 0x3e	; 62
    3826:	9a 83       	std	Y+2, r25	; 0x02
    3828:	89 83       	std	Y+1, r24	; 0x01
	LCD_voidSendCommand(copy_pstConfig , LCD_u8SHIFT_CUR_LEFT);
    382a:	89 81       	ldd	r24, Y+1	; 0x01
    382c:	9a 81       	ldd	r25, Y+2	; 0x02
    382e:	64 e1       	ldi	r22, 0x14	; 20
    3830:	0e 94 1c 1b 	call	0x3638	; 0x3638 <LCD_voidSendCommand>
}
    3834:	0f 90       	pop	r0
    3836:	0f 90       	pop	r0
    3838:	cf 91       	pop	r28
    383a:	df 91       	pop	r29
    383c:	08 95       	ret

0000383e <LCD_voidShiftCursorRight>:
void LCD_voidShiftCursorRight(LCD_stConfig* copy_pstConfig)
{
    383e:	df 93       	push	r29
    3840:	cf 93       	push	r28
    3842:	00 d0       	rcall	.+0      	; 0x3844 <LCD_voidShiftCursorRight+0x6>
    3844:	cd b7       	in	r28, 0x3d	; 61
    3846:	de b7       	in	r29, 0x3e	; 62
    3848:	9a 83       	std	Y+2, r25	; 0x02
    384a:	89 83       	std	Y+1, r24	; 0x01
	LCD_voidSendCommand(copy_pstConfig , LCD_u8SHIFT_CUR_RIGHT);
    384c:	89 81       	ldd	r24, Y+1	; 0x01
    384e:	9a 81       	ldd	r25, Y+2	; 0x02
    3850:	60 e1       	ldi	r22, 0x10	; 16
    3852:	0e 94 1c 1b 	call	0x3638	; 0x3638 <LCD_voidSendCommand>
}
    3856:	0f 90       	pop	r0
    3858:	0f 90       	pop	r0
    385a:	cf 91       	pop	r28
    385c:	df 91       	pop	r29
    385e:	08 95       	ret

00003860 <LCD_voidClearDisplay>:

void LCD_voidClearDisplay(LCD_stConfig* copy_pstConfig)
{
    3860:	df 93       	push	r29
    3862:	cf 93       	push	r28
    3864:	00 d0       	rcall	.+0      	; 0x3866 <LCD_voidClearDisplay+0x6>
    3866:	cd b7       	in	r28, 0x3d	; 61
    3868:	de b7       	in	r29, 0x3e	; 62
    386a:	9a 83       	std	Y+2, r25	; 0x02
    386c:	89 83       	std	Y+1, r24	; 0x01
	LCD_voidSendCommand(copy_pstConfig , LCD_u8ClEAR_DISPLAY);
    386e:	89 81       	ldd	r24, Y+1	; 0x01
    3870:	9a 81       	ldd	r25, Y+2	; 0x02
    3872:	61 e0       	ldi	r22, 0x01	; 1
    3874:	0e 94 1c 1b 	call	0x3638	; 0x3638 <LCD_voidSendCommand>
}
    3878:	0f 90       	pop	r0
    387a:	0f 90       	pop	r0
    387c:	cf 91       	pop	r28
    387e:	df 91       	pop	r29
    3880:	08 95       	ret

00003882 <LCD_void8Bit_Init>:

#if LCD_U8_DataLen_Select == LCD_U8_8BITMODE_CONFIG

static void LCD_void8Bit_Init(LCD_stConfig* copy_pstConfig)
{
    3882:	df 93       	push	r29
    3884:	cf 93       	push	r28
    3886:	cd b7       	in	r28, 0x3d	; 61
    3888:	de b7       	in	r29, 0x3e	; 62
    388a:	ea 97       	sbiw	r28, 0x3a	; 58
    388c:	0f b6       	in	r0, 0x3f	; 63
    388e:	f8 94       	cli
    3890:	de bf       	out	0x3e, r29	; 62
    3892:	0f be       	out	0x3f, r0	; 63
    3894:	cd bf       	out	0x3d, r28	; 61
    3896:	9a af       	std	Y+58, r25	; 0x3a
    3898:	89 af       	std	Y+57, r24	; 0x39
	/* init data port direction*/
	DIO_VoidSetPortDirection(copy_pstConfig->LCD_u8DataPort, DIO_PORT_DIR_OUTPUT);
    389a:	e9 ad       	ldd	r30, Y+57	; 0x39
    389c:	fa ad       	ldd	r31, Y+58	; 0x3a
    389e:	80 81       	ld	r24, Z
    38a0:	83 70       	andi	r24, 0x03	; 3
    38a2:	6f ef       	ldi	r22, 0xFF	; 255
    38a4:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <DIO_VoidSetPortDirection>
	/*set direction for rs pin*/
	DIO_VoidSetPinDirection(copy_pstConfig->LCD_u8RsPort , copy_pstConfig->LCD_u8RsPin , DIO_PIN_DIR_OUTPUT);
    38a8:	e9 ad       	ldd	r30, Y+57	; 0x39
    38aa:	fa ad       	ldd	r31, Y+58	; 0x3a
    38ac:	80 81       	ld	r24, Z
    38ae:	86 95       	lsr	r24
    38b0:	86 95       	lsr	r24
    38b2:	83 70       	andi	r24, 0x03	; 3
    38b4:	28 2f       	mov	r18, r24
    38b6:	e9 ad       	ldd	r30, Y+57	; 0x39
    38b8:	fa ad       	ldd	r31, Y+58	; 0x3a
    38ba:	81 81       	ldd	r24, Z+1	; 0x01
    38bc:	87 70       	andi	r24, 0x07	; 7
    38be:	98 2f       	mov	r25, r24
    38c0:	82 2f       	mov	r24, r18
    38c2:	69 2f       	mov	r22, r25
    38c4:	41 e0       	ldi	r20, 0x01	; 1
    38c6:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <DIO_VoidSetPinDirection>
	/*set direction for rw pin*/
	DIO_VoidSetPinDirection(copy_pstConfig->LCD_u8RwPort , copy_pstConfig->LCD_u8RwPin , DIO_PIN_DIR_OUTPUT);
    38ca:	e9 ad       	ldd	r30, Y+57	; 0x39
    38cc:	fa ad       	ldd	r31, Y+58	; 0x3a
    38ce:	80 81       	ld	r24, Z
    38d0:	82 95       	swap	r24
    38d2:	8f 70       	andi	r24, 0x0F	; 15
    38d4:	83 70       	andi	r24, 0x03	; 3
    38d6:	28 2f       	mov	r18, r24
    38d8:	e9 ad       	ldd	r30, Y+57	; 0x39
    38da:	fa ad       	ldd	r31, Y+58	; 0x3a
    38dc:	81 81       	ldd	r24, Z+1	; 0x01
    38de:	86 95       	lsr	r24
    38e0:	86 95       	lsr	r24
    38e2:	86 95       	lsr	r24
    38e4:	87 70       	andi	r24, 0x07	; 7
    38e6:	98 2f       	mov	r25, r24
    38e8:	82 2f       	mov	r24, r18
    38ea:	69 2f       	mov	r22, r25
    38ec:	41 e0       	ldi	r20, 0x01	; 1
    38ee:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <DIO_VoidSetPinDirection>
	/*set direction for Enable pin*/
	DIO_VoidSetPinDirection(copy_pstConfig->LCD_u8EnablePort , copy_pstConfig->LCD_u8EnablePin , DIO_PIN_DIR_OUTPUT);
    38f2:	e9 ad       	ldd	r30, Y+57	; 0x39
    38f4:	fa ad       	ldd	r31, Y+58	; 0x3a
    38f6:	80 81       	ld	r24, Z
    38f8:	82 95       	swap	r24
    38fa:	86 95       	lsr	r24
    38fc:	86 95       	lsr	r24
    38fe:	83 70       	andi	r24, 0x03	; 3
    3900:	28 2f       	mov	r18, r24
    3902:	e9 ad       	ldd	r30, Y+57	; 0x39
    3904:	fa ad       	ldd	r31, Y+58	; 0x3a
    3906:	81 81       	ldd	r24, Z+1	; 0x01
    3908:	98 2f       	mov	r25, r24
    390a:	92 95       	swap	r25
    390c:	96 95       	lsr	r25
    390e:	96 95       	lsr	r25
    3910:	93 70       	andi	r25, 0x03	; 3
    3912:	82 81       	ldd	r24, Z+2	; 0x02
    3914:	81 70       	andi	r24, 0x01	; 1
    3916:	88 0f       	add	r24, r24
    3918:	88 0f       	add	r24, r24
    391a:	89 2b       	or	r24, r25
    391c:	98 2f       	mov	r25, r24
    391e:	82 2f       	mov	r24, r18
    3920:	69 2f       	mov	r22, r25
    3922:	41 e0       	ldi	r20, 0x01	; 1
    3924:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <DIO_VoidSetPinDirection>
    3928:	80 e0       	ldi	r24, 0x00	; 0
    392a:	90 e0       	ldi	r25, 0x00	; 0
    392c:	a0 ef       	ldi	r26, 0xF0	; 240
    392e:	b1 e4       	ldi	r27, 0x41	; 65
    3930:	8d ab       	std	Y+53, r24	; 0x35
    3932:	9e ab       	std	Y+54, r25	; 0x36
    3934:	af ab       	std	Y+55, r26	; 0x37
    3936:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3938:	6d a9       	ldd	r22, Y+53	; 0x35
    393a:	7e a9       	ldd	r23, Y+54	; 0x36
    393c:	8f a9       	ldd	r24, Y+55	; 0x37
    393e:	98 ad       	ldd	r25, Y+56	; 0x38
    3940:	20 e0       	ldi	r18, 0x00	; 0
    3942:	30 e0       	ldi	r19, 0x00	; 0
    3944:	4a ef       	ldi	r20, 0xFA	; 250
    3946:	54 e4       	ldi	r21, 0x44	; 68
    3948:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    394c:	dc 01       	movw	r26, r24
    394e:	cb 01       	movw	r24, r22
    3950:	89 ab       	std	Y+49, r24	; 0x31
    3952:	9a ab       	std	Y+50, r25	; 0x32
    3954:	ab ab       	std	Y+51, r26	; 0x33
    3956:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3958:	69 a9       	ldd	r22, Y+49	; 0x31
    395a:	7a a9       	ldd	r23, Y+50	; 0x32
    395c:	8b a9       	ldd	r24, Y+51	; 0x33
    395e:	9c a9       	ldd	r25, Y+52	; 0x34
    3960:	20 e0       	ldi	r18, 0x00	; 0
    3962:	30 e0       	ldi	r19, 0x00	; 0
    3964:	40 e8       	ldi	r20, 0x80	; 128
    3966:	5f e3       	ldi	r21, 0x3F	; 63
    3968:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    396c:	88 23       	and	r24, r24
    396e:	2c f4       	brge	.+10     	; 0x397a <LCD_void8Bit_Init+0xf8>
		__ticks = 1;
    3970:	81 e0       	ldi	r24, 0x01	; 1
    3972:	90 e0       	ldi	r25, 0x00	; 0
    3974:	98 ab       	std	Y+48, r25	; 0x30
    3976:	8f a7       	std	Y+47, r24	; 0x2f
    3978:	3f c0       	rjmp	.+126    	; 0x39f8 <LCD_void8Bit_Init+0x176>
	else if (__tmp > 65535)
    397a:	69 a9       	ldd	r22, Y+49	; 0x31
    397c:	7a a9       	ldd	r23, Y+50	; 0x32
    397e:	8b a9       	ldd	r24, Y+51	; 0x33
    3980:	9c a9       	ldd	r25, Y+52	; 0x34
    3982:	20 e0       	ldi	r18, 0x00	; 0
    3984:	3f ef       	ldi	r19, 0xFF	; 255
    3986:	4f e7       	ldi	r20, 0x7F	; 127
    3988:	57 e4       	ldi	r21, 0x47	; 71
    398a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    398e:	18 16       	cp	r1, r24
    3990:	4c f5       	brge	.+82     	; 0x39e4 <LCD_void8Bit_Init+0x162>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3992:	6d a9       	ldd	r22, Y+53	; 0x35
    3994:	7e a9       	ldd	r23, Y+54	; 0x36
    3996:	8f a9       	ldd	r24, Y+55	; 0x37
    3998:	98 ad       	ldd	r25, Y+56	; 0x38
    399a:	20 e0       	ldi	r18, 0x00	; 0
    399c:	30 e0       	ldi	r19, 0x00	; 0
    399e:	40 e2       	ldi	r20, 0x20	; 32
    39a0:	51 e4       	ldi	r21, 0x41	; 65
    39a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39a6:	dc 01       	movw	r26, r24
    39a8:	cb 01       	movw	r24, r22
    39aa:	bc 01       	movw	r22, r24
    39ac:	cd 01       	movw	r24, r26
    39ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39b2:	dc 01       	movw	r26, r24
    39b4:	cb 01       	movw	r24, r22
    39b6:	98 ab       	std	Y+48, r25	; 0x30
    39b8:	8f a7       	std	Y+47, r24	; 0x2f
    39ba:	0f c0       	rjmp	.+30     	; 0x39da <LCD_void8Bit_Init+0x158>
    39bc:	88 ec       	ldi	r24, 0xC8	; 200
    39be:	90 e0       	ldi	r25, 0x00	; 0
    39c0:	9e a7       	std	Y+46, r25	; 0x2e
    39c2:	8d a7       	std	Y+45, r24	; 0x2d
    39c4:	8d a5       	ldd	r24, Y+45	; 0x2d
    39c6:	9e a5       	ldd	r25, Y+46	; 0x2e
    39c8:	01 97       	sbiw	r24, 0x01	; 1
    39ca:	f1 f7       	brne	.-4      	; 0x39c8 <LCD_void8Bit_Init+0x146>
    39cc:	9e a7       	std	Y+46, r25	; 0x2e
    39ce:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39d0:	8f a5       	ldd	r24, Y+47	; 0x2f
    39d2:	98 a9       	ldd	r25, Y+48	; 0x30
    39d4:	01 97       	sbiw	r24, 0x01	; 1
    39d6:	98 ab       	std	Y+48, r25	; 0x30
    39d8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39da:	8f a5       	ldd	r24, Y+47	; 0x2f
    39dc:	98 a9       	ldd	r25, Y+48	; 0x30
    39de:	00 97       	sbiw	r24, 0x00	; 0
    39e0:	69 f7       	brne	.-38     	; 0x39bc <LCD_void8Bit_Init+0x13a>
    39e2:	14 c0       	rjmp	.+40     	; 0x3a0c <LCD_void8Bit_Init+0x18a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39e4:	69 a9       	ldd	r22, Y+49	; 0x31
    39e6:	7a a9       	ldd	r23, Y+50	; 0x32
    39e8:	8b a9       	ldd	r24, Y+51	; 0x33
    39ea:	9c a9       	ldd	r25, Y+52	; 0x34
    39ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39f0:	dc 01       	movw	r26, r24
    39f2:	cb 01       	movw	r24, r22
    39f4:	98 ab       	std	Y+48, r25	; 0x30
    39f6:	8f a7       	std	Y+47, r24	; 0x2f
    39f8:	8f a5       	ldd	r24, Y+47	; 0x2f
    39fa:	98 a9       	ldd	r25, Y+48	; 0x30
    39fc:	9c a7       	std	Y+44, r25	; 0x2c
    39fe:	8b a7       	std	Y+43, r24	; 0x2b
    3a00:	8b a5       	ldd	r24, Y+43	; 0x2b
    3a02:	9c a5       	ldd	r25, Y+44	; 0x2c
    3a04:	01 97       	sbiw	r24, 0x01	; 1
    3a06:	f1 f7       	brne	.-4      	; 0x3a04 <LCD_void8Bit_Init+0x182>
    3a08:	9c a7       	std	Y+44, r25	; 0x2c
    3a0a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(30);
	// send function set command
	LCD_voidSendCommand(copy_pstConfig , LCD_u8FUNCTION_SET);
    3a0c:	89 ad       	ldd	r24, Y+57	; 0x39
    3a0e:	9a ad       	ldd	r25, Y+58	; 0x3a
    3a10:	68 e3       	ldi	r22, 0x38	; 56
    3a12:	0e 94 1c 1b 	call	0x3638	; 0x3638 <LCD_voidSendCommand>
    3a16:	80 e0       	ldi	r24, 0x00	; 0
    3a18:	90 e0       	ldi	r25, 0x00	; 0
    3a1a:	a0 e8       	ldi	r26, 0x80	; 128
    3a1c:	bf e3       	ldi	r27, 0x3F	; 63
    3a1e:	8f a3       	std	Y+39, r24	; 0x27
    3a20:	98 a7       	std	Y+40, r25	; 0x28
    3a22:	a9 a7       	std	Y+41, r26	; 0x29
    3a24:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a26:	6f a1       	ldd	r22, Y+39	; 0x27
    3a28:	78 a5       	ldd	r23, Y+40	; 0x28
    3a2a:	89 a5       	ldd	r24, Y+41	; 0x29
    3a2c:	9a a5       	ldd	r25, Y+42	; 0x2a
    3a2e:	20 e0       	ldi	r18, 0x00	; 0
    3a30:	30 e0       	ldi	r19, 0x00	; 0
    3a32:	4a ef       	ldi	r20, 0xFA	; 250
    3a34:	54 e4       	ldi	r21, 0x44	; 68
    3a36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a3a:	dc 01       	movw	r26, r24
    3a3c:	cb 01       	movw	r24, r22
    3a3e:	8b a3       	std	Y+35, r24	; 0x23
    3a40:	9c a3       	std	Y+36, r25	; 0x24
    3a42:	ad a3       	std	Y+37, r26	; 0x25
    3a44:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3a46:	6b a1       	ldd	r22, Y+35	; 0x23
    3a48:	7c a1       	ldd	r23, Y+36	; 0x24
    3a4a:	8d a1       	ldd	r24, Y+37	; 0x25
    3a4c:	9e a1       	ldd	r25, Y+38	; 0x26
    3a4e:	20 e0       	ldi	r18, 0x00	; 0
    3a50:	30 e0       	ldi	r19, 0x00	; 0
    3a52:	40 e8       	ldi	r20, 0x80	; 128
    3a54:	5f e3       	ldi	r21, 0x3F	; 63
    3a56:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3a5a:	88 23       	and	r24, r24
    3a5c:	2c f4       	brge	.+10     	; 0x3a68 <LCD_void8Bit_Init+0x1e6>
		__ticks = 1;
    3a5e:	81 e0       	ldi	r24, 0x01	; 1
    3a60:	90 e0       	ldi	r25, 0x00	; 0
    3a62:	9a a3       	std	Y+34, r25	; 0x22
    3a64:	89 a3       	std	Y+33, r24	; 0x21
    3a66:	3f c0       	rjmp	.+126    	; 0x3ae6 <LCD_void8Bit_Init+0x264>
	else if (__tmp > 65535)
    3a68:	6b a1       	ldd	r22, Y+35	; 0x23
    3a6a:	7c a1       	ldd	r23, Y+36	; 0x24
    3a6c:	8d a1       	ldd	r24, Y+37	; 0x25
    3a6e:	9e a1       	ldd	r25, Y+38	; 0x26
    3a70:	20 e0       	ldi	r18, 0x00	; 0
    3a72:	3f ef       	ldi	r19, 0xFF	; 255
    3a74:	4f e7       	ldi	r20, 0x7F	; 127
    3a76:	57 e4       	ldi	r21, 0x47	; 71
    3a78:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3a7c:	18 16       	cp	r1, r24
    3a7e:	4c f5       	brge	.+82     	; 0x3ad2 <LCD_void8Bit_Init+0x250>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a80:	6f a1       	ldd	r22, Y+39	; 0x27
    3a82:	78 a5       	ldd	r23, Y+40	; 0x28
    3a84:	89 a5       	ldd	r24, Y+41	; 0x29
    3a86:	9a a5       	ldd	r25, Y+42	; 0x2a
    3a88:	20 e0       	ldi	r18, 0x00	; 0
    3a8a:	30 e0       	ldi	r19, 0x00	; 0
    3a8c:	40 e2       	ldi	r20, 0x20	; 32
    3a8e:	51 e4       	ldi	r21, 0x41	; 65
    3a90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a94:	dc 01       	movw	r26, r24
    3a96:	cb 01       	movw	r24, r22
    3a98:	bc 01       	movw	r22, r24
    3a9a:	cd 01       	movw	r24, r26
    3a9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3aa0:	dc 01       	movw	r26, r24
    3aa2:	cb 01       	movw	r24, r22
    3aa4:	9a a3       	std	Y+34, r25	; 0x22
    3aa6:	89 a3       	std	Y+33, r24	; 0x21
    3aa8:	0f c0       	rjmp	.+30     	; 0x3ac8 <LCD_void8Bit_Init+0x246>
    3aaa:	88 ec       	ldi	r24, 0xC8	; 200
    3aac:	90 e0       	ldi	r25, 0x00	; 0
    3aae:	98 a3       	std	Y+32, r25	; 0x20
    3ab0:	8f 8f       	std	Y+31, r24	; 0x1f
    3ab2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3ab4:	98 a1       	ldd	r25, Y+32	; 0x20
    3ab6:	01 97       	sbiw	r24, 0x01	; 1
    3ab8:	f1 f7       	brne	.-4      	; 0x3ab6 <LCD_void8Bit_Init+0x234>
    3aba:	98 a3       	std	Y+32, r25	; 0x20
    3abc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3abe:	89 a1       	ldd	r24, Y+33	; 0x21
    3ac0:	9a a1       	ldd	r25, Y+34	; 0x22
    3ac2:	01 97       	sbiw	r24, 0x01	; 1
    3ac4:	9a a3       	std	Y+34, r25	; 0x22
    3ac6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ac8:	89 a1       	ldd	r24, Y+33	; 0x21
    3aca:	9a a1       	ldd	r25, Y+34	; 0x22
    3acc:	00 97       	sbiw	r24, 0x00	; 0
    3ace:	69 f7       	brne	.-38     	; 0x3aaa <LCD_void8Bit_Init+0x228>
    3ad0:	14 c0       	rjmp	.+40     	; 0x3afa <LCD_void8Bit_Init+0x278>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ad2:	6b a1       	ldd	r22, Y+35	; 0x23
    3ad4:	7c a1       	ldd	r23, Y+36	; 0x24
    3ad6:	8d a1       	ldd	r24, Y+37	; 0x25
    3ad8:	9e a1       	ldd	r25, Y+38	; 0x26
    3ada:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ade:	dc 01       	movw	r26, r24
    3ae0:	cb 01       	movw	r24, r22
    3ae2:	9a a3       	std	Y+34, r25	; 0x22
    3ae4:	89 a3       	std	Y+33, r24	; 0x21
    3ae6:	89 a1       	ldd	r24, Y+33	; 0x21
    3ae8:	9a a1       	ldd	r25, Y+34	; 0x22
    3aea:	9e 8f       	std	Y+30, r25	; 0x1e
    3aec:	8d 8f       	std	Y+29, r24	; 0x1d
    3aee:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3af0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3af2:	01 97       	sbiw	r24, 0x01	; 1
    3af4:	f1 f7       	brne	.-4      	; 0x3af2 <LCD_void8Bit_Init+0x270>
    3af6:	9e 8f       	std	Y+30, r25	; 0x1e
    3af8:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	// send diplay on off command
	LCD_voidSendCommand(copy_pstConfig , LCD_u8DISPLAY_ON_OFF_SET);
    3afa:	89 ad       	ldd	r24, Y+57	; 0x39
    3afc:	9a ad       	ldd	r25, Y+58	; 0x3a
    3afe:	6c e0       	ldi	r22, 0x0C	; 12
    3b00:	0e 94 1c 1b 	call	0x3638	; 0x3638 <LCD_voidSendCommand>
    3b04:	80 e0       	ldi	r24, 0x00	; 0
    3b06:	90 e0       	ldi	r25, 0x00	; 0
    3b08:	a0 e8       	ldi	r26, 0x80	; 128
    3b0a:	bf e3       	ldi	r27, 0x3F	; 63
    3b0c:	89 8f       	std	Y+25, r24	; 0x19
    3b0e:	9a 8f       	std	Y+26, r25	; 0x1a
    3b10:	ab 8f       	std	Y+27, r26	; 0x1b
    3b12:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b14:	69 8d       	ldd	r22, Y+25	; 0x19
    3b16:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3b18:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3b1a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3b1c:	20 e0       	ldi	r18, 0x00	; 0
    3b1e:	30 e0       	ldi	r19, 0x00	; 0
    3b20:	4a ef       	ldi	r20, 0xFA	; 250
    3b22:	54 e4       	ldi	r21, 0x44	; 68
    3b24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b28:	dc 01       	movw	r26, r24
    3b2a:	cb 01       	movw	r24, r22
    3b2c:	8d 8b       	std	Y+21, r24	; 0x15
    3b2e:	9e 8b       	std	Y+22, r25	; 0x16
    3b30:	af 8b       	std	Y+23, r26	; 0x17
    3b32:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3b34:	6d 89       	ldd	r22, Y+21	; 0x15
    3b36:	7e 89       	ldd	r23, Y+22	; 0x16
    3b38:	8f 89       	ldd	r24, Y+23	; 0x17
    3b3a:	98 8d       	ldd	r25, Y+24	; 0x18
    3b3c:	20 e0       	ldi	r18, 0x00	; 0
    3b3e:	30 e0       	ldi	r19, 0x00	; 0
    3b40:	40 e8       	ldi	r20, 0x80	; 128
    3b42:	5f e3       	ldi	r21, 0x3F	; 63
    3b44:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3b48:	88 23       	and	r24, r24
    3b4a:	2c f4       	brge	.+10     	; 0x3b56 <LCD_void8Bit_Init+0x2d4>
		__ticks = 1;
    3b4c:	81 e0       	ldi	r24, 0x01	; 1
    3b4e:	90 e0       	ldi	r25, 0x00	; 0
    3b50:	9c 8b       	std	Y+20, r25	; 0x14
    3b52:	8b 8b       	std	Y+19, r24	; 0x13
    3b54:	3f c0       	rjmp	.+126    	; 0x3bd4 <LCD_void8Bit_Init+0x352>
	else if (__tmp > 65535)
    3b56:	6d 89       	ldd	r22, Y+21	; 0x15
    3b58:	7e 89       	ldd	r23, Y+22	; 0x16
    3b5a:	8f 89       	ldd	r24, Y+23	; 0x17
    3b5c:	98 8d       	ldd	r25, Y+24	; 0x18
    3b5e:	20 e0       	ldi	r18, 0x00	; 0
    3b60:	3f ef       	ldi	r19, 0xFF	; 255
    3b62:	4f e7       	ldi	r20, 0x7F	; 127
    3b64:	57 e4       	ldi	r21, 0x47	; 71
    3b66:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3b6a:	18 16       	cp	r1, r24
    3b6c:	4c f5       	brge	.+82     	; 0x3bc0 <LCD_void8Bit_Init+0x33e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b6e:	69 8d       	ldd	r22, Y+25	; 0x19
    3b70:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3b72:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3b74:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3b76:	20 e0       	ldi	r18, 0x00	; 0
    3b78:	30 e0       	ldi	r19, 0x00	; 0
    3b7a:	40 e2       	ldi	r20, 0x20	; 32
    3b7c:	51 e4       	ldi	r21, 0x41	; 65
    3b7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b82:	dc 01       	movw	r26, r24
    3b84:	cb 01       	movw	r24, r22
    3b86:	bc 01       	movw	r22, r24
    3b88:	cd 01       	movw	r24, r26
    3b8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b8e:	dc 01       	movw	r26, r24
    3b90:	cb 01       	movw	r24, r22
    3b92:	9c 8b       	std	Y+20, r25	; 0x14
    3b94:	8b 8b       	std	Y+19, r24	; 0x13
    3b96:	0f c0       	rjmp	.+30     	; 0x3bb6 <LCD_void8Bit_Init+0x334>
    3b98:	88 ec       	ldi	r24, 0xC8	; 200
    3b9a:	90 e0       	ldi	r25, 0x00	; 0
    3b9c:	9a 8b       	std	Y+18, r25	; 0x12
    3b9e:	89 8b       	std	Y+17, r24	; 0x11
    3ba0:	89 89       	ldd	r24, Y+17	; 0x11
    3ba2:	9a 89       	ldd	r25, Y+18	; 0x12
    3ba4:	01 97       	sbiw	r24, 0x01	; 1
    3ba6:	f1 f7       	brne	.-4      	; 0x3ba4 <LCD_void8Bit_Init+0x322>
    3ba8:	9a 8b       	std	Y+18, r25	; 0x12
    3baa:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3bac:	8b 89       	ldd	r24, Y+19	; 0x13
    3bae:	9c 89       	ldd	r25, Y+20	; 0x14
    3bb0:	01 97       	sbiw	r24, 0x01	; 1
    3bb2:	9c 8b       	std	Y+20, r25	; 0x14
    3bb4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3bb6:	8b 89       	ldd	r24, Y+19	; 0x13
    3bb8:	9c 89       	ldd	r25, Y+20	; 0x14
    3bba:	00 97       	sbiw	r24, 0x00	; 0
    3bbc:	69 f7       	brne	.-38     	; 0x3b98 <LCD_void8Bit_Init+0x316>
    3bbe:	14 c0       	rjmp	.+40     	; 0x3be8 <LCD_void8Bit_Init+0x366>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3bc0:	6d 89       	ldd	r22, Y+21	; 0x15
    3bc2:	7e 89       	ldd	r23, Y+22	; 0x16
    3bc4:	8f 89       	ldd	r24, Y+23	; 0x17
    3bc6:	98 8d       	ldd	r25, Y+24	; 0x18
    3bc8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bcc:	dc 01       	movw	r26, r24
    3bce:	cb 01       	movw	r24, r22
    3bd0:	9c 8b       	std	Y+20, r25	; 0x14
    3bd2:	8b 8b       	std	Y+19, r24	; 0x13
    3bd4:	8b 89       	ldd	r24, Y+19	; 0x13
    3bd6:	9c 89       	ldd	r25, Y+20	; 0x14
    3bd8:	98 8b       	std	Y+16, r25	; 0x10
    3bda:	8f 87       	std	Y+15, r24	; 0x0f
    3bdc:	8f 85       	ldd	r24, Y+15	; 0x0f
    3bde:	98 89       	ldd	r25, Y+16	; 0x10
    3be0:	01 97       	sbiw	r24, 0x01	; 1
    3be2:	f1 f7       	brne	.-4      	; 0x3be0 <LCD_void8Bit_Init+0x35e>
    3be4:	98 8b       	std	Y+16, r25	; 0x10
    3be6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	// send clear dipslay command
	LCD_voidSendCommand(copy_pstConfig , LCD_u8ClEAR_DISPLAY);
    3be8:	89 ad       	ldd	r24, Y+57	; 0x39
    3bea:	9a ad       	ldd	r25, Y+58	; 0x3a
    3bec:	61 e0       	ldi	r22, 0x01	; 1
    3bee:	0e 94 1c 1b 	call	0x3638	; 0x3638 <LCD_voidSendCommand>
    3bf2:	80 e0       	ldi	r24, 0x00	; 0
    3bf4:	90 e0       	ldi	r25, 0x00	; 0
    3bf6:	a0 e8       	ldi	r26, 0x80	; 128
    3bf8:	bf e3       	ldi	r27, 0x3F	; 63
    3bfa:	8b 87       	std	Y+11, r24	; 0x0b
    3bfc:	9c 87       	std	Y+12, r25	; 0x0c
    3bfe:	ad 87       	std	Y+13, r26	; 0x0d
    3c00:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c02:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c04:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c06:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c08:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c0a:	20 e0       	ldi	r18, 0x00	; 0
    3c0c:	30 e0       	ldi	r19, 0x00	; 0
    3c0e:	4a ef       	ldi	r20, 0xFA	; 250
    3c10:	54 e4       	ldi	r21, 0x44	; 68
    3c12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c16:	dc 01       	movw	r26, r24
    3c18:	cb 01       	movw	r24, r22
    3c1a:	8f 83       	std	Y+7, r24	; 0x07
    3c1c:	98 87       	std	Y+8, r25	; 0x08
    3c1e:	a9 87       	std	Y+9, r26	; 0x09
    3c20:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3c22:	6f 81       	ldd	r22, Y+7	; 0x07
    3c24:	78 85       	ldd	r23, Y+8	; 0x08
    3c26:	89 85       	ldd	r24, Y+9	; 0x09
    3c28:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c2a:	20 e0       	ldi	r18, 0x00	; 0
    3c2c:	30 e0       	ldi	r19, 0x00	; 0
    3c2e:	40 e8       	ldi	r20, 0x80	; 128
    3c30:	5f e3       	ldi	r21, 0x3F	; 63
    3c32:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3c36:	88 23       	and	r24, r24
    3c38:	2c f4       	brge	.+10     	; 0x3c44 <LCD_void8Bit_Init+0x3c2>
		__ticks = 1;
    3c3a:	81 e0       	ldi	r24, 0x01	; 1
    3c3c:	90 e0       	ldi	r25, 0x00	; 0
    3c3e:	9e 83       	std	Y+6, r25	; 0x06
    3c40:	8d 83       	std	Y+5, r24	; 0x05
    3c42:	3f c0       	rjmp	.+126    	; 0x3cc2 <LCD_void8Bit_Init+0x440>
	else if (__tmp > 65535)
    3c44:	6f 81       	ldd	r22, Y+7	; 0x07
    3c46:	78 85       	ldd	r23, Y+8	; 0x08
    3c48:	89 85       	ldd	r24, Y+9	; 0x09
    3c4a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c4c:	20 e0       	ldi	r18, 0x00	; 0
    3c4e:	3f ef       	ldi	r19, 0xFF	; 255
    3c50:	4f e7       	ldi	r20, 0x7F	; 127
    3c52:	57 e4       	ldi	r21, 0x47	; 71
    3c54:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3c58:	18 16       	cp	r1, r24
    3c5a:	4c f5       	brge	.+82     	; 0x3cae <LCD_void8Bit_Init+0x42c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c5c:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c5e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c60:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c62:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c64:	20 e0       	ldi	r18, 0x00	; 0
    3c66:	30 e0       	ldi	r19, 0x00	; 0
    3c68:	40 e2       	ldi	r20, 0x20	; 32
    3c6a:	51 e4       	ldi	r21, 0x41	; 65
    3c6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c70:	dc 01       	movw	r26, r24
    3c72:	cb 01       	movw	r24, r22
    3c74:	bc 01       	movw	r22, r24
    3c76:	cd 01       	movw	r24, r26
    3c78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c7c:	dc 01       	movw	r26, r24
    3c7e:	cb 01       	movw	r24, r22
    3c80:	9e 83       	std	Y+6, r25	; 0x06
    3c82:	8d 83       	std	Y+5, r24	; 0x05
    3c84:	0f c0       	rjmp	.+30     	; 0x3ca4 <LCD_void8Bit_Init+0x422>
    3c86:	88 ec       	ldi	r24, 0xC8	; 200
    3c88:	90 e0       	ldi	r25, 0x00	; 0
    3c8a:	9c 83       	std	Y+4, r25	; 0x04
    3c8c:	8b 83       	std	Y+3, r24	; 0x03
    3c8e:	8b 81       	ldd	r24, Y+3	; 0x03
    3c90:	9c 81       	ldd	r25, Y+4	; 0x04
    3c92:	01 97       	sbiw	r24, 0x01	; 1
    3c94:	f1 f7       	brne	.-4      	; 0x3c92 <LCD_void8Bit_Init+0x410>
    3c96:	9c 83       	std	Y+4, r25	; 0x04
    3c98:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c9a:	8d 81       	ldd	r24, Y+5	; 0x05
    3c9c:	9e 81       	ldd	r25, Y+6	; 0x06
    3c9e:	01 97       	sbiw	r24, 0x01	; 1
    3ca0:	9e 83       	std	Y+6, r25	; 0x06
    3ca2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ca4:	8d 81       	ldd	r24, Y+5	; 0x05
    3ca6:	9e 81       	ldd	r25, Y+6	; 0x06
    3ca8:	00 97       	sbiw	r24, 0x00	; 0
    3caa:	69 f7       	brne	.-38     	; 0x3c86 <LCD_void8Bit_Init+0x404>
    3cac:	14 c0       	rjmp	.+40     	; 0x3cd6 <LCD_void8Bit_Init+0x454>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3cae:	6f 81       	ldd	r22, Y+7	; 0x07
    3cb0:	78 85       	ldd	r23, Y+8	; 0x08
    3cb2:	89 85       	ldd	r24, Y+9	; 0x09
    3cb4:	9a 85       	ldd	r25, Y+10	; 0x0a
    3cb6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cba:	dc 01       	movw	r26, r24
    3cbc:	cb 01       	movw	r24, r22
    3cbe:	9e 83       	std	Y+6, r25	; 0x06
    3cc0:	8d 83       	std	Y+5, r24	; 0x05
    3cc2:	8d 81       	ldd	r24, Y+5	; 0x05
    3cc4:	9e 81       	ldd	r25, Y+6	; 0x06
    3cc6:	9a 83       	std	Y+2, r25	; 0x02
    3cc8:	89 83       	std	Y+1, r24	; 0x01
    3cca:	89 81       	ldd	r24, Y+1	; 0x01
    3ccc:	9a 81       	ldd	r25, Y+2	; 0x02
    3cce:	01 97       	sbiw	r24, 0x01	; 1
    3cd0:	f1 f7       	brne	.-4      	; 0x3cce <LCD_void8Bit_Init+0x44c>
    3cd2:	9a 83       	std	Y+2, r25	; 0x02
    3cd4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	/* send enter mode set command*/
	LCD_voidSendCommand(copy_pstConfig , LCD_u8ENTRYMODE_SET);
    3cd6:	89 ad       	ldd	r24, Y+57	; 0x39
    3cd8:	9a ad       	ldd	r25, Y+58	; 0x3a
    3cda:	66 e0       	ldi	r22, 0x06	; 6
    3cdc:	0e 94 1c 1b 	call	0x3638	; 0x3638 <LCD_voidSendCommand>
}
    3ce0:	ea 96       	adiw	r28, 0x3a	; 58
    3ce2:	0f b6       	in	r0, 0x3f	; 63
    3ce4:	f8 94       	cli
    3ce6:	de bf       	out	0x3e, r29	; 62
    3ce8:	0f be       	out	0x3f, r0	; 63
    3cea:	cd bf       	out	0x3d, r28	; 61
    3cec:	cf 91       	pop	r28
    3cee:	df 91       	pop	r29
    3cf0:	08 95       	ret

00003cf2 <LCD_void8Bit_SendCommand>:

static  void LCD_void8Bit_SendCommand(LCD_stConfig* copy_pstConfig , u8 copy_u8Command)
{
    3cf2:	df 93       	push	r29
    3cf4:	cf 93       	push	r28
    3cf6:	cd b7       	in	r28, 0x3d	; 61
    3cf8:	de b7       	in	r29, 0x3e	; 62
    3cfa:	6f 97       	sbiw	r28, 0x1f	; 31
    3cfc:	0f b6       	in	r0, 0x3f	; 63
    3cfe:	f8 94       	cli
    3d00:	de bf       	out	0x3e, r29	; 62
    3d02:	0f be       	out	0x3f, r0	; 63
    3d04:	cd bf       	out	0x3d, r28	; 61
    3d06:	9e 8f       	std	Y+30, r25	; 0x1e
    3d08:	8d 8f       	std	Y+29, r24	; 0x1d
    3d0a:	6f 8f       	std	Y+31, r22	; 0x1f
	//clear RS pin &  Clear RW pin
	DIO_VoidSetPinValue(copy_pstConfig->LCD_u8RsPort , copy_pstConfig->LCD_u8RsPin , DIO_PIN_LOGIC_LOW);
    3d0c:	ed 8d       	ldd	r30, Y+29	; 0x1d
    3d0e:	fe 8d       	ldd	r31, Y+30	; 0x1e
    3d10:	80 81       	ld	r24, Z
    3d12:	86 95       	lsr	r24
    3d14:	86 95       	lsr	r24
    3d16:	83 70       	andi	r24, 0x03	; 3
    3d18:	28 2f       	mov	r18, r24
    3d1a:	ed 8d       	ldd	r30, Y+29	; 0x1d
    3d1c:	fe 8d       	ldd	r31, Y+30	; 0x1e
    3d1e:	81 81       	ldd	r24, Z+1	; 0x01
    3d20:	87 70       	andi	r24, 0x07	; 7
    3d22:	98 2f       	mov	r25, r24
    3d24:	82 2f       	mov	r24, r18
    3d26:	69 2f       	mov	r22, r25
    3d28:	40 e0       	ldi	r20, 0x00	; 0
    3d2a:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <DIO_VoidSetPinValue>
	DIO_VoidSetPinValue(copy_pstConfig->LCD_u8RwPort , copy_pstConfig->LCD_u8RwPin , DIO_PIN_LOGIC_LOW);
    3d2e:	ed 8d       	ldd	r30, Y+29	; 0x1d
    3d30:	fe 8d       	ldd	r31, Y+30	; 0x1e
    3d32:	80 81       	ld	r24, Z
    3d34:	82 95       	swap	r24
    3d36:	8f 70       	andi	r24, 0x0F	; 15
    3d38:	83 70       	andi	r24, 0x03	; 3
    3d3a:	28 2f       	mov	r18, r24
    3d3c:	ed 8d       	ldd	r30, Y+29	; 0x1d
    3d3e:	fe 8d       	ldd	r31, Y+30	; 0x1e
    3d40:	81 81       	ldd	r24, Z+1	; 0x01
    3d42:	86 95       	lsr	r24
    3d44:	86 95       	lsr	r24
    3d46:	86 95       	lsr	r24
    3d48:	87 70       	andi	r24, 0x07	; 7
    3d4a:	98 2f       	mov	r25, r24
    3d4c:	82 2f       	mov	r24, r18
    3d4e:	69 2f       	mov	r22, r25
    3d50:	40 e0       	ldi	r20, 0x00	; 0
    3d52:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <DIO_VoidSetPinValue>

	// write command on data pins
	DIO_VoidSetPortValue(copy_pstConfig->LCD_u8DataPort , copy_u8Command);
    3d56:	ed 8d       	ldd	r30, Y+29	; 0x1d
    3d58:	fe 8d       	ldd	r31, Y+30	; 0x1e
    3d5a:	80 81       	ld	r24, Z
    3d5c:	83 70       	andi	r24, 0x03	; 3
    3d5e:	6f 8d       	ldd	r22, Y+31	; 0x1f
    3d60:	0e 94 8c 0e 	call	0x1d18	; 0x1d18 <DIO_VoidSetPortValue>

	// send enable signal
	DIO_VoidSetPinValue(copy_pstConfig->LCD_u8EnablePort , copy_pstConfig->LCD_u8EnablePin , DIO_PIN_LOGIC_HIGH);
    3d64:	ed 8d       	ldd	r30, Y+29	; 0x1d
    3d66:	fe 8d       	ldd	r31, Y+30	; 0x1e
    3d68:	80 81       	ld	r24, Z
    3d6a:	82 95       	swap	r24
    3d6c:	86 95       	lsr	r24
    3d6e:	86 95       	lsr	r24
    3d70:	83 70       	andi	r24, 0x03	; 3
    3d72:	28 2f       	mov	r18, r24
    3d74:	ed 8d       	ldd	r30, Y+29	; 0x1d
    3d76:	fe 8d       	ldd	r31, Y+30	; 0x1e
    3d78:	81 81       	ldd	r24, Z+1	; 0x01
    3d7a:	98 2f       	mov	r25, r24
    3d7c:	92 95       	swap	r25
    3d7e:	96 95       	lsr	r25
    3d80:	96 95       	lsr	r25
    3d82:	93 70       	andi	r25, 0x03	; 3
    3d84:	82 81       	ldd	r24, Z+2	; 0x02
    3d86:	81 70       	andi	r24, 0x01	; 1
    3d88:	88 0f       	add	r24, r24
    3d8a:	88 0f       	add	r24, r24
    3d8c:	89 2b       	or	r24, r25
    3d8e:	98 2f       	mov	r25, r24
    3d90:	82 2f       	mov	r24, r18
    3d92:	69 2f       	mov	r22, r25
    3d94:	41 e0       	ldi	r20, 0x01	; 1
    3d96:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <DIO_VoidSetPinValue>
    3d9a:	80 e0       	ldi	r24, 0x00	; 0
    3d9c:	90 e0       	ldi	r25, 0x00	; 0
    3d9e:	a0 e8       	ldi	r26, 0x80	; 128
    3da0:	bf e3       	ldi	r27, 0x3F	; 63
    3da2:	89 8f       	std	Y+25, r24	; 0x19
    3da4:	9a 8f       	std	Y+26, r25	; 0x1a
    3da6:	ab 8f       	std	Y+27, r26	; 0x1b
    3da8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3daa:	69 8d       	ldd	r22, Y+25	; 0x19
    3dac:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3dae:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3db0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3db2:	20 e0       	ldi	r18, 0x00	; 0
    3db4:	30 e0       	ldi	r19, 0x00	; 0
    3db6:	4a ef       	ldi	r20, 0xFA	; 250
    3db8:	54 e4       	ldi	r21, 0x44	; 68
    3dba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3dbe:	dc 01       	movw	r26, r24
    3dc0:	cb 01       	movw	r24, r22
    3dc2:	8d 8b       	std	Y+21, r24	; 0x15
    3dc4:	9e 8b       	std	Y+22, r25	; 0x16
    3dc6:	af 8b       	std	Y+23, r26	; 0x17
    3dc8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3dca:	6d 89       	ldd	r22, Y+21	; 0x15
    3dcc:	7e 89       	ldd	r23, Y+22	; 0x16
    3dce:	8f 89       	ldd	r24, Y+23	; 0x17
    3dd0:	98 8d       	ldd	r25, Y+24	; 0x18
    3dd2:	20 e0       	ldi	r18, 0x00	; 0
    3dd4:	30 e0       	ldi	r19, 0x00	; 0
    3dd6:	40 e8       	ldi	r20, 0x80	; 128
    3dd8:	5f e3       	ldi	r21, 0x3F	; 63
    3dda:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3dde:	88 23       	and	r24, r24
    3de0:	2c f4       	brge	.+10     	; 0x3dec <LCD_void8Bit_SendCommand+0xfa>
		__ticks = 1;
    3de2:	81 e0       	ldi	r24, 0x01	; 1
    3de4:	90 e0       	ldi	r25, 0x00	; 0
    3de6:	9c 8b       	std	Y+20, r25	; 0x14
    3de8:	8b 8b       	std	Y+19, r24	; 0x13
    3dea:	3f c0       	rjmp	.+126    	; 0x3e6a <LCD_void8Bit_SendCommand+0x178>
	else if (__tmp > 65535)
    3dec:	6d 89       	ldd	r22, Y+21	; 0x15
    3dee:	7e 89       	ldd	r23, Y+22	; 0x16
    3df0:	8f 89       	ldd	r24, Y+23	; 0x17
    3df2:	98 8d       	ldd	r25, Y+24	; 0x18
    3df4:	20 e0       	ldi	r18, 0x00	; 0
    3df6:	3f ef       	ldi	r19, 0xFF	; 255
    3df8:	4f e7       	ldi	r20, 0x7F	; 127
    3dfa:	57 e4       	ldi	r21, 0x47	; 71
    3dfc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3e00:	18 16       	cp	r1, r24
    3e02:	4c f5       	brge	.+82     	; 0x3e56 <LCD_void8Bit_SendCommand+0x164>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e04:	69 8d       	ldd	r22, Y+25	; 0x19
    3e06:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3e08:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3e0a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3e0c:	20 e0       	ldi	r18, 0x00	; 0
    3e0e:	30 e0       	ldi	r19, 0x00	; 0
    3e10:	40 e2       	ldi	r20, 0x20	; 32
    3e12:	51 e4       	ldi	r21, 0x41	; 65
    3e14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e18:	dc 01       	movw	r26, r24
    3e1a:	cb 01       	movw	r24, r22
    3e1c:	bc 01       	movw	r22, r24
    3e1e:	cd 01       	movw	r24, r26
    3e20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e24:	dc 01       	movw	r26, r24
    3e26:	cb 01       	movw	r24, r22
    3e28:	9c 8b       	std	Y+20, r25	; 0x14
    3e2a:	8b 8b       	std	Y+19, r24	; 0x13
    3e2c:	0f c0       	rjmp	.+30     	; 0x3e4c <LCD_void8Bit_SendCommand+0x15a>
    3e2e:	88 ec       	ldi	r24, 0xC8	; 200
    3e30:	90 e0       	ldi	r25, 0x00	; 0
    3e32:	9a 8b       	std	Y+18, r25	; 0x12
    3e34:	89 8b       	std	Y+17, r24	; 0x11
    3e36:	89 89       	ldd	r24, Y+17	; 0x11
    3e38:	9a 89       	ldd	r25, Y+18	; 0x12
    3e3a:	01 97       	sbiw	r24, 0x01	; 1
    3e3c:	f1 f7       	brne	.-4      	; 0x3e3a <LCD_void8Bit_SendCommand+0x148>
    3e3e:	9a 8b       	std	Y+18, r25	; 0x12
    3e40:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e42:	8b 89       	ldd	r24, Y+19	; 0x13
    3e44:	9c 89       	ldd	r25, Y+20	; 0x14
    3e46:	01 97       	sbiw	r24, 0x01	; 1
    3e48:	9c 8b       	std	Y+20, r25	; 0x14
    3e4a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e4c:	8b 89       	ldd	r24, Y+19	; 0x13
    3e4e:	9c 89       	ldd	r25, Y+20	; 0x14
    3e50:	00 97       	sbiw	r24, 0x00	; 0
    3e52:	69 f7       	brne	.-38     	; 0x3e2e <LCD_void8Bit_SendCommand+0x13c>
    3e54:	14 c0       	rjmp	.+40     	; 0x3e7e <LCD_void8Bit_SendCommand+0x18c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e56:	6d 89       	ldd	r22, Y+21	; 0x15
    3e58:	7e 89       	ldd	r23, Y+22	; 0x16
    3e5a:	8f 89       	ldd	r24, Y+23	; 0x17
    3e5c:	98 8d       	ldd	r25, Y+24	; 0x18
    3e5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e62:	dc 01       	movw	r26, r24
    3e64:	cb 01       	movw	r24, r22
    3e66:	9c 8b       	std	Y+20, r25	; 0x14
    3e68:	8b 8b       	std	Y+19, r24	; 0x13
    3e6a:	8b 89       	ldd	r24, Y+19	; 0x13
    3e6c:	9c 89       	ldd	r25, Y+20	; 0x14
    3e6e:	98 8b       	std	Y+16, r25	; 0x10
    3e70:	8f 87       	std	Y+15, r24	; 0x0f
    3e72:	8f 85       	ldd	r24, Y+15	; 0x0f
    3e74:	98 89       	ldd	r25, Y+16	; 0x10
    3e76:	01 97       	sbiw	r24, 0x01	; 1
    3e78:	f1 f7       	brne	.-4      	; 0x3e76 <LCD_void8Bit_SendCommand+0x184>
    3e7a:	98 8b       	std	Y+16, r25	; 0x10
    3e7c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_VoidSetPinValue(copy_pstConfig->LCD_u8EnablePort , copy_pstConfig->LCD_u8EnablePin , DIO_PIN_LOGIC_LOW);
    3e7e:	ed 8d       	ldd	r30, Y+29	; 0x1d
    3e80:	fe 8d       	ldd	r31, Y+30	; 0x1e
    3e82:	80 81       	ld	r24, Z
    3e84:	82 95       	swap	r24
    3e86:	86 95       	lsr	r24
    3e88:	86 95       	lsr	r24
    3e8a:	83 70       	andi	r24, 0x03	; 3
    3e8c:	28 2f       	mov	r18, r24
    3e8e:	ed 8d       	ldd	r30, Y+29	; 0x1d
    3e90:	fe 8d       	ldd	r31, Y+30	; 0x1e
    3e92:	81 81       	ldd	r24, Z+1	; 0x01
    3e94:	98 2f       	mov	r25, r24
    3e96:	92 95       	swap	r25
    3e98:	96 95       	lsr	r25
    3e9a:	96 95       	lsr	r25
    3e9c:	93 70       	andi	r25, 0x03	; 3
    3e9e:	82 81       	ldd	r24, Z+2	; 0x02
    3ea0:	81 70       	andi	r24, 0x01	; 1
    3ea2:	88 0f       	add	r24, r24
    3ea4:	88 0f       	add	r24, r24
    3ea6:	89 2b       	or	r24, r25
    3ea8:	98 2f       	mov	r25, r24
    3eaa:	82 2f       	mov	r24, r18
    3eac:	69 2f       	mov	r22, r25
    3eae:	40 e0       	ldi	r20, 0x00	; 0
    3eb0:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <DIO_VoidSetPinValue>
    3eb4:	80 e0       	ldi	r24, 0x00	; 0
    3eb6:	90 e0       	ldi	r25, 0x00	; 0
    3eb8:	a0 e2       	ldi	r26, 0x20	; 32
    3eba:	b1 e4       	ldi	r27, 0x41	; 65
    3ebc:	8b 87       	std	Y+11, r24	; 0x0b
    3ebe:	9c 87       	std	Y+12, r25	; 0x0c
    3ec0:	ad 87       	std	Y+13, r26	; 0x0d
    3ec2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ec4:	6b 85       	ldd	r22, Y+11	; 0x0b
    3ec6:	7c 85       	ldd	r23, Y+12	; 0x0c
    3ec8:	8d 85       	ldd	r24, Y+13	; 0x0d
    3eca:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ecc:	20 e0       	ldi	r18, 0x00	; 0
    3ece:	30 e0       	ldi	r19, 0x00	; 0
    3ed0:	4a ef       	ldi	r20, 0xFA	; 250
    3ed2:	54 e4       	ldi	r21, 0x44	; 68
    3ed4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ed8:	dc 01       	movw	r26, r24
    3eda:	cb 01       	movw	r24, r22
    3edc:	8f 83       	std	Y+7, r24	; 0x07
    3ede:	98 87       	std	Y+8, r25	; 0x08
    3ee0:	a9 87       	std	Y+9, r26	; 0x09
    3ee2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3ee4:	6f 81       	ldd	r22, Y+7	; 0x07
    3ee6:	78 85       	ldd	r23, Y+8	; 0x08
    3ee8:	89 85       	ldd	r24, Y+9	; 0x09
    3eea:	9a 85       	ldd	r25, Y+10	; 0x0a
    3eec:	20 e0       	ldi	r18, 0x00	; 0
    3eee:	30 e0       	ldi	r19, 0x00	; 0
    3ef0:	40 e8       	ldi	r20, 0x80	; 128
    3ef2:	5f e3       	ldi	r21, 0x3F	; 63
    3ef4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3ef8:	88 23       	and	r24, r24
    3efa:	2c f4       	brge	.+10     	; 0x3f06 <LCD_void8Bit_SendCommand+0x214>
		__ticks = 1;
    3efc:	81 e0       	ldi	r24, 0x01	; 1
    3efe:	90 e0       	ldi	r25, 0x00	; 0
    3f00:	9e 83       	std	Y+6, r25	; 0x06
    3f02:	8d 83       	std	Y+5, r24	; 0x05
    3f04:	3f c0       	rjmp	.+126    	; 0x3f84 <LCD_void8Bit_SendCommand+0x292>
	else if (__tmp > 65535)
    3f06:	6f 81       	ldd	r22, Y+7	; 0x07
    3f08:	78 85       	ldd	r23, Y+8	; 0x08
    3f0a:	89 85       	ldd	r24, Y+9	; 0x09
    3f0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f0e:	20 e0       	ldi	r18, 0x00	; 0
    3f10:	3f ef       	ldi	r19, 0xFF	; 255
    3f12:	4f e7       	ldi	r20, 0x7F	; 127
    3f14:	57 e4       	ldi	r21, 0x47	; 71
    3f16:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3f1a:	18 16       	cp	r1, r24
    3f1c:	4c f5       	brge	.+82     	; 0x3f70 <LCD_void8Bit_SendCommand+0x27e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f1e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3f20:	7c 85       	ldd	r23, Y+12	; 0x0c
    3f22:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f24:	9e 85       	ldd	r25, Y+14	; 0x0e
    3f26:	20 e0       	ldi	r18, 0x00	; 0
    3f28:	30 e0       	ldi	r19, 0x00	; 0
    3f2a:	40 e2       	ldi	r20, 0x20	; 32
    3f2c:	51 e4       	ldi	r21, 0x41	; 65
    3f2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f32:	dc 01       	movw	r26, r24
    3f34:	cb 01       	movw	r24, r22
    3f36:	bc 01       	movw	r22, r24
    3f38:	cd 01       	movw	r24, r26
    3f3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f3e:	dc 01       	movw	r26, r24
    3f40:	cb 01       	movw	r24, r22
    3f42:	9e 83       	std	Y+6, r25	; 0x06
    3f44:	8d 83       	std	Y+5, r24	; 0x05
    3f46:	0f c0       	rjmp	.+30     	; 0x3f66 <LCD_void8Bit_SendCommand+0x274>
    3f48:	88 ec       	ldi	r24, 0xC8	; 200
    3f4a:	90 e0       	ldi	r25, 0x00	; 0
    3f4c:	9c 83       	std	Y+4, r25	; 0x04
    3f4e:	8b 83       	std	Y+3, r24	; 0x03
    3f50:	8b 81       	ldd	r24, Y+3	; 0x03
    3f52:	9c 81       	ldd	r25, Y+4	; 0x04
    3f54:	01 97       	sbiw	r24, 0x01	; 1
    3f56:	f1 f7       	brne	.-4      	; 0x3f54 <LCD_void8Bit_SendCommand+0x262>
    3f58:	9c 83       	std	Y+4, r25	; 0x04
    3f5a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f5c:	8d 81       	ldd	r24, Y+5	; 0x05
    3f5e:	9e 81       	ldd	r25, Y+6	; 0x06
    3f60:	01 97       	sbiw	r24, 0x01	; 1
    3f62:	9e 83       	std	Y+6, r25	; 0x06
    3f64:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f66:	8d 81       	ldd	r24, Y+5	; 0x05
    3f68:	9e 81       	ldd	r25, Y+6	; 0x06
    3f6a:	00 97       	sbiw	r24, 0x00	; 0
    3f6c:	69 f7       	brne	.-38     	; 0x3f48 <LCD_void8Bit_SendCommand+0x256>
    3f6e:	14 c0       	rjmp	.+40     	; 0x3f98 <LCD_void8Bit_SendCommand+0x2a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f70:	6f 81       	ldd	r22, Y+7	; 0x07
    3f72:	78 85       	ldd	r23, Y+8	; 0x08
    3f74:	89 85       	ldd	r24, Y+9	; 0x09
    3f76:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f7c:	dc 01       	movw	r26, r24
    3f7e:	cb 01       	movw	r24, r22
    3f80:	9e 83       	std	Y+6, r25	; 0x06
    3f82:	8d 83       	std	Y+5, r24	; 0x05
    3f84:	8d 81       	ldd	r24, Y+5	; 0x05
    3f86:	9e 81       	ldd	r25, Y+6	; 0x06
    3f88:	9a 83       	std	Y+2, r25	; 0x02
    3f8a:	89 83       	std	Y+1, r24	; 0x01
    3f8c:	89 81       	ldd	r24, Y+1	; 0x01
    3f8e:	9a 81       	ldd	r25, Y+2	; 0x02
    3f90:	01 97       	sbiw	r24, 0x01	; 1
    3f92:	f1 f7       	brne	.-4      	; 0x3f90 <LCD_void8Bit_SendCommand+0x29e>
    3f94:	9a 83       	std	Y+2, r25	; 0x02
    3f96:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
}
    3f98:	6f 96       	adiw	r28, 0x1f	; 31
    3f9a:	0f b6       	in	r0, 0x3f	; 63
    3f9c:	f8 94       	cli
    3f9e:	de bf       	out	0x3e, r29	; 62
    3fa0:	0f be       	out	0x3f, r0	; 63
    3fa2:	cd bf       	out	0x3d, r28	; 61
    3fa4:	cf 91       	pop	r28
    3fa6:	df 91       	pop	r29
    3fa8:	08 95       	ret

00003faa <LCD_void8Bit_SendChar>:

static void LCD_void8Bit_SendChar(LCD_stConfig* copy_pstConfig , u8 copy_u8Char)
{
    3faa:	df 93       	push	r29
    3fac:	cf 93       	push	r28
    3fae:	cd b7       	in	r28, 0x3d	; 61
    3fb0:	de b7       	in	r29, 0x3e	; 62
    3fb2:	61 97       	sbiw	r28, 0x11	; 17
    3fb4:	0f b6       	in	r0, 0x3f	; 63
    3fb6:	f8 94       	cli
    3fb8:	de bf       	out	0x3e, r29	; 62
    3fba:	0f be       	out	0x3f, r0	; 63
    3fbc:	cd bf       	out	0x3d, r28	; 61
    3fbe:	98 8b       	std	Y+16, r25	; 0x10
    3fc0:	8f 87       	std	Y+15, r24	; 0x0f
    3fc2:	69 8b       	std	Y+17, r22	; 0x11
	// set RS pin &  Clear RW pin
	DIO_VoidSetPinValue(copy_pstConfig->LCD_u8RsPort , copy_pstConfig->LCD_u8RsPin , DIO_PIN_LOGIC_HIGH);
    3fc4:	ef 85       	ldd	r30, Y+15	; 0x0f
    3fc6:	f8 89       	ldd	r31, Y+16	; 0x10
    3fc8:	80 81       	ld	r24, Z
    3fca:	86 95       	lsr	r24
    3fcc:	86 95       	lsr	r24
    3fce:	83 70       	andi	r24, 0x03	; 3
    3fd0:	28 2f       	mov	r18, r24
    3fd2:	ef 85       	ldd	r30, Y+15	; 0x0f
    3fd4:	f8 89       	ldd	r31, Y+16	; 0x10
    3fd6:	81 81       	ldd	r24, Z+1	; 0x01
    3fd8:	87 70       	andi	r24, 0x07	; 7
    3fda:	98 2f       	mov	r25, r24
    3fdc:	82 2f       	mov	r24, r18
    3fde:	69 2f       	mov	r22, r25
    3fe0:	41 e0       	ldi	r20, 0x01	; 1
    3fe2:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <DIO_VoidSetPinValue>
	DIO_VoidSetPinValue(copy_pstConfig->LCD_u8RwPort , copy_pstConfig->LCD_u8RwPin , DIO_PIN_LOGIC_LOW);
    3fe6:	ef 85       	ldd	r30, Y+15	; 0x0f
    3fe8:	f8 89       	ldd	r31, Y+16	; 0x10
    3fea:	80 81       	ld	r24, Z
    3fec:	82 95       	swap	r24
    3fee:	8f 70       	andi	r24, 0x0F	; 15
    3ff0:	83 70       	andi	r24, 0x03	; 3
    3ff2:	28 2f       	mov	r18, r24
    3ff4:	ef 85       	ldd	r30, Y+15	; 0x0f
    3ff6:	f8 89       	ldd	r31, Y+16	; 0x10
    3ff8:	81 81       	ldd	r24, Z+1	; 0x01
    3ffa:	86 95       	lsr	r24
    3ffc:	86 95       	lsr	r24
    3ffe:	86 95       	lsr	r24
    4000:	87 70       	andi	r24, 0x07	; 7
    4002:	98 2f       	mov	r25, r24
    4004:	82 2f       	mov	r24, r18
    4006:	69 2f       	mov	r22, r25
    4008:	40 e0       	ldi	r20, 0x00	; 0
    400a:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <DIO_VoidSetPinValue>

	DIO_VoidSetPortValue(copy_pstConfig->LCD_u8DataPort , copy_u8Char);
    400e:	ef 85       	ldd	r30, Y+15	; 0x0f
    4010:	f8 89       	ldd	r31, Y+16	; 0x10
    4012:	80 81       	ld	r24, Z
    4014:	83 70       	andi	r24, 0x03	; 3
    4016:	69 89       	ldd	r22, Y+17	; 0x11
    4018:	0e 94 8c 0e 	call	0x1d18	; 0x1d18 <DIO_VoidSetPortValue>

	// send enable signal
	DIO_VoidSetPinValue(copy_pstConfig->LCD_u8EnablePort , copy_pstConfig->LCD_u8EnablePin , DIO_PIN_LOGIC_HIGH);
    401c:	ef 85       	ldd	r30, Y+15	; 0x0f
    401e:	f8 89       	ldd	r31, Y+16	; 0x10
    4020:	80 81       	ld	r24, Z
    4022:	82 95       	swap	r24
    4024:	86 95       	lsr	r24
    4026:	86 95       	lsr	r24
    4028:	83 70       	andi	r24, 0x03	; 3
    402a:	28 2f       	mov	r18, r24
    402c:	ef 85       	ldd	r30, Y+15	; 0x0f
    402e:	f8 89       	ldd	r31, Y+16	; 0x10
    4030:	81 81       	ldd	r24, Z+1	; 0x01
    4032:	98 2f       	mov	r25, r24
    4034:	92 95       	swap	r25
    4036:	96 95       	lsr	r25
    4038:	96 95       	lsr	r25
    403a:	93 70       	andi	r25, 0x03	; 3
    403c:	82 81       	ldd	r24, Z+2	; 0x02
    403e:	81 70       	andi	r24, 0x01	; 1
    4040:	88 0f       	add	r24, r24
    4042:	88 0f       	add	r24, r24
    4044:	89 2b       	or	r24, r25
    4046:	98 2f       	mov	r25, r24
    4048:	82 2f       	mov	r24, r18
    404a:	69 2f       	mov	r22, r25
    404c:	41 e0       	ldi	r20, 0x01	; 1
    404e:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <DIO_VoidSetPinValue>
    4052:	80 e0       	ldi	r24, 0x00	; 0
    4054:	90 e0       	ldi	r25, 0x00	; 0
    4056:	a0 e8       	ldi	r26, 0x80	; 128
    4058:	bf e3       	ldi	r27, 0x3F	; 63
    405a:	8b 87       	std	Y+11, r24	; 0x0b
    405c:	9c 87       	std	Y+12, r25	; 0x0c
    405e:	ad 87       	std	Y+13, r26	; 0x0d
    4060:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4062:	6b 85       	ldd	r22, Y+11	; 0x0b
    4064:	7c 85       	ldd	r23, Y+12	; 0x0c
    4066:	8d 85       	ldd	r24, Y+13	; 0x0d
    4068:	9e 85       	ldd	r25, Y+14	; 0x0e
    406a:	20 e0       	ldi	r18, 0x00	; 0
    406c:	30 e0       	ldi	r19, 0x00	; 0
    406e:	4a ef       	ldi	r20, 0xFA	; 250
    4070:	54 e4       	ldi	r21, 0x44	; 68
    4072:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4076:	dc 01       	movw	r26, r24
    4078:	cb 01       	movw	r24, r22
    407a:	8f 83       	std	Y+7, r24	; 0x07
    407c:	98 87       	std	Y+8, r25	; 0x08
    407e:	a9 87       	std	Y+9, r26	; 0x09
    4080:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4082:	6f 81       	ldd	r22, Y+7	; 0x07
    4084:	78 85       	ldd	r23, Y+8	; 0x08
    4086:	89 85       	ldd	r24, Y+9	; 0x09
    4088:	9a 85       	ldd	r25, Y+10	; 0x0a
    408a:	20 e0       	ldi	r18, 0x00	; 0
    408c:	30 e0       	ldi	r19, 0x00	; 0
    408e:	40 e8       	ldi	r20, 0x80	; 128
    4090:	5f e3       	ldi	r21, 0x3F	; 63
    4092:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4096:	88 23       	and	r24, r24
    4098:	2c f4       	brge	.+10     	; 0x40a4 <LCD_void8Bit_SendChar+0xfa>
		__ticks = 1;
    409a:	81 e0       	ldi	r24, 0x01	; 1
    409c:	90 e0       	ldi	r25, 0x00	; 0
    409e:	9e 83       	std	Y+6, r25	; 0x06
    40a0:	8d 83       	std	Y+5, r24	; 0x05
    40a2:	3f c0       	rjmp	.+126    	; 0x4122 <LCD_void8Bit_SendChar+0x178>
	else if (__tmp > 65535)
    40a4:	6f 81       	ldd	r22, Y+7	; 0x07
    40a6:	78 85       	ldd	r23, Y+8	; 0x08
    40a8:	89 85       	ldd	r24, Y+9	; 0x09
    40aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    40ac:	20 e0       	ldi	r18, 0x00	; 0
    40ae:	3f ef       	ldi	r19, 0xFF	; 255
    40b0:	4f e7       	ldi	r20, 0x7F	; 127
    40b2:	57 e4       	ldi	r21, 0x47	; 71
    40b4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    40b8:	18 16       	cp	r1, r24
    40ba:	4c f5       	brge	.+82     	; 0x410e <LCD_void8Bit_SendChar+0x164>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    40bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    40be:	7c 85       	ldd	r23, Y+12	; 0x0c
    40c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    40c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    40c4:	20 e0       	ldi	r18, 0x00	; 0
    40c6:	30 e0       	ldi	r19, 0x00	; 0
    40c8:	40 e2       	ldi	r20, 0x20	; 32
    40ca:	51 e4       	ldi	r21, 0x41	; 65
    40cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40d0:	dc 01       	movw	r26, r24
    40d2:	cb 01       	movw	r24, r22
    40d4:	bc 01       	movw	r22, r24
    40d6:	cd 01       	movw	r24, r26
    40d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40dc:	dc 01       	movw	r26, r24
    40de:	cb 01       	movw	r24, r22
    40e0:	9e 83       	std	Y+6, r25	; 0x06
    40e2:	8d 83       	std	Y+5, r24	; 0x05
    40e4:	0f c0       	rjmp	.+30     	; 0x4104 <LCD_void8Bit_SendChar+0x15a>
    40e6:	88 ec       	ldi	r24, 0xC8	; 200
    40e8:	90 e0       	ldi	r25, 0x00	; 0
    40ea:	9c 83       	std	Y+4, r25	; 0x04
    40ec:	8b 83       	std	Y+3, r24	; 0x03
    40ee:	8b 81       	ldd	r24, Y+3	; 0x03
    40f0:	9c 81       	ldd	r25, Y+4	; 0x04
    40f2:	01 97       	sbiw	r24, 0x01	; 1
    40f4:	f1 f7       	brne	.-4      	; 0x40f2 <LCD_void8Bit_SendChar+0x148>
    40f6:	9c 83       	std	Y+4, r25	; 0x04
    40f8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    40fa:	8d 81       	ldd	r24, Y+5	; 0x05
    40fc:	9e 81       	ldd	r25, Y+6	; 0x06
    40fe:	01 97       	sbiw	r24, 0x01	; 1
    4100:	9e 83       	std	Y+6, r25	; 0x06
    4102:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4104:	8d 81       	ldd	r24, Y+5	; 0x05
    4106:	9e 81       	ldd	r25, Y+6	; 0x06
    4108:	00 97       	sbiw	r24, 0x00	; 0
    410a:	69 f7       	brne	.-38     	; 0x40e6 <LCD_void8Bit_SendChar+0x13c>
    410c:	14 c0       	rjmp	.+40     	; 0x4136 <LCD_void8Bit_SendChar+0x18c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    410e:	6f 81       	ldd	r22, Y+7	; 0x07
    4110:	78 85       	ldd	r23, Y+8	; 0x08
    4112:	89 85       	ldd	r24, Y+9	; 0x09
    4114:	9a 85       	ldd	r25, Y+10	; 0x0a
    4116:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    411a:	dc 01       	movw	r26, r24
    411c:	cb 01       	movw	r24, r22
    411e:	9e 83       	std	Y+6, r25	; 0x06
    4120:	8d 83       	std	Y+5, r24	; 0x05
    4122:	8d 81       	ldd	r24, Y+5	; 0x05
    4124:	9e 81       	ldd	r25, Y+6	; 0x06
    4126:	9a 83       	std	Y+2, r25	; 0x02
    4128:	89 83       	std	Y+1, r24	; 0x01
    412a:	89 81       	ldd	r24, Y+1	; 0x01
    412c:	9a 81       	ldd	r25, Y+2	; 0x02
    412e:	01 97       	sbiw	r24, 0x01	; 1
    4130:	f1 f7       	brne	.-4      	; 0x412e <LCD_void8Bit_SendChar+0x184>
    4132:	9a 83       	std	Y+2, r25	; 0x02
    4134:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	DIO_VoidSetPinValue(copy_pstConfig->LCD_u8EnablePort , copy_pstConfig->LCD_u8EnablePin , DIO_PIN_LOGIC_LOW);
    4136:	ef 85       	ldd	r30, Y+15	; 0x0f
    4138:	f8 89       	ldd	r31, Y+16	; 0x10
    413a:	80 81       	ld	r24, Z
    413c:	82 95       	swap	r24
    413e:	86 95       	lsr	r24
    4140:	86 95       	lsr	r24
    4142:	83 70       	andi	r24, 0x03	; 3
    4144:	28 2f       	mov	r18, r24
    4146:	ef 85       	ldd	r30, Y+15	; 0x0f
    4148:	f8 89       	ldd	r31, Y+16	; 0x10
    414a:	81 81       	ldd	r24, Z+1	; 0x01
    414c:	98 2f       	mov	r25, r24
    414e:	92 95       	swap	r25
    4150:	96 95       	lsr	r25
    4152:	96 95       	lsr	r25
    4154:	93 70       	andi	r25, 0x03	; 3
    4156:	82 81       	ldd	r24, Z+2	; 0x02
    4158:	81 70       	andi	r24, 0x01	; 1
    415a:	88 0f       	add	r24, r24
    415c:	88 0f       	add	r24, r24
    415e:	89 2b       	or	r24, r25
    4160:	98 2f       	mov	r25, r24
    4162:	82 2f       	mov	r24, r18
    4164:	69 2f       	mov	r22, r25
    4166:	40 e0       	ldi	r20, 0x00	; 0
    4168:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <DIO_VoidSetPinValue>
	return;
}
    416c:	61 96       	adiw	r28, 0x11	; 17
    416e:	0f b6       	in	r0, 0x3f	; 63
    4170:	f8 94       	cli
    4172:	de bf       	out	0x3e, r29	; 62
    4174:	0f be       	out	0x3f, r0	; 63
    4176:	cd bf       	out	0x3d, r28	; 61
    4178:	cf 91       	pop	r28
    417a:	df 91       	pop	r29
    417c:	08 95       	ret

0000417e <LCD_voidSendU32Digit>:




void LCD_voidSendU32Digit(LCD_stConfig* copy_pstConfig , u32 num)
{
    417e:	df 93       	push	r29
    4180:	cf 93       	push	r28
    4182:	cd b7       	in	r28, 0x3d	; 61
    4184:	de b7       	in	r29, 0x3e	; 62
    4186:	61 97       	sbiw	r28, 0x11	; 17
    4188:	0f b6       	in	r0, 0x3f	; 63
    418a:	f8 94       	cli
    418c:	de bf       	out	0x3e, r29	; 62
    418e:	0f be       	out	0x3f, r0	; 63
    4190:	cd bf       	out	0x3d, r28	; 61
    4192:	9d 87       	std	Y+13, r25	; 0x0d
    4194:	8c 87       	std	Y+12, r24	; 0x0c
    4196:	4e 87       	std	Y+14, r20	; 0x0e
    4198:	5f 87       	std	Y+15, r21	; 0x0f
    419a:	68 8b       	std	Y+16, r22	; 0x10
    419c:	79 8b       	std	Y+17, r23	; 0x11
	// 32767
	u8 numStr[11] = {0};
    419e:	8b e0       	ldi	r24, 0x0B	; 11
    41a0:	fe 01       	movw	r30, r28
    41a2:	31 96       	adiw	r30, 0x01	; 1
    41a4:	df 01       	movw	r26, r30
    41a6:	98 2f       	mov	r25, r24
    41a8:	1d 92       	st	X+, r1
    41aa:	9a 95       	dec	r25
    41ac:	e9 f7       	brne	.-6      	; 0x41a8 <LCD_voidSendU32Digit+0x2a>
	snprintf(numStr , 11 , "%lu" , num);
    41ae:	ad b7       	in	r26, 0x3d	; 61
    41b0:	be b7       	in	r27, 0x3e	; 62
    41b2:	1a 97       	sbiw	r26, 0x0a	; 10
    41b4:	0f b6       	in	r0, 0x3f	; 63
    41b6:	f8 94       	cli
    41b8:	be bf       	out	0x3e, r27	; 62
    41ba:	0f be       	out	0x3f, r0	; 63
    41bc:	ad bf       	out	0x3d, r26	; 61
    41be:	ed b7       	in	r30, 0x3d	; 61
    41c0:	fe b7       	in	r31, 0x3e	; 62
    41c2:	31 96       	adiw	r30, 0x01	; 1
    41c4:	ce 01       	movw	r24, r28
    41c6:	01 96       	adiw	r24, 0x01	; 1
    41c8:	91 83       	std	Z+1, r25	; 0x01
    41ca:	80 83       	st	Z, r24
    41cc:	8b e0       	ldi	r24, 0x0B	; 11
    41ce:	90 e0       	ldi	r25, 0x00	; 0
    41d0:	93 83       	std	Z+3, r25	; 0x03
    41d2:	82 83       	std	Z+2, r24	; 0x02
    41d4:	80 e6       	ldi	r24, 0x60	; 96
    41d6:	90 e0       	ldi	r25, 0x00	; 0
    41d8:	95 83       	std	Z+5, r25	; 0x05
    41da:	84 83       	std	Z+4, r24	; 0x04
    41dc:	8e 85       	ldd	r24, Y+14	; 0x0e
    41de:	9f 85       	ldd	r25, Y+15	; 0x0f
    41e0:	a8 89       	ldd	r26, Y+16	; 0x10
    41e2:	b9 89       	ldd	r27, Y+17	; 0x11
    41e4:	86 83       	std	Z+6, r24	; 0x06
    41e6:	97 83       	std	Z+7, r25	; 0x07
    41e8:	a0 87       	std	Z+8, r26	; 0x08
    41ea:	b1 87       	std	Z+9, r27	; 0x09
    41ec:	0e 94 76 2e 	call	0x5cec	; 0x5cec <snprintf>
    41f0:	8d b7       	in	r24, 0x3d	; 61
    41f2:	9e b7       	in	r25, 0x3e	; 62
    41f4:	0a 96       	adiw	r24, 0x0a	; 10
    41f6:	0f b6       	in	r0, 0x3f	; 63
    41f8:	f8 94       	cli
    41fa:	9e bf       	out	0x3e, r25	; 62
    41fc:	0f be       	out	0x3f, r0	; 63
    41fe:	8d bf       	out	0x3d, r24	; 61
	LCD_voidSendString(copy_pstConfig , numStr );
    4200:	8c 85       	ldd	r24, Y+12	; 0x0c
    4202:	9d 85       	ldd	r25, Y+13	; 0x0d
    4204:	9e 01       	movw	r18, r28
    4206:	2f 5f       	subi	r18, 0xFF	; 255
    4208:	3f 4f       	sbci	r19, 0xFF	; 255
    420a:	b9 01       	movw	r22, r18
    420c:	0e 94 90 1b 	call	0x3720	; 0x3720 <LCD_voidSendString>
	return;
}
    4210:	61 96       	adiw	r28, 0x11	; 17
    4212:	0f b6       	in	r0, 0x3f	; 63
    4214:	f8 94       	cli
    4216:	de bf       	out	0x3e, r29	; 62
    4218:	0f be       	out	0x3f, r0	; 63
    421a:	cd bf       	out	0x3d, r28	; 61
    421c:	cf 91       	pop	r28
    421e:	df 91       	pop	r29
    4220:	08 95       	ret

00004222 <LCD_voidSendU32Digit_Postion>:

void LCD_voidSendU32Digit_Postion(LCD_stConfig* copy_pstConfig , u32 num, u8 copy_u8Row , u8 copy_u8Colum)
{
    4222:	0f 93       	push	r16
    4224:	df 93       	push	r29
    4226:	cf 93       	push	r28
    4228:	cd b7       	in	r28, 0x3d	; 61
    422a:	de b7       	in	r29, 0x3e	; 62
    422c:	66 97       	sbiw	r28, 0x16	; 22
    422e:	0f b6       	in	r0, 0x3f	; 63
    4230:	f8 94       	cli
    4232:	de bf       	out	0x3e, r29	; 62
    4234:	0f be       	out	0x3f, r0	; 63
    4236:	cd bf       	out	0x3d, r28	; 61
    4238:	98 8b       	std	Y+16, r25	; 0x10
    423a:	8f 87       	std	Y+15, r24	; 0x0f
    423c:	49 8b       	std	Y+17, r20	; 0x11
    423e:	5a 8b       	std	Y+18, r21	; 0x12
    4240:	6b 8b       	std	Y+19, r22	; 0x13
    4242:	7c 8b       	std	Y+20, r23	; 0x14
    4244:	2d 8b       	std	Y+21, r18	; 0x15
    4246:	0e 8b       	std	Y+22, r16	; 0x16
	LCD_voidSendCommand(copy_pstConfig ,  (LCD_U8DDRAM_OFFSET | (copy_u8Row + copy_u8Colum)) );
    4248:	9d 89       	ldd	r25, Y+21	; 0x15
    424a:	8e 89       	ldd	r24, Y+22	; 0x16
    424c:	89 0f       	add	r24, r25
    424e:	80 68       	ori	r24, 0x80	; 128
    4250:	28 2f       	mov	r18, r24
    4252:	8f 85       	ldd	r24, Y+15	; 0x0f
    4254:	98 89       	ldd	r25, Y+16	; 0x10
    4256:	62 2f       	mov	r22, r18
    4258:	0e 94 1c 1b 	call	0x3638	; 0x3638 <LCD_voidSendCommand>
    425c:	80 e0       	ldi	r24, 0x00	; 0
    425e:	90 e0       	ldi	r25, 0x00	; 0
    4260:	ac e0       	ldi	r26, 0x0C	; 12
    4262:	b2 e4       	ldi	r27, 0x42	; 66
    4264:	8b 87       	std	Y+11, r24	; 0x0b
    4266:	9c 87       	std	Y+12, r25	; 0x0c
    4268:	ad 87       	std	Y+13, r26	; 0x0d
    426a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    426c:	6b 85       	ldd	r22, Y+11	; 0x0b
    426e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4270:	8d 85       	ldd	r24, Y+13	; 0x0d
    4272:	9e 85       	ldd	r25, Y+14	; 0x0e
    4274:	20 e0       	ldi	r18, 0x00	; 0
    4276:	30 e0       	ldi	r19, 0x00	; 0
    4278:	4a ef       	ldi	r20, 0xFA	; 250
    427a:	54 e4       	ldi	r21, 0x44	; 68
    427c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4280:	dc 01       	movw	r26, r24
    4282:	cb 01       	movw	r24, r22
    4284:	8f 83       	std	Y+7, r24	; 0x07
    4286:	98 87       	std	Y+8, r25	; 0x08
    4288:	a9 87       	std	Y+9, r26	; 0x09
    428a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    428c:	6f 81       	ldd	r22, Y+7	; 0x07
    428e:	78 85       	ldd	r23, Y+8	; 0x08
    4290:	89 85       	ldd	r24, Y+9	; 0x09
    4292:	9a 85       	ldd	r25, Y+10	; 0x0a
    4294:	20 e0       	ldi	r18, 0x00	; 0
    4296:	30 e0       	ldi	r19, 0x00	; 0
    4298:	40 e8       	ldi	r20, 0x80	; 128
    429a:	5f e3       	ldi	r21, 0x3F	; 63
    429c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    42a0:	88 23       	and	r24, r24
    42a2:	2c f4       	brge	.+10     	; 0x42ae <LCD_voidSendU32Digit_Postion+0x8c>
		__ticks = 1;
    42a4:	81 e0       	ldi	r24, 0x01	; 1
    42a6:	90 e0       	ldi	r25, 0x00	; 0
    42a8:	9e 83       	std	Y+6, r25	; 0x06
    42aa:	8d 83       	std	Y+5, r24	; 0x05
    42ac:	3f c0       	rjmp	.+126    	; 0x432c <LCD_voidSendU32Digit_Postion+0x10a>
	else if (__tmp > 65535)
    42ae:	6f 81       	ldd	r22, Y+7	; 0x07
    42b0:	78 85       	ldd	r23, Y+8	; 0x08
    42b2:	89 85       	ldd	r24, Y+9	; 0x09
    42b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    42b6:	20 e0       	ldi	r18, 0x00	; 0
    42b8:	3f ef       	ldi	r19, 0xFF	; 255
    42ba:	4f e7       	ldi	r20, 0x7F	; 127
    42bc:	57 e4       	ldi	r21, 0x47	; 71
    42be:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    42c2:	18 16       	cp	r1, r24
    42c4:	4c f5       	brge	.+82     	; 0x4318 <LCD_voidSendU32Digit_Postion+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    42c6:	6b 85       	ldd	r22, Y+11	; 0x0b
    42c8:	7c 85       	ldd	r23, Y+12	; 0x0c
    42ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    42cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    42ce:	20 e0       	ldi	r18, 0x00	; 0
    42d0:	30 e0       	ldi	r19, 0x00	; 0
    42d2:	40 e2       	ldi	r20, 0x20	; 32
    42d4:	51 e4       	ldi	r21, 0x41	; 65
    42d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42da:	dc 01       	movw	r26, r24
    42dc:	cb 01       	movw	r24, r22
    42de:	bc 01       	movw	r22, r24
    42e0:	cd 01       	movw	r24, r26
    42e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42e6:	dc 01       	movw	r26, r24
    42e8:	cb 01       	movw	r24, r22
    42ea:	9e 83       	std	Y+6, r25	; 0x06
    42ec:	8d 83       	std	Y+5, r24	; 0x05
    42ee:	0f c0       	rjmp	.+30     	; 0x430e <LCD_voidSendU32Digit_Postion+0xec>
    42f0:	88 ec       	ldi	r24, 0xC8	; 200
    42f2:	90 e0       	ldi	r25, 0x00	; 0
    42f4:	9c 83       	std	Y+4, r25	; 0x04
    42f6:	8b 83       	std	Y+3, r24	; 0x03
    42f8:	8b 81       	ldd	r24, Y+3	; 0x03
    42fa:	9c 81       	ldd	r25, Y+4	; 0x04
    42fc:	01 97       	sbiw	r24, 0x01	; 1
    42fe:	f1 f7       	brne	.-4      	; 0x42fc <LCD_voidSendU32Digit_Postion+0xda>
    4300:	9c 83       	std	Y+4, r25	; 0x04
    4302:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4304:	8d 81       	ldd	r24, Y+5	; 0x05
    4306:	9e 81       	ldd	r25, Y+6	; 0x06
    4308:	01 97       	sbiw	r24, 0x01	; 1
    430a:	9e 83       	std	Y+6, r25	; 0x06
    430c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    430e:	8d 81       	ldd	r24, Y+5	; 0x05
    4310:	9e 81       	ldd	r25, Y+6	; 0x06
    4312:	00 97       	sbiw	r24, 0x00	; 0
    4314:	69 f7       	brne	.-38     	; 0x42f0 <LCD_voidSendU32Digit_Postion+0xce>
    4316:	14 c0       	rjmp	.+40     	; 0x4340 <LCD_voidSendU32Digit_Postion+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4318:	6f 81       	ldd	r22, Y+7	; 0x07
    431a:	78 85       	ldd	r23, Y+8	; 0x08
    431c:	89 85       	ldd	r24, Y+9	; 0x09
    431e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4320:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4324:	dc 01       	movw	r26, r24
    4326:	cb 01       	movw	r24, r22
    4328:	9e 83       	std	Y+6, r25	; 0x06
    432a:	8d 83       	std	Y+5, r24	; 0x05
    432c:	8d 81       	ldd	r24, Y+5	; 0x05
    432e:	9e 81       	ldd	r25, Y+6	; 0x06
    4330:	9a 83       	std	Y+2, r25	; 0x02
    4332:	89 83       	std	Y+1, r24	; 0x01
    4334:	89 81       	ldd	r24, Y+1	; 0x01
    4336:	9a 81       	ldd	r25, Y+2	; 0x02
    4338:	01 97       	sbiw	r24, 0x01	; 1
    433a:	f1 f7       	brne	.-4      	; 0x4338 <LCD_voidSendU32Digit_Postion+0x116>
    433c:	9a 83       	std	Y+2, r25	; 0x02
    433e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(35);
	LCD_voidSendU32Digit(copy_pstConfig,num);
    4340:	8f 85       	ldd	r24, Y+15	; 0x0f
    4342:	98 89       	ldd	r25, Y+16	; 0x10
    4344:	29 89       	ldd	r18, Y+17	; 0x11
    4346:	3a 89       	ldd	r19, Y+18	; 0x12
    4348:	4b 89       	ldd	r20, Y+19	; 0x13
    434a:	5c 89       	ldd	r21, Y+20	; 0x14
    434c:	ba 01       	movw	r22, r20
    434e:	a9 01       	movw	r20, r18
    4350:	0e 94 bf 20 	call	0x417e	; 0x417e <LCD_voidSendU32Digit>
	return;
}
    4354:	66 96       	adiw	r28, 0x16	; 22
    4356:	0f b6       	in	r0, 0x3f	; 63
    4358:	f8 94       	cli
    435a:	de bf       	out	0x3e, r29	; 62
    435c:	0f be       	out	0x3f, r0	; 63
    435e:	cd bf       	out	0x3d, r28	; 61
    4360:	cf 91       	pop	r28
    4362:	df 91       	pop	r29
    4364:	0f 91       	pop	r16
    4366:	08 95       	ret

00004368 <LCD_voidSendf32Digit>:

void LCD_voidSendf32Digit(LCD_stConfig* copy_pstConfig , f32 num)
{
    4368:	0f 93       	push	r16
    436a:	1f 93       	push	r17
    436c:	df 93       	push	r29
    436e:	cf 93       	push	r28
    4370:	cd b7       	in	r28, 0x3d	; 61
    4372:	de b7       	in	r29, 0x3e	; 62
    4374:	68 97       	sbiw	r28, 0x18	; 24
    4376:	0f b6       	in	r0, 0x3f	; 63
    4378:	f8 94       	cli
    437a:	de bf       	out	0x3e, r29	; 62
    437c:	0f be       	out	0x3f, r0	; 63
    437e:	cd bf       	out	0x3d, r28	; 61
    4380:	9c 8b       	std	Y+20, r25	; 0x14
    4382:	8b 8b       	std	Y+19, r24	; 0x13
    4384:	4d 8b       	std	Y+21, r20	; 0x15
    4386:	5e 8b       	std	Y+22, r21	; 0x16
    4388:	6f 8b       	std	Y+23, r22	; 0x17
    438a:	78 8f       	std	Y+24, r23	; 0x18
	u8 dot_point_location = 0;
    438c:	1f 82       	std	Y+7, r1	; 0x07
	u8 numStr[11] = {0};
    438e:	8b e0       	ldi	r24, 0x0B	; 11
    4390:	fe 01       	movw	r30, r28
    4392:	38 96       	adiw	r30, 0x08	; 8
    4394:	df 01       	movw	r26, r30
    4396:	98 2f       	mov	r25, r24
    4398:	1d 92       	st	X+, r1
    439a:	9a 95       	dec	r25
    439c:	e9 f7       	brne	.-6      	; 0x4398 <LCD_voidSendf32Digit+0x30>

	s32 l_intPart = (s32)num;
    439e:	6d 89       	ldd	r22, Y+21	; 0x15
    43a0:	7e 89       	ldd	r23, Y+22	; 0x16
    43a2:	8f 89       	ldd	r24, Y+23	; 0x17
    43a4:	98 8d       	ldd	r25, Y+24	; 0x18
    43a6:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    43aa:	dc 01       	movw	r26, r24
    43ac:	cb 01       	movw	r24, r22
    43ae:	9e 83       	std	Y+6, r25	; 0x06
    43b0:	8d 83       	std	Y+5, r24	; 0x05
	f32 l_floatPart =  num - l_intPart;
    43b2:	8d 81       	ldd	r24, Y+5	; 0x05
    43b4:	9e 81       	ldd	r25, Y+6	; 0x06
    43b6:	aa 27       	eor	r26, r26
    43b8:	97 fd       	sbrc	r25, 7
    43ba:	a0 95       	com	r26
    43bc:	ba 2f       	mov	r27, r26
    43be:	bc 01       	movw	r22, r24
    43c0:	cd 01       	movw	r24, r26
    43c2:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    43c6:	9b 01       	movw	r18, r22
    43c8:	ac 01       	movw	r20, r24
    43ca:	6d 89       	ldd	r22, Y+21	; 0x15
    43cc:	7e 89       	ldd	r23, Y+22	; 0x16
    43ce:	8f 89       	ldd	r24, Y+23	; 0x17
    43d0:	98 8d       	ldd	r25, Y+24	; 0x18
    43d2:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    43d6:	dc 01       	movw	r26, r24
    43d8:	cb 01       	movw	r24, r22
    43da:	89 83       	std	Y+1, r24	; 0x01
    43dc:	9a 83       	std	Y+2, r25	; 0x02
    43de:	ab 83       	std	Y+3, r26	; 0x03
    43e0:	bc 83       	std	Y+4, r27	; 0x04

	snprintf(numStr , 6 , "%d" , l_intPart);
    43e2:	ad b7       	in	r26, 0x3d	; 61
    43e4:	be b7       	in	r27, 0x3e	; 62
    43e6:	18 97       	sbiw	r26, 0x08	; 8
    43e8:	0f b6       	in	r0, 0x3f	; 63
    43ea:	f8 94       	cli
    43ec:	be bf       	out	0x3e, r27	; 62
    43ee:	0f be       	out	0x3f, r0	; 63
    43f0:	ad bf       	out	0x3d, r26	; 61
    43f2:	ed b7       	in	r30, 0x3d	; 61
    43f4:	fe b7       	in	r31, 0x3e	; 62
    43f6:	31 96       	adiw	r30, 0x01	; 1
    43f8:	ce 01       	movw	r24, r28
    43fa:	08 96       	adiw	r24, 0x08	; 8
    43fc:	91 83       	std	Z+1, r25	; 0x01
    43fe:	80 83       	st	Z, r24
    4400:	86 e0       	ldi	r24, 0x06	; 6
    4402:	90 e0       	ldi	r25, 0x00	; 0
    4404:	93 83       	std	Z+3, r25	; 0x03
    4406:	82 83       	std	Z+2, r24	; 0x02
    4408:	84 e6       	ldi	r24, 0x64	; 100
    440a:	90 e0       	ldi	r25, 0x00	; 0
    440c:	95 83       	std	Z+5, r25	; 0x05
    440e:	84 83       	std	Z+4, r24	; 0x04
    4410:	8d 81       	ldd	r24, Y+5	; 0x05
    4412:	9e 81       	ldd	r25, Y+6	; 0x06
    4414:	97 83       	std	Z+7, r25	; 0x07
    4416:	86 83       	std	Z+6, r24	; 0x06
    4418:	0e 94 76 2e 	call	0x5cec	; 0x5cec <snprintf>
    441c:	8d b7       	in	r24, 0x3d	; 61
    441e:	9e b7       	in	r25, 0x3e	; 62
    4420:	08 96       	adiw	r24, 0x08	; 8
    4422:	0f b6       	in	r0, 0x3f	; 63
    4424:	f8 94       	cli
    4426:	9e bf       	out	0x3e, r25	; 62
    4428:	0f be       	out	0x3f, r0	; 63
    442a:	8d bf       	out	0x3d, r24	; 61
    442c:	03 c0       	rjmp	.+6      	; 0x4434 <LCD_voidSendf32Digit+0xcc>

	while(numStr[dot_point_location] != '\0')
		++dot_point_location;
    442e:	8f 81       	ldd	r24, Y+7	; 0x07
    4430:	8f 5f       	subi	r24, 0xFF	; 255
    4432:	8f 83       	std	Y+7, r24	; 0x07
	s32 l_intPart = (s32)num;
	f32 l_floatPart =  num - l_intPart;

	snprintf(numStr , 6 , "%d" , l_intPart);

	while(numStr[dot_point_location] != '\0')
    4434:	8f 81       	ldd	r24, Y+7	; 0x07
    4436:	28 2f       	mov	r18, r24
    4438:	30 e0       	ldi	r19, 0x00	; 0
    443a:	ce 01       	movw	r24, r28
    443c:	08 96       	adiw	r24, 0x08	; 8
    443e:	fc 01       	movw	r30, r24
    4440:	e2 0f       	add	r30, r18
    4442:	f3 1f       	adc	r31, r19
    4444:	80 81       	ld	r24, Z
    4446:	88 23       	and	r24, r24
    4448:	91 f7       	brne	.-28     	; 0x442e <LCD_voidSendf32Digit+0xc6>
		++dot_point_location;

	numStr[dot_point_location++] = '.';
    444a:	8f 81       	ldd	r24, Y+7	; 0x07
    444c:	28 2f       	mov	r18, r24
    444e:	30 e0       	ldi	r19, 0x00	; 0
    4450:	ce 01       	movw	r24, r28
    4452:	08 96       	adiw	r24, 0x08	; 8
    4454:	fc 01       	movw	r30, r24
    4456:	e2 0f       	add	r30, r18
    4458:	f3 1f       	adc	r31, r19
    445a:	8e e2       	ldi	r24, 0x2E	; 46
    445c:	80 83       	st	Z, r24
    445e:	8f 81       	ldd	r24, Y+7	; 0x07
    4460:	8f 5f       	subi	r24, 0xFF	; 255
    4462:	8f 83       	std	Y+7, r24	; 0x07



	numStr[dot_point_location++] = ((u32)(l_floatPart * 10) %10) + '0';
    4464:	8f 81       	ldd	r24, Y+7	; 0x07
    4466:	08 2f       	mov	r16, r24
    4468:	10 e0       	ldi	r17, 0x00	; 0
    446a:	69 81       	ldd	r22, Y+1	; 0x01
    446c:	7a 81       	ldd	r23, Y+2	; 0x02
    446e:	8b 81       	ldd	r24, Y+3	; 0x03
    4470:	9c 81       	ldd	r25, Y+4	; 0x04
    4472:	20 e0       	ldi	r18, 0x00	; 0
    4474:	30 e0       	ldi	r19, 0x00	; 0
    4476:	40 e2       	ldi	r20, 0x20	; 32
    4478:	51 e4       	ldi	r21, 0x41	; 65
    447a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    447e:	dc 01       	movw	r26, r24
    4480:	cb 01       	movw	r24, r22
    4482:	bc 01       	movw	r22, r24
    4484:	cd 01       	movw	r24, r26
    4486:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    448a:	dc 01       	movw	r26, r24
    448c:	cb 01       	movw	r24, r22
    448e:	2a e0       	ldi	r18, 0x0A	; 10
    4490:	30 e0       	ldi	r19, 0x00	; 0
    4492:	40 e0       	ldi	r20, 0x00	; 0
    4494:	50 e0       	ldi	r21, 0x00	; 0
    4496:	bc 01       	movw	r22, r24
    4498:	cd 01       	movw	r24, r26
    449a:	0e 94 1d 2e 	call	0x5c3a	; 0x5c3a <__udivmodsi4>
    449e:	dc 01       	movw	r26, r24
    44a0:	cb 01       	movw	r24, r22
    44a2:	28 2f       	mov	r18, r24
    44a4:	20 5d       	subi	r18, 0xD0	; 208
    44a6:	ce 01       	movw	r24, r28
    44a8:	08 96       	adiw	r24, 0x08	; 8
    44aa:	fc 01       	movw	r30, r24
    44ac:	e0 0f       	add	r30, r16
    44ae:	f1 1f       	adc	r31, r17
    44b0:	20 83       	st	Z, r18
    44b2:	8f 81       	ldd	r24, Y+7	; 0x07
    44b4:	8f 5f       	subi	r24, 0xFF	; 255
    44b6:	8f 83       	std	Y+7, r24	; 0x07
	numStr[dot_point_location] = ((u32)(l_floatPart * 100) %10) + '0';
    44b8:	8f 81       	ldd	r24, Y+7	; 0x07
    44ba:	08 2f       	mov	r16, r24
    44bc:	10 e0       	ldi	r17, 0x00	; 0
    44be:	69 81       	ldd	r22, Y+1	; 0x01
    44c0:	7a 81       	ldd	r23, Y+2	; 0x02
    44c2:	8b 81       	ldd	r24, Y+3	; 0x03
    44c4:	9c 81       	ldd	r25, Y+4	; 0x04
    44c6:	20 e0       	ldi	r18, 0x00	; 0
    44c8:	30 e0       	ldi	r19, 0x00	; 0
    44ca:	48 ec       	ldi	r20, 0xC8	; 200
    44cc:	52 e4       	ldi	r21, 0x42	; 66
    44ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    44d2:	dc 01       	movw	r26, r24
    44d4:	cb 01       	movw	r24, r22
    44d6:	bc 01       	movw	r22, r24
    44d8:	cd 01       	movw	r24, r26
    44da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44de:	dc 01       	movw	r26, r24
    44e0:	cb 01       	movw	r24, r22
    44e2:	2a e0       	ldi	r18, 0x0A	; 10
    44e4:	30 e0       	ldi	r19, 0x00	; 0
    44e6:	40 e0       	ldi	r20, 0x00	; 0
    44e8:	50 e0       	ldi	r21, 0x00	; 0
    44ea:	bc 01       	movw	r22, r24
    44ec:	cd 01       	movw	r24, r26
    44ee:	0e 94 1d 2e 	call	0x5c3a	; 0x5c3a <__udivmodsi4>
    44f2:	dc 01       	movw	r26, r24
    44f4:	cb 01       	movw	r24, r22
    44f6:	28 2f       	mov	r18, r24
    44f8:	20 5d       	subi	r18, 0xD0	; 208
    44fa:	ce 01       	movw	r24, r28
    44fc:	08 96       	adiw	r24, 0x08	; 8
    44fe:	fc 01       	movw	r30, r24
    4500:	e0 0f       	add	r30, r16
    4502:	f1 1f       	adc	r31, r17
    4504:	20 83       	st	Z, r18

	LCD_voidSendString(copy_pstConfig ,numStr);
    4506:	8b 89       	ldd	r24, Y+19	; 0x13
    4508:	9c 89       	ldd	r25, Y+20	; 0x14
    450a:	9e 01       	movw	r18, r28
    450c:	28 5f       	subi	r18, 0xF8	; 248
    450e:	3f 4f       	sbci	r19, 0xFF	; 255
    4510:	b9 01       	movw	r22, r18
    4512:	0e 94 90 1b 	call	0x3720	; 0x3720 <LCD_voidSendString>
	return;
}
    4516:	68 96       	adiw	r28, 0x18	; 24
    4518:	0f b6       	in	r0, 0x3f	; 63
    451a:	f8 94       	cli
    451c:	de bf       	out	0x3e, r29	; 62
    451e:	0f be       	out	0x3f, r0	; 63
    4520:	cd bf       	out	0x3d, r28	; 61
    4522:	cf 91       	pop	r28
    4524:	df 91       	pop	r29
    4526:	1f 91       	pop	r17
    4528:	0f 91       	pop	r16
    452a:	08 95       	ret

0000452c <LCD_voidSendf32Digit_Postion>:
void LCD_voidSendf32Digit_Postion(LCD_stConfig* copy_pstConfig , f32 num, u8 copy_u8Row , u8 copy_u8Colum)
{
    452c:	0f 93       	push	r16
    452e:	df 93       	push	r29
    4530:	cf 93       	push	r28
    4532:	cd b7       	in	r28, 0x3d	; 61
    4534:	de b7       	in	r29, 0x3e	; 62
    4536:	66 97       	sbiw	r28, 0x16	; 22
    4538:	0f b6       	in	r0, 0x3f	; 63
    453a:	f8 94       	cli
    453c:	de bf       	out	0x3e, r29	; 62
    453e:	0f be       	out	0x3f, r0	; 63
    4540:	cd bf       	out	0x3d, r28	; 61
    4542:	98 8b       	std	Y+16, r25	; 0x10
    4544:	8f 87       	std	Y+15, r24	; 0x0f
    4546:	49 8b       	std	Y+17, r20	; 0x11
    4548:	5a 8b       	std	Y+18, r21	; 0x12
    454a:	6b 8b       	std	Y+19, r22	; 0x13
    454c:	7c 8b       	std	Y+20, r23	; 0x14
    454e:	2d 8b       	std	Y+21, r18	; 0x15
    4550:	0e 8b       	std	Y+22, r16	; 0x16
	LCD_voidSendCommand(copy_pstConfig ,  (LCD_U8DDRAM_OFFSET | (copy_u8Row + copy_u8Colum)) );
    4552:	9d 89       	ldd	r25, Y+21	; 0x15
    4554:	8e 89       	ldd	r24, Y+22	; 0x16
    4556:	89 0f       	add	r24, r25
    4558:	80 68       	ori	r24, 0x80	; 128
    455a:	28 2f       	mov	r18, r24
    455c:	8f 85       	ldd	r24, Y+15	; 0x0f
    455e:	98 89       	ldd	r25, Y+16	; 0x10
    4560:	62 2f       	mov	r22, r18
    4562:	0e 94 1c 1b 	call	0x3638	; 0x3638 <LCD_voidSendCommand>
    4566:	80 e0       	ldi	r24, 0x00	; 0
    4568:	90 e0       	ldi	r25, 0x00	; 0
    456a:	ac e0       	ldi	r26, 0x0C	; 12
    456c:	b2 e4       	ldi	r27, 0x42	; 66
    456e:	8b 87       	std	Y+11, r24	; 0x0b
    4570:	9c 87       	std	Y+12, r25	; 0x0c
    4572:	ad 87       	std	Y+13, r26	; 0x0d
    4574:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4576:	6b 85       	ldd	r22, Y+11	; 0x0b
    4578:	7c 85       	ldd	r23, Y+12	; 0x0c
    457a:	8d 85       	ldd	r24, Y+13	; 0x0d
    457c:	9e 85       	ldd	r25, Y+14	; 0x0e
    457e:	20 e0       	ldi	r18, 0x00	; 0
    4580:	30 e0       	ldi	r19, 0x00	; 0
    4582:	4a ef       	ldi	r20, 0xFA	; 250
    4584:	54 e4       	ldi	r21, 0x44	; 68
    4586:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    458a:	dc 01       	movw	r26, r24
    458c:	cb 01       	movw	r24, r22
    458e:	8f 83       	std	Y+7, r24	; 0x07
    4590:	98 87       	std	Y+8, r25	; 0x08
    4592:	a9 87       	std	Y+9, r26	; 0x09
    4594:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4596:	6f 81       	ldd	r22, Y+7	; 0x07
    4598:	78 85       	ldd	r23, Y+8	; 0x08
    459a:	89 85       	ldd	r24, Y+9	; 0x09
    459c:	9a 85       	ldd	r25, Y+10	; 0x0a
    459e:	20 e0       	ldi	r18, 0x00	; 0
    45a0:	30 e0       	ldi	r19, 0x00	; 0
    45a2:	40 e8       	ldi	r20, 0x80	; 128
    45a4:	5f e3       	ldi	r21, 0x3F	; 63
    45a6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    45aa:	88 23       	and	r24, r24
    45ac:	2c f4       	brge	.+10     	; 0x45b8 <LCD_voidSendf32Digit_Postion+0x8c>
		__ticks = 1;
    45ae:	81 e0       	ldi	r24, 0x01	; 1
    45b0:	90 e0       	ldi	r25, 0x00	; 0
    45b2:	9e 83       	std	Y+6, r25	; 0x06
    45b4:	8d 83       	std	Y+5, r24	; 0x05
    45b6:	3f c0       	rjmp	.+126    	; 0x4636 <LCD_voidSendf32Digit_Postion+0x10a>
	else if (__tmp > 65535)
    45b8:	6f 81       	ldd	r22, Y+7	; 0x07
    45ba:	78 85       	ldd	r23, Y+8	; 0x08
    45bc:	89 85       	ldd	r24, Y+9	; 0x09
    45be:	9a 85       	ldd	r25, Y+10	; 0x0a
    45c0:	20 e0       	ldi	r18, 0x00	; 0
    45c2:	3f ef       	ldi	r19, 0xFF	; 255
    45c4:	4f e7       	ldi	r20, 0x7F	; 127
    45c6:	57 e4       	ldi	r21, 0x47	; 71
    45c8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    45cc:	18 16       	cp	r1, r24
    45ce:	4c f5       	brge	.+82     	; 0x4622 <LCD_voidSendf32Digit_Postion+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    45d0:	6b 85       	ldd	r22, Y+11	; 0x0b
    45d2:	7c 85       	ldd	r23, Y+12	; 0x0c
    45d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    45d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    45d8:	20 e0       	ldi	r18, 0x00	; 0
    45da:	30 e0       	ldi	r19, 0x00	; 0
    45dc:	40 e2       	ldi	r20, 0x20	; 32
    45de:	51 e4       	ldi	r21, 0x41	; 65
    45e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    45e4:	dc 01       	movw	r26, r24
    45e6:	cb 01       	movw	r24, r22
    45e8:	bc 01       	movw	r22, r24
    45ea:	cd 01       	movw	r24, r26
    45ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45f0:	dc 01       	movw	r26, r24
    45f2:	cb 01       	movw	r24, r22
    45f4:	9e 83       	std	Y+6, r25	; 0x06
    45f6:	8d 83       	std	Y+5, r24	; 0x05
    45f8:	0f c0       	rjmp	.+30     	; 0x4618 <LCD_voidSendf32Digit_Postion+0xec>
    45fa:	88 ec       	ldi	r24, 0xC8	; 200
    45fc:	90 e0       	ldi	r25, 0x00	; 0
    45fe:	9c 83       	std	Y+4, r25	; 0x04
    4600:	8b 83       	std	Y+3, r24	; 0x03
    4602:	8b 81       	ldd	r24, Y+3	; 0x03
    4604:	9c 81       	ldd	r25, Y+4	; 0x04
    4606:	01 97       	sbiw	r24, 0x01	; 1
    4608:	f1 f7       	brne	.-4      	; 0x4606 <LCD_voidSendf32Digit_Postion+0xda>
    460a:	9c 83       	std	Y+4, r25	; 0x04
    460c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    460e:	8d 81       	ldd	r24, Y+5	; 0x05
    4610:	9e 81       	ldd	r25, Y+6	; 0x06
    4612:	01 97       	sbiw	r24, 0x01	; 1
    4614:	9e 83       	std	Y+6, r25	; 0x06
    4616:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4618:	8d 81       	ldd	r24, Y+5	; 0x05
    461a:	9e 81       	ldd	r25, Y+6	; 0x06
    461c:	00 97       	sbiw	r24, 0x00	; 0
    461e:	69 f7       	brne	.-38     	; 0x45fa <LCD_voidSendf32Digit_Postion+0xce>
    4620:	14 c0       	rjmp	.+40     	; 0x464a <LCD_voidSendf32Digit_Postion+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4622:	6f 81       	ldd	r22, Y+7	; 0x07
    4624:	78 85       	ldd	r23, Y+8	; 0x08
    4626:	89 85       	ldd	r24, Y+9	; 0x09
    4628:	9a 85       	ldd	r25, Y+10	; 0x0a
    462a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    462e:	dc 01       	movw	r26, r24
    4630:	cb 01       	movw	r24, r22
    4632:	9e 83       	std	Y+6, r25	; 0x06
    4634:	8d 83       	std	Y+5, r24	; 0x05
    4636:	8d 81       	ldd	r24, Y+5	; 0x05
    4638:	9e 81       	ldd	r25, Y+6	; 0x06
    463a:	9a 83       	std	Y+2, r25	; 0x02
    463c:	89 83       	std	Y+1, r24	; 0x01
    463e:	89 81       	ldd	r24, Y+1	; 0x01
    4640:	9a 81       	ldd	r25, Y+2	; 0x02
    4642:	01 97       	sbiw	r24, 0x01	; 1
    4644:	f1 f7       	brne	.-4      	; 0x4642 <LCD_voidSendf32Digit_Postion+0x116>
    4646:	9a 83       	std	Y+2, r25	; 0x02
    4648:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(35);
	LCD_voidSendf32Digit(copy_pstConfig,num);
    464a:	8f 85       	ldd	r24, Y+15	; 0x0f
    464c:	98 89       	ldd	r25, Y+16	; 0x10
    464e:	29 89       	ldd	r18, Y+17	; 0x11
    4650:	3a 89       	ldd	r19, Y+18	; 0x12
    4652:	4b 89       	ldd	r20, Y+19	; 0x13
    4654:	5c 89       	ldd	r21, Y+20	; 0x14
    4656:	ba 01       	movw	r22, r20
    4658:	a9 01       	movw	r20, r18
    465a:	0e 94 b4 21 	call	0x4368	; 0x4368 <LCD_voidSendf32Digit>
	return;
}
    465e:	66 96       	adiw	r28, 0x16	; 22
    4660:	0f b6       	in	r0, 0x3f	; 63
    4662:	f8 94       	cli
    4664:	de bf       	out	0x3e, r29	; 62
    4666:	0f be       	out	0x3f, r0	; 63
    4668:	cd bf       	out	0x3d, r28	; 61
    466a:	cf 91       	pop	r28
    466c:	df 91       	pop	r29
    466e:	0f 91       	pop	r16
    4670:	08 95       	ret

00004672 <KPD_VoidInit>:

static u8 KPD_ArrROWS_PINS[ROWS_U8NUM] = KPD_ROW_PINS_ARR;
static u8 KPD_ArrCOLS_PINS[COLUMS_U8NUM] = KPD_COL_PINS_ARR;

void KPD_VoidInit(void)
{
    4672:	df 93       	push	r29
    4674:	cf 93       	push	r28
    4676:	0f 92       	push	r0
    4678:	cd b7       	in	r28, 0x3d	; 61
    467a:	de b7       	in	r29, 0x3e	; 62
	u8 i = 0;
    467c:	19 82       	std	Y+1, r1	; 0x01
    467e:	10 c0       	rjmp	.+32     	; 0x46a0 <KPD_VoidInit+0x2e>
	for(; i <ROWS_U8NUM ; ++i)
		DIO_voidPinInit(KEYPARD_PORT, KPD_ArrROWS_PINS[i], DIO_PIN_DIR_INPUT , DIO_PIN_LOGIC_HIGH);
    4680:	89 81       	ldd	r24, Y+1	; 0x01
    4682:	88 2f       	mov	r24, r24
    4684:	90 e0       	ldi	r25, 0x00	; 0
    4686:	fc 01       	movw	r30, r24
    4688:	e2 50       	subi	r30, 0x02	; 2
    468a:	fd 4f       	sbci	r31, 0xFD	; 253
    468c:	90 81       	ld	r25, Z
    468e:	81 e0       	ldi	r24, 0x01	; 1
    4690:	69 2f       	mov	r22, r25
    4692:	40 e0       	ldi	r20, 0x00	; 0
    4694:	21 e0       	ldi	r18, 0x01	; 1
    4696:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <DIO_voidPinInit>
static u8 KPD_ArrCOLS_PINS[COLUMS_U8NUM] = KPD_COL_PINS_ARR;

void KPD_VoidInit(void)
{
	u8 i = 0;
	for(; i <ROWS_U8NUM ; ++i)
    469a:	89 81       	ldd	r24, Y+1	; 0x01
    469c:	8f 5f       	subi	r24, 0xFF	; 255
    469e:	89 83       	std	Y+1, r24	; 0x01
    46a0:	89 81       	ldd	r24, Y+1	; 0x01
    46a2:	84 30       	cpi	r24, 0x04	; 4
    46a4:	68 f3       	brcs	.-38     	; 0x4680 <KPD_VoidInit+0xe>
		DIO_voidPinInit(KEYPARD_PORT, KPD_ArrROWS_PINS[i], DIO_PIN_DIR_INPUT , DIO_PIN_LOGIC_HIGH);

	for(i = 0 ; i < COLUMS_U8NUM ; ++i)
    46a6:	19 82       	std	Y+1, r1	; 0x01
    46a8:	10 c0       	rjmp	.+32     	; 0x46ca <KPD_VoidInit+0x58>
		DIO_voidPinInit(KEYPARD_PORT, KPD_ArrCOLS_PINS[i], DIO_PIN_DIR_OUTPUT , DIO_PIN_LOGIC_HIGH);
    46aa:	89 81       	ldd	r24, Y+1	; 0x01
    46ac:	88 2f       	mov	r24, r24
    46ae:	90 e0       	ldi	r25, 0x00	; 0
    46b0:	fc 01       	movw	r30, r24
    46b2:	ee 5f       	subi	r30, 0xFE	; 254
    46b4:	fc 4f       	sbci	r31, 0xFC	; 252
    46b6:	90 81       	ld	r25, Z
    46b8:	81 e0       	ldi	r24, 0x01	; 1
    46ba:	69 2f       	mov	r22, r25
    46bc:	41 e0       	ldi	r20, 0x01	; 1
    46be:	21 e0       	ldi	r18, 0x01	; 1
    46c0:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <DIO_voidPinInit>
{
	u8 i = 0;
	for(; i <ROWS_U8NUM ; ++i)
		DIO_voidPinInit(KEYPARD_PORT, KPD_ArrROWS_PINS[i], DIO_PIN_DIR_INPUT , DIO_PIN_LOGIC_HIGH);

	for(i = 0 ; i < COLUMS_U8NUM ; ++i)
    46c4:	89 81       	ldd	r24, Y+1	; 0x01
    46c6:	8f 5f       	subi	r24, 0xFF	; 255
    46c8:	89 83       	std	Y+1, r24	; 0x01
    46ca:	89 81       	ldd	r24, Y+1	; 0x01
    46cc:	84 30       	cpi	r24, 0x04	; 4
    46ce:	68 f3       	brcs	.-38     	; 0x46aa <KPD_VoidInit+0x38>
		DIO_voidPinInit(KEYPARD_PORT, KPD_ArrCOLS_PINS[i], DIO_PIN_DIR_OUTPUT , DIO_PIN_LOGIC_HIGH);
	return;
}
    46d0:	0f 90       	pop	r0
    46d2:	cf 91       	pop	r28
    46d4:	df 91       	pop	r29
    46d6:	08 95       	ret

000046d8 <KPD_U8GetKey>:

u8 KPD_U8GetKey(void)
{
    46d8:	df 93       	push	r29
    46da:	cf 93       	push	r28
    46dc:	cd b7       	in	r28, 0x3d	; 61
    46de:	de b7       	in	r29, 0x3e	; 62
    46e0:	69 97       	sbiw	r28, 0x19	; 25
    46e2:	0f b6       	in	r0, 0x3f	; 63
    46e4:	f8 94       	cli
    46e6:	de bf       	out	0x3e, r29	; 62
    46e8:	0f be       	out	0x3f, r0	; 63
    46ea:	cd bf       	out	0x3d, r28	; 61
	u8 KPD_ARR_VAL[ROWS_U8NUM][COLUMS_U8NUM] =  KEYPAD_ARR_VALUES;
    46ec:	ce 01       	movw	r24, r28
    46ee:	03 96       	adiw	r24, 0x03	; 3
    46f0:	9e 8b       	std	Y+22, r25	; 0x16
    46f2:	8d 8b       	std	Y+21, r24	; 0x15
    46f4:	e2 e2       	ldi	r30, 0x22	; 34
    46f6:	f3 e0       	ldi	r31, 0x03	; 3
    46f8:	f8 8f       	std	Y+24, r31	; 0x18
    46fa:	ef 8b       	std	Y+23, r30	; 0x17
    46fc:	f0 e1       	ldi	r31, 0x10	; 16
    46fe:	f9 8f       	std	Y+25, r31	; 0x19
    4700:	ef 89       	ldd	r30, Y+23	; 0x17
    4702:	f8 8d       	ldd	r31, Y+24	; 0x18
    4704:	00 80       	ld	r0, Z
    4706:	8f 89       	ldd	r24, Y+23	; 0x17
    4708:	98 8d       	ldd	r25, Y+24	; 0x18
    470a:	01 96       	adiw	r24, 0x01	; 1
    470c:	98 8f       	std	Y+24, r25	; 0x18
    470e:	8f 8b       	std	Y+23, r24	; 0x17
    4710:	ed 89       	ldd	r30, Y+21	; 0x15
    4712:	fe 89       	ldd	r31, Y+22	; 0x16
    4714:	00 82       	st	Z, r0
    4716:	8d 89       	ldd	r24, Y+21	; 0x15
    4718:	9e 89       	ldd	r25, Y+22	; 0x16
    471a:	01 96       	adiw	r24, 0x01	; 1
    471c:	9e 8b       	std	Y+22, r25	; 0x16
    471e:	8d 8b       	std	Y+21, r24	; 0x15
    4720:	99 8d       	ldd	r25, Y+25	; 0x19
    4722:	91 50       	subi	r25, 0x01	; 1
    4724:	99 8f       	std	Y+25, r25	; 0x19
    4726:	e9 8d       	ldd	r30, Y+25	; 0x19
    4728:	ee 23       	and	r30, r30
    472a:	51 f7       	brne	.-44     	; 0x4700 <KPD_U8GetKey+0x28>
	u8 local_KPD_Stat = DIO_PIN_LOGIC_HIGH;
    472c:	81 e0       	ldi	r24, 0x01	; 1
    472e:	8b 8b       	std	Y+19, r24	; 0x13
	u8 l_rows = 0 , l_colums = 0;
    4730:	1a 82       	std	Y+2, r1	; 0x02
    4732:	19 82       	std	Y+1, r1	; 0x01
    4734:	5e c0       	rjmp	.+188    	; 0x47f2 <KPD_U8GetKey+0x11a>

	for(;l_colums < COLUMS_U8NUM ; ++l_colums )
	{
		DIO_VoidSetPinValue(KEYPARD_PORT,KPD_ArrCOLS_PINS[l_colums],DIO_PIN_LOGIC_LOW);
    4736:	89 81       	ldd	r24, Y+1	; 0x01
    4738:	88 2f       	mov	r24, r24
    473a:	90 e0       	ldi	r25, 0x00	; 0
    473c:	fc 01       	movw	r30, r24
    473e:	ee 5f       	subi	r30, 0xFE	; 254
    4740:	fc 4f       	sbci	r31, 0xFC	; 252
    4742:	90 81       	ld	r25, Z
    4744:	81 e0       	ldi	r24, 0x01	; 1
    4746:	69 2f       	mov	r22, r25
    4748:	40 e0       	ldi	r20, 0x00	; 0
    474a:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <DIO_VoidSetPinValue>
		for(l_rows = 0 ; l_rows <ROWS_U8NUM ; ++l_rows )
    474e:	1a 82       	std	Y+2, r1	; 0x02
    4750:	3d c0       	rjmp	.+122    	; 0x47cc <KPD_U8GetKey+0xf4>
		{
			DIO_VoidGetPinValue(KEYPARD_PORT,KPD_ArrROWS_PINS[l_rows] , &local_KPD_Stat);
    4752:	8a 81       	ldd	r24, Y+2	; 0x02
    4754:	88 2f       	mov	r24, r24
    4756:	90 e0       	ldi	r25, 0x00	; 0
    4758:	fc 01       	movw	r30, r24
    475a:	e2 50       	subi	r30, 0x02	; 2
    475c:	fd 4f       	sbci	r31, 0xFD	; 253
    475e:	90 81       	ld	r25, Z
    4760:	9e 01       	movw	r18, r28
    4762:	2d 5e       	subi	r18, 0xED	; 237
    4764:	3f 4f       	sbci	r19, 0xFF	; 255
    4766:	81 e0       	ldi	r24, 0x01	; 1
    4768:	69 2f       	mov	r22, r25
    476a:	a9 01       	movw	r20, r18
    476c:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <DIO_VoidGetPinValue>
			if(DIO_PIN_LOGIC_LOW == local_KPD_Stat)
    4770:	8b 89       	ldd	r24, Y+19	; 0x13
    4772:	88 23       	and	r24, r24
    4774:	41 f5       	brne	.+80     	; 0x47c6 <KPD_U8GetKey+0xee>
    4776:	0f c0       	rjmp	.+30     	; 0x4796 <KPD_U8GetKey+0xbe>
			{
				while(DIO_PIN_LOGIC_LOW == local_KPD_Stat)
				{
					DIO_VoidGetPinValue(KEYPARD_PORT,KPD_ArrROWS_PINS[l_rows] , &local_KPD_Stat);
    4778:	8a 81       	ldd	r24, Y+2	; 0x02
    477a:	88 2f       	mov	r24, r24
    477c:	90 e0       	ldi	r25, 0x00	; 0
    477e:	fc 01       	movw	r30, r24
    4780:	e2 50       	subi	r30, 0x02	; 2
    4782:	fd 4f       	sbci	r31, 0xFD	; 253
    4784:	90 81       	ld	r25, Z
    4786:	9e 01       	movw	r18, r28
    4788:	2d 5e       	subi	r18, 0xED	; 237
    478a:	3f 4f       	sbci	r19, 0xFF	; 255
    478c:	81 e0       	ldi	r24, 0x01	; 1
    478e:	69 2f       	mov	r22, r25
    4790:	a9 01       	movw	r20, r18
    4792:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <DIO_VoidGetPinValue>
		for(l_rows = 0 ; l_rows <ROWS_U8NUM ; ++l_rows )
		{
			DIO_VoidGetPinValue(KEYPARD_PORT,KPD_ArrROWS_PINS[l_rows] , &local_KPD_Stat);
			if(DIO_PIN_LOGIC_LOW == local_KPD_Stat)
			{
				while(DIO_PIN_LOGIC_LOW == local_KPD_Stat)
    4796:	8b 89       	ldd	r24, Y+19	; 0x13
    4798:	88 23       	and	r24, r24
    479a:	71 f3       	breq	.-36     	; 0x4778 <KPD_U8GetKey+0xa0>
				{
					DIO_VoidGetPinValue(KEYPARD_PORT,KPD_ArrROWS_PINS[l_rows] , &local_KPD_Stat);
				}
				return KPD_ARR_VAL[l_rows][l_colums];
    479c:	8a 81       	ldd	r24, Y+2	; 0x02
    479e:	28 2f       	mov	r18, r24
    47a0:	30 e0       	ldi	r19, 0x00	; 0
    47a2:	89 81       	ldd	r24, Y+1	; 0x01
    47a4:	48 2f       	mov	r20, r24
    47a6:	50 e0       	ldi	r21, 0x00	; 0
    47a8:	22 0f       	add	r18, r18
    47aa:	33 1f       	adc	r19, r19
    47ac:	22 0f       	add	r18, r18
    47ae:	33 1f       	adc	r19, r19
    47b0:	ce 01       	movw	r24, r28
    47b2:	01 96       	adiw	r24, 0x01	; 1
    47b4:	82 0f       	add	r24, r18
    47b6:	93 1f       	adc	r25, r19
    47b8:	84 0f       	add	r24, r20
    47ba:	95 1f       	adc	r25, r21
    47bc:	fc 01       	movw	r30, r24
    47be:	32 96       	adiw	r30, 0x02	; 2
    47c0:	80 81       	ld	r24, Z
    47c2:	8c 8b       	std	Y+20, r24	; 0x14
    47c4:	1c c0       	rjmp	.+56     	; 0x47fe <KPD_U8GetKey+0x126>
	u8 l_rows = 0 , l_colums = 0;

	for(;l_colums < COLUMS_U8NUM ; ++l_colums )
	{
		DIO_VoidSetPinValue(KEYPARD_PORT,KPD_ArrCOLS_PINS[l_colums],DIO_PIN_LOGIC_LOW);
		for(l_rows = 0 ; l_rows <ROWS_U8NUM ; ++l_rows )
    47c6:	8a 81       	ldd	r24, Y+2	; 0x02
    47c8:	8f 5f       	subi	r24, 0xFF	; 255
    47ca:	8a 83       	std	Y+2, r24	; 0x02
    47cc:	8a 81       	ldd	r24, Y+2	; 0x02
    47ce:	84 30       	cpi	r24, 0x04	; 4
    47d0:	08 f4       	brcc	.+2      	; 0x47d4 <KPD_U8GetKey+0xfc>
    47d2:	bf cf       	rjmp	.-130    	; 0x4752 <KPD_U8GetKey+0x7a>
					DIO_VoidGetPinValue(KEYPARD_PORT,KPD_ArrROWS_PINS[l_rows] , &local_KPD_Stat);
				}
				return KPD_ARR_VAL[l_rows][l_colums];
			}
		}
		DIO_VoidSetPinValue(KEYPARD_PORT,KPD_ArrCOLS_PINS[l_colums],DIO_PIN_LOGIC_HIGH);
    47d4:	89 81       	ldd	r24, Y+1	; 0x01
    47d6:	88 2f       	mov	r24, r24
    47d8:	90 e0       	ldi	r25, 0x00	; 0
    47da:	fc 01       	movw	r30, r24
    47dc:	ee 5f       	subi	r30, 0xFE	; 254
    47de:	fc 4f       	sbci	r31, 0xFC	; 252
    47e0:	90 81       	ld	r25, Z
    47e2:	81 e0       	ldi	r24, 0x01	; 1
    47e4:	69 2f       	mov	r22, r25
    47e6:	41 e0       	ldi	r20, 0x01	; 1
    47e8:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <DIO_VoidSetPinValue>
{
	u8 KPD_ARR_VAL[ROWS_U8NUM][COLUMS_U8NUM] =  KEYPAD_ARR_VALUES;
	u8 local_KPD_Stat = DIO_PIN_LOGIC_HIGH;
	u8 l_rows = 0 , l_colums = 0;

	for(;l_colums < COLUMS_U8NUM ; ++l_colums )
    47ec:	89 81       	ldd	r24, Y+1	; 0x01
    47ee:	8f 5f       	subi	r24, 0xFF	; 255
    47f0:	89 83       	std	Y+1, r24	; 0x01
    47f2:	89 81       	ldd	r24, Y+1	; 0x01
    47f4:	84 30       	cpi	r24, 0x04	; 4
    47f6:	08 f4       	brcc	.+2      	; 0x47fa <KPD_U8GetKey+0x122>
    47f8:	9e cf       	rjmp	.-196    	; 0x4736 <KPD_U8GetKey+0x5e>
				return KPD_ARR_VAL[l_rows][l_colums];
			}
		}
		DIO_VoidSetPinValue(KEYPARD_PORT,KPD_ArrCOLS_PINS[l_colums],DIO_PIN_LOGIC_HIGH);
	}
	return KEYPAD_U8NOTPRESSED;
    47fa:	9f ef       	ldi	r25, 0xFF	; 255
    47fc:	9c 8b       	std	Y+20, r25	; 0x14
    47fe:	8c 89       	ldd	r24, Y+20	; 0x14
}
    4800:	69 96       	adiw	r28, 0x19	; 25
    4802:	0f b6       	in	r0, 0x3f	; 63
    4804:	f8 94       	cli
    4806:	de bf       	out	0x3e, r29	; 62
    4808:	0f be       	out	0x3f, r0	; 63
    480a:	cd bf       	out	0x3d, r28	; 61
    480c:	cf 91       	pop	r28
    480e:	df 91       	pop	r29
    4810:	08 95       	ret

00004812 <Master_private>:
extern LED_t buzzer;



void Master_private(void)
{
    4812:	df 93       	push	r29
    4814:	cf 93       	push	r28
    4816:	cd b7       	in	r28, 0x3d	; 61
    4818:	de b7       	in	r29, 0x3e	; 62
    481a:	e7 97       	sbiw	r28, 0x37	; 55
    481c:	0f b6       	in	r0, 0x3f	; 63
    481e:	f8 94       	cli
    4820:	de bf       	out	0x3e, r29	; 62
    4822:	0f be       	out	0x3f, r0	; 63
    4824:	cd bf       	out	0x3d, r28	; 61
	u8 passwordFlag = 0;
    4826:	1a aa       	std	Y+50, r1	; 0x32
	u8 PassWordStat = Password_notSet;
    4828:	8f ef       	ldi	r24, 0xFF	; 255
    482a:	8b ab       	std	Y+51, r24	; 0x33
	u8 counter = 0 , remaining_counter = 3 ;
    482c:	19 aa       	std	Y+49, r1	; 0x31
    482e:	83 e0       	ldi	r24, 0x03	; 3
    4830:	88 ab       	std	Y+48, r24	; 0x30
	u8 kpd_input = KEYPAD_U8NOTPRESSED;
    4832:	8f ef       	ldi	r24, 0xFF	; 255
    4834:	8f a7       	std	Y+47, r24	; 0x2f
	u32 Password = 0 ,userInput = 0;
    4836:	1c aa       	std	Y+52, r1	; 0x34
    4838:	1d aa       	std	Y+53, r1	; 0x35
    483a:	1e aa       	std	Y+54, r1	; 0x36
    483c:	1f aa       	std	Y+55, r1	; 0x37
    483e:	1b a6       	std	Y+43, r1	; 0x2b
    4840:	1c a6       	std	Y+44, r1	; 0x2c
    4842:	1d a6       	std	Y+45, r1	; 0x2d
    4844:	1e a6       	std	Y+46, r1	; 0x2e
	INT_EEPROM_VoidReadByte(&PassWordStat,PassWordstat_address);
    4846:	ce 01       	movw	r24, r28
    4848:	c3 96       	adiw	r24, 0x33	; 51
    484a:	60 e0       	ldi	r22, 0x00	; 0
    484c:	70 e0       	ldi	r23, 0x00	; 0
    484e:	0e 94 99 08 	call	0x1132	; 0x1132 <INT_EEPROM_VoidReadByte>
		if(PassWordStat  == Password_notSet)
    4852:	8b a9       	ldd	r24, Y+51	; 0x33
    4854:	8f 3f       	cpi	r24, 0xFF	; 255
    4856:	09 f0       	breq	.+2      	; 0x485a <Master_private+0x48>
    4858:	ca c0       	rjmp	.+404    	; 0x49ee <Master_private+0x1dc>
		{
				LCD_NewPasswordMessage();
    485a:	0e 94 7c 26 	call	0x4cf8	; 0x4cf8 <LCD_NewPasswordMessage>
				for(counter = 0 ; counter <4 ;)
    485e:	19 aa       	std	Y+49, r1	; 0x31
    4860:	af c0       	rjmp	.+350    	; 0x49c0 <Master_private+0x1ae>
				{
					kpd_input = KPD_U8GetKey();
    4862:	0e 94 6c 23 	call	0x46d8	; 0x46d8 <KPD_U8GetKey>
    4866:	8f a7       	std	Y+47, r24	; 0x2f
					if(kpd_input != KEYPAD_U8NOTPRESSED && kpd_input <= 9)
    4868:	8f a5       	ldd	r24, Y+47	; 0x2f
    486a:	8f 3f       	cpi	r24, 0xFF	; 255
    486c:	09 f4       	brne	.+2      	; 0x4870 <Master_private+0x5e>
    486e:	a8 c0       	rjmp	.+336    	; 0x49c0 <Master_private+0x1ae>
    4870:	8f a5       	ldd	r24, Y+47	; 0x2f
    4872:	8a 30       	cpi	r24, 0x0A	; 10
    4874:	08 f0       	brcs	.+2      	; 0x4878 <Master_private+0x66>
    4876:	a4 c0       	rjmp	.+328    	; 0x49c0 <Master_private+0x1ae>
					{
						Password = (Password*10)+kpd_input;
    4878:	8c a9       	ldd	r24, Y+52	; 0x34
    487a:	9d a9       	ldd	r25, Y+53	; 0x35
    487c:	ae a9       	ldd	r26, Y+54	; 0x36
    487e:	bf a9       	ldd	r27, Y+55	; 0x37
    4880:	2a e0       	ldi	r18, 0x0A	; 10
    4882:	30 e0       	ldi	r19, 0x00	; 0
    4884:	40 e0       	ldi	r20, 0x00	; 0
    4886:	50 e0       	ldi	r21, 0x00	; 0
    4888:	bc 01       	movw	r22, r24
    488a:	cd 01       	movw	r24, r26
    488c:	0e 94 fe 2d 	call	0x5bfc	; 0x5bfc <__mulsi3>
    4890:	9b 01       	movw	r18, r22
    4892:	ac 01       	movw	r20, r24
    4894:	8f a5       	ldd	r24, Y+47	; 0x2f
    4896:	88 2f       	mov	r24, r24
    4898:	90 e0       	ldi	r25, 0x00	; 0
    489a:	a0 e0       	ldi	r26, 0x00	; 0
    489c:	b0 e0       	ldi	r27, 0x00	; 0
    489e:	82 0f       	add	r24, r18
    48a0:	93 1f       	adc	r25, r19
    48a2:	a4 1f       	adc	r26, r20
    48a4:	b5 1f       	adc	r27, r21
    48a6:	8c ab       	std	Y+52, r24	; 0x34
    48a8:	9d ab       	std	Y+53, r25	; 0x35
    48aa:	ae ab       	std	Y+54, r26	; 0x36
    48ac:	bf ab       	std	Y+55, r27	; 0x37
						LCD_voidSendU32Digit(&lcd ,kpd_input);
    48ae:	8f a5       	ldd	r24, Y+47	; 0x2f
    48b0:	28 2f       	mov	r18, r24
    48b2:	30 e0       	ldi	r19, 0x00	; 0
    48b4:	40 e0       	ldi	r20, 0x00	; 0
    48b6:	50 e0       	ldi	r21, 0x00	; 0
    48b8:	86 e0       	ldi	r24, 0x06	; 6
    48ba:	93 e0       	ldi	r25, 0x03	; 3
    48bc:	ba 01       	movw	r22, r20
    48be:	a9 01       	movw	r20, r18
    48c0:	0e 94 bf 20 	call	0x417e	; 0x417e <LCD_voidSendU32Digit>
    48c4:	80 e0       	ldi	r24, 0x00	; 0
    48c6:	90 e0       	ldi	r25, 0x00	; 0
    48c8:	a8 ec       	ldi	r26, 0xC8	; 200
    48ca:	b2 e4       	ldi	r27, 0x42	; 66
    48cc:	8f a3       	std	Y+39, r24	; 0x27
    48ce:	98 a7       	std	Y+40, r25	; 0x28
    48d0:	a9 a7       	std	Y+41, r26	; 0x29
    48d2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    48d4:	6f a1       	ldd	r22, Y+39	; 0x27
    48d6:	78 a5       	ldd	r23, Y+40	; 0x28
    48d8:	89 a5       	ldd	r24, Y+41	; 0x29
    48da:	9a a5       	ldd	r25, Y+42	; 0x2a
    48dc:	20 e0       	ldi	r18, 0x00	; 0
    48de:	30 e0       	ldi	r19, 0x00	; 0
    48e0:	4a ef       	ldi	r20, 0xFA	; 250
    48e2:	54 e4       	ldi	r21, 0x44	; 68
    48e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    48e8:	dc 01       	movw	r26, r24
    48ea:	cb 01       	movw	r24, r22
    48ec:	8b a3       	std	Y+35, r24	; 0x23
    48ee:	9c a3       	std	Y+36, r25	; 0x24
    48f0:	ad a3       	std	Y+37, r26	; 0x25
    48f2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    48f4:	6b a1       	ldd	r22, Y+35	; 0x23
    48f6:	7c a1       	ldd	r23, Y+36	; 0x24
    48f8:	8d a1       	ldd	r24, Y+37	; 0x25
    48fa:	9e a1       	ldd	r25, Y+38	; 0x26
    48fc:	20 e0       	ldi	r18, 0x00	; 0
    48fe:	30 e0       	ldi	r19, 0x00	; 0
    4900:	40 e8       	ldi	r20, 0x80	; 128
    4902:	5f e3       	ldi	r21, 0x3F	; 63
    4904:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4908:	88 23       	and	r24, r24
    490a:	2c f4       	brge	.+10     	; 0x4916 <Master_private+0x104>
		__ticks = 1;
    490c:	81 e0       	ldi	r24, 0x01	; 1
    490e:	90 e0       	ldi	r25, 0x00	; 0
    4910:	9a a3       	std	Y+34, r25	; 0x22
    4912:	89 a3       	std	Y+33, r24	; 0x21
    4914:	3f c0       	rjmp	.+126    	; 0x4994 <Master_private+0x182>
	else if (__tmp > 65535)
    4916:	6b a1       	ldd	r22, Y+35	; 0x23
    4918:	7c a1       	ldd	r23, Y+36	; 0x24
    491a:	8d a1       	ldd	r24, Y+37	; 0x25
    491c:	9e a1       	ldd	r25, Y+38	; 0x26
    491e:	20 e0       	ldi	r18, 0x00	; 0
    4920:	3f ef       	ldi	r19, 0xFF	; 255
    4922:	4f e7       	ldi	r20, 0x7F	; 127
    4924:	57 e4       	ldi	r21, 0x47	; 71
    4926:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    492a:	18 16       	cp	r1, r24
    492c:	4c f5       	brge	.+82     	; 0x4980 <Master_private+0x16e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    492e:	6f a1       	ldd	r22, Y+39	; 0x27
    4930:	78 a5       	ldd	r23, Y+40	; 0x28
    4932:	89 a5       	ldd	r24, Y+41	; 0x29
    4934:	9a a5       	ldd	r25, Y+42	; 0x2a
    4936:	20 e0       	ldi	r18, 0x00	; 0
    4938:	30 e0       	ldi	r19, 0x00	; 0
    493a:	40 e2       	ldi	r20, 0x20	; 32
    493c:	51 e4       	ldi	r21, 0x41	; 65
    493e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4942:	dc 01       	movw	r26, r24
    4944:	cb 01       	movw	r24, r22
    4946:	bc 01       	movw	r22, r24
    4948:	cd 01       	movw	r24, r26
    494a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    494e:	dc 01       	movw	r26, r24
    4950:	cb 01       	movw	r24, r22
    4952:	9a a3       	std	Y+34, r25	; 0x22
    4954:	89 a3       	std	Y+33, r24	; 0x21
    4956:	0f c0       	rjmp	.+30     	; 0x4976 <Master_private+0x164>
    4958:	88 ec       	ldi	r24, 0xC8	; 200
    495a:	90 e0       	ldi	r25, 0x00	; 0
    495c:	98 a3       	std	Y+32, r25	; 0x20
    495e:	8f 8f       	std	Y+31, r24	; 0x1f
    4960:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4962:	98 a1       	ldd	r25, Y+32	; 0x20
    4964:	01 97       	sbiw	r24, 0x01	; 1
    4966:	f1 f7       	brne	.-4      	; 0x4964 <Master_private+0x152>
    4968:	98 a3       	std	Y+32, r25	; 0x20
    496a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    496c:	89 a1       	ldd	r24, Y+33	; 0x21
    496e:	9a a1       	ldd	r25, Y+34	; 0x22
    4970:	01 97       	sbiw	r24, 0x01	; 1
    4972:	9a a3       	std	Y+34, r25	; 0x22
    4974:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4976:	89 a1       	ldd	r24, Y+33	; 0x21
    4978:	9a a1       	ldd	r25, Y+34	; 0x22
    497a:	00 97       	sbiw	r24, 0x00	; 0
    497c:	69 f7       	brne	.-38     	; 0x4958 <Master_private+0x146>
    497e:	14 c0       	rjmp	.+40     	; 0x49a8 <Master_private+0x196>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4980:	6b a1       	ldd	r22, Y+35	; 0x23
    4982:	7c a1       	ldd	r23, Y+36	; 0x24
    4984:	8d a1       	ldd	r24, Y+37	; 0x25
    4986:	9e a1       	ldd	r25, Y+38	; 0x26
    4988:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    498c:	dc 01       	movw	r26, r24
    498e:	cb 01       	movw	r24, r22
    4990:	9a a3       	std	Y+34, r25	; 0x22
    4992:	89 a3       	std	Y+33, r24	; 0x21
    4994:	89 a1       	ldd	r24, Y+33	; 0x21
    4996:	9a a1       	ldd	r25, Y+34	; 0x22
    4998:	9e 8f       	std	Y+30, r25	; 0x1e
    499a:	8d 8f       	std	Y+29, r24	; 0x1d
    499c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    499e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    49a0:	01 97       	sbiw	r24, 0x01	; 1
    49a2:	f1 f7       	brne	.-4      	; 0x49a0 <Master_private+0x18e>
    49a4:	9e 8f       	std	Y+30, r25	; 0x1e
    49a6:	8d 8f       	std	Y+29, r24	; 0x1d
						_delay_ms(100);
						LCD_voidSendChar_Postion(&lcd,'*' , LCD_U8ROW2,LCD_U8COL9+counter);
    49a8:	89 a9       	ldd	r24, Y+49	; 0x31
    49aa:	28 2f       	mov	r18, r24
    49ac:	28 5f       	subi	r18, 0xF8	; 248
    49ae:	86 e0       	ldi	r24, 0x06	; 6
    49b0:	93 e0       	ldi	r25, 0x03	; 3
    49b2:	6a e2       	ldi	r22, 0x2A	; 42
    49b4:	40 e4       	ldi	r20, 0x40	; 64
    49b6:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <LCD_voidSendChar_Postion>
						counter++;
    49ba:	89 a9       	ldd	r24, Y+49	; 0x31
    49bc:	8f 5f       	subi	r24, 0xFF	; 255
    49be:	89 ab       	std	Y+49, r24	; 0x31
	u32 Password = 0 ,userInput = 0;
	INT_EEPROM_VoidReadByte(&PassWordStat,PassWordstat_address);
		if(PassWordStat  == Password_notSet)
		{
				LCD_NewPasswordMessage();
				for(counter = 0 ; counter <4 ;)
    49c0:	89 a9       	ldd	r24, Y+49	; 0x31
    49c2:	84 30       	cpi	r24, 0x04	; 4
    49c4:	08 f4       	brcc	.+2      	; 0x49c8 <Master_private+0x1b6>
    49c6:	4d cf       	rjmp	.-358    	; 0x4862 <Master_private+0x50>
						_delay_ms(100);
						LCD_voidSendChar_Postion(&lcd,'*' , LCD_U8ROW2,LCD_U8COL9+counter);
						counter++;
					}
				}
				INT_EEPROM_VoidWrite_Num_Bytes(Password,PassWordAddress,PASSWORD_SizeBytes);
    49c8:	8c a9       	ldd	r24, Y+52	; 0x34
    49ca:	9d a9       	ldd	r25, Y+53	; 0x35
    49cc:	ae a9       	ldd	r26, Y+54	; 0x36
    49ce:	bf a9       	ldd	r27, Y+55	; 0x37
    49d0:	bc 01       	movw	r22, r24
    49d2:	cd 01       	movw	r24, r26
    49d4:	41 e0       	ldi	r20, 0x01	; 1
    49d6:	50 e0       	ldi	r21, 0x00	; 0
    49d8:	22 e0       	ldi	r18, 0x02	; 2
    49da:	0e 94 c5 08 	call	0x118a	; 0x118a <INT_EEPROM_VoidWrite_Num_Bytes>
				INT_EEPROM_VoidWriteByte(Password_Set,PassWordstat_address);
    49de:	81 e0       	ldi	r24, 0x01	; 1
    49e0:	60 e0       	ldi	r22, 0x00	; 0
    49e2:	70 e0       	ldi	r23, 0x00	; 0
    49e4:	0e 94 74 08 	call	0x10e8	; 0x10e8 <INT_EEPROM_VoidWriteByte>
				passwordFlag = PasswordMatch;
    49e8:	8f e3       	ldi	r24, 0x3F	; 63
    49ea:	8a ab       	std	Y+50, r24	; 0x32
    49ec:	ed c0       	rjmp	.+474    	; 0x4bc8 <Master_private+0x3b6>
		}
		else if(PassWordStat  == Password_Set)
    49ee:	8b a9       	ldd	r24, Y+51	; 0x33
    49f0:	81 30       	cpi	r24, 0x01	; 1
    49f2:	09 f0       	breq	.+2      	; 0x49f6 <Master_private+0x1e4>
    49f4:	e9 c0       	rjmp	.+466    	; 0x4bc8 <Master_private+0x3b6>
		{
			INT_EEPROM_VoidReadByte_Num_Bytes(&Password,PassWordAddress,PASSWORD_SizeBytes);
    49f6:	ce 01       	movw	r24, r28
    49f8:	c4 96       	adiw	r24, 0x34	; 52
    49fa:	61 e0       	ldi	r22, 0x01	; 1
    49fc:	70 e0       	ldi	r23, 0x00	; 0
    49fe:	42 e0       	ldi	r20, 0x02	; 2
    4a00:	0e 94 22 09 	call	0x1244	; 0x1244 <INT_EEPROM_VoidReadByte_Num_Bytes>
    4a04:	dd c0       	rjmp	.+442    	; 0x4bc0 <Master_private+0x3ae>
			while(remaining_counter>=1)
			{
				LCD_PasswordMessage();
    4a06:	0e 94 97 26 	call	0x4d2e	; 0x4d2e <LCD_PasswordMessage>
				for(counter = 0 ; counter <4 ;)
    4a0a:	19 aa       	std	Y+49, r1	; 0x31
    4a0c:	ad c0       	rjmp	.+346    	; 0x4b68 <Master_private+0x356>
				{
					kpd_input = KPD_U8GetKey();
    4a0e:	0e 94 6c 23 	call	0x46d8	; 0x46d8 <KPD_U8GetKey>
    4a12:	8f a7       	std	Y+47, r24	; 0x2f
					if(kpd_input != KEYPAD_U8NOTPRESSED && kpd_input <= 9)
    4a14:	8f a5       	ldd	r24, Y+47	; 0x2f
    4a16:	8f 3f       	cpi	r24, 0xFF	; 255
    4a18:	09 f4       	brne	.+2      	; 0x4a1c <Master_private+0x20a>
    4a1a:	a6 c0       	rjmp	.+332    	; 0x4b68 <Master_private+0x356>
    4a1c:	8f a5       	ldd	r24, Y+47	; 0x2f
    4a1e:	8a 30       	cpi	r24, 0x0A	; 10
    4a20:	08 f0       	brcs	.+2      	; 0x4a24 <Master_private+0x212>
    4a22:	a2 c0       	rjmp	.+324    	; 0x4b68 <Master_private+0x356>
					{
						userInput = (userInput*10)+kpd_input;
    4a24:	8b a5       	ldd	r24, Y+43	; 0x2b
    4a26:	9c a5       	ldd	r25, Y+44	; 0x2c
    4a28:	ad a5       	ldd	r26, Y+45	; 0x2d
    4a2a:	be a5       	ldd	r27, Y+46	; 0x2e
    4a2c:	2a e0       	ldi	r18, 0x0A	; 10
    4a2e:	30 e0       	ldi	r19, 0x00	; 0
    4a30:	40 e0       	ldi	r20, 0x00	; 0
    4a32:	50 e0       	ldi	r21, 0x00	; 0
    4a34:	bc 01       	movw	r22, r24
    4a36:	cd 01       	movw	r24, r26
    4a38:	0e 94 fe 2d 	call	0x5bfc	; 0x5bfc <__mulsi3>
    4a3c:	9b 01       	movw	r18, r22
    4a3e:	ac 01       	movw	r20, r24
    4a40:	8f a5       	ldd	r24, Y+47	; 0x2f
    4a42:	88 2f       	mov	r24, r24
    4a44:	90 e0       	ldi	r25, 0x00	; 0
    4a46:	a0 e0       	ldi	r26, 0x00	; 0
    4a48:	b0 e0       	ldi	r27, 0x00	; 0
    4a4a:	82 0f       	add	r24, r18
    4a4c:	93 1f       	adc	r25, r19
    4a4e:	a4 1f       	adc	r26, r20
    4a50:	b5 1f       	adc	r27, r21
    4a52:	8b a7       	std	Y+43, r24	; 0x2b
    4a54:	9c a7       	std	Y+44, r25	; 0x2c
    4a56:	ad a7       	std	Y+45, r26	; 0x2d
    4a58:	be a7       	std	Y+46, r27	; 0x2e
						LCD_voidSendU32Digit(&lcd ,kpd_input);
    4a5a:	8f a5       	ldd	r24, Y+47	; 0x2f
    4a5c:	28 2f       	mov	r18, r24
    4a5e:	30 e0       	ldi	r19, 0x00	; 0
    4a60:	40 e0       	ldi	r20, 0x00	; 0
    4a62:	50 e0       	ldi	r21, 0x00	; 0
    4a64:	86 e0       	ldi	r24, 0x06	; 6
    4a66:	93 e0       	ldi	r25, 0x03	; 3
    4a68:	ba 01       	movw	r22, r20
    4a6a:	a9 01       	movw	r20, r18
    4a6c:	0e 94 bf 20 	call	0x417e	; 0x417e <LCD_voidSendU32Digit>
    4a70:	80 e0       	ldi	r24, 0x00	; 0
    4a72:	90 e0       	ldi	r25, 0x00	; 0
    4a74:	a8 ec       	ldi	r26, 0xC8	; 200
    4a76:	b2 e4       	ldi	r27, 0x42	; 66
    4a78:	89 8f       	std	Y+25, r24	; 0x19
    4a7a:	9a 8f       	std	Y+26, r25	; 0x1a
    4a7c:	ab 8f       	std	Y+27, r26	; 0x1b
    4a7e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4a80:	69 8d       	ldd	r22, Y+25	; 0x19
    4a82:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4a84:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4a86:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4a88:	20 e0       	ldi	r18, 0x00	; 0
    4a8a:	30 e0       	ldi	r19, 0x00	; 0
    4a8c:	4a ef       	ldi	r20, 0xFA	; 250
    4a8e:	54 e4       	ldi	r21, 0x44	; 68
    4a90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a94:	dc 01       	movw	r26, r24
    4a96:	cb 01       	movw	r24, r22
    4a98:	8d 8b       	std	Y+21, r24	; 0x15
    4a9a:	9e 8b       	std	Y+22, r25	; 0x16
    4a9c:	af 8b       	std	Y+23, r26	; 0x17
    4a9e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4aa0:	6d 89       	ldd	r22, Y+21	; 0x15
    4aa2:	7e 89       	ldd	r23, Y+22	; 0x16
    4aa4:	8f 89       	ldd	r24, Y+23	; 0x17
    4aa6:	98 8d       	ldd	r25, Y+24	; 0x18
    4aa8:	20 e0       	ldi	r18, 0x00	; 0
    4aaa:	30 e0       	ldi	r19, 0x00	; 0
    4aac:	40 e8       	ldi	r20, 0x80	; 128
    4aae:	5f e3       	ldi	r21, 0x3F	; 63
    4ab0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4ab4:	88 23       	and	r24, r24
    4ab6:	2c f4       	brge	.+10     	; 0x4ac2 <Master_private+0x2b0>
		__ticks = 1;
    4ab8:	81 e0       	ldi	r24, 0x01	; 1
    4aba:	90 e0       	ldi	r25, 0x00	; 0
    4abc:	9c 8b       	std	Y+20, r25	; 0x14
    4abe:	8b 8b       	std	Y+19, r24	; 0x13
    4ac0:	3f c0       	rjmp	.+126    	; 0x4b40 <Master_private+0x32e>
	else if (__tmp > 65535)
    4ac2:	6d 89       	ldd	r22, Y+21	; 0x15
    4ac4:	7e 89       	ldd	r23, Y+22	; 0x16
    4ac6:	8f 89       	ldd	r24, Y+23	; 0x17
    4ac8:	98 8d       	ldd	r25, Y+24	; 0x18
    4aca:	20 e0       	ldi	r18, 0x00	; 0
    4acc:	3f ef       	ldi	r19, 0xFF	; 255
    4ace:	4f e7       	ldi	r20, 0x7F	; 127
    4ad0:	57 e4       	ldi	r21, 0x47	; 71
    4ad2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4ad6:	18 16       	cp	r1, r24
    4ad8:	4c f5       	brge	.+82     	; 0x4b2c <Master_private+0x31a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4ada:	69 8d       	ldd	r22, Y+25	; 0x19
    4adc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4ade:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4ae0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4ae2:	20 e0       	ldi	r18, 0x00	; 0
    4ae4:	30 e0       	ldi	r19, 0x00	; 0
    4ae6:	40 e2       	ldi	r20, 0x20	; 32
    4ae8:	51 e4       	ldi	r21, 0x41	; 65
    4aea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4aee:	dc 01       	movw	r26, r24
    4af0:	cb 01       	movw	r24, r22
    4af2:	bc 01       	movw	r22, r24
    4af4:	cd 01       	movw	r24, r26
    4af6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4afa:	dc 01       	movw	r26, r24
    4afc:	cb 01       	movw	r24, r22
    4afe:	9c 8b       	std	Y+20, r25	; 0x14
    4b00:	8b 8b       	std	Y+19, r24	; 0x13
    4b02:	0f c0       	rjmp	.+30     	; 0x4b22 <Master_private+0x310>
    4b04:	88 ec       	ldi	r24, 0xC8	; 200
    4b06:	90 e0       	ldi	r25, 0x00	; 0
    4b08:	9a 8b       	std	Y+18, r25	; 0x12
    4b0a:	89 8b       	std	Y+17, r24	; 0x11
    4b0c:	89 89       	ldd	r24, Y+17	; 0x11
    4b0e:	9a 89       	ldd	r25, Y+18	; 0x12
    4b10:	01 97       	sbiw	r24, 0x01	; 1
    4b12:	f1 f7       	brne	.-4      	; 0x4b10 <Master_private+0x2fe>
    4b14:	9a 8b       	std	Y+18, r25	; 0x12
    4b16:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4b18:	8b 89       	ldd	r24, Y+19	; 0x13
    4b1a:	9c 89       	ldd	r25, Y+20	; 0x14
    4b1c:	01 97       	sbiw	r24, 0x01	; 1
    4b1e:	9c 8b       	std	Y+20, r25	; 0x14
    4b20:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4b22:	8b 89       	ldd	r24, Y+19	; 0x13
    4b24:	9c 89       	ldd	r25, Y+20	; 0x14
    4b26:	00 97       	sbiw	r24, 0x00	; 0
    4b28:	69 f7       	brne	.-38     	; 0x4b04 <Master_private+0x2f2>
    4b2a:	14 c0       	rjmp	.+40     	; 0x4b54 <Master_private+0x342>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4b2c:	6d 89       	ldd	r22, Y+21	; 0x15
    4b2e:	7e 89       	ldd	r23, Y+22	; 0x16
    4b30:	8f 89       	ldd	r24, Y+23	; 0x17
    4b32:	98 8d       	ldd	r25, Y+24	; 0x18
    4b34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b38:	dc 01       	movw	r26, r24
    4b3a:	cb 01       	movw	r24, r22
    4b3c:	9c 8b       	std	Y+20, r25	; 0x14
    4b3e:	8b 8b       	std	Y+19, r24	; 0x13
    4b40:	8b 89       	ldd	r24, Y+19	; 0x13
    4b42:	9c 89       	ldd	r25, Y+20	; 0x14
    4b44:	98 8b       	std	Y+16, r25	; 0x10
    4b46:	8f 87       	std	Y+15, r24	; 0x0f
    4b48:	8f 85       	ldd	r24, Y+15	; 0x0f
    4b4a:	98 89       	ldd	r25, Y+16	; 0x10
    4b4c:	01 97       	sbiw	r24, 0x01	; 1
    4b4e:	f1 f7       	brne	.-4      	; 0x4b4c <Master_private+0x33a>
    4b50:	98 8b       	std	Y+16, r25	; 0x10
    4b52:	8f 87       	std	Y+15, r24	; 0x0f
						_delay_ms(100);
						LCD_voidSendChar_Postion(&lcd,'*' , LCD_U8ROW2,LCD_U8COL1+counter);
    4b54:	86 e0       	ldi	r24, 0x06	; 6
    4b56:	93 e0       	ldi	r25, 0x03	; 3
    4b58:	6a e2       	ldi	r22, 0x2A	; 42
    4b5a:	40 e4       	ldi	r20, 0x40	; 64
    4b5c:	29 a9       	ldd	r18, Y+49	; 0x31
    4b5e:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <LCD_voidSendChar_Postion>
						counter++;
    4b62:	89 a9       	ldd	r24, Y+49	; 0x31
    4b64:	8f 5f       	subi	r24, 0xFF	; 255
    4b66:	89 ab       	std	Y+49, r24	; 0x31
		{
			INT_EEPROM_VoidReadByte_Num_Bytes(&Password,PassWordAddress,PASSWORD_SizeBytes);
			while(remaining_counter>=1)
			{
				LCD_PasswordMessage();
				for(counter = 0 ; counter <4 ;)
    4b68:	89 a9       	ldd	r24, Y+49	; 0x31
    4b6a:	84 30       	cpi	r24, 0x04	; 4
    4b6c:	08 f4       	brcc	.+2      	; 0x4b70 <Master_private+0x35e>
    4b6e:	4f cf       	rjmp	.-354    	; 0x4a0e <Master_private+0x1fc>
						LCD_voidSendChar_Postion(&lcd,'*' , LCD_U8ROW2,LCD_U8COL1+counter);
						counter++;
					}
				}

				if(Password == userInput)
    4b70:	2c a9       	ldd	r18, Y+52	; 0x34
    4b72:	3d a9       	ldd	r19, Y+53	; 0x35
    4b74:	4e a9       	ldd	r20, Y+54	; 0x36
    4b76:	5f a9       	ldd	r21, Y+55	; 0x37
    4b78:	8b a5       	ldd	r24, Y+43	; 0x2b
    4b7a:	9c a5       	ldd	r25, Y+44	; 0x2c
    4b7c:	ad a5       	ldd	r26, Y+45	; 0x2d
    4b7e:	be a5       	ldd	r27, Y+46	; 0x2e
    4b80:	28 17       	cp	r18, r24
    4b82:	39 07       	cpc	r19, r25
    4b84:	4a 07       	cpc	r20, r26
    4b86:	5b 07       	cpc	r21, r27
    4b88:	19 f4       	brne	.+6      	; 0x4b90 <Master_private+0x37e>
				{
					passwordFlag = PasswordMatch;
    4b8a:	8f e3       	ldi	r24, 0x3F	; 63
    4b8c:	8a ab       	std	Y+50, r24	; 0x32
    4b8e:	1c c0       	rjmp	.+56     	; 0x4bc8 <Master_private+0x3b6>
					break;
				}
				else if (Password != userInput)
    4b90:	2c a9       	ldd	r18, Y+52	; 0x34
    4b92:	3d a9       	ldd	r19, Y+53	; 0x35
    4b94:	4e a9       	ldd	r20, Y+54	; 0x36
    4b96:	5f a9       	ldd	r21, Y+55	; 0x37
    4b98:	8b a5       	ldd	r24, Y+43	; 0x2b
    4b9a:	9c a5       	ldd	r25, Y+44	; 0x2c
    4b9c:	ad a5       	ldd	r26, Y+45	; 0x2d
    4b9e:	be a5       	ldd	r27, Y+46	; 0x2e
    4ba0:	28 17       	cp	r18, r24
    4ba2:	39 07       	cpc	r19, r25
    4ba4:	4a 07       	cpc	r20, r26
    4ba6:	5b 07       	cpc	r21, r27
    4ba8:	59 f0       	breq	.+22     	; 0x4bc0 <Master_private+0x3ae>
				{
					passwordFlag = 0;
    4baa:	1a aa       	std	Y+50, r1	; 0x32
					userInput = 0;
    4bac:	1b a6       	std	Y+43, r1	; 0x2b
    4bae:	1c a6       	std	Y+44, r1	; 0x2c
    4bb0:	1d a6       	std	Y+45, r1	; 0x2d
    4bb2:	1e a6       	std	Y+46, r1	; 0x2e
					LCD_passWordRemaining(--remaining_counter);
    4bb4:	88 a9       	ldd	r24, Y+48	; 0x30
    4bb6:	81 50       	subi	r24, 0x01	; 1
    4bb8:	88 ab       	std	Y+48, r24	; 0x30
    4bba:	88 a9       	ldd	r24, Y+48	; 0x30
    4bbc:	0e 94 af 26 	call	0x4d5e	; 0x4d5e <LCD_passWordRemaining>
				passwordFlag = PasswordMatch;
		}
		else if(PassWordStat  == Password_Set)
		{
			INT_EEPROM_VoidReadByte_Num_Bytes(&Password,PassWordAddress,PASSWORD_SizeBytes);
			while(remaining_counter>=1)
    4bc0:	88 a9       	ldd	r24, Y+48	; 0x30
    4bc2:	88 23       	and	r24, r24
    4bc4:	09 f0       	breq	.+2      	; 0x4bc8 <Master_private+0x3b6>
    4bc6:	1f cf       	rjmp	.-450    	; 0x4a06 <Master_private+0x1f4>
				}
			}
		}
		else {}

		if(passwordFlag != PasswordMatch)
    4bc8:	8a a9       	ldd	r24, Y+50	; 0x32
    4bca:	8f 33       	cpi	r24, 0x3F	; 63
    4bcc:	09 f4       	brne	.+2      	; 0x4bd0 <Master_private+0x3be>
    4bce:	8b c0       	rjmp	.+278    	; 0x4ce6 <Master_private+0x4d4>
		{

			LED_u8TurnOn(&buzzer);
    4bd0:	8a e0       	ldi	r24, 0x0A	; 10
    4bd2:	93 e0       	ldi	r25, 0x03	; 3
    4bd4:	0e 94 8f 19 	call	0x331e	; 0x331e <LED_u8TurnOn>

			while(1)
			{
				LCD_voidClearDisplay(&lcd);
    4bd8:	86 e0       	ldi	r24, 0x06	; 6
    4bda:	93 e0       	ldi	r25, 0x03	; 3
    4bdc:	0e 94 30 1c 	call	0x3860	; 0x3860 <LCD_voidClearDisplay>
				LCD_voidSendString(&lcd,"Alert Alert !!");
    4be0:	86 e0       	ldi	r24, 0x06	; 6
    4be2:	93 e0       	ldi	r25, 0x03	; 3
    4be4:	27 e6       	ldi	r18, 0x67	; 103
    4be6:	30 e0       	ldi	r19, 0x00	; 0
    4be8:	b9 01       	movw	r22, r18
    4bea:	0e 94 90 1b 	call	0x3720	; 0x3720 <LCD_voidSendString>
				LCD_voidSendString_Postion(&lcd,"SYSTEM DISABLE",LCD_U8ROW2,LCD_U8COL1);
    4bee:	86 e0       	ldi	r24, 0x06	; 6
    4bf0:	93 e0       	ldi	r25, 0x03	; 3
    4bf2:	26 e7       	ldi	r18, 0x76	; 118
    4bf4:	30 e0       	ldi	r19, 0x00	; 0
    4bf6:	b9 01       	movw	r22, r18
    4bf8:	40 e4       	ldi	r20, 0x40	; 64
    4bfa:	20 e0       	ldi	r18, 0x00	; 0
    4bfc:	0e 94 c9 1b 	call	0x3792	; 0x3792 <LCD_voidSendString_Postion>
    4c00:	80 e0       	ldi	r24, 0x00	; 0
    4c02:	90 e0       	ldi	r25, 0x00	; 0
    4c04:	aa ef       	ldi	r26, 0xFA	; 250
    4c06:	b3 e4       	ldi	r27, 0x43	; 67
    4c08:	8b 87       	std	Y+11, r24	; 0x0b
    4c0a:	9c 87       	std	Y+12, r25	; 0x0c
    4c0c:	ad 87       	std	Y+13, r26	; 0x0d
    4c0e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4c10:	6b 85       	ldd	r22, Y+11	; 0x0b
    4c12:	7c 85       	ldd	r23, Y+12	; 0x0c
    4c14:	8d 85       	ldd	r24, Y+13	; 0x0d
    4c16:	9e 85       	ldd	r25, Y+14	; 0x0e
    4c18:	20 e0       	ldi	r18, 0x00	; 0
    4c1a:	30 e0       	ldi	r19, 0x00	; 0
    4c1c:	4a ef       	ldi	r20, 0xFA	; 250
    4c1e:	54 e4       	ldi	r21, 0x44	; 68
    4c20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c24:	dc 01       	movw	r26, r24
    4c26:	cb 01       	movw	r24, r22
    4c28:	8f 83       	std	Y+7, r24	; 0x07
    4c2a:	98 87       	std	Y+8, r25	; 0x08
    4c2c:	a9 87       	std	Y+9, r26	; 0x09
    4c2e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4c30:	6f 81       	ldd	r22, Y+7	; 0x07
    4c32:	78 85       	ldd	r23, Y+8	; 0x08
    4c34:	89 85       	ldd	r24, Y+9	; 0x09
    4c36:	9a 85       	ldd	r25, Y+10	; 0x0a
    4c38:	20 e0       	ldi	r18, 0x00	; 0
    4c3a:	30 e0       	ldi	r19, 0x00	; 0
    4c3c:	40 e8       	ldi	r20, 0x80	; 128
    4c3e:	5f e3       	ldi	r21, 0x3F	; 63
    4c40:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4c44:	88 23       	and	r24, r24
    4c46:	2c f4       	brge	.+10     	; 0x4c52 <Master_private+0x440>
		__ticks = 1;
    4c48:	81 e0       	ldi	r24, 0x01	; 1
    4c4a:	90 e0       	ldi	r25, 0x00	; 0
    4c4c:	9e 83       	std	Y+6, r25	; 0x06
    4c4e:	8d 83       	std	Y+5, r24	; 0x05
    4c50:	3f c0       	rjmp	.+126    	; 0x4cd0 <Master_private+0x4be>
	else if (__tmp > 65535)
    4c52:	6f 81       	ldd	r22, Y+7	; 0x07
    4c54:	78 85       	ldd	r23, Y+8	; 0x08
    4c56:	89 85       	ldd	r24, Y+9	; 0x09
    4c58:	9a 85       	ldd	r25, Y+10	; 0x0a
    4c5a:	20 e0       	ldi	r18, 0x00	; 0
    4c5c:	3f ef       	ldi	r19, 0xFF	; 255
    4c5e:	4f e7       	ldi	r20, 0x7F	; 127
    4c60:	57 e4       	ldi	r21, 0x47	; 71
    4c62:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4c66:	18 16       	cp	r1, r24
    4c68:	4c f5       	brge	.+82     	; 0x4cbc <Master_private+0x4aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4c6a:	6b 85       	ldd	r22, Y+11	; 0x0b
    4c6c:	7c 85       	ldd	r23, Y+12	; 0x0c
    4c6e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4c70:	9e 85       	ldd	r25, Y+14	; 0x0e
    4c72:	20 e0       	ldi	r18, 0x00	; 0
    4c74:	30 e0       	ldi	r19, 0x00	; 0
    4c76:	40 e2       	ldi	r20, 0x20	; 32
    4c78:	51 e4       	ldi	r21, 0x41	; 65
    4c7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c7e:	dc 01       	movw	r26, r24
    4c80:	cb 01       	movw	r24, r22
    4c82:	bc 01       	movw	r22, r24
    4c84:	cd 01       	movw	r24, r26
    4c86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c8a:	dc 01       	movw	r26, r24
    4c8c:	cb 01       	movw	r24, r22
    4c8e:	9e 83       	std	Y+6, r25	; 0x06
    4c90:	8d 83       	std	Y+5, r24	; 0x05
    4c92:	0f c0       	rjmp	.+30     	; 0x4cb2 <Master_private+0x4a0>
    4c94:	88 ec       	ldi	r24, 0xC8	; 200
    4c96:	90 e0       	ldi	r25, 0x00	; 0
    4c98:	9c 83       	std	Y+4, r25	; 0x04
    4c9a:	8b 83       	std	Y+3, r24	; 0x03
    4c9c:	8b 81       	ldd	r24, Y+3	; 0x03
    4c9e:	9c 81       	ldd	r25, Y+4	; 0x04
    4ca0:	01 97       	sbiw	r24, 0x01	; 1
    4ca2:	f1 f7       	brne	.-4      	; 0x4ca0 <Master_private+0x48e>
    4ca4:	9c 83       	std	Y+4, r25	; 0x04
    4ca6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4ca8:	8d 81       	ldd	r24, Y+5	; 0x05
    4caa:	9e 81       	ldd	r25, Y+6	; 0x06
    4cac:	01 97       	sbiw	r24, 0x01	; 1
    4cae:	9e 83       	std	Y+6, r25	; 0x06
    4cb0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4cb2:	8d 81       	ldd	r24, Y+5	; 0x05
    4cb4:	9e 81       	ldd	r25, Y+6	; 0x06
    4cb6:	00 97       	sbiw	r24, 0x00	; 0
    4cb8:	69 f7       	brne	.-38     	; 0x4c94 <Master_private+0x482>
    4cba:	8e cf       	rjmp	.-228    	; 0x4bd8 <Master_private+0x3c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4cbc:	6f 81       	ldd	r22, Y+7	; 0x07
    4cbe:	78 85       	ldd	r23, Y+8	; 0x08
    4cc0:	89 85       	ldd	r24, Y+9	; 0x09
    4cc2:	9a 85       	ldd	r25, Y+10	; 0x0a
    4cc4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4cc8:	dc 01       	movw	r26, r24
    4cca:	cb 01       	movw	r24, r22
    4ccc:	9e 83       	std	Y+6, r25	; 0x06
    4cce:	8d 83       	std	Y+5, r24	; 0x05
    4cd0:	8d 81       	ldd	r24, Y+5	; 0x05
    4cd2:	9e 81       	ldd	r25, Y+6	; 0x06
    4cd4:	9a 83       	std	Y+2, r25	; 0x02
    4cd6:	89 83       	std	Y+1, r24	; 0x01
    4cd8:	89 81       	ldd	r24, Y+1	; 0x01
    4cda:	9a 81       	ldd	r25, Y+2	; 0x02
    4cdc:	01 97       	sbiw	r24, 0x01	; 1
    4cde:	f1 f7       	brne	.-4      	; 0x4cdc <Master_private+0x4ca>
    4ce0:	9a 83       	std	Y+2, r25	; 0x02
    4ce2:	89 83       	std	Y+1, r24	; 0x01
    4ce4:	79 cf       	rjmp	.-270    	; 0x4bd8 <Master_private+0x3c6>
		else
		{
			//nothing
		}
		return;
}
    4ce6:	e7 96       	adiw	r28, 0x37	; 55
    4ce8:	0f b6       	in	r0, 0x3f	; 63
    4cea:	f8 94       	cli
    4cec:	de bf       	out	0x3e, r29	; 62
    4cee:	0f be       	out	0x3f, r0	; 63
    4cf0:	cd bf       	out	0x3d, r28	; 61
    4cf2:	cf 91       	pop	r28
    4cf4:	df 91       	pop	r29
    4cf6:	08 95       	ret

00004cf8 <LCD_NewPasswordMessage>:




void LCD_NewPasswordMessage(void)
{
    4cf8:	df 93       	push	r29
    4cfa:	cf 93       	push	r28
    4cfc:	cd b7       	in	r28, 0x3d	; 61
    4cfe:	de b7       	in	r29, 0x3e	; 62
	LCD_voidClearDisplay(&lcd);
    4d00:	86 e0       	ldi	r24, 0x06	; 6
    4d02:	93 e0       	ldi	r25, 0x03	; 3
    4d04:	0e 94 30 1c 	call	0x3860	; 0x3860 <LCD_voidClearDisplay>
	LCD_voidSendString(&lcd,"Set New PW");
    4d08:	86 e0       	ldi	r24, 0x06	; 6
    4d0a:	93 e0       	ldi	r25, 0x03	; 3
    4d0c:	25 e8       	ldi	r18, 0x85	; 133
    4d0e:	30 e0       	ldi	r19, 0x00	; 0
    4d10:	b9 01       	movw	r22, r18
    4d12:	0e 94 90 1b 	call	0x3720	; 0x3720 <LCD_voidSendString>
	LCD_voidSendString_Postion(&lcd,"4Digits:",LCD_U8ROW2,LCD_U8COL1);
    4d16:	86 e0       	ldi	r24, 0x06	; 6
    4d18:	93 e0       	ldi	r25, 0x03	; 3
    4d1a:	20 e9       	ldi	r18, 0x90	; 144
    4d1c:	30 e0       	ldi	r19, 0x00	; 0
    4d1e:	b9 01       	movw	r22, r18
    4d20:	40 e4       	ldi	r20, 0x40	; 64
    4d22:	20 e0       	ldi	r18, 0x00	; 0
    4d24:	0e 94 c9 1b 	call	0x3792	; 0x3792 <LCD_voidSendString_Postion>

}
    4d28:	cf 91       	pop	r28
    4d2a:	df 91       	pop	r29
    4d2c:	08 95       	ret

00004d2e <LCD_PasswordMessage>:


void LCD_PasswordMessage(void)
{
    4d2e:	df 93       	push	r29
    4d30:	cf 93       	push	r28
    4d32:	cd b7       	in	r28, 0x3d	; 61
    4d34:	de b7       	in	r29, 0x3e	; 62
	LCD_voidClearDisplay(&lcd);
    4d36:	86 e0       	ldi	r24, 0x06	; 6
    4d38:	93 e0       	ldi	r25, 0x03	; 3
    4d3a:	0e 94 30 1c 	call	0x3860	; 0x3860 <LCD_voidClearDisplay>
	LCD_voidSendString(&lcd,"Enter Password:");
    4d3e:	86 e0       	ldi	r24, 0x06	; 6
    4d40:	93 e0       	ldi	r25, 0x03	; 3
    4d42:	29 e9       	ldi	r18, 0x99	; 153
    4d44:	30 e0       	ldi	r19, 0x00	; 0
    4d46:	b9 01       	movw	r22, r18
    4d48:	0e 94 90 1b 	call	0x3720	; 0x3720 <LCD_voidSendString>
	LCD_voidSetCursor(&lcd,LCD_U8ROW2,LCD_U8COL1);
    4d4c:	86 e0       	ldi	r24, 0x06	; 6
    4d4e:	93 e0       	ldi	r25, 0x03	; 3
    4d50:	60 e4       	ldi	r22, 0x40	; 64
    4d52:	40 e0       	ldi	r20, 0x00	; 0
    4d54:	0e 94 4c 1b 	call	0x3698	; 0x3698 <LCD_voidSetCursor>
}
    4d58:	cf 91       	pop	r28
    4d5a:	df 91       	pop	r29
    4d5c:	08 95       	ret

00004d5e <LCD_passWordRemaining>:



void LCD_passWordRemaining(u8 copy_u8remainingcount)
{
    4d5e:	df 93       	push	r29
    4d60:	cf 93       	push	r28
    4d62:	cd b7       	in	r28, 0x3d	; 61
    4d64:	de b7       	in	r29, 0x3e	; 62
    4d66:	2f 97       	sbiw	r28, 0x0f	; 15
    4d68:	0f b6       	in	r0, 0x3f	; 63
    4d6a:	f8 94       	cli
    4d6c:	de bf       	out	0x3e, r29	; 62
    4d6e:	0f be       	out	0x3f, r0	; 63
    4d70:	cd bf       	out	0x3d, r28	; 61
    4d72:	8f 87       	std	Y+15, r24	; 0x0f
	LCD_voidClearDisplay(&lcd);
    4d74:	86 e0       	ldi	r24, 0x06	; 6
    4d76:	93 e0       	ldi	r25, 0x03	; 3
    4d78:	0e 94 30 1c 	call	0x3860	; 0x3860 <LCD_voidClearDisplay>
	LCD_voidSendString(&lcd , "Wrong Password");
    4d7c:	86 e0       	ldi	r24, 0x06	; 6
    4d7e:	93 e0       	ldi	r25, 0x03	; 3
    4d80:	29 ea       	ldi	r18, 0xA9	; 169
    4d82:	30 e0       	ldi	r19, 0x00	; 0
    4d84:	b9 01       	movw	r22, r18
    4d86:	0e 94 90 1b 	call	0x3720	; 0x3720 <LCD_voidSendString>
	LCD_voidSendString_Postion(&lcd , "Reaming Trails:" , LCD_U8ROW2 , LCD_U8COL1);
    4d8a:	86 e0       	ldi	r24, 0x06	; 6
    4d8c:	93 e0       	ldi	r25, 0x03	; 3
    4d8e:	28 eb       	ldi	r18, 0xB8	; 184
    4d90:	30 e0       	ldi	r19, 0x00	; 0
    4d92:	b9 01       	movw	r22, r18
    4d94:	40 e4       	ldi	r20, 0x40	; 64
    4d96:	20 e0       	ldi	r18, 0x00	; 0
    4d98:	0e 94 c9 1b 	call	0x3792	; 0x3792 <LCD_voidSendString_Postion>
	LCD_voidSendU32Digit(&lcd,copy_u8remainingcount);
    4d9c:	8f 85       	ldd	r24, Y+15	; 0x0f
    4d9e:	28 2f       	mov	r18, r24
    4da0:	30 e0       	ldi	r19, 0x00	; 0
    4da2:	40 e0       	ldi	r20, 0x00	; 0
    4da4:	50 e0       	ldi	r21, 0x00	; 0
    4da6:	86 e0       	ldi	r24, 0x06	; 6
    4da8:	93 e0       	ldi	r25, 0x03	; 3
    4daa:	ba 01       	movw	r22, r20
    4dac:	a9 01       	movw	r20, r18
    4dae:	0e 94 bf 20 	call	0x417e	; 0x417e <LCD_voidSendU32Digit>
    4db2:	80 e0       	ldi	r24, 0x00	; 0
    4db4:	90 e0       	ldi	r25, 0x00	; 0
    4db6:	aa e7       	ldi	r26, 0x7A	; 122
    4db8:	b4 e4       	ldi	r27, 0x44	; 68
    4dba:	8b 87       	std	Y+11, r24	; 0x0b
    4dbc:	9c 87       	std	Y+12, r25	; 0x0c
    4dbe:	ad 87       	std	Y+13, r26	; 0x0d
    4dc0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4dc2:	6b 85       	ldd	r22, Y+11	; 0x0b
    4dc4:	7c 85       	ldd	r23, Y+12	; 0x0c
    4dc6:	8d 85       	ldd	r24, Y+13	; 0x0d
    4dc8:	9e 85       	ldd	r25, Y+14	; 0x0e
    4dca:	20 e0       	ldi	r18, 0x00	; 0
    4dcc:	30 e0       	ldi	r19, 0x00	; 0
    4dce:	4a ef       	ldi	r20, 0xFA	; 250
    4dd0:	54 e4       	ldi	r21, 0x44	; 68
    4dd2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4dd6:	dc 01       	movw	r26, r24
    4dd8:	cb 01       	movw	r24, r22
    4dda:	8f 83       	std	Y+7, r24	; 0x07
    4ddc:	98 87       	std	Y+8, r25	; 0x08
    4dde:	a9 87       	std	Y+9, r26	; 0x09
    4de0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4de2:	6f 81       	ldd	r22, Y+7	; 0x07
    4de4:	78 85       	ldd	r23, Y+8	; 0x08
    4de6:	89 85       	ldd	r24, Y+9	; 0x09
    4de8:	9a 85       	ldd	r25, Y+10	; 0x0a
    4dea:	20 e0       	ldi	r18, 0x00	; 0
    4dec:	30 e0       	ldi	r19, 0x00	; 0
    4dee:	40 e8       	ldi	r20, 0x80	; 128
    4df0:	5f e3       	ldi	r21, 0x3F	; 63
    4df2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4df6:	88 23       	and	r24, r24
    4df8:	2c f4       	brge	.+10     	; 0x4e04 <LCD_passWordRemaining+0xa6>
		__ticks = 1;
    4dfa:	81 e0       	ldi	r24, 0x01	; 1
    4dfc:	90 e0       	ldi	r25, 0x00	; 0
    4dfe:	9e 83       	std	Y+6, r25	; 0x06
    4e00:	8d 83       	std	Y+5, r24	; 0x05
    4e02:	3f c0       	rjmp	.+126    	; 0x4e82 <LCD_passWordRemaining+0x124>
	else if (__tmp > 65535)
    4e04:	6f 81       	ldd	r22, Y+7	; 0x07
    4e06:	78 85       	ldd	r23, Y+8	; 0x08
    4e08:	89 85       	ldd	r24, Y+9	; 0x09
    4e0a:	9a 85       	ldd	r25, Y+10	; 0x0a
    4e0c:	20 e0       	ldi	r18, 0x00	; 0
    4e0e:	3f ef       	ldi	r19, 0xFF	; 255
    4e10:	4f e7       	ldi	r20, 0x7F	; 127
    4e12:	57 e4       	ldi	r21, 0x47	; 71
    4e14:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4e18:	18 16       	cp	r1, r24
    4e1a:	4c f5       	brge	.+82     	; 0x4e6e <LCD_passWordRemaining+0x110>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4e1c:	6b 85       	ldd	r22, Y+11	; 0x0b
    4e1e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4e20:	8d 85       	ldd	r24, Y+13	; 0x0d
    4e22:	9e 85       	ldd	r25, Y+14	; 0x0e
    4e24:	20 e0       	ldi	r18, 0x00	; 0
    4e26:	30 e0       	ldi	r19, 0x00	; 0
    4e28:	40 e2       	ldi	r20, 0x20	; 32
    4e2a:	51 e4       	ldi	r21, 0x41	; 65
    4e2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e30:	dc 01       	movw	r26, r24
    4e32:	cb 01       	movw	r24, r22
    4e34:	bc 01       	movw	r22, r24
    4e36:	cd 01       	movw	r24, r26
    4e38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4e3c:	dc 01       	movw	r26, r24
    4e3e:	cb 01       	movw	r24, r22
    4e40:	9e 83       	std	Y+6, r25	; 0x06
    4e42:	8d 83       	std	Y+5, r24	; 0x05
    4e44:	0f c0       	rjmp	.+30     	; 0x4e64 <LCD_passWordRemaining+0x106>
    4e46:	88 ec       	ldi	r24, 0xC8	; 200
    4e48:	90 e0       	ldi	r25, 0x00	; 0
    4e4a:	9c 83       	std	Y+4, r25	; 0x04
    4e4c:	8b 83       	std	Y+3, r24	; 0x03
    4e4e:	8b 81       	ldd	r24, Y+3	; 0x03
    4e50:	9c 81       	ldd	r25, Y+4	; 0x04
    4e52:	01 97       	sbiw	r24, 0x01	; 1
    4e54:	f1 f7       	brne	.-4      	; 0x4e52 <LCD_passWordRemaining+0xf4>
    4e56:	9c 83       	std	Y+4, r25	; 0x04
    4e58:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4e5a:	8d 81       	ldd	r24, Y+5	; 0x05
    4e5c:	9e 81       	ldd	r25, Y+6	; 0x06
    4e5e:	01 97       	sbiw	r24, 0x01	; 1
    4e60:	9e 83       	std	Y+6, r25	; 0x06
    4e62:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4e64:	8d 81       	ldd	r24, Y+5	; 0x05
    4e66:	9e 81       	ldd	r25, Y+6	; 0x06
    4e68:	00 97       	sbiw	r24, 0x00	; 0
    4e6a:	69 f7       	brne	.-38     	; 0x4e46 <LCD_passWordRemaining+0xe8>
    4e6c:	14 c0       	rjmp	.+40     	; 0x4e96 <LCD_passWordRemaining+0x138>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4e6e:	6f 81       	ldd	r22, Y+7	; 0x07
    4e70:	78 85       	ldd	r23, Y+8	; 0x08
    4e72:	89 85       	ldd	r24, Y+9	; 0x09
    4e74:	9a 85       	ldd	r25, Y+10	; 0x0a
    4e76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4e7a:	dc 01       	movw	r26, r24
    4e7c:	cb 01       	movw	r24, r22
    4e7e:	9e 83       	std	Y+6, r25	; 0x06
    4e80:	8d 83       	std	Y+5, r24	; 0x05
    4e82:	8d 81       	ldd	r24, Y+5	; 0x05
    4e84:	9e 81       	ldd	r25, Y+6	; 0x06
    4e86:	9a 83       	std	Y+2, r25	; 0x02
    4e88:	89 83       	std	Y+1, r24	; 0x01
    4e8a:	89 81       	ldd	r24, Y+1	; 0x01
    4e8c:	9a 81       	ldd	r25, Y+2	; 0x02
    4e8e:	01 97       	sbiw	r24, 0x01	; 1
    4e90:	f1 f7       	brne	.-4      	; 0x4e8e <LCD_passWordRemaining+0x130>
    4e92:	9a 83       	std	Y+2, r25	; 0x02
    4e94:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
	LCD_voidClearDisplay(&lcd);
    4e96:	86 e0       	ldi	r24, 0x06	; 6
    4e98:	93 e0       	ldi	r25, 0x03	; 3
    4e9a:	0e 94 30 1c 	call	0x3860	; 0x3860 <LCD_voidClearDisplay>
}
    4e9e:	2f 96       	adiw	r28, 0x0f	; 15
    4ea0:	0f b6       	in	r0, 0x3f	; 63
    4ea2:	f8 94       	cli
    4ea4:	de bf       	out	0x3e, r29	; 62
    4ea6:	0f be       	out	0x3f, r0	; 63
    4ea8:	cd bf       	out	0x3d, r28	; 61
    4eaa:	cf 91       	pop	r28
    4eac:	df 91       	pop	r29
    4eae:	08 95       	ret

00004eb0 <main>:
	.ExtInt0_CBF = FireAllarm_ISR
};
u8 MainDoorStat = MAINDOOR_CLOSE;
u8 LDR_stat = 0;
void main()
{
    4eb0:	df 93       	push	r29
    4eb2:	cf 93       	push	r28
    4eb4:	00 d0       	rcall	.+0      	; 0x4eb6 <main+0x6>
    4eb6:	0f 92       	push	r0
    4eb8:	cd b7       	in	r28, 0x3d	; 61
    4eba:	de b7       	in	r29, 0x3e	; 62

	u8 kpd_userinput = KEYPAD_U8NOTPRESSED;
    4ebc:	8f ef       	ldi	r24, 0xFF	; 255
    4ebe:	89 83       	std	Y+1, r24	; 0x01


	SYSTEM_VoidINIT();
    4ec0:	0e 94 b7 27 	call	0x4f6e	; 0x4f6e <SYSTEM_VoidINIT>
	LCD_welcomeMessage();
    4ec4:	0e 94 1c 29 	call	0x5238	; 0x5238 <LCD_welcomeMessage>
	Master_private();
    4ec8:	0e 94 09 24 	call	0x4812	; 0x4812 <Master_private>
	while(1)
	{
			LCD_Menu();
    4ecc:	0e 94 e8 27 	call	0x4fd0	; 0x4fd0 <LCD_Menu>
			kpd_userinput = KEYPAD_U8NOTPRESSED;
    4ed0:	8f ef       	ldi	r24, 0xFF	; 255
    4ed2:	89 83       	std	Y+1, r24	; 0x01
    4ed4:	03 c0       	rjmp	.+6      	; 0x4edc <main+0x2c>
			while(kpd_userinput == KEYPAD_U8NOTPRESSED)
			{
				kpd_userinput = KPD_U8GetKey();
    4ed6:	0e 94 6c 23 	call	0x46d8	; 0x46d8 <KPD_U8GetKey>
    4eda:	89 83       	std	Y+1, r24	; 0x01
	Master_private();
	while(1)
	{
			LCD_Menu();
			kpd_userinput = KEYPAD_U8NOTPRESSED;
			while(kpd_userinput == KEYPAD_U8NOTPRESSED)
    4edc:	89 81       	ldd	r24, Y+1	; 0x01
    4ede:	8f 3f       	cpi	r24, 0xFF	; 255
    4ee0:	d1 f3       	breq	.-12     	; 0x4ed6 <main+0x26>
			{
				kpd_userinput = KPD_U8GetKey();
			}

			switch(kpd_userinput)
    4ee2:	89 81       	ldd	r24, Y+1	; 0x01
    4ee4:	28 2f       	mov	r18, r24
    4ee6:	30 e0       	ldi	r19, 0x00	; 0
    4ee8:	3b 83       	std	Y+3, r19	; 0x03
    4eea:	2a 83       	std	Y+2, r18	; 0x02
    4eec:	8a 81       	ldd	r24, Y+2	; 0x02
    4eee:	9b 81       	ldd	r25, Y+3	; 0x03
    4ef0:	82 30       	cpi	r24, 0x02	; 2
    4ef2:	91 05       	cpc	r25, r1
    4ef4:	79 f0       	breq	.+30     	; 0x4f14 <main+0x64>
    4ef6:	2a 81       	ldd	r18, Y+2	; 0x02
    4ef8:	3b 81       	ldd	r19, Y+3	; 0x03
    4efa:	23 30       	cpi	r18, 0x03	; 3
    4efc:	31 05       	cpc	r19, r1
    4efe:	81 f0       	breq	.+32     	; 0x4f20 <main+0x70>
    4f00:	8a 81       	ldd	r24, Y+2	; 0x02
    4f02:	9b 81       	ldd	r25, Y+3	; 0x03
    4f04:	81 30       	cpi	r24, 0x01	; 1
    4f06:	91 05       	cpc	r25, r1
    4f08:	89 f4       	brne	.+34     	; 0x4f2c <main+0x7c>
			{
				case 1:
					LCD_EntranceMenu_1();
    4f0a:	0e 94 2d 2a 	call	0x545a	; 0x545a <LCD_EntranceMenu_1>
					kpd_userinput = KEYPAD_U8NOTPRESSED;
    4f0e:	8f ef       	ldi	r24, 0xFF	; 255
    4f10:	89 83       	std	Y+1, r24	; 0x01
    4f12:	dc cf       	rjmp	.-72     	; 0x4ecc <main+0x1c>
					break;
				case 2:
					ROOM_Control(ROOM_A);
    4f14:	80 e0       	ldi	r24, 0x00	; 0
    4f16:	0e 94 86 2a 	call	0x550c	; 0x550c <ROOM_Control>
					kpd_userinput = KEYPAD_U8NOTPRESSED;
    4f1a:	8f ef       	ldi	r24, 0xFF	; 255
    4f1c:	89 83       	std	Y+1, r24	; 0x01
    4f1e:	d6 cf       	rjmp	.-84     	; 0x4ecc <main+0x1c>
					break;
				case 3:
					ROOM_Control(ROOM_B);
    4f20:	82 e0       	ldi	r24, 0x02	; 2
    4f22:	0e 94 86 2a 	call	0x550c	; 0x550c <ROOM_Control>
					kpd_userinput = KEYPAD_U8NOTPRESSED;
    4f26:	8f ef       	ldi	r24, 0xFF	; 255
    4f28:	89 83       	std	Y+1, r24	; 0x01
    4f2a:	d0 cf       	rjmp	.-96     	; 0x4ecc <main+0x1c>
					break;
				default:
					LCD_WrongInputMessage();
    4f2c:	0e 94 8c 28 	call	0x5118	; 0x5118 <LCD_WrongInputMessage>
					kpd_userinput = KEYPAD_U8NOTPRESSED;
    4f30:	8f ef       	ldi	r24, 0xFF	; 255
    4f32:	89 83       	std	Y+1, r24	; 0x01
    4f34:	cb cf       	rjmp	.-106    	; 0x4ecc <main+0x1c>

00004f36 <LDR_ISR_Read>:

}


void LDR_ISR_Read(void)
{
    4f36:	df 93       	push	r29
    4f38:	cf 93       	push	r28
    4f3a:	cd b7       	in	r28, 0x3d	; 61
    4f3c:	de b7       	in	r29, 0x3e	; 62
	LDR_VoidGetTime(&LDR_stat);
    4f3e:	84 e5       	ldi	r24, 0x54	; 84
    4f40:	93 e0       	ldi	r25, 0x03	; 3
    4f42:	0e 94 9a 1a 	call	0x3534	; 0x3534 <LDR_VoidGetTime>
	if(LDR_stat == LDR_NIGHT_TIME)
    4f46:	80 91 54 03 	lds	r24, 0x0354
    4f4a:	88 23       	and	r24, r24
    4f4c:	29 f4       	brne	.+10     	; 0x4f58 <LDR_ISR_Read+0x22>
	{
		LED_u8TurnOn(&entranceLed);
    4f4e:	89 e0       	ldi	r24, 0x09	; 9
    4f50:	93 e0       	ldi	r25, 0x03	; 3
    4f52:	0e 94 8f 19 	call	0x331e	; 0x331e <LED_u8TurnOn>
    4f56:	08 c0       	rjmp	.+16     	; 0x4f68 <LDR_ISR_Read+0x32>
	}
	else if (LDR_stat == LDR_SUN_TIME)
    4f58:	80 91 54 03 	lds	r24, 0x0354
    4f5c:	81 30       	cpi	r24, 0x01	; 1
    4f5e:	21 f4       	brne	.+8      	; 0x4f68 <LDR_ISR_Read+0x32>
	{
		LED_u8TurnOff(&entranceLed);
    4f60:	89 e0       	ldi	r24, 0x09	; 9
    4f62:	93 e0       	ldi	r25, 0x03	; 3
    4f64:	0e 94 24 19 	call	0x3248	; 0x3248 <LED_u8TurnOff>
	}
}
    4f68:	cf 91       	pop	r28
    4f6a:	df 91       	pop	r29
    4f6c:	08 95       	ret

00004f6e <SYSTEM_VoidINIT>:

void SYSTEM_VoidINIT(void)
{
    4f6e:	df 93       	push	r29
    4f70:	cf 93       	push	r28
    4f72:	cd b7       	in	r28, 0x3d	; 61
    4f74:	de b7       	in	r29, 0x3e	; 62
	/**
	 *
	 */

	DIO_VoidSetPinDirection(DIO_PORTD_IDX,DIO_PIN0,DIO_PIN_DIR_OUTPUT);
    4f76:	83 e0       	ldi	r24, 0x03	; 3
    4f78:	60 e0       	ldi	r22, 0x00	; 0
    4f7a:	41 e0       	ldi	r20, 0x01	; 1
    4f7c:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <DIO_VoidSetPinDirection>
	DIO_VoidSetPinDirection(DIO_PORTD_IDX,DIO_PIN1,DIO_PIN_DIR_OUTPUT);
    4f80:	83 e0       	ldi	r24, 0x03	; 3
    4f82:	61 e0       	ldi	r22, 0x01	; 1
    4f84:	41 e0       	ldi	r20, 0x01	; 1
    4f86:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <DIO_VoidSetPinDirection>
	//
	UART_VoidInit();
    4f8a:	0e 94 75 07 	call	0xeea	; 0xeea <UART_VoidInit>
	GPT_VoidInit(&adcDelay);
    4f8e:	82 e1       	ldi	r24, 0x12	; 18
    4f90:	93 e0       	ldi	r25, 0x03	; 3
    4f92:	0e 94 99 09 	call	0x1332	; 0x1332 <GPT_VoidInit>
	StepperMotor_VoidInit(&MainDoor);
    4f96:	8b e0       	ldi	r24, 0x0B	; 11
    4f98:	93 e0       	ldi	r25, 0x03	; 3
    4f9a:	0e 94 e6 10 	call	0x21cc	; 0x21cc <StepperMotor_VoidInit>
	KPD_VoidInit();
    4f9e:	0e 94 39 23 	call	0x4672	; 0x4672 <KPD_VoidInit>
	LDR_VoidInit(NULL);
    4fa2:	80 e0       	ldi	r24, 0x00	; 0
    4fa4:	90 e0       	ldi	r25, 0x00	; 0
    4fa6:	0e 94 72 1a 	call	0x34e4	; 0x34e4 <LDR_VoidInit>
	LED_u8Init(&entranceLed);
    4faa:	89 e0       	ldi	r24, 0x09	; 9
    4fac:	93 e0       	ldi	r25, 0x03	; 3
    4fae:	0e 94 b6 18 	call	0x316c	; 0x316c <LED_u8Init>
	LED_u8Init(&buzzer);
    4fb2:	8a e0       	ldi	r24, 0x0A	; 10
    4fb4:	93 e0       	ldi	r25, 0x03	; 3
    4fb6:	0e 94 b6 18 	call	0x316c	; 0x316c <LED_u8Init>
	LCD_voidInit(&lcd);
    4fba:	86 e0       	ldi	r24, 0x06	; 6
    4fbc:	93 e0       	ldi	r25, 0x03	; 3
    4fbe:	0e 94 08 1b 	call	0x3610	; 0x3610 <LCD_voidInit>
	ExtINT_VoidInit(&fireAllarm);
    4fc2:	8a e1       	ldi	r24, 0x1A	; 26
    4fc4:	93 e0       	ldi	r25, 0x03	; 3
    4fc6:	0e 94 3f 0b 	call	0x167e	; 0x167e <ExtINT_VoidInit>
}
    4fca:	cf 91       	pop	r28
    4fcc:	df 91       	pop	r29
    4fce:	08 95       	ret

00004fd0 <LCD_Menu>:
void LCD_Menu(void)
{
    4fd0:	df 93       	push	r29
    4fd2:	cf 93       	push	r28
    4fd4:	cd b7       	in	r28, 0x3d	; 61
    4fd6:	de b7       	in	r29, 0x3e	; 62
    4fd8:	2e 97       	sbiw	r28, 0x0e	; 14
    4fda:	0f b6       	in	r0, 0x3f	; 63
    4fdc:	f8 94       	cli
    4fde:	de bf       	out	0x3e, r29	; 62
    4fe0:	0f be       	out	0x3f, r0	; 63
    4fe2:	cd bf       	out	0x3d, r28	; 61
	LCD_voidClearDisplay(&lcd);
    4fe4:	86 e0       	ldi	r24, 0x06	; 6
    4fe6:	93 e0       	ldi	r25, 0x03	; 3
    4fe8:	0e 94 30 1c 	call	0x3860	; 0x3860 <LCD_voidClearDisplay>
	LCD_voidSendString(&lcd,"Select Room Num");
    4fec:	86 e0       	ldi	r24, 0x06	; 6
    4fee:	93 e0       	ldi	r25, 0x03	; 3
    4ff0:	28 ec       	ldi	r18, 0xC8	; 200
    4ff2:	30 e0       	ldi	r19, 0x00	; 0
    4ff4:	b9 01       	movw	r22, r18
    4ff6:	0e 94 90 1b 	call	0x3720	; 0x3720 <LCD_voidSendString>
    4ffa:	80 e0       	ldi	r24, 0x00	; 0
    4ffc:	90 e0       	ldi	r25, 0x00	; 0
    4ffe:	aa ef       	ldi	r26, 0xFA	; 250
    5000:	b3 e4       	ldi	r27, 0x43	; 67
    5002:	8b 87       	std	Y+11, r24	; 0x0b
    5004:	9c 87       	std	Y+12, r25	; 0x0c
    5006:	ad 87       	std	Y+13, r26	; 0x0d
    5008:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    500a:	6b 85       	ldd	r22, Y+11	; 0x0b
    500c:	7c 85       	ldd	r23, Y+12	; 0x0c
    500e:	8d 85       	ldd	r24, Y+13	; 0x0d
    5010:	9e 85       	ldd	r25, Y+14	; 0x0e
    5012:	20 e0       	ldi	r18, 0x00	; 0
    5014:	30 e0       	ldi	r19, 0x00	; 0
    5016:	4a ef       	ldi	r20, 0xFA	; 250
    5018:	54 e4       	ldi	r21, 0x44	; 68
    501a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    501e:	dc 01       	movw	r26, r24
    5020:	cb 01       	movw	r24, r22
    5022:	8f 83       	std	Y+7, r24	; 0x07
    5024:	98 87       	std	Y+8, r25	; 0x08
    5026:	a9 87       	std	Y+9, r26	; 0x09
    5028:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    502a:	6f 81       	ldd	r22, Y+7	; 0x07
    502c:	78 85       	ldd	r23, Y+8	; 0x08
    502e:	89 85       	ldd	r24, Y+9	; 0x09
    5030:	9a 85       	ldd	r25, Y+10	; 0x0a
    5032:	20 e0       	ldi	r18, 0x00	; 0
    5034:	30 e0       	ldi	r19, 0x00	; 0
    5036:	40 e8       	ldi	r20, 0x80	; 128
    5038:	5f e3       	ldi	r21, 0x3F	; 63
    503a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    503e:	88 23       	and	r24, r24
    5040:	2c f4       	brge	.+10     	; 0x504c <LCD_Menu+0x7c>
		__ticks = 1;
    5042:	81 e0       	ldi	r24, 0x01	; 1
    5044:	90 e0       	ldi	r25, 0x00	; 0
    5046:	9e 83       	std	Y+6, r25	; 0x06
    5048:	8d 83       	std	Y+5, r24	; 0x05
    504a:	3f c0       	rjmp	.+126    	; 0x50ca <LCD_Menu+0xfa>
	else if (__tmp > 65535)
    504c:	6f 81       	ldd	r22, Y+7	; 0x07
    504e:	78 85       	ldd	r23, Y+8	; 0x08
    5050:	89 85       	ldd	r24, Y+9	; 0x09
    5052:	9a 85       	ldd	r25, Y+10	; 0x0a
    5054:	20 e0       	ldi	r18, 0x00	; 0
    5056:	3f ef       	ldi	r19, 0xFF	; 255
    5058:	4f e7       	ldi	r20, 0x7F	; 127
    505a:	57 e4       	ldi	r21, 0x47	; 71
    505c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5060:	18 16       	cp	r1, r24
    5062:	4c f5       	brge	.+82     	; 0x50b6 <LCD_Menu+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5064:	6b 85       	ldd	r22, Y+11	; 0x0b
    5066:	7c 85       	ldd	r23, Y+12	; 0x0c
    5068:	8d 85       	ldd	r24, Y+13	; 0x0d
    506a:	9e 85       	ldd	r25, Y+14	; 0x0e
    506c:	20 e0       	ldi	r18, 0x00	; 0
    506e:	30 e0       	ldi	r19, 0x00	; 0
    5070:	40 e2       	ldi	r20, 0x20	; 32
    5072:	51 e4       	ldi	r21, 0x41	; 65
    5074:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5078:	dc 01       	movw	r26, r24
    507a:	cb 01       	movw	r24, r22
    507c:	bc 01       	movw	r22, r24
    507e:	cd 01       	movw	r24, r26
    5080:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5084:	dc 01       	movw	r26, r24
    5086:	cb 01       	movw	r24, r22
    5088:	9e 83       	std	Y+6, r25	; 0x06
    508a:	8d 83       	std	Y+5, r24	; 0x05
    508c:	0f c0       	rjmp	.+30     	; 0x50ac <LCD_Menu+0xdc>
    508e:	88 ec       	ldi	r24, 0xC8	; 200
    5090:	90 e0       	ldi	r25, 0x00	; 0
    5092:	9c 83       	std	Y+4, r25	; 0x04
    5094:	8b 83       	std	Y+3, r24	; 0x03
    5096:	8b 81       	ldd	r24, Y+3	; 0x03
    5098:	9c 81       	ldd	r25, Y+4	; 0x04
    509a:	01 97       	sbiw	r24, 0x01	; 1
    509c:	f1 f7       	brne	.-4      	; 0x509a <LCD_Menu+0xca>
    509e:	9c 83       	std	Y+4, r25	; 0x04
    50a0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    50a2:	8d 81       	ldd	r24, Y+5	; 0x05
    50a4:	9e 81       	ldd	r25, Y+6	; 0x06
    50a6:	01 97       	sbiw	r24, 0x01	; 1
    50a8:	9e 83       	std	Y+6, r25	; 0x06
    50aa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    50ac:	8d 81       	ldd	r24, Y+5	; 0x05
    50ae:	9e 81       	ldd	r25, Y+6	; 0x06
    50b0:	00 97       	sbiw	r24, 0x00	; 0
    50b2:	69 f7       	brne	.-38     	; 0x508e <LCD_Menu+0xbe>
    50b4:	14 c0       	rjmp	.+40     	; 0x50de <LCD_Menu+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    50b6:	6f 81       	ldd	r22, Y+7	; 0x07
    50b8:	78 85       	ldd	r23, Y+8	; 0x08
    50ba:	89 85       	ldd	r24, Y+9	; 0x09
    50bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    50be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    50c2:	dc 01       	movw	r26, r24
    50c4:	cb 01       	movw	r24, r22
    50c6:	9e 83       	std	Y+6, r25	; 0x06
    50c8:	8d 83       	std	Y+5, r24	; 0x05
    50ca:	8d 81       	ldd	r24, Y+5	; 0x05
    50cc:	9e 81       	ldd	r25, Y+6	; 0x06
    50ce:	9a 83       	std	Y+2, r25	; 0x02
    50d0:	89 83       	std	Y+1, r24	; 0x01
    50d2:	89 81       	ldd	r24, Y+1	; 0x01
    50d4:	9a 81       	ldd	r25, Y+2	; 0x02
    50d6:	01 97       	sbiw	r24, 0x01	; 1
    50d8:	f1 f7       	brne	.-4      	; 0x50d6 <LCD_Menu+0x106>
    50da:	9a 83       	std	Y+2, r25	; 0x02
    50dc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);
	LCD_voidClearDisplay(&lcd);
    50de:	86 e0       	ldi	r24, 0x06	; 6
    50e0:	93 e0       	ldi	r25, 0x03	; 3
    50e2:	0e 94 30 1c 	call	0x3860	; 0x3860 <LCD_voidClearDisplay>
	LCD_voidSendString(&lcd,"1-Entrance Room");
    50e6:	86 e0       	ldi	r24, 0x06	; 6
    50e8:	93 e0       	ldi	r25, 0x03	; 3
    50ea:	28 ed       	ldi	r18, 0xD8	; 216
    50ec:	30 e0       	ldi	r19, 0x00	; 0
    50ee:	b9 01       	movw	r22, r18
    50f0:	0e 94 90 1b 	call	0x3720	; 0x3720 <LCD_voidSendString>
	LCD_voidSendString_Postion(&lcd,"2-RoomA 3-RoomB" , LCD_U8ROW2 , LCD_U8COL1);
    50f4:	86 e0       	ldi	r24, 0x06	; 6
    50f6:	93 e0       	ldi	r25, 0x03	; 3
    50f8:	28 ee       	ldi	r18, 0xE8	; 232
    50fa:	30 e0       	ldi	r19, 0x00	; 0
    50fc:	b9 01       	movw	r22, r18
    50fe:	40 e4       	ldi	r20, 0x40	; 64
    5100:	20 e0       	ldi	r18, 0x00	; 0
    5102:	0e 94 c9 1b 	call	0x3792	; 0x3792 <LCD_voidSendString_Postion>

}
    5106:	2e 96       	adiw	r28, 0x0e	; 14
    5108:	0f b6       	in	r0, 0x3f	; 63
    510a:	f8 94       	cli
    510c:	de bf       	out	0x3e, r29	; 62
    510e:	0f be       	out	0x3f, r0	; 63
    5110:	cd bf       	out	0x3d, r28	; 61
    5112:	cf 91       	pop	r28
    5114:	df 91       	pop	r29
    5116:	08 95       	ret

00005118 <LCD_WrongInputMessage>:
void LCD_WrongInputMessage(void)
{
    5118:	df 93       	push	r29
    511a:	cf 93       	push	r28
    511c:	cd b7       	in	r28, 0x3d	; 61
    511e:	de b7       	in	r29, 0x3e	; 62
    5120:	2e 97       	sbiw	r28, 0x0e	; 14
    5122:	0f b6       	in	r0, 0x3f	; 63
    5124:	f8 94       	cli
    5126:	de bf       	out	0x3e, r29	; 62
    5128:	0f be       	out	0x3f, r0	; 63
    512a:	cd bf       	out	0x3d, r28	; 61
	LCD_voidClearDisplay(&lcd);
    512c:	86 e0       	ldi	r24, 0x06	; 6
    512e:	93 e0       	ldi	r25, 0x03	; 3
    5130:	0e 94 30 1c 	call	0x3860	; 0x3860 <LCD_voidClearDisplay>
	LCD_voidSendString(&lcd,"Wrong Input");
    5134:	86 e0       	ldi	r24, 0x06	; 6
    5136:	93 e0       	ldi	r25, 0x03	; 3
    5138:	28 ef       	ldi	r18, 0xF8	; 248
    513a:	30 e0       	ldi	r19, 0x00	; 0
    513c:	b9 01       	movw	r22, r18
    513e:	0e 94 90 1b 	call	0x3720	; 0x3720 <LCD_voidSendString>
    5142:	80 e0       	ldi	r24, 0x00	; 0
    5144:	90 e0       	ldi	r25, 0x00	; 0
    5146:	aa ef       	ldi	r26, 0xFA	; 250
    5148:	b3 e4       	ldi	r27, 0x43	; 67
    514a:	8b 87       	std	Y+11, r24	; 0x0b
    514c:	9c 87       	std	Y+12, r25	; 0x0c
    514e:	ad 87       	std	Y+13, r26	; 0x0d
    5150:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5152:	6b 85       	ldd	r22, Y+11	; 0x0b
    5154:	7c 85       	ldd	r23, Y+12	; 0x0c
    5156:	8d 85       	ldd	r24, Y+13	; 0x0d
    5158:	9e 85       	ldd	r25, Y+14	; 0x0e
    515a:	20 e0       	ldi	r18, 0x00	; 0
    515c:	30 e0       	ldi	r19, 0x00	; 0
    515e:	4a ef       	ldi	r20, 0xFA	; 250
    5160:	54 e4       	ldi	r21, 0x44	; 68
    5162:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5166:	dc 01       	movw	r26, r24
    5168:	cb 01       	movw	r24, r22
    516a:	8f 83       	std	Y+7, r24	; 0x07
    516c:	98 87       	std	Y+8, r25	; 0x08
    516e:	a9 87       	std	Y+9, r26	; 0x09
    5170:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5172:	6f 81       	ldd	r22, Y+7	; 0x07
    5174:	78 85       	ldd	r23, Y+8	; 0x08
    5176:	89 85       	ldd	r24, Y+9	; 0x09
    5178:	9a 85       	ldd	r25, Y+10	; 0x0a
    517a:	20 e0       	ldi	r18, 0x00	; 0
    517c:	30 e0       	ldi	r19, 0x00	; 0
    517e:	40 e8       	ldi	r20, 0x80	; 128
    5180:	5f e3       	ldi	r21, 0x3F	; 63
    5182:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5186:	88 23       	and	r24, r24
    5188:	2c f4       	brge	.+10     	; 0x5194 <LCD_WrongInputMessage+0x7c>
		__ticks = 1;
    518a:	81 e0       	ldi	r24, 0x01	; 1
    518c:	90 e0       	ldi	r25, 0x00	; 0
    518e:	9e 83       	std	Y+6, r25	; 0x06
    5190:	8d 83       	std	Y+5, r24	; 0x05
    5192:	3f c0       	rjmp	.+126    	; 0x5212 <LCD_WrongInputMessage+0xfa>
	else if (__tmp > 65535)
    5194:	6f 81       	ldd	r22, Y+7	; 0x07
    5196:	78 85       	ldd	r23, Y+8	; 0x08
    5198:	89 85       	ldd	r24, Y+9	; 0x09
    519a:	9a 85       	ldd	r25, Y+10	; 0x0a
    519c:	20 e0       	ldi	r18, 0x00	; 0
    519e:	3f ef       	ldi	r19, 0xFF	; 255
    51a0:	4f e7       	ldi	r20, 0x7F	; 127
    51a2:	57 e4       	ldi	r21, 0x47	; 71
    51a4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    51a8:	18 16       	cp	r1, r24
    51aa:	4c f5       	brge	.+82     	; 0x51fe <LCD_WrongInputMessage+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    51ac:	6b 85       	ldd	r22, Y+11	; 0x0b
    51ae:	7c 85       	ldd	r23, Y+12	; 0x0c
    51b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    51b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    51b4:	20 e0       	ldi	r18, 0x00	; 0
    51b6:	30 e0       	ldi	r19, 0x00	; 0
    51b8:	40 e2       	ldi	r20, 0x20	; 32
    51ba:	51 e4       	ldi	r21, 0x41	; 65
    51bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    51c0:	dc 01       	movw	r26, r24
    51c2:	cb 01       	movw	r24, r22
    51c4:	bc 01       	movw	r22, r24
    51c6:	cd 01       	movw	r24, r26
    51c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    51cc:	dc 01       	movw	r26, r24
    51ce:	cb 01       	movw	r24, r22
    51d0:	9e 83       	std	Y+6, r25	; 0x06
    51d2:	8d 83       	std	Y+5, r24	; 0x05
    51d4:	0f c0       	rjmp	.+30     	; 0x51f4 <LCD_WrongInputMessage+0xdc>
    51d6:	88 ec       	ldi	r24, 0xC8	; 200
    51d8:	90 e0       	ldi	r25, 0x00	; 0
    51da:	9c 83       	std	Y+4, r25	; 0x04
    51dc:	8b 83       	std	Y+3, r24	; 0x03
    51de:	8b 81       	ldd	r24, Y+3	; 0x03
    51e0:	9c 81       	ldd	r25, Y+4	; 0x04
    51e2:	01 97       	sbiw	r24, 0x01	; 1
    51e4:	f1 f7       	brne	.-4      	; 0x51e2 <LCD_WrongInputMessage+0xca>
    51e6:	9c 83       	std	Y+4, r25	; 0x04
    51e8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    51ea:	8d 81       	ldd	r24, Y+5	; 0x05
    51ec:	9e 81       	ldd	r25, Y+6	; 0x06
    51ee:	01 97       	sbiw	r24, 0x01	; 1
    51f0:	9e 83       	std	Y+6, r25	; 0x06
    51f2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    51f4:	8d 81       	ldd	r24, Y+5	; 0x05
    51f6:	9e 81       	ldd	r25, Y+6	; 0x06
    51f8:	00 97       	sbiw	r24, 0x00	; 0
    51fa:	69 f7       	brne	.-38     	; 0x51d6 <LCD_WrongInputMessage+0xbe>
    51fc:	14 c0       	rjmp	.+40     	; 0x5226 <LCD_WrongInputMessage+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    51fe:	6f 81       	ldd	r22, Y+7	; 0x07
    5200:	78 85       	ldd	r23, Y+8	; 0x08
    5202:	89 85       	ldd	r24, Y+9	; 0x09
    5204:	9a 85       	ldd	r25, Y+10	; 0x0a
    5206:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    520a:	dc 01       	movw	r26, r24
    520c:	cb 01       	movw	r24, r22
    520e:	9e 83       	std	Y+6, r25	; 0x06
    5210:	8d 83       	std	Y+5, r24	; 0x05
    5212:	8d 81       	ldd	r24, Y+5	; 0x05
    5214:	9e 81       	ldd	r25, Y+6	; 0x06
    5216:	9a 83       	std	Y+2, r25	; 0x02
    5218:	89 83       	std	Y+1, r24	; 0x01
    521a:	89 81       	ldd	r24, Y+1	; 0x01
    521c:	9a 81       	ldd	r25, Y+2	; 0x02
    521e:	01 97       	sbiw	r24, 0x01	; 1
    5220:	f1 f7       	brne	.-4      	; 0x521e <LCD_WrongInputMessage+0x106>
    5222:	9a 83       	std	Y+2, r25	; 0x02
    5224:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);
}
    5226:	2e 96       	adiw	r28, 0x0e	; 14
    5228:	0f b6       	in	r0, 0x3f	; 63
    522a:	f8 94       	cli
    522c:	de bf       	out	0x3e, r29	; 62
    522e:	0f be       	out	0x3f, r0	; 63
    5230:	cd bf       	out	0x3d, r28	; 61
    5232:	cf 91       	pop	r28
    5234:	df 91       	pop	r29
    5236:	08 95       	ret

00005238 <LCD_welcomeMessage>:
void LCD_welcomeMessage(void)
{
    5238:	df 93       	push	r29
    523a:	cf 93       	push	r28
    523c:	cd b7       	in	r28, 0x3d	; 61
    523e:	de b7       	in	r29, 0x3e	; 62
    5240:	6c 97       	sbiw	r28, 0x1c	; 28
    5242:	0f b6       	in	r0, 0x3f	; 63
    5244:	f8 94       	cli
    5246:	de bf       	out	0x3e, r29	; 62
    5248:	0f be       	out	0x3f, r0	; 63
    524a:	cd bf       	out	0x3d, r28	; 61
	LCD_voidSendString_Postion(&lcd , "Smart Home" , LCD_U8ROW1 , LCD_U8COL4);
    524c:	86 e0       	ldi	r24, 0x06	; 6
    524e:	93 e0       	ldi	r25, 0x03	; 3
    5250:	24 e0       	ldi	r18, 0x04	; 4
    5252:	31 e0       	ldi	r19, 0x01	; 1
    5254:	b9 01       	movw	r22, r18
    5256:	40 e0       	ldi	r20, 0x00	; 0
    5258:	23 e0       	ldi	r18, 0x03	; 3
    525a:	0e 94 c9 1b 	call	0x3792	; 0x3792 <LCD_voidSendString_Postion>
    525e:	80 e0       	ldi	r24, 0x00	; 0
    5260:	90 e0       	ldi	r25, 0x00	; 0
    5262:	aa ef       	ldi	r26, 0xFA	; 250
    5264:	b3 e4       	ldi	r27, 0x43	; 67
    5266:	89 8f       	std	Y+25, r24	; 0x19
    5268:	9a 8f       	std	Y+26, r25	; 0x1a
    526a:	ab 8f       	std	Y+27, r26	; 0x1b
    526c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    526e:	69 8d       	ldd	r22, Y+25	; 0x19
    5270:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5272:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5274:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5276:	20 e0       	ldi	r18, 0x00	; 0
    5278:	30 e0       	ldi	r19, 0x00	; 0
    527a:	4a ef       	ldi	r20, 0xFA	; 250
    527c:	54 e4       	ldi	r21, 0x44	; 68
    527e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5282:	dc 01       	movw	r26, r24
    5284:	cb 01       	movw	r24, r22
    5286:	8d 8b       	std	Y+21, r24	; 0x15
    5288:	9e 8b       	std	Y+22, r25	; 0x16
    528a:	af 8b       	std	Y+23, r26	; 0x17
    528c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    528e:	6d 89       	ldd	r22, Y+21	; 0x15
    5290:	7e 89       	ldd	r23, Y+22	; 0x16
    5292:	8f 89       	ldd	r24, Y+23	; 0x17
    5294:	98 8d       	ldd	r25, Y+24	; 0x18
    5296:	20 e0       	ldi	r18, 0x00	; 0
    5298:	30 e0       	ldi	r19, 0x00	; 0
    529a:	40 e8       	ldi	r20, 0x80	; 128
    529c:	5f e3       	ldi	r21, 0x3F	; 63
    529e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    52a2:	88 23       	and	r24, r24
    52a4:	2c f4       	brge	.+10     	; 0x52b0 <LCD_welcomeMessage+0x78>
		__ticks = 1;
    52a6:	81 e0       	ldi	r24, 0x01	; 1
    52a8:	90 e0       	ldi	r25, 0x00	; 0
    52aa:	9c 8b       	std	Y+20, r25	; 0x14
    52ac:	8b 8b       	std	Y+19, r24	; 0x13
    52ae:	3f c0       	rjmp	.+126    	; 0x532e <LCD_welcomeMessage+0xf6>
	else if (__tmp > 65535)
    52b0:	6d 89       	ldd	r22, Y+21	; 0x15
    52b2:	7e 89       	ldd	r23, Y+22	; 0x16
    52b4:	8f 89       	ldd	r24, Y+23	; 0x17
    52b6:	98 8d       	ldd	r25, Y+24	; 0x18
    52b8:	20 e0       	ldi	r18, 0x00	; 0
    52ba:	3f ef       	ldi	r19, 0xFF	; 255
    52bc:	4f e7       	ldi	r20, 0x7F	; 127
    52be:	57 e4       	ldi	r21, 0x47	; 71
    52c0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    52c4:	18 16       	cp	r1, r24
    52c6:	4c f5       	brge	.+82     	; 0x531a <LCD_welcomeMessage+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    52c8:	69 8d       	ldd	r22, Y+25	; 0x19
    52ca:	7a 8d       	ldd	r23, Y+26	; 0x1a
    52cc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    52ce:	9c 8d       	ldd	r25, Y+28	; 0x1c
    52d0:	20 e0       	ldi	r18, 0x00	; 0
    52d2:	30 e0       	ldi	r19, 0x00	; 0
    52d4:	40 e2       	ldi	r20, 0x20	; 32
    52d6:	51 e4       	ldi	r21, 0x41	; 65
    52d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    52dc:	dc 01       	movw	r26, r24
    52de:	cb 01       	movw	r24, r22
    52e0:	bc 01       	movw	r22, r24
    52e2:	cd 01       	movw	r24, r26
    52e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    52e8:	dc 01       	movw	r26, r24
    52ea:	cb 01       	movw	r24, r22
    52ec:	9c 8b       	std	Y+20, r25	; 0x14
    52ee:	8b 8b       	std	Y+19, r24	; 0x13
    52f0:	0f c0       	rjmp	.+30     	; 0x5310 <LCD_welcomeMessage+0xd8>
    52f2:	88 ec       	ldi	r24, 0xC8	; 200
    52f4:	90 e0       	ldi	r25, 0x00	; 0
    52f6:	9a 8b       	std	Y+18, r25	; 0x12
    52f8:	89 8b       	std	Y+17, r24	; 0x11
    52fa:	89 89       	ldd	r24, Y+17	; 0x11
    52fc:	9a 89       	ldd	r25, Y+18	; 0x12
    52fe:	01 97       	sbiw	r24, 0x01	; 1
    5300:	f1 f7       	brne	.-4      	; 0x52fe <LCD_welcomeMessage+0xc6>
    5302:	9a 8b       	std	Y+18, r25	; 0x12
    5304:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5306:	8b 89       	ldd	r24, Y+19	; 0x13
    5308:	9c 89       	ldd	r25, Y+20	; 0x14
    530a:	01 97       	sbiw	r24, 0x01	; 1
    530c:	9c 8b       	std	Y+20, r25	; 0x14
    530e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5310:	8b 89       	ldd	r24, Y+19	; 0x13
    5312:	9c 89       	ldd	r25, Y+20	; 0x14
    5314:	00 97       	sbiw	r24, 0x00	; 0
    5316:	69 f7       	brne	.-38     	; 0x52f2 <LCD_welcomeMessage+0xba>
    5318:	14 c0       	rjmp	.+40     	; 0x5342 <LCD_welcomeMessage+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    531a:	6d 89       	ldd	r22, Y+21	; 0x15
    531c:	7e 89       	ldd	r23, Y+22	; 0x16
    531e:	8f 89       	ldd	r24, Y+23	; 0x17
    5320:	98 8d       	ldd	r25, Y+24	; 0x18
    5322:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5326:	dc 01       	movw	r26, r24
    5328:	cb 01       	movw	r24, r22
    532a:	9c 8b       	std	Y+20, r25	; 0x14
    532c:	8b 8b       	std	Y+19, r24	; 0x13
    532e:	8b 89       	ldd	r24, Y+19	; 0x13
    5330:	9c 89       	ldd	r25, Y+20	; 0x14
    5332:	98 8b       	std	Y+16, r25	; 0x10
    5334:	8f 87       	std	Y+15, r24	; 0x0f
    5336:	8f 85       	ldd	r24, Y+15	; 0x0f
    5338:	98 89       	ldd	r25, Y+16	; 0x10
    533a:	01 97       	sbiw	r24, 0x01	; 1
    533c:	f1 f7       	brne	.-4      	; 0x533a <LCD_welcomeMessage+0x102>
    533e:	98 8b       	std	Y+16, r25	; 0x10
    5340:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(500);
	LCD_voidClearDisplay(&lcd);
    5342:	86 e0       	ldi	r24, 0x06	; 6
    5344:	93 e0       	ldi	r25, 0x03	; 3
    5346:	0e 94 30 1c 	call	0x3860	; 0x3860 <LCD_voidClearDisplay>
	LCD_voidSendString_Postion(&lcd , "Welcome" , LCD_U8ROW1 , LCD_U8COL4);
    534a:	86 e0       	ldi	r24, 0x06	; 6
    534c:	93 e0       	ldi	r25, 0x03	; 3
    534e:	2f e0       	ldi	r18, 0x0F	; 15
    5350:	31 e0       	ldi	r19, 0x01	; 1
    5352:	b9 01       	movw	r22, r18
    5354:	40 e0       	ldi	r20, 0x00	; 0
    5356:	23 e0       	ldi	r18, 0x03	; 3
    5358:	0e 94 c9 1b 	call	0x3792	; 0x3792 <LCD_voidSendString_Postion>
    535c:	80 e0       	ldi	r24, 0x00	; 0
    535e:	90 e0       	ldi	r25, 0x00	; 0
    5360:	aa ef       	ldi	r26, 0xFA	; 250
    5362:	b3 e4       	ldi	r27, 0x43	; 67
    5364:	8b 87       	std	Y+11, r24	; 0x0b
    5366:	9c 87       	std	Y+12, r25	; 0x0c
    5368:	ad 87       	std	Y+13, r26	; 0x0d
    536a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    536c:	6b 85       	ldd	r22, Y+11	; 0x0b
    536e:	7c 85       	ldd	r23, Y+12	; 0x0c
    5370:	8d 85       	ldd	r24, Y+13	; 0x0d
    5372:	9e 85       	ldd	r25, Y+14	; 0x0e
    5374:	20 e0       	ldi	r18, 0x00	; 0
    5376:	30 e0       	ldi	r19, 0x00	; 0
    5378:	4a ef       	ldi	r20, 0xFA	; 250
    537a:	54 e4       	ldi	r21, 0x44	; 68
    537c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5380:	dc 01       	movw	r26, r24
    5382:	cb 01       	movw	r24, r22
    5384:	8f 83       	std	Y+7, r24	; 0x07
    5386:	98 87       	std	Y+8, r25	; 0x08
    5388:	a9 87       	std	Y+9, r26	; 0x09
    538a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    538c:	6f 81       	ldd	r22, Y+7	; 0x07
    538e:	78 85       	ldd	r23, Y+8	; 0x08
    5390:	89 85       	ldd	r24, Y+9	; 0x09
    5392:	9a 85       	ldd	r25, Y+10	; 0x0a
    5394:	20 e0       	ldi	r18, 0x00	; 0
    5396:	30 e0       	ldi	r19, 0x00	; 0
    5398:	40 e8       	ldi	r20, 0x80	; 128
    539a:	5f e3       	ldi	r21, 0x3F	; 63
    539c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    53a0:	88 23       	and	r24, r24
    53a2:	2c f4       	brge	.+10     	; 0x53ae <LCD_welcomeMessage+0x176>
		__ticks = 1;
    53a4:	81 e0       	ldi	r24, 0x01	; 1
    53a6:	90 e0       	ldi	r25, 0x00	; 0
    53a8:	9e 83       	std	Y+6, r25	; 0x06
    53aa:	8d 83       	std	Y+5, r24	; 0x05
    53ac:	3f c0       	rjmp	.+126    	; 0x542c <LCD_welcomeMessage+0x1f4>
	else if (__tmp > 65535)
    53ae:	6f 81       	ldd	r22, Y+7	; 0x07
    53b0:	78 85       	ldd	r23, Y+8	; 0x08
    53b2:	89 85       	ldd	r24, Y+9	; 0x09
    53b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    53b6:	20 e0       	ldi	r18, 0x00	; 0
    53b8:	3f ef       	ldi	r19, 0xFF	; 255
    53ba:	4f e7       	ldi	r20, 0x7F	; 127
    53bc:	57 e4       	ldi	r21, 0x47	; 71
    53be:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    53c2:	18 16       	cp	r1, r24
    53c4:	4c f5       	brge	.+82     	; 0x5418 <LCD_welcomeMessage+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    53c6:	6b 85       	ldd	r22, Y+11	; 0x0b
    53c8:	7c 85       	ldd	r23, Y+12	; 0x0c
    53ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    53cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    53ce:	20 e0       	ldi	r18, 0x00	; 0
    53d0:	30 e0       	ldi	r19, 0x00	; 0
    53d2:	40 e2       	ldi	r20, 0x20	; 32
    53d4:	51 e4       	ldi	r21, 0x41	; 65
    53d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    53da:	dc 01       	movw	r26, r24
    53dc:	cb 01       	movw	r24, r22
    53de:	bc 01       	movw	r22, r24
    53e0:	cd 01       	movw	r24, r26
    53e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    53e6:	dc 01       	movw	r26, r24
    53e8:	cb 01       	movw	r24, r22
    53ea:	9e 83       	std	Y+6, r25	; 0x06
    53ec:	8d 83       	std	Y+5, r24	; 0x05
    53ee:	0f c0       	rjmp	.+30     	; 0x540e <LCD_welcomeMessage+0x1d6>
    53f0:	88 ec       	ldi	r24, 0xC8	; 200
    53f2:	90 e0       	ldi	r25, 0x00	; 0
    53f4:	9c 83       	std	Y+4, r25	; 0x04
    53f6:	8b 83       	std	Y+3, r24	; 0x03
    53f8:	8b 81       	ldd	r24, Y+3	; 0x03
    53fa:	9c 81       	ldd	r25, Y+4	; 0x04
    53fc:	01 97       	sbiw	r24, 0x01	; 1
    53fe:	f1 f7       	brne	.-4      	; 0x53fc <LCD_welcomeMessage+0x1c4>
    5400:	9c 83       	std	Y+4, r25	; 0x04
    5402:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5404:	8d 81       	ldd	r24, Y+5	; 0x05
    5406:	9e 81       	ldd	r25, Y+6	; 0x06
    5408:	01 97       	sbiw	r24, 0x01	; 1
    540a:	9e 83       	std	Y+6, r25	; 0x06
    540c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    540e:	8d 81       	ldd	r24, Y+5	; 0x05
    5410:	9e 81       	ldd	r25, Y+6	; 0x06
    5412:	00 97       	sbiw	r24, 0x00	; 0
    5414:	69 f7       	brne	.-38     	; 0x53f0 <LCD_welcomeMessage+0x1b8>
    5416:	14 c0       	rjmp	.+40     	; 0x5440 <LCD_welcomeMessage+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5418:	6f 81       	ldd	r22, Y+7	; 0x07
    541a:	78 85       	ldd	r23, Y+8	; 0x08
    541c:	89 85       	ldd	r24, Y+9	; 0x09
    541e:	9a 85       	ldd	r25, Y+10	; 0x0a
    5420:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5424:	dc 01       	movw	r26, r24
    5426:	cb 01       	movw	r24, r22
    5428:	9e 83       	std	Y+6, r25	; 0x06
    542a:	8d 83       	std	Y+5, r24	; 0x05
    542c:	8d 81       	ldd	r24, Y+5	; 0x05
    542e:	9e 81       	ldd	r25, Y+6	; 0x06
    5430:	9a 83       	std	Y+2, r25	; 0x02
    5432:	89 83       	std	Y+1, r24	; 0x01
    5434:	89 81       	ldd	r24, Y+1	; 0x01
    5436:	9a 81       	ldd	r25, Y+2	; 0x02
    5438:	01 97       	sbiw	r24, 0x01	; 1
    543a:	f1 f7       	brne	.-4      	; 0x5438 <LCD_welcomeMessage+0x200>
    543c:	9a 83       	std	Y+2, r25	; 0x02
    543e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);
	LCD_voidClearDisplay(&lcd);
    5440:	86 e0       	ldi	r24, 0x06	; 6
    5442:	93 e0       	ldi	r25, 0x03	; 3
    5444:	0e 94 30 1c 	call	0x3860	; 0x3860 <LCD_voidClearDisplay>
}
    5448:	6c 96       	adiw	r28, 0x1c	; 28
    544a:	0f b6       	in	r0, 0x3f	; 63
    544c:	f8 94       	cli
    544e:	de bf       	out	0x3e, r29	; 62
    5450:	0f be       	out	0x3f, r0	; 63
    5452:	cd bf       	out	0x3d, r28	; 61
    5454:	cf 91       	pop	r28
    5456:	df 91       	pop	r29
    5458:	08 95       	ret

0000545a <LCD_EntranceMenu_1>:




void LCD_EntranceMenu_1(void)
{
    545a:	df 93       	push	r29
    545c:	cf 93       	push	r28
    545e:	00 d0       	rcall	.+0      	; 0x5460 <LCD_EntranceMenu_1+0x6>
    5460:	0f 92       	push	r0
    5462:	cd b7       	in	r28, 0x3d	; 61
    5464:	de b7       	in	r29, 0x3e	; 62
	LCD_voidClearDisplay(&lcd);
    5466:	86 e0       	ldi	r24, 0x06	; 6
    5468:	93 e0       	ldi	r25, 0x03	; 3
    546a:	0e 94 30 1c 	call	0x3860	; 0x3860 <LCD_voidClearDisplay>
	LCD_voidSendString(&lcd , "1-CloseMainDoor");
    546e:	86 e0       	ldi	r24, 0x06	; 6
    5470:	93 e0       	ldi	r25, 0x03	; 3
    5472:	27 e1       	ldi	r18, 0x17	; 23
    5474:	31 e0       	ldi	r19, 0x01	; 1
    5476:	b9 01       	movw	r22, r18
    5478:	0e 94 90 1b 	call	0x3720	; 0x3720 <LCD_voidSendString>
	LCD_voidSendString_Postion(&lcd , "2-OpenMainDoor" , LCD_U8ROW2 , LCD_U8COL1);
    547c:	86 e0       	ldi	r24, 0x06	; 6
    547e:	93 e0       	ldi	r25, 0x03	; 3
    5480:	27 e2       	ldi	r18, 0x27	; 39
    5482:	31 e0       	ldi	r19, 0x01	; 1
    5484:	b9 01       	movw	r22, r18
    5486:	40 e4       	ldi	r20, 0x40	; 64
    5488:	20 e0       	ldi	r18, 0x00	; 0
    548a:	0e 94 c9 1b 	call	0x3792	; 0x3792 <LCD_voidSendString_Postion>
	u8 kpd_input = KEYPAD_U8NOTPRESSED;
    548e:	8f ef       	ldi	r24, 0xFF	; 255
    5490:	89 83       	std	Y+1, r24	; 0x01
    5492:	03 c0       	rjmp	.+6      	; 0x549a <LCD_EntranceMenu_1+0x40>
	while(kpd_input == KEYPAD_U8NOTPRESSED)
		kpd_input = KPD_U8GetKey();
    5494:	0e 94 6c 23 	call	0x46d8	; 0x46d8 <KPD_U8GetKey>
    5498:	89 83       	std	Y+1, r24	; 0x01
{
	LCD_voidClearDisplay(&lcd);
	LCD_voidSendString(&lcd , "1-CloseMainDoor");
	LCD_voidSendString_Postion(&lcd , "2-OpenMainDoor" , LCD_U8ROW2 , LCD_U8COL1);
	u8 kpd_input = KEYPAD_U8NOTPRESSED;
	while(kpd_input == KEYPAD_U8NOTPRESSED)
    549a:	89 81       	ldd	r24, Y+1	; 0x01
    549c:	8f 3f       	cpi	r24, 0xFF	; 255
    549e:	d1 f3       	breq	.-12     	; 0x5494 <LCD_EntranceMenu_1+0x3a>
		kpd_input = KPD_U8GetKey();
	switch(kpd_input)
    54a0:	89 81       	ldd	r24, Y+1	; 0x01
    54a2:	28 2f       	mov	r18, r24
    54a4:	30 e0       	ldi	r19, 0x00	; 0
    54a6:	3b 83       	std	Y+3, r19	; 0x03
    54a8:	2a 83       	std	Y+2, r18	; 0x02
    54aa:	8a 81       	ldd	r24, Y+2	; 0x02
    54ac:	9b 81       	ldd	r25, Y+3	; 0x03
    54ae:	81 30       	cpi	r24, 0x01	; 1
    54b0:	91 05       	cpc	r25, r1
    54b2:	31 f0       	breq	.+12     	; 0x54c0 <LCD_EntranceMenu_1+0x66>
    54b4:	2a 81       	ldd	r18, Y+2	; 0x02
    54b6:	3b 81       	ldd	r19, Y+3	; 0x03
    54b8:	22 30       	cpi	r18, 0x02	; 2
    54ba:	31 05       	cpc	r19, r1
    54bc:	21 f0       	breq	.+8      	; 0x54c6 <LCD_EntranceMenu_1+0x6c>
    54be:	06 c0       	rjmp	.+12     	; 0x54cc <LCD_EntranceMenu_1+0x72>
	{
	// close the door
	case 1:
		MainDoor_voidClose();
    54c0:	0e 94 41 2d 	call	0x5a82	; 0x5a82 <MainDoor_voidClose>
    54c4:	07 c0       	rjmp	.+14     	; 0x54d4 <LCD_EntranceMenu_1+0x7a>
		break;
	case 2:
		MainDoor_voidopen();
    54c6:	0e 94 70 2a 	call	0x54e0	; 0x54e0 <MainDoor_voidopen>
    54ca:	04 c0       	rjmp	.+8      	; 0x54d4 <LCD_EntranceMenu_1+0x7a>
		break;
	default:
		kpd_input = KEYPAD_U8NOTPRESSED;
    54cc:	8f ef       	ldi	r24, 0xFF	; 255
    54ce:	89 83       	std	Y+1, r24	; 0x01
		LCD_WrongInputMessage();
    54d0:	0e 94 8c 28 	call	0x5118	; 0x5118 <LCD_WrongInputMessage>
		break;
	}
}
    54d4:	0f 90       	pop	r0
    54d6:	0f 90       	pop	r0
    54d8:	0f 90       	pop	r0
    54da:	cf 91       	pop	r28
    54dc:	df 91       	pop	r29
    54de:	08 95       	ret

000054e0 <MainDoor_voidopen>:
void MainDoor_voidopen(void)
{
    54e0:	df 93       	push	r29
    54e2:	cf 93       	push	r28
    54e4:	cd b7       	in	r28, 0x3d	; 61
    54e6:	de b7       	in	r29, 0x3e	; 62
	if(MainDoorStat ==MAINDOOR_CLOSE)
    54e8:	80 91 53 03 	lds	r24, 0x0353
    54ec:	88 23       	and	r24, r24
    54ee:	59 f4       	brne	.+22     	; 0x5506 <MainDoor_voidopen+0x26>
	{
		MainDoorStat = MAINDOOR_OPEN;
    54f0:	81 e0       	ldi	r24, 0x01	; 1
    54f2:	80 93 53 03 	sts	0x0353, r24
		StepperMotor_VoidSteps_ClockWise(&MainDoor,11);
    54f6:	8b e0       	ldi	r24, 0x0B	; 11
    54f8:	93 e0       	ldi	r25, 0x03	; 3
    54fa:	4b e0       	ldi	r20, 0x0B	; 11
    54fc:	50 e0       	ldi	r21, 0x00	; 0
    54fe:	60 e0       	ldi	r22, 0x00	; 0
    5500:	70 e0       	ldi	r23, 0x00	; 0
    5502:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <StepperMotor_VoidSteps_ClockWise>
	}
}
    5506:	cf 91       	pop	r28
    5508:	df 91       	pop	r29
    550a:	08 95       	ret

0000550c <ROOM_Control>:
void ROOM_Control(u8 copy_u8Room)
{
    550c:	df 93       	push	r29
    550e:	cf 93       	push	r28
    5510:	00 d0       	rcall	.+0      	; 0x5512 <ROOM_Control+0x6>
    5512:	00 d0       	rcall	.+0      	; 0x5514 <ROOM_Control+0x8>
    5514:	cd b7       	in	r28, 0x3d	; 61
    5516:	de b7       	in	r29, 0x3e	; 62
    5518:	8a 83       	std	Y+2, r24	; 0x02
	LCD_voidClearDisplay(&lcd);
    551a:	86 e0       	ldi	r24, 0x06	; 6
    551c:	93 e0       	ldi	r25, 0x03	; 3
    551e:	0e 94 30 1c 	call	0x3860	; 0x3860 <LCD_voidClearDisplay>
	LCD_voidSendString(&lcd , "1-LightON  3-TvOn 5-WindowOpen 7-Door");
    5522:	86 e0       	ldi	r24, 0x06	; 6
    5524:	93 e0       	ldi	r25, 0x03	; 3
    5526:	26 e3       	ldi	r18, 0x36	; 54
    5528:	31 e0       	ldi	r19, 0x01	; 1
    552a:	b9 01       	movw	r22, r18
    552c:	0e 94 90 1b 	call	0x3720	; 0x3720 <LCD_voidSendString>
	LCD_voidSendString_Postion(&lcd , "2-LightOff 4-TvOFF 6-WindowClose 8-Air",LCD_U8ROW2 , LCD_U8COL1);
    5530:	86 e0       	ldi	r24, 0x06	; 6
    5532:	93 e0       	ldi	r25, 0x03	; 3
    5534:	2c e5       	ldi	r18, 0x5C	; 92
    5536:	31 e0       	ldi	r19, 0x01	; 1
    5538:	b9 01       	movw	r22, r18
    553a:	40 e4       	ldi	r20, 0x40	; 64
    553c:	20 e0       	ldi	r18, 0x00	; 0
    553e:	0e 94 c9 1b 	call	0x3792	; 0x3792 <LCD_voidSendString_Postion>
	u8 kpd_input = KEYPAD_U8NOTPRESSED;
    5542:	8f ef       	ldi	r24, 0xFF	; 255
    5544:	89 83       	std	Y+1, r24	; 0x01
    5546:	a6 c0       	rjmp	.+332    	; 0x5694 <ROOM_Control+0x188>
	while(kpd_input == KEYPAD_U8NOTPRESSED || kpd_input == '+' ||  kpd_input == '-')
	{
		kpd_input = KPD_U8GetKey();
    5548:	0e 94 6c 23 	call	0x46d8	; 0x46d8 <KPD_U8GetKey>
    554c:	89 83       	std	Y+1, r24	; 0x01
		switch(kpd_input)
    554e:	89 81       	ldd	r24, Y+1	; 0x01
    5550:	28 2f       	mov	r18, r24
    5552:	30 e0       	ldi	r19, 0x00	; 0
    5554:	3c 83       	std	Y+4, r19	; 0x04
    5556:	2b 83       	std	Y+3, r18	; 0x03
    5558:	8b 81       	ldd	r24, Y+3	; 0x03
    555a:	9c 81       	ldd	r25, Y+4	; 0x04
    555c:	86 30       	cpi	r24, 0x06	; 6
    555e:	91 05       	cpc	r25, r1
    5560:	09 f4       	brne	.+2      	; 0x5564 <ROOM_Control+0x58>
    5562:	61 c0       	rjmp	.+194    	; 0x5626 <ROOM_Control+0x11a>
    5564:	2b 81       	ldd	r18, Y+3	; 0x03
    5566:	3c 81       	ldd	r19, Y+4	; 0x04
    5568:	27 30       	cpi	r18, 0x07	; 7
    556a:	31 05       	cpc	r19, r1
    556c:	0c f5       	brge	.+66     	; 0x55b0 <ROOM_Control+0xa4>
    556e:	8b 81       	ldd	r24, Y+3	; 0x03
    5570:	9c 81       	ldd	r25, Y+4	; 0x04
    5572:	83 30       	cpi	r24, 0x03	; 3
    5574:	91 05       	cpc	r25, r1
    5576:	09 f4       	brne	.+2      	; 0x557a <ROOM_Control+0x6e>
    5578:	47 c0       	rjmp	.+142    	; 0x5608 <ROOM_Control+0xfc>
    557a:	2b 81       	ldd	r18, Y+3	; 0x03
    557c:	3c 81       	ldd	r19, Y+4	; 0x04
    557e:	24 30       	cpi	r18, 0x04	; 4
    5580:	31 05       	cpc	r19, r1
    5582:	5c f4       	brge	.+22     	; 0x559a <ROOM_Control+0x8e>
    5584:	8b 81       	ldd	r24, Y+3	; 0x03
    5586:	9c 81       	ldd	r25, Y+4	; 0x04
    5588:	81 30       	cpi	r24, 0x01	; 1
    558a:	91 05       	cpc	r25, r1
    558c:	99 f1       	breq	.+102    	; 0x55f4 <ROOM_Control+0xe8>
    558e:	2b 81       	ldd	r18, Y+3	; 0x03
    5590:	3c 81       	ldd	r19, Y+4	; 0x04
    5592:	22 30       	cpi	r18, 0x02	; 2
    5594:	31 05       	cpc	r19, r1
    5596:	99 f1       	breq	.+102    	; 0x55fe <ROOM_Control+0xf2>
    5598:	65 c0       	rjmp	.+202    	; 0x5664 <ROOM_Control+0x158>
    559a:	8b 81       	ldd	r24, Y+3	; 0x03
    559c:	9c 81       	ldd	r25, Y+4	; 0x04
    559e:	84 30       	cpi	r24, 0x04	; 4
    55a0:	91 05       	cpc	r25, r1
    55a2:	b9 f1       	breq	.+110    	; 0x5612 <ROOM_Control+0x106>
    55a4:	2b 81       	ldd	r18, Y+3	; 0x03
    55a6:	3c 81       	ldd	r19, Y+4	; 0x04
    55a8:	25 30       	cpi	r18, 0x05	; 5
    55aa:	31 05       	cpc	r19, r1
    55ac:	b9 f1       	breq	.+110    	; 0x561c <ROOM_Control+0x110>
    55ae:	5a c0       	rjmp	.+180    	; 0x5664 <ROOM_Control+0x158>
    55b0:	8b 81       	ldd	r24, Y+3	; 0x03
    55b2:	9c 81       	ldd	r25, Y+4	; 0x04
    55b4:	8b 32       	cpi	r24, 0x2B	; 43
    55b6:	91 05       	cpc	r25, r1
    55b8:	09 f4       	brne	.+2      	; 0x55bc <ROOM_Control+0xb0>
    55ba:	4b c0       	rjmp	.+150    	; 0x5652 <ROOM_Control+0x146>
    55bc:	2b 81       	ldd	r18, Y+3	; 0x03
    55be:	3c 81       	ldd	r19, Y+4	; 0x04
    55c0:	2c 32       	cpi	r18, 0x2C	; 44
    55c2:	31 05       	cpc	r19, r1
    55c4:	5c f4       	brge	.+22     	; 0x55dc <ROOM_Control+0xd0>
    55c6:	8b 81       	ldd	r24, Y+3	; 0x03
    55c8:	9c 81       	ldd	r25, Y+4	; 0x04
    55ca:	87 30       	cpi	r24, 0x07	; 7
    55cc:	91 05       	cpc	r25, r1
    55ce:	81 f1       	breq	.+96     	; 0x5630 <ROOM_Control+0x124>
    55d0:	2b 81       	ldd	r18, Y+3	; 0x03
    55d2:	3c 81       	ldd	r19, Y+4	; 0x04
    55d4:	28 30       	cpi	r18, 0x08	; 8
    55d6:	31 05       	cpc	r19, r1
    55d8:	79 f1       	breq	.+94     	; 0x5638 <ROOM_Control+0x12c>
    55da:	44 c0       	rjmp	.+136    	; 0x5664 <ROOM_Control+0x158>
    55dc:	8b 81       	ldd	r24, Y+3	; 0x03
    55de:	9c 81       	ldd	r25, Y+4	; 0x04
    55e0:	8d 32       	cpi	r24, 0x2D	; 45
    55e2:	91 05       	cpc	r25, r1
    55e4:	69 f1       	breq	.+90     	; 0x5640 <ROOM_Control+0x134>
    55e6:	2b 81       	ldd	r18, Y+3	; 0x03
    55e8:	3c 81       	ldd	r19, Y+4	; 0x04
    55ea:	2f 3f       	cpi	r18, 0xFF	; 255
    55ec:	31 05       	cpc	r19, r1
    55ee:	09 f4       	brne	.+2      	; 0x55f2 <ROOM_Control+0xe6>
    55f0:	51 c0       	rjmp	.+162    	; 0x5694 <ROOM_Control+0x188>
    55f2:	38 c0       	rjmp	.+112    	; 0x5664 <ROOM_Control+0x158>
		{
		// turn on light
		//ROOM_LIGHT_ON+copy_u8Room
		case 1:
			UART_Send(ROOM_LIGHT_ON+copy_u8Room);
    55f4:	8a 81       	ldd	r24, Y+2	; 0x02
    55f6:	86 5f       	subi	r24, 0xF6	; 246
    55f8:	0e 94 c5 07 	call	0xf8a	; 0xf8a <UART_Send>
    55fc:	4b c0       	rjmp	.+150    	; 0x5694 <ROOM_Control+0x188>
		break;
		// turn off light
		case 2:
			UART_Send(ROOM_LIGHT_OFF+copy_u8Room);
    55fe:	8a 81       	ldd	r24, Y+2	; 0x02
    5600:	87 5f       	subi	r24, 0xF7	; 247
    5602:	0e 94 c5 07 	call	0xf8a	; 0xf8a <UART_Send>
    5606:	46 c0       	rjmp	.+140    	; 0x5694 <ROOM_Control+0x188>
		break;
		// turn on tv
		case 3:
			UART_Send(ROOM_Tv_ON+copy_u8Room);
    5608:	8a 81       	ldd	r24, Y+2	; 0x02
    560a:	8c 5e       	subi	r24, 0xEC	; 236
    560c:	0e 94 c5 07 	call	0xf8a	; 0xf8a <UART_Send>
    5610:	41 c0       	rjmp	.+130    	; 0x5694 <ROOM_Control+0x188>
		break;
		//turn off tv
		case 4:
			UART_Send(ROOM_Tv_OFF+copy_u8Room);
    5612:	8a 81       	ldd	r24, Y+2	; 0x02
    5614:	8d 5e       	subi	r24, 0xED	; 237
    5616:	0e 94 c5 07 	call	0xf8a	; 0xf8a <UART_Send>
    561a:	3c c0       	rjmp	.+120    	; 0x5694 <ROOM_Control+0x188>
		break;
		//window open
		case 5:
			UART_Send(ROOM_WINDOW_OPEN+copy_u8Room);
    561c:	8a 81       	ldd	r24, Y+2	; 0x02
    561e:	8e 5c       	subi	r24, 0xCE	; 206
    5620:	0e 94 c5 07 	call	0xf8a	; 0xf8a <UART_Send>
    5624:	37 c0       	rjmp	.+110    	; 0x5694 <ROOM_Control+0x188>
		break;
		// window close
		case 6:
			UART_Send(ROOM_WINDOW_CLOSE+copy_u8Room);
    5626:	8a 81       	ldd	r24, Y+2	; 0x02
    5628:	8f 5c       	subi	r24, 0xCF	; 207
    562a:	0e 94 c5 07 	call	0xf8a	; 0xf8a <UART_Send>
    562e:	32 c0       	rjmp	.+100    	; 0x5694 <ROOM_Control+0x188>
		break;
		// DOOR
		case 7:
			ROOM_DOOR_CONTROL(copy_u8Room);
    5630:	8a 81       	ldd	r24, Y+2	; 0x02
    5632:	0e 94 5d 2b 	call	0x56ba	; 0x56ba <ROOM_DOOR_CONTROL>
    5636:	2e c0       	rjmp	.+92     	; 0x5694 <ROOM_Control+0x188>
		break;
		// AIR
		case 8:
			ROOM_AIR_CONTROL(copy_u8Room);
    5638:	8a 81       	ldd	r24, Y+2	; 0x02
    563a:	0e 94 a7 2b 	call	0x574e	; 0x574e <ROOM_AIR_CONTROL>
    563e:	2a c0       	rjmp	.+84     	; 0x5694 <ROOM_Control+0x188>
		break;
		//
		case '-':
			LCD_voidShiftScreenLeft(&lcd);
    5640:	86 e0       	ldi	r24, 0x06	; 6
    5642:	93 e0       	ldi	r25, 0x03	; 3
    5644:	0e 94 ec 1b 	call	0x37d8	; 0x37d8 <LCD_voidShiftScreenLeft>
			LCD_voidShiftScreenLeft(&lcd);
    5648:	86 e0       	ldi	r24, 0x06	; 6
    564a:	93 e0       	ldi	r25, 0x03	; 3
    564c:	0e 94 ec 1b 	call	0x37d8	; 0x37d8 <LCD_voidShiftScreenLeft>
    5650:	21 c0       	rjmp	.+66     	; 0x5694 <ROOM_Control+0x188>
			break;
		case '+':
			LCD_voidShiftScreenRight(&lcd);
    5652:	86 e0       	ldi	r24, 0x06	; 6
    5654:	93 e0       	ldi	r25, 0x03	; 3
    5656:	0e 94 fd 1b 	call	0x37fa	; 0x37fa <LCD_voidShiftScreenRight>
			LCD_voidShiftScreenRight(&lcd);
    565a:	86 e0       	ldi	r24, 0x06	; 6
    565c:	93 e0       	ldi	r25, 0x03	; 3
    565e:	0e 94 fd 1b 	call	0x37fa	; 0x37fa <LCD_voidShiftScreenRight>
    5662:	18 c0       	rjmp	.+48     	; 0x5694 <ROOM_Control+0x188>
			break;
		case KEYPAD_U8NOTPRESSED:
			break;
		default:
			LCD_WrongInputMessage();
    5664:	0e 94 8c 28 	call	0x5118	; 0x5118 <LCD_WrongInputMessage>
			LCD_voidClearDisplay(&lcd);
    5668:	86 e0       	ldi	r24, 0x06	; 6
    566a:	93 e0       	ldi	r25, 0x03	; 3
    566c:	0e 94 30 1c 	call	0x3860	; 0x3860 <LCD_voidClearDisplay>
			LCD_voidSendString(&lcd , "1-LightON  3-TvOn 5-WindowOpen 7-Door");
    5670:	86 e0       	ldi	r24, 0x06	; 6
    5672:	93 e0       	ldi	r25, 0x03	; 3
    5674:	26 e3       	ldi	r18, 0x36	; 54
    5676:	31 e0       	ldi	r19, 0x01	; 1
    5678:	b9 01       	movw	r22, r18
    567a:	0e 94 90 1b 	call	0x3720	; 0x3720 <LCD_voidSendString>
			LCD_voidSendString_Postion(&lcd , "2-LightOff 4-TvOFF 6-WindowClose 8-Air",LCD_U8ROW2 , LCD_U8COL1);
    567e:	86 e0       	ldi	r24, 0x06	; 6
    5680:	93 e0       	ldi	r25, 0x03	; 3
    5682:	2c e5       	ldi	r18, 0x5C	; 92
    5684:	31 e0       	ldi	r19, 0x01	; 1
    5686:	b9 01       	movw	r22, r18
    5688:	40 e4       	ldi	r20, 0x40	; 64
    568a:	20 e0       	ldi	r18, 0x00	; 0
    568c:	0e 94 c9 1b 	call	0x3792	; 0x3792 <LCD_voidSendString_Postion>
			kpd_input = KEYPAD_U8NOTPRESSED;
    5690:	8f ef       	ldi	r24, 0xFF	; 255
    5692:	89 83       	std	Y+1, r24	; 0x01
{
	LCD_voidClearDisplay(&lcd);
	LCD_voidSendString(&lcd , "1-LightON  3-TvOn 5-WindowOpen 7-Door");
	LCD_voidSendString_Postion(&lcd , "2-LightOff 4-TvOFF 6-WindowClose 8-Air",LCD_U8ROW2 , LCD_U8COL1);
	u8 kpd_input = KEYPAD_U8NOTPRESSED;
	while(kpd_input == KEYPAD_U8NOTPRESSED || kpd_input == '+' ||  kpd_input == '-')
    5694:	89 81       	ldd	r24, Y+1	; 0x01
    5696:	8f 3f       	cpi	r24, 0xFF	; 255
    5698:	09 f4       	brne	.+2      	; 0x569c <ROOM_Control+0x190>
    569a:	56 cf       	rjmp	.-340    	; 0x5548 <ROOM_Control+0x3c>
    569c:	89 81       	ldd	r24, Y+1	; 0x01
    569e:	8b 32       	cpi	r24, 0x2B	; 43
    56a0:	09 f4       	brne	.+2      	; 0x56a4 <ROOM_Control+0x198>
    56a2:	52 cf       	rjmp	.-348    	; 0x5548 <ROOM_Control+0x3c>
    56a4:	89 81       	ldd	r24, Y+1	; 0x01
    56a6:	8d 32       	cpi	r24, 0x2D	; 45
    56a8:	09 f4       	brne	.+2      	; 0x56ac <ROOM_Control+0x1a0>
    56aa:	4e cf       	rjmp	.-356    	; 0x5548 <ROOM_Control+0x3c>
			kpd_input = KEYPAD_U8NOTPRESSED;
			break;
		}
	}

}
    56ac:	0f 90       	pop	r0
    56ae:	0f 90       	pop	r0
    56b0:	0f 90       	pop	r0
    56b2:	0f 90       	pop	r0
    56b4:	cf 91       	pop	r28
    56b6:	df 91       	pop	r29
    56b8:	08 95       	ret

000056ba <ROOM_DOOR_CONTROL>:
void ROOM_DOOR_CONTROL(u8 copy_u8Room)
{
    56ba:	df 93       	push	r29
    56bc:	cf 93       	push	r28
    56be:	00 d0       	rcall	.+0      	; 0x56c0 <ROOM_DOOR_CONTROL+0x6>
    56c0:	00 d0       	rcall	.+0      	; 0x56c2 <ROOM_DOOR_CONTROL+0x8>
    56c2:	cd b7       	in	r28, 0x3d	; 61
    56c4:	de b7       	in	r29, 0x3e	; 62
    56c6:	8a 83       	std	Y+2, r24	; 0x02
	LCD_voidClearDisplay(&lcd);
    56c8:	86 e0       	ldi	r24, 0x06	; 6
    56ca:	93 e0       	ldi	r25, 0x03	; 3
    56cc:	0e 94 30 1c 	call	0x3860	; 0x3860 <LCD_voidClearDisplay>
	LCD_voidSendString(&lcd , "1-Open Door");
    56d0:	86 e0       	ldi	r24, 0x06	; 6
    56d2:	93 e0       	ldi	r25, 0x03	; 3
    56d4:	23 e8       	ldi	r18, 0x83	; 131
    56d6:	31 e0       	ldi	r19, 0x01	; 1
    56d8:	b9 01       	movw	r22, r18
    56da:	0e 94 90 1b 	call	0x3720	; 0x3720 <LCD_voidSendString>
	LCD_voidSendString_Postion(&lcd , "2-Close Door",LCD_U8ROW2 , LCD_U8COL1);
    56de:	86 e0       	ldi	r24, 0x06	; 6
    56e0:	93 e0       	ldi	r25, 0x03	; 3
    56e2:	2f e8       	ldi	r18, 0x8F	; 143
    56e4:	31 e0       	ldi	r19, 0x01	; 1
    56e6:	b9 01       	movw	r22, r18
    56e8:	40 e4       	ldi	r20, 0x40	; 64
    56ea:	20 e0       	ldi	r18, 0x00	; 0
    56ec:	0e 94 c9 1b 	call	0x3792	; 0x3792 <LCD_voidSendString_Postion>
	u8 kpd_input = KEYPAD_U8NOTPRESSED;
    56f0:	8f ef       	ldi	r24, 0xFF	; 255
    56f2:	89 83       	std	Y+1, r24	; 0x01
    56f4:	1c c0       	rjmp	.+56     	; 0x572e <ROOM_DOOR_CONTROL+0x74>
	while(kpd_input == KEYPAD_U8NOTPRESSED || kpd_input >2 || kpd_input == 0)
	{
		kpd_input = KPD_U8GetKey();
    56f6:	0e 94 6c 23 	call	0x46d8	; 0x46d8 <KPD_U8GetKey>
    56fa:	89 83       	std	Y+1, r24	; 0x01
		switch(kpd_input)
    56fc:	89 81       	ldd	r24, Y+1	; 0x01
    56fe:	28 2f       	mov	r18, r24
    5700:	30 e0       	ldi	r19, 0x00	; 0
    5702:	3c 83       	std	Y+4, r19	; 0x04
    5704:	2b 83       	std	Y+3, r18	; 0x03
    5706:	8b 81       	ldd	r24, Y+3	; 0x03
    5708:	9c 81       	ldd	r25, Y+4	; 0x04
    570a:	81 30       	cpi	r24, 0x01	; 1
    570c:	91 05       	cpc	r25, r1
    570e:	31 f0       	breq	.+12     	; 0x571c <ROOM_DOOR_CONTROL+0x62>
    5710:	2b 81       	ldd	r18, Y+3	; 0x03
    5712:	3c 81       	ldd	r19, Y+4	; 0x04
    5714:	22 30       	cpi	r18, 0x02	; 2
    5716:	31 05       	cpc	r19, r1
    5718:	31 f0       	breq	.+12     	; 0x5726 <ROOM_DOOR_CONTROL+0x6c>
    571a:	09 c0       	rjmp	.+18     	; 0x572e <ROOM_DOOR_CONTROL+0x74>
		{

			case 1:
				UART_Send(ROOM_DOOR_OPEN+copy_u8Room);
    571c:	8a 81       	ldd	r24, Y+2	; 0x02
    571e:	88 5d       	subi	r24, 0xD8	; 216
    5720:	0e 94 c5 07 	call	0xf8a	; 0xf8a <UART_Send>
    5724:	04 c0       	rjmp	.+8      	; 0x572e <ROOM_DOOR_CONTROL+0x74>
			break;

			case 2:
				UART_Send(ROOM_DOOR_CLOSE+copy_u8Room);
    5726:	8a 81       	ldd	r24, Y+2	; 0x02
    5728:	89 5d       	subi	r24, 0xD9	; 217
    572a:	0e 94 c5 07 	call	0xf8a	; 0xf8a <UART_Send>
{
	LCD_voidClearDisplay(&lcd);
	LCD_voidSendString(&lcd , "1-Open Door");
	LCD_voidSendString_Postion(&lcd , "2-Close Door",LCD_U8ROW2 , LCD_U8COL1);
	u8 kpd_input = KEYPAD_U8NOTPRESSED;
	while(kpd_input == KEYPAD_U8NOTPRESSED || kpd_input >2 || kpd_input == 0)
    572e:	89 81       	ldd	r24, Y+1	; 0x01
    5730:	8f 3f       	cpi	r24, 0xFF	; 255
    5732:	09 f3       	breq	.-62     	; 0x56f6 <ROOM_DOOR_CONTROL+0x3c>
    5734:	89 81       	ldd	r24, Y+1	; 0x01
    5736:	83 30       	cpi	r24, 0x03	; 3
    5738:	f0 f6       	brcc	.-68     	; 0x56f6 <ROOM_DOOR_CONTROL+0x3c>
    573a:	89 81       	ldd	r24, Y+1	; 0x01
    573c:	88 23       	and	r24, r24
    573e:	d9 f2       	breq	.-74     	; 0x56f6 <ROOM_DOOR_CONTROL+0x3c>
			case 2:
				UART_Send(ROOM_DOOR_CLOSE+copy_u8Room);
			break;
		}
	}
}
    5740:	0f 90       	pop	r0
    5742:	0f 90       	pop	r0
    5744:	0f 90       	pop	r0
    5746:	0f 90       	pop	r0
    5748:	cf 91       	pop	r28
    574a:	df 91       	pop	r29
    574c:	08 95       	ret

0000574e <ROOM_AIR_CONTROL>:
void ROOM_AIR_CONTROL(u8 copy_u8Room)
{
    574e:	df 93       	push	r29
    5750:	cf 93       	push	r28
    5752:	cd b7       	in	r28, 0x3d	; 61
    5754:	de b7       	in	r29, 0x3e	; 62
    5756:	63 97       	sbiw	r28, 0x13	; 19
    5758:	0f b6       	in	r0, 0x3f	; 63
    575a:	f8 94       	cli
    575c:	de bf       	out	0x3e, r29	; 62
    575e:	0f be       	out	0x3f, r0	; 63
    5760:	cd bf       	out	0x3d, r28	; 61
    5762:	89 8b       	std	Y+17, r24	; 0x11
	LCD_voidClearDisplay(&lcd);
    5764:	86 e0       	ldi	r24, 0x06	; 6
    5766:	93 e0       	ldi	r25, 0x03	; 3
    5768:	0e 94 30 1c 	call	0x3860	; 0x3860 <LCD_voidClearDisplay>
	LCD_voidSendString(&lcd , "1-Air On");
    576c:	86 e0       	ldi	r24, 0x06	; 6
    576e:	93 e0       	ldi	r25, 0x03	; 3
    5770:	2c e9       	ldi	r18, 0x9C	; 156
    5772:	31 e0       	ldi	r19, 0x01	; 1
    5774:	b9 01       	movw	r22, r18
    5776:	0e 94 90 1b 	call	0x3720	; 0x3720 <LCD_voidSendString>
	LCD_voidSendString_Postion(&lcd , "2-Air Off",LCD_U8ROW2 , LCD_U8COL1);
    577a:	86 e0       	ldi	r24, 0x06	; 6
    577c:	93 e0       	ldi	r25, 0x03	; 3
    577e:	25 ea       	ldi	r18, 0xA5	; 165
    5780:	31 e0       	ldi	r19, 0x01	; 1
    5782:	b9 01       	movw	r22, r18
    5784:	40 e4       	ldi	r20, 0x40	; 64
    5786:	20 e0       	ldi	r18, 0x00	; 0
    5788:	0e 94 c9 1b 	call	0x3792	; 0x3792 <LCD_voidSendString_Postion>
	u8 kpd_input = KEYPAD_U8NOTPRESSED;
    578c:	8f ef       	ldi	r24, 0xFF	; 255
    578e:	8f 87       	std	Y+15, r24	; 0x0f
	u8 temp = 0;
    5790:	18 8a       	std	Y+16, r1	; 0x10
    5792:	a7 c0       	rjmp	.+334    	; 0x58e2 <ROOM_AIR_CONTROL+0x194>
	while(kpd_input == KEYPAD_U8NOTPRESSED || kpd_input >2 || kpd_input == 0)
	{
		kpd_input = KPD_U8GetKey();
    5794:	0e 94 6c 23 	call	0x46d8	; 0x46d8 <KPD_U8GetKey>
    5798:	8f 87       	std	Y+15, r24	; 0x0f
		switch(kpd_input)
    579a:	8f 85       	ldd	r24, Y+15	; 0x0f
    579c:	28 2f       	mov	r18, r24
    579e:	30 e0       	ldi	r19, 0x00	; 0
    57a0:	3b 8b       	std	Y+19, r19	; 0x13
    57a2:	2a 8b       	std	Y+18, r18	; 0x12
    57a4:	8a 89       	ldd	r24, Y+18	; 0x12
    57a6:	9b 89       	ldd	r25, Y+19	; 0x13
    57a8:	81 30       	cpi	r24, 0x01	; 1
    57aa:	91 05       	cpc	r25, r1
    57ac:	39 f0       	breq	.+14     	; 0x57bc <ROOM_AIR_CONTROL+0x6e>
    57ae:	2a 89       	ldd	r18, Y+18	; 0x12
    57b0:	3b 89       	ldd	r19, Y+19	; 0x13
    57b2:	22 30       	cpi	r18, 0x02	; 2
    57b4:	31 05       	cpc	r19, r1
    57b6:	09 f4       	brne	.+2      	; 0x57ba <ROOM_AIR_CONTROL+0x6c>
    57b8:	90 c0       	rjmp	.+288    	; 0x58da <ROOM_AIR_CONTROL+0x18c>
    57ba:	93 c0       	rjmp	.+294    	; 0x58e2 <ROOM_AIR_CONTROL+0x194>
		{

			case 1:
				LCD_voidClearDisplay(&lcd);
    57bc:	86 e0       	ldi	r24, 0x06	; 6
    57be:	93 e0       	ldi	r25, 0x03	; 3
    57c0:	0e 94 30 1c 	call	0x3860	; 0x3860 <LCD_voidClearDisplay>
				LCD_voidSendString(&lcd , "Set Temperature");
    57c4:	86 e0       	ldi	r24, 0x06	; 6
    57c6:	93 e0       	ldi	r25, 0x03	; 3
    57c8:	2f ea       	ldi	r18, 0xAF	; 175
    57ca:	31 e0       	ldi	r19, 0x01	; 1
    57cc:	b9 01       	movw	r22, r18
    57ce:	0e 94 90 1b 	call	0x3720	; 0x3720 <LCD_voidSendString>
				LCD_voidSetCursor(&lcd,LCD_U8ROW2 , LCD_U8COL1);
    57d2:	86 e0       	ldi	r24, 0x06	; 6
    57d4:	93 e0       	ldi	r25, 0x03	; 3
    57d6:	60 e4       	ldi	r22, 0x40	; 64
    57d8:	40 e0       	ldi	r20, 0x00	; 0
    57da:	0e 94 4c 1b 	call	0x3698	; 0x3698 <LCD_voidSetCursor>
				Air_voidgetTemp(&temp);
    57de:	ce 01       	movw	r24, r28
    57e0:	40 96       	adiw	r24, 0x10	; 16
    57e2:	0e 94 86 2c 	call	0x590c	; 0x590c <Air_voidgetTemp>
				UART_Send(ROOM_AIR_OPEN+copy_u8Room);
    57e6:	89 89       	ldd	r24, Y+17	; 0x11
    57e8:	84 5c       	subi	r24, 0xC4	; 196
    57ea:	0e 94 c5 07 	call	0xf8a	; 0xf8a <UART_Send>
    57ee:	80 e0       	ldi	r24, 0x00	; 0
    57f0:	90 e0       	ldi	r25, 0x00	; 0
    57f2:	a8 e4       	ldi	r26, 0x48	; 72
    57f4:	b2 e4       	ldi	r27, 0x42	; 66
    57f6:	8b 87       	std	Y+11, r24	; 0x0b
    57f8:	9c 87       	std	Y+12, r25	; 0x0c
    57fa:	ad 87       	std	Y+13, r26	; 0x0d
    57fc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    57fe:	6b 85       	ldd	r22, Y+11	; 0x0b
    5800:	7c 85       	ldd	r23, Y+12	; 0x0c
    5802:	8d 85       	ldd	r24, Y+13	; 0x0d
    5804:	9e 85       	ldd	r25, Y+14	; 0x0e
    5806:	20 e0       	ldi	r18, 0x00	; 0
    5808:	30 e0       	ldi	r19, 0x00	; 0
    580a:	4a ef       	ldi	r20, 0xFA	; 250
    580c:	54 e4       	ldi	r21, 0x44	; 68
    580e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5812:	dc 01       	movw	r26, r24
    5814:	cb 01       	movw	r24, r22
    5816:	8f 83       	std	Y+7, r24	; 0x07
    5818:	98 87       	std	Y+8, r25	; 0x08
    581a:	a9 87       	std	Y+9, r26	; 0x09
    581c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    581e:	6f 81       	ldd	r22, Y+7	; 0x07
    5820:	78 85       	ldd	r23, Y+8	; 0x08
    5822:	89 85       	ldd	r24, Y+9	; 0x09
    5824:	9a 85       	ldd	r25, Y+10	; 0x0a
    5826:	20 e0       	ldi	r18, 0x00	; 0
    5828:	30 e0       	ldi	r19, 0x00	; 0
    582a:	40 e8       	ldi	r20, 0x80	; 128
    582c:	5f e3       	ldi	r21, 0x3F	; 63
    582e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5832:	88 23       	and	r24, r24
    5834:	2c f4       	brge	.+10     	; 0x5840 <ROOM_AIR_CONTROL+0xf2>
		__ticks = 1;
    5836:	81 e0       	ldi	r24, 0x01	; 1
    5838:	90 e0       	ldi	r25, 0x00	; 0
    583a:	9e 83       	std	Y+6, r25	; 0x06
    583c:	8d 83       	std	Y+5, r24	; 0x05
    583e:	3f c0       	rjmp	.+126    	; 0x58be <ROOM_AIR_CONTROL+0x170>
	else if (__tmp > 65535)
    5840:	6f 81       	ldd	r22, Y+7	; 0x07
    5842:	78 85       	ldd	r23, Y+8	; 0x08
    5844:	89 85       	ldd	r24, Y+9	; 0x09
    5846:	9a 85       	ldd	r25, Y+10	; 0x0a
    5848:	20 e0       	ldi	r18, 0x00	; 0
    584a:	3f ef       	ldi	r19, 0xFF	; 255
    584c:	4f e7       	ldi	r20, 0x7F	; 127
    584e:	57 e4       	ldi	r21, 0x47	; 71
    5850:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5854:	18 16       	cp	r1, r24
    5856:	4c f5       	brge	.+82     	; 0x58aa <ROOM_AIR_CONTROL+0x15c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5858:	6b 85       	ldd	r22, Y+11	; 0x0b
    585a:	7c 85       	ldd	r23, Y+12	; 0x0c
    585c:	8d 85       	ldd	r24, Y+13	; 0x0d
    585e:	9e 85       	ldd	r25, Y+14	; 0x0e
    5860:	20 e0       	ldi	r18, 0x00	; 0
    5862:	30 e0       	ldi	r19, 0x00	; 0
    5864:	40 e2       	ldi	r20, 0x20	; 32
    5866:	51 e4       	ldi	r21, 0x41	; 65
    5868:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    586c:	dc 01       	movw	r26, r24
    586e:	cb 01       	movw	r24, r22
    5870:	bc 01       	movw	r22, r24
    5872:	cd 01       	movw	r24, r26
    5874:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5878:	dc 01       	movw	r26, r24
    587a:	cb 01       	movw	r24, r22
    587c:	9e 83       	std	Y+6, r25	; 0x06
    587e:	8d 83       	std	Y+5, r24	; 0x05
    5880:	0f c0       	rjmp	.+30     	; 0x58a0 <ROOM_AIR_CONTROL+0x152>
    5882:	88 ec       	ldi	r24, 0xC8	; 200
    5884:	90 e0       	ldi	r25, 0x00	; 0
    5886:	9c 83       	std	Y+4, r25	; 0x04
    5888:	8b 83       	std	Y+3, r24	; 0x03
    588a:	8b 81       	ldd	r24, Y+3	; 0x03
    588c:	9c 81       	ldd	r25, Y+4	; 0x04
    588e:	01 97       	sbiw	r24, 0x01	; 1
    5890:	f1 f7       	brne	.-4      	; 0x588e <ROOM_AIR_CONTROL+0x140>
    5892:	9c 83       	std	Y+4, r25	; 0x04
    5894:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5896:	8d 81       	ldd	r24, Y+5	; 0x05
    5898:	9e 81       	ldd	r25, Y+6	; 0x06
    589a:	01 97       	sbiw	r24, 0x01	; 1
    589c:	9e 83       	std	Y+6, r25	; 0x06
    589e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    58a0:	8d 81       	ldd	r24, Y+5	; 0x05
    58a2:	9e 81       	ldd	r25, Y+6	; 0x06
    58a4:	00 97       	sbiw	r24, 0x00	; 0
    58a6:	69 f7       	brne	.-38     	; 0x5882 <ROOM_AIR_CONTROL+0x134>
    58a8:	14 c0       	rjmp	.+40     	; 0x58d2 <ROOM_AIR_CONTROL+0x184>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    58aa:	6f 81       	ldd	r22, Y+7	; 0x07
    58ac:	78 85       	ldd	r23, Y+8	; 0x08
    58ae:	89 85       	ldd	r24, Y+9	; 0x09
    58b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    58b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    58b6:	dc 01       	movw	r26, r24
    58b8:	cb 01       	movw	r24, r22
    58ba:	9e 83       	std	Y+6, r25	; 0x06
    58bc:	8d 83       	std	Y+5, r24	; 0x05
    58be:	8d 81       	ldd	r24, Y+5	; 0x05
    58c0:	9e 81       	ldd	r25, Y+6	; 0x06
    58c2:	9a 83       	std	Y+2, r25	; 0x02
    58c4:	89 83       	std	Y+1, r24	; 0x01
    58c6:	89 81       	ldd	r24, Y+1	; 0x01
    58c8:	9a 81       	ldd	r25, Y+2	; 0x02
    58ca:	01 97       	sbiw	r24, 0x01	; 1
    58cc:	f1 f7       	brne	.-4      	; 0x58ca <ROOM_AIR_CONTROL+0x17c>
    58ce:	9a 83       	std	Y+2, r25	; 0x02
    58d0:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(50);
				UART_Send(temp);
    58d2:	88 89       	ldd	r24, Y+16	; 0x10
    58d4:	0e 94 c5 07 	call	0xf8a	; 0xf8a <UART_Send>
    58d8:	04 c0       	rjmp	.+8      	; 0x58e2 <ROOM_AIR_CONTROL+0x194>
			break;

			case 2:
				UART_Send(ROOM_AIR_CLOSE+copy_u8Room);
    58da:	89 89       	ldd	r24, Y+17	; 0x11
    58dc:	85 5c       	subi	r24, 0xC5	; 197
    58de:	0e 94 c5 07 	call	0xf8a	; 0xf8a <UART_Send>
	LCD_voidClearDisplay(&lcd);
	LCD_voidSendString(&lcd , "1-Air On");
	LCD_voidSendString_Postion(&lcd , "2-Air Off",LCD_U8ROW2 , LCD_U8COL1);
	u8 kpd_input = KEYPAD_U8NOTPRESSED;
	u8 temp = 0;
	while(kpd_input == KEYPAD_U8NOTPRESSED || kpd_input >2 || kpd_input == 0)
    58e2:	8f 85       	ldd	r24, Y+15	; 0x0f
    58e4:	8f 3f       	cpi	r24, 0xFF	; 255
    58e6:	09 f4       	brne	.+2      	; 0x58ea <ROOM_AIR_CONTROL+0x19c>
    58e8:	55 cf       	rjmp	.-342    	; 0x5794 <ROOM_AIR_CONTROL+0x46>
    58ea:	8f 85       	ldd	r24, Y+15	; 0x0f
    58ec:	83 30       	cpi	r24, 0x03	; 3
    58ee:	08 f0       	brcs	.+2      	; 0x58f2 <ROOM_AIR_CONTROL+0x1a4>
    58f0:	51 cf       	rjmp	.-350    	; 0x5794 <ROOM_AIR_CONTROL+0x46>
    58f2:	8f 85       	ldd	r24, Y+15	; 0x0f
    58f4:	88 23       	and	r24, r24
    58f6:	09 f4       	brne	.+2      	; 0x58fa <ROOM_AIR_CONTROL+0x1ac>
    58f8:	4d cf       	rjmp	.-358    	; 0x5794 <ROOM_AIR_CONTROL+0x46>
			case 2:
				UART_Send(ROOM_AIR_CLOSE+copy_u8Room);
			break;
		}
	}
}
    58fa:	63 96       	adiw	r28, 0x13	; 19
    58fc:	0f b6       	in	r0, 0x3f	; 63
    58fe:	f8 94       	cli
    5900:	de bf       	out	0x3e, r29	; 62
    5902:	0f be       	out	0x3f, r0	; 63
    5904:	cd bf       	out	0x3d, r28	; 61
    5906:	cf 91       	pop	r28
    5908:	df 91       	pop	r29
    590a:	08 95       	ret

0000590c <Air_voidgetTemp>:
void Air_voidgetTemp(u8* copy_pu8temp)
{
    590c:	df 93       	push	r29
    590e:	cf 93       	push	r28
    5910:	cd b7       	in	r28, 0x3d	; 61
    5912:	de b7       	in	r29, 0x3e	; 62
    5914:	63 97       	sbiw	r28, 0x13	; 19
    5916:	0f b6       	in	r0, 0x3f	; 63
    5918:	f8 94       	cli
    591a:	de bf       	out	0x3e, r29	; 62
    591c:	0f be       	out	0x3f, r0	; 63
    591e:	cd bf       	out	0x3d, r28	; 61
    5920:	9b 8b       	std	Y+19, r25	; 0x13
    5922:	8a 8b       	std	Y+18, r24	; 0x12
	u8 kpd_input = KEYPAD_U8NOTPRESSED;
    5924:	8f ef       	ldi	r24, 0xFF	; 255
    5926:	89 8b       	std	Y+17, r24	; 0x11
	u8 temperature = 0;
    5928:	18 8a       	std	Y+16, r1	; 0x10
	u8 counter = 0;
    592a:	1f 86       	std	Y+15, r1	; 0x0f
    592c:	28 c0       	rjmp	.+80     	; 0x597e <Air_voidgetTemp+0x72>
	while(counter <2)
	{
		kpd_input = KPD_U8GetKey();
    592e:	0e 94 6c 23 	call	0x46d8	; 0x46d8 <KPD_U8GetKey>
    5932:	89 8b       	std	Y+17, r24	; 0x11
		if(kpd_input != KEYPAD_U8NOTPRESSED && kpd_input <=9)
    5934:	89 89       	ldd	r24, Y+17	; 0x11
    5936:	8f 3f       	cpi	r24, 0xFF	; 255
    5938:	11 f1       	breq	.+68     	; 0x597e <Air_voidgetTemp+0x72>
    593a:	89 89       	ldd	r24, Y+17	; 0x11
    593c:	8a 30       	cpi	r24, 0x0A	; 10
    593e:	f8 f4       	brcc	.+62     	; 0x597e <Air_voidgetTemp+0x72>
		{
			temperature = (temperature*10)+kpd_input;
    5940:	88 89       	ldd	r24, Y+16	; 0x10
    5942:	88 2f       	mov	r24, r24
    5944:	90 e0       	ldi	r25, 0x00	; 0
    5946:	9c 01       	movw	r18, r24
    5948:	22 0f       	add	r18, r18
    594a:	33 1f       	adc	r19, r19
    594c:	c9 01       	movw	r24, r18
    594e:	88 0f       	add	r24, r24
    5950:	99 1f       	adc	r25, r25
    5952:	88 0f       	add	r24, r24
    5954:	99 1f       	adc	r25, r25
    5956:	82 0f       	add	r24, r18
    5958:	93 1f       	adc	r25, r19
    595a:	98 2f       	mov	r25, r24
    595c:	89 89       	ldd	r24, Y+17	; 0x11
    595e:	89 0f       	add	r24, r25
    5960:	88 8b       	std	Y+16, r24	; 0x10
			counter++;
    5962:	8f 85       	ldd	r24, Y+15	; 0x0f
    5964:	8f 5f       	subi	r24, 0xFF	; 255
    5966:	8f 87       	std	Y+15, r24	; 0x0f
			LCD_voidSendU32Digit(&lcd,kpd_input);
    5968:	89 89       	ldd	r24, Y+17	; 0x11
    596a:	28 2f       	mov	r18, r24
    596c:	30 e0       	ldi	r19, 0x00	; 0
    596e:	40 e0       	ldi	r20, 0x00	; 0
    5970:	50 e0       	ldi	r21, 0x00	; 0
    5972:	86 e0       	ldi	r24, 0x06	; 6
    5974:	93 e0       	ldi	r25, 0x03	; 3
    5976:	ba 01       	movw	r22, r20
    5978:	a9 01       	movw	r20, r18
    597a:	0e 94 bf 20 	call	0x417e	; 0x417e <LCD_voidSendU32Digit>
void Air_voidgetTemp(u8* copy_pu8temp)
{
	u8 kpd_input = KEYPAD_U8NOTPRESSED;
	u8 temperature = 0;
	u8 counter = 0;
	while(counter <2)
    597e:	8f 85       	ldd	r24, Y+15	; 0x0f
    5980:	82 30       	cpi	r24, 0x02	; 2
    5982:	a8 f2       	brcs	.-86     	; 0x592e <Air_voidgetTemp+0x22>
			temperature = (temperature*10)+kpd_input;
			counter++;
			LCD_voidSendU32Digit(&lcd,kpd_input);
		}
	}
	*copy_pu8temp = temperature;
    5984:	ea 89       	ldd	r30, Y+18	; 0x12
    5986:	fb 89       	ldd	r31, Y+19	; 0x13
    5988:	88 89       	ldd	r24, Y+16	; 0x10
    598a:	80 83       	st	Z, r24
    598c:	80 e0       	ldi	r24, 0x00	; 0
    598e:	90 e0       	ldi	r25, 0x00	; 0
    5990:	aa ef       	ldi	r26, 0xFA	; 250
    5992:	b3 e4       	ldi	r27, 0x43	; 67
    5994:	8b 87       	std	Y+11, r24	; 0x0b
    5996:	9c 87       	std	Y+12, r25	; 0x0c
    5998:	ad 87       	std	Y+13, r26	; 0x0d
    599a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    599c:	6b 85       	ldd	r22, Y+11	; 0x0b
    599e:	7c 85       	ldd	r23, Y+12	; 0x0c
    59a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    59a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    59a4:	20 e0       	ldi	r18, 0x00	; 0
    59a6:	30 e0       	ldi	r19, 0x00	; 0
    59a8:	4a ef       	ldi	r20, 0xFA	; 250
    59aa:	54 e4       	ldi	r21, 0x44	; 68
    59ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    59b0:	dc 01       	movw	r26, r24
    59b2:	cb 01       	movw	r24, r22
    59b4:	8f 83       	std	Y+7, r24	; 0x07
    59b6:	98 87       	std	Y+8, r25	; 0x08
    59b8:	a9 87       	std	Y+9, r26	; 0x09
    59ba:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    59bc:	6f 81       	ldd	r22, Y+7	; 0x07
    59be:	78 85       	ldd	r23, Y+8	; 0x08
    59c0:	89 85       	ldd	r24, Y+9	; 0x09
    59c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    59c4:	20 e0       	ldi	r18, 0x00	; 0
    59c6:	30 e0       	ldi	r19, 0x00	; 0
    59c8:	40 e8       	ldi	r20, 0x80	; 128
    59ca:	5f e3       	ldi	r21, 0x3F	; 63
    59cc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    59d0:	88 23       	and	r24, r24
    59d2:	2c f4       	brge	.+10     	; 0x59de <Air_voidgetTemp+0xd2>
		__ticks = 1;
    59d4:	81 e0       	ldi	r24, 0x01	; 1
    59d6:	90 e0       	ldi	r25, 0x00	; 0
    59d8:	9e 83       	std	Y+6, r25	; 0x06
    59da:	8d 83       	std	Y+5, r24	; 0x05
    59dc:	3f c0       	rjmp	.+126    	; 0x5a5c <Air_voidgetTemp+0x150>
	else if (__tmp > 65535)
    59de:	6f 81       	ldd	r22, Y+7	; 0x07
    59e0:	78 85       	ldd	r23, Y+8	; 0x08
    59e2:	89 85       	ldd	r24, Y+9	; 0x09
    59e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    59e6:	20 e0       	ldi	r18, 0x00	; 0
    59e8:	3f ef       	ldi	r19, 0xFF	; 255
    59ea:	4f e7       	ldi	r20, 0x7F	; 127
    59ec:	57 e4       	ldi	r21, 0x47	; 71
    59ee:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    59f2:	18 16       	cp	r1, r24
    59f4:	4c f5       	brge	.+82     	; 0x5a48 <Air_voidgetTemp+0x13c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    59f6:	6b 85       	ldd	r22, Y+11	; 0x0b
    59f8:	7c 85       	ldd	r23, Y+12	; 0x0c
    59fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    59fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    59fe:	20 e0       	ldi	r18, 0x00	; 0
    5a00:	30 e0       	ldi	r19, 0x00	; 0
    5a02:	40 e2       	ldi	r20, 0x20	; 32
    5a04:	51 e4       	ldi	r21, 0x41	; 65
    5a06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5a0a:	dc 01       	movw	r26, r24
    5a0c:	cb 01       	movw	r24, r22
    5a0e:	bc 01       	movw	r22, r24
    5a10:	cd 01       	movw	r24, r26
    5a12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5a16:	dc 01       	movw	r26, r24
    5a18:	cb 01       	movw	r24, r22
    5a1a:	9e 83       	std	Y+6, r25	; 0x06
    5a1c:	8d 83       	std	Y+5, r24	; 0x05
    5a1e:	0f c0       	rjmp	.+30     	; 0x5a3e <Air_voidgetTemp+0x132>
    5a20:	88 ec       	ldi	r24, 0xC8	; 200
    5a22:	90 e0       	ldi	r25, 0x00	; 0
    5a24:	9c 83       	std	Y+4, r25	; 0x04
    5a26:	8b 83       	std	Y+3, r24	; 0x03
    5a28:	8b 81       	ldd	r24, Y+3	; 0x03
    5a2a:	9c 81       	ldd	r25, Y+4	; 0x04
    5a2c:	01 97       	sbiw	r24, 0x01	; 1
    5a2e:	f1 f7       	brne	.-4      	; 0x5a2c <Air_voidgetTemp+0x120>
    5a30:	9c 83       	std	Y+4, r25	; 0x04
    5a32:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5a34:	8d 81       	ldd	r24, Y+5	; 0x05
    5a36:	9e 81       	ldd	r25, Y+6	; 0x06
    5a38:	01 97       	sbiw	r24, 0x01	; 1
    5a3a:	9e 83       	std	Y+6, r25	; 0x06
    5a3c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5a3e:	8d 81       	ldd	r24, Y+5	; 0x05
    5a40:	9e 81       	ldd	r25, Y+6	; 0x06
    5a42:	00 97       	sbiw	r24, 0x00	; 0
    5a44:	69 f7       	brne	.-38     	; 0x5a20 <Air_voidgetTemp+0x114>
    5a46:	14 c0       	rjmp	.+40     	; 0x5a70 <Air_voidgetTemp+0x164>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5a48:	6f 81       	ldd	r22, Y+7	; 0x07
    5a4a:	78 85       	ldd	r23, Y+8	; 0x08
    5a4c:	89 85       	ldd	r24, Y+9	; 0x09
    5a4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    5a50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5a54:	dc 01       	movw	r26, r24
    5a56:	cb 01       	movw	r24, r22
    5a58:	9e 83       	std	Y+6, r25	; 0x06
    5a5a:	8d 83       	std	Y+5, r24	; 0x05
    5a5c:	8d 81       	ldd	r24, Y+5	; 0x05
    5a5e:	9e 81       	ldd	r25, Y+6	; 0x06
    5a60:	9a 83       	std	Y+2, r25	; 0x02
    5a62:	89 83       	std	Y+1, r24	; 0x01
    5a64:	89 81       	ldd	r24, Y+1	; 0x01
    5a66:	9a 81       	ldd	r25, Y+2	; 0x02
    5a68:	01 97       	sbiw	r24, 0x01	; 1
    5a6a:	f1 f7       	brne	.-4      	; 0x5a68 <Air_voidgetTemp+0x15c>
    5a6c:	9a 83       	std	Y+2, r25	; 0x02
    5a6e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);
}
    5a70:	63 96       	adiw	r28, 0x13	; 19
    5a72:	0f b6       	in	r0, 0x3f	; 63
    5a74:	f8 94       	cli
    5a76:	de bf       	out	0x3e, r29	; 62
    5a78:	0f be       	out	0x3f, r0	; 63
    5a7a:	cd bf       	out	0x3d, r28	; 61
    5a7c:	cf 91       	pop	r28
    5a7e:	df 91       	pop	r29
    5a80:	08 95       	ret

00005a82 <MainDoor_voidClose>:
void MainDoor_voidClose(void)
{
    5a82:	df 93       	push	r29
    5a84:	cf 93       	push	r28
    5a86:	cd b7       	in	r28, 0x3d	; 61
    5a88:	de b7       	in	r29, 0x3e	; 62
	if(MainDoorStat == MAINDOOR_OPEN)
    5a8a:	80 91 53 03 	lds	r24, 0x0353
    5a8e:	81 30       	cpi	r24, 0x01	; 1
    5a90:	51 f4       	brne	.+20     	; 0x5aa6 <MainDoor_voidClose+0x24>
	{
		MainDoorStat = MAINDOOR_CLOSE;
    5a92:	10 92 53 03 	sts	0x0353, r1
		StepperMotor_VoidSteps_AntiClockWise(&MainDoor,11);
    5a96:	8b e0       	ldi	r24, 0x0B	; 11
    5a98:	93 e0       	ldi	r25, 0x03	; 3
    5a9a:	4b e0       	ldi	r20, 0x0B	; 11
    5a9c:	50 e0       	ldi	r21, 0x00	; 0
    5a9e:	60 e0       	ldi	r22, 0x00	; 0
    5aa0:	70 e0       	ldi	r23, 0x00	; 0
    5aa2:	0e 94 7c 18 	call	0x30f8	; 0x30f8 <StepperMotor_VoidSteps_AntiClockWise>
	}

}
    5aa6:	cf 91       	pop	r28
    5aa8:	df 91       	pop	r29
    5aaa:	08 95       	ret

00005aac <Fire_allarm>:
void Fire_allarm(void)
{
    5aac:	df 93       	push	r29
    5aae:	cf 93       	push	r28
    5ab0:	cd b7       	in	r28, 0x3d	; 61
    5ab2:	de b7       	in	r29, 0x3e	; 62
    5ab4:	2e 97       	sbiw	r28, 0x0e	; 14
    5ab6:	0f b6       	in	r0, 0x3f	; 63
    5ab8:	f8 94       	cli
    5aba:	de bf       	out	0x3e, r29	; 62
    5abc:	0f be       	out	0x3f, r0	; 63
    5abe:	cd bf       	out	0x3d, r28	; 61
		LCD_voidSendString_Postion(&lcd , "ALERT!! ALERT!!", LCD_U8ROW1 , LCD_U8COL1);
    5ac0:	86 e0       	ldi	r24, 0x06	; 6
    5ac2:	93 e0       	ldi	r25, 0x03	; 3
    5ac4:	2f eb       	ldi	r18, 0xBF	; 191
    5ac6:	31 e0       	ldi	r19, 0x01	; 1
    5ac8:	b9 01       	movw	r22, r18
    5aca:	40 e0       	ldi	r20, 0x00	; 0
    5acc:	20 e0       	ldi	r18, 0x00	; 0
    5ace:	0e 94 c9 1b 	call	0x3792	; 0x3792 <LCD_voidSendString_Postion>
		LCD_voidSendString_Postion(&lcd , "FIRE ALLARM" , LCD_U8ROW2 , LCD_U8COL1);
    5ad2:	86 e0       	ldi	r24, 0x06	; 6
    5ad4:	93 e0       	ldi	r25, 0x03	; 3
    5ad6:	2f ec       	ldi	r18, 0xCF	; 207
    5ad8:	31 e0       	ldi	r19, 0x01	; 1
    5ada:	b9 01       	movw	r22, r18
    5adc:	40 e4       	ldi	r20, 0x40	; 64
    5ade:	20 e0       	ldi	r18, 0x00	; 0
    5ae0:	0e 94 c9 1b 	call	0x3792	; 0x3792 <LCD_voidSendString_Postion>
    5ae4:	80 e0       	ldi	r24, 0x00	; 0
    5ae6:	90 e0       	ldi	r25, 0x00	; 0
    5ae8:	aa ef       	ldi	r26, 0xFA	; 250
    5aea:	b4 e4       	ldi	r27, 0x44	; 68
    5aec:	8b 87       	std	Y+11, r24	; 0x0b
    5aee:	9c 87       	std	Y+12, r25	; 0x0c
    5af0:	ad 87       	std	Y+13, r26	; 0x0d
    5af2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5af4:	6b 85       	ldd	r22, Y+11	; 0x0b
    5af6:	7c 85       	ldd	r23, Y+12	; 0x0c
    5af8:	8d 85       	ldd	r24, Y+13	; 0x0d
    5afa:	9e 85       	ldd	r25, Y+14	; 0x0e
    5afc:	20 e0       	ldi	r18, 0x00	; 0
    5afe:	30 e0       	ldi	r19, 0x00	; 0
    5b00:	4a ef       	ldi	r20, 0xFA	; 250
    5b02:	54 e4       	ldi	r21, 0x44	; 68
    5b04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5b08:	dc 01       	movw	r26, r24
    5b0a:	cb 01       	movw	r24, r22
    5b0c:	8f 83       	std	Y+7, r24	; 0x07
    5b0e:	98 87       	std	Y+8, r25	; 0x08
    5b10:	a9 87       	std	Y+9, r26	; 0x09
    5b12:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5b14:	6f 81       	ldd	r22, Y+7	; 0x07
    5b16:	78 85       	ldd	r23, Y+8	; 0x08
    5b18:	89 85       	ldd	r24, Y+9	; 0x09
    5b1a:	9a 85       	ldd	r25, Y+10	; 0x0a
    5b1c:	20 e0       	ldi	r18, 0x00	; 0
    5b1e:	30 e0       	ldi	r19, 0x00	; 0
    5b20:	40 e8       	ldi	r20, 0x80	; 128
    5b22:	5f e3       	ldi	r21, 0x3F	; 63
    5b24:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5b28:	88 23       	and	r24, r24
    5b2a:	2c f4       	brge	.+10     	; 0x5b36 <Fire_allarm+0x8a>
		__ticks = 1;
    5b2c:	81 e0       	ldi	r24, 0x01	; 1
    5b2e:	90 e0       	ldi	r25, 0x00	; 0
    5b30:	9e 83       	std	Y+6, r25	; 0x06
    5b32:	8d 83       	std	Y+5, r24	; 0x05
    5b34:	3f c0       	rjmp	.+126    	; 0x5bb4 <Fire_allarm+0x108>
	else if (__tmp > 65535)
    5b36:	6f 81       	ldd	r22, Y+7	; 0x07
    5b38:	78 85       	ldd	r23, Y+8	; 0x08
    5b3a:	89 85       	ldd	r24, Y+9	; 0x09
    5b3c:	9a 85       	ldd	r25, Y+10	; 0x0a
    5b3e:	20 e0       	ldi	r18, 0x00	; 0
    5b40:	3f ef       	ldi	r19, 0xFF	; 255
    5b42:	4f e7       	ldi	r20, 0x7F	; 127
    5b44:	57 e4       	ldi	r21, 0x47	; 71
    5b46:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5b4a:	18 16       	cp	r1, r24
    5b4c:	4c f5       	brge	.+82     	; 0x5ba0 <Fire_allarm+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5b4e:	6b 85       	ldd	r22, Y+11	; 0x0b
    5b50:	7c 85       	ldd	r23, Y+12	; 0x0c
    5b52:	8d 85       	ldd	r24, Y+13	; 0x0d
    5b54:	9e 85       	ldd	r25, Y+14	; 0x0e
    5b56:	20 e0       	ldi	r18, 0x00	; 0
    5b58:	30 e0       	ldi	r19, 0x00	; 0
    5b5a:	40 e2       	ldi	r20, 0x20	; 32
    5b5c:	51 e4       	ldi	r21, 0x41	; 65
    5b5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5b62:	dc 01       	movw	r26, r24
    5b64:	cb 01       	movw	r24, r22
    5b66:	bc 01       	movw	r22, r24
    5b68:	cd 01       	movw	r24, r26
    5b6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5b6e:	dc 01       	movw	r26, r24
    5b70:	cb 01       	movw	r24, r22
    5b72:	9e 83       	std	Y+6, r25	; 0x06
    5b74:	8d 83       	std	Y+5, r24	; 0x05
    5b76:	0f c0       	rjmp	.+30     	; 0x5b96 <Fire_allarm+0xea>
    5b78:	88 ec       	ldi	r24, 0xC8	; 200
    5b7a:	90 e0       	ldi	r25, 0x00	; 0
    5b7c:	9c 83       	std	Y+4, r25	; 0x04
    5b7e:	8b 83       	std	Y+3, r24	; 0x03
    5b80:	8b 81       	ldd	r24, Y+3	; 0x03
    5b82:	9c 81       	ldd	r25, Y+4	; 0x04
    5b84:	01 97       	sbiw	r24, 0x01	; 1
    5b86:	f1 f7       	brne	.-4      	; 0x5b84 <Fire_allarm+0xd8>
    5b88:	9c 83       	std	Y+4, r25	; 0x04
    5b8a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5b8c:	8d 81       	ldd	r24, Y+5	; 0x05
    5b8e:	9e 81       	ldd	r25, Y+6	; 0x06
    5b90:	01 97       	sbiw	r24, 0x01	; 1
    5b92:	9e 83       	std	Y+6, r25	; 0x06
    5b94:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5b96:	8d 81       	ldd	r24, Y+5	; 0x05
    5b98:	9e 81       	ldd	r25, Y+6	; 0x06
    5b9a:	00 97       	sbiw	r24, 0x00	; 0
    5b9c:	69 f7       	brne	.-38     	; 0x5b78 <Fire_allarm+0xcc>
    5b9e:	14 c0       	rjmp	.+40     	; 0x5bc8 <Fire_allarm+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5ba0:	6f 81       	ldd	r22, Y+7	; 0x07
    5ba2:	78 85       	ldd	r23, Y+8	; 0x08
    5ba4:	89 85       	ldd	r24, Y+9	; 0x09
    5ba6:	9a 85       	ldd	r25, Y+10	; 0x0a
    5ba8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5bac:	dc 01       	movw	r26, r24
    5bae:	cb 01       	movw	r24, r22
    5bb0:	9e 83       	std	Y+6, r25	; 0x06
    5bb2:	8d 83       	std	Y+5, r24	; 0x05
    5bb4:	8d 81       	ldd	r24, Y+5	; 0x05
    5bb6:	9e 81       	ldd	r25, Y+6	; 0x06
    5bb8:	9a 83       	std	Y+2, r25	; 0x02
    5bba:	89 83       	std	Y+1, r24	; 0x01
    5bbc:	89 81       	ldd	r24, Y+1	; 0x01
    5bbe:	9a 81       	ldd	r25, Y+2	; 0x02
    5bc0:	01 97       	sbiw	r24, 0x01	; 1
    5bc2:	f1 f7       	brne	.-4      	; 0x5bc0 <Fire_allarm+0x114>
    5bc4:	9a 83       	std	Y+2, r25	; 0x02
    5bc6:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2000);
}
    5bc8:	2e 96       	adiw	r28, 0x0e	; 14
    5bca:	0f b6       	in	r0, 0x3f	; 63
    5bcc:	f8 94       	cli
    5bce:	de bf       	out	0x3e, r29	; 62
    5bd0:	0f be       	out	0x3f, r0	; 63
    5bd2:	cd bf       	out	0x3d, r28	; 61
    5bd4:	cf 91       	pop	r28
    5bd6:	df 91       	pop	r29
    5bd8:	08 95       	ret

00005bda <FireAllarm_ISR>:

void FireAllarm_ISR(void)
{
    5bda:	df 93       	push	r29
    5bdc:	cf 93       	push	r28
    5bde:	cd b7       	in	r28, 0x3d	; 61
    5be0:	de b7       	in	r29, 0x3e	; 62
	MainDoor_voidopen();
    5be2:	0e 94 70 2a 	call	0x54e0	; 0x54e0 <MainDoor_voidopen>
	LED_u8TurnOn(&buzzer);
    5be6:	8a e0       	ldi	r24, 0x0A	; 10
    5be8:	93 e0       	ldi	r25, 0x03	; 3
    5bea:	0e 94 8f 19 	call	0x331e	; 0x331e <LED_u8TurnOn>
	LCD_voidClearDisplay(&lcd);
    5bee:	86 e0       	ldi	r24, 0x06	; 6
    5bf0:	93 e0       	ldi	r25, 0x03	; 3
    5bf2:	0e 94 30 1c 	call	0x3860	; 0x3860 <LCD_voidClearDisplay>
		while(1)
			Fire_allarm();
    5bf6:	0e 94 56 2d 	call	0x5aac	; 0x5aac <Fire_allarm>
    5bfa:	fd cf       	rjmp	.-6      	; 0x5bf6 <FireAllarm_ISR+0x1c>

00005bfc <__mulsi3>:
    5bfc:	62 9f       	mul	r22, r18
    5bfe:	d0 01       	movw	r26, r0
    5c00:	73 9f       	mul	r23, r19
    5c02:	f0 01       	movw	r30, r0
    5c04:	82 9f       	mul	r24, r18
    5c06:	e0 0d       	add	r30, r0
    5c08:	f1 1d       	adc	r31, r1
    5c0a:	64 9f       	mul	r22, r20
    5c0c:	e0 0d       	add	r30, r0
    5c0e:	f1 1d       	adc	r31, r1
    5c10:	92 9f       	mul	r25, r18
    5c12:	f0 0d       	add	r31, r0
    5c14:	83 9f       	mul	r24, r19
    5c16:	f0 0d       	add	r31, r0
    5c18:	74 9f       	mul	r23, r20
    5c1a:	f0 0d       	add	r31, r0
    5c1c:	65 9f       	mul	r22, r21
    5c1e:	f0 0d       	add	r31, r0
    5c20:	99 27       	eor	r25, r25
    5c22:	72 9f       	mul	r23, r18
    5c24:	b0 0d       	add	r27, r0
    5c26:	e1 1d       	adc	r30, r1
    5c28:	f9 1f       	adc	r31, r25
    5c2a:	63 9f       	mul	r22, r19
    5c2c:	b0 0d       	add	r27, r0
    5c2e:	e1 1d       	adc	r30, r1
    5c30:	f9 1f       	adc	r31, r25
    5c32:	bd 01       	movw	r22, r26
    5c34:	cf 01       	movw	r24, r30
    5c36:	11 24       	eor	r1, r1
    5c38:	08 95       	ret

00005c3a <__udivmodsi4>:
    5c3a:	a1 e2       	ldi	r26, 0x21	; 33
    5c3c:	1a 2e       	mov	r1, r26
    5c3e:	aa 1b       	sub	r26, r26
    5c40:	bb 1b       	sub	r27, r27
    5c42:	fd 01       	movw	r30, r26
    5c44:	0d c0       	rjmp	.+26     	; 0x5c60 <__udivmodsi4_ep>

00005c46 <__udivmodsi4_loop>:
    5c46:	aa 1f       	adc	r26, r26
    5c48:	bb 1f       	adc	r27, r27
    5c4a:	ee 1f       	adc	r30, r30
    5c4c:	ff 1f       	adc	r31, r31
    5c4e:	a2 17       	cp	r26, r18
    5c50:	b3 07       	cpc	r27, r19
    5c52:	e4 07       	cpc	r30, r20
    5c54:	f5 07       	cpc	r31, r21
    5c56:	20 f0       	brcs	.+8      	; 0x5c60 <__udivmodsi4_ep>
    5c58:	a2 1b       	sub	r26, r18
    5c5a:	b3 0b       	sbc	r27, r19
    5c5c:	e4 0b       	sbc	r30, r20
    5c5e:	f5 0b       	sbc	r31, r21

00005c60 <__udivmodsi4_ep>:
    5c60:	66 1f       	adc	r22, r22
    5c62:	77 1f       	adc	r23, r23
    5c64:	88 1f       	adc	r24, r24
    5c66:	99 1f       	adc	r25, r25
    5c68:	1a 94       	dec	r1
    5c6a:	69 f7       	brne	.-38     	; 0x5c46 <__udivmodsi4_loop>
    5c6c:	60 95       	com	r22
    5c6e:	70 95       	com	r23
    5c70:	80 95       	com	r24
    5c72:	90 95       	com	r25
    5c74:	9b 01       	movw	r18, r22
    5c76:	ac 01       	movw	r20, r24
    5c78:	bd 01       	movw	r22, r26
    5c7a:	cf 01       	movw	r24, r30
    5c7c:	08 95       	ret

00005c7e <__prologue_saves__>:
    5c7e:	2f 92       	push	r2
    5c80:	3f 92       	push	r3
    5c82:	4f 92       	push	r4
    5c84:	5f 92       	push	r5
    5c86:	6f 92       	push	r6
    5c88:	7f 92       	push	r7
    5c8a:	8f 92       	push	r8
    5c8c:	9f 92       	push	r9
    5c8e:	af 92       	push	r10
    5c90:	bf 92       	push	r11
    5c92:	cf 92       	push	r12
    5c94:	df 92       	push	r13
    5c96:	ef 92       	push	r14
    5c98:	ff 92       	push	r15
    5c9a:	0f 93       	push	r16
    5c9c:	1f 93       	push	r17
    5c9e:	cf 93       	push	r28
    5ca0:	df 93       	push	r29
    5ca2:	cd b7       	in	r28, 0x3d	; 61
    5ca4:	de b7       	in	r29, 0x3e	; 62
    5ca6:	ca 1b       	sub	r28, r26
    5ca8:	db 0b       	sbc	r29, r27
    5caa:	0f b6       	in	r0, 0x3f	; 63
    5cac:	f8 94       	cli
    5cae:	de bf       	out	0x3e, r29	; 62
    5cb0:	0f be       	out	0x3f, r0	; 63
    5cb2:	cd bf       	out	0x3d, r28	; 61
    5cb4:	09 94       	ijmp

00005cb6 <__epilogue_restores__>:
    5cb6:	2a 88       	ldd	r2, Y+18	; 0x12
    5cb8:	39 88       	ldd	r3, Y+17	; 0x11
    5cba:	48 88       	ldd	r4, Y+16	; 0x10
    5cbc:	5f 84       	ldd	r5, Y+15	; 0x0f
    5cbe:	6e 84       	ldd	r6, Y+14	; 0x0e
    5cc0:	7d 84       	ldd	r7, Y+13	; 0x0d
    5cc2:	8c 84       	ldd	r8, Y+12	; 0x0c
    5cc4:	9b 84       	ldd	r9, Y+11	; 0x0b
    5cc6:	aa 84       	ldd	r10, Y+10	; 0x0a
    5cc8:	b9 84       	ldd	r11, Y+9	; 0x09
    5cca:	c8 84       	ldd	r12, Y+8	; 0x08
    5ccc:	df 80       	ldd	r13, Y+7	; 0x07
    5cce:	ee 80       	ldd	r14, Y+6	; 0x06
    5cd0:	fd 80       	ldd	r15, Y+5	; 0x05
    5cd2:	0c 81       	ldd	r16, Y+4	; 0x04
    5cd4:	1b 81       	ldd	r17, Y+3	; 0x03
    5cd6:	aa 81       	ldd	r26, Y+2	; 0x02
    5cd8:	b9 81       	ldd	r27, Y+1	; 0x01
    5cda:	ce 0f       	add	r28, r30
    5cdc:	d1 1d       	adc	r29, r1
    5cde:	0f b6       	in	r0, 0x3f	; 63
    5ce0:	f8 94       	cli
    5ce2:	de bf       	out	0x3e, r29	; 62
    5ce4:	0f be       	out	0x3f, r0	; 63
    5ce6:	cd bf       	out	0x3d, r28	; 61
    5ce8:	ed 01       	movw	r28, r26
    5cea:	08 95       	ret

00005cec <snprintf>:
    5cec:	ae e0       	ldi	r26, 0x0E	; 14
    5cee:	b0 e0       	ldi	r27, 0x00	; 0
    5cf0:	ec e7       	ldi	r30, 0x7C	; 124
    5cf2:	fe e2       	ldi	r31, 0x2E	; 46
    5cf4:	0c 94 4d 2e 	jmp	0x5c9a	; 0x5c9a <__prologue_saves__+0x1c>
    5cf8:	0d 89       	ldd	r16, Y+21	; 0x15
    5cfa:	1e 89       	ldd	r17, Y+22	; 0x16
    5cfc:	8f 89       	ldd	r24, Y+23	; 0x17
    5cfe:	98 8d       	ldd	r25, Y+24	; 0x18
    5d00:	97 ff       	sbrs	r25, 7
    5d02:	02 c0       	rjmp	.+4      	; 0x5d08 <snprintf+0x1c>
    5d04:	80 e0       	ldi	r24, 0x00	; 0
    5d06:	90 e8       	ldi	r25, 0x80	; 128
    5d08:	01 97       	sbiw	r24, 0x01	; 1
    5d0a:	9e 83       	std	Y+6, r25	; 0x06
    5d0c:	8d 83       	std	Y+5, r24	; 0x05
    5d0e:	1a 83       	std	Y+2, r17	; 0x02
    5d10:	09 83       	std	Y+1, r16	; 0x01
    5d12:	86 e0       	ldi	r24, 0x06	; 6
    5d14:	8c 83       	std	Y+4, r24	; 0x04
    5d16:	9e 01       	movw	r18, r28
    5d18:	25 5e       	subi	r18, 0xE5	; 229
    5d1a:	3f 4f       	sbci	r19, 0xFF	; 255
    5d1c:	ce 01       	movw	r24, r28
    5d1e:	01 96       	adiw	r24, 0x01	; 1
    5d20:	69 8d       	ldd	r22, Y+25	; 0x19
    5d22:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5d24:	a9 01       	movw	r20, r18
    5d26:	0e 94 a7 2e 	call	0x5d4e	; 0x5d4e <vfprintf>
    5d2a:	4d 81       	ldd	r20, Y+5	; 0x05
    5d2c:	5e 81       	ldd	r21, Y+6	; 0x06
    5d2e:	57 fd       	sbrc	r21, 7
    5d30:	0a c0       	rjmp	.+20     	; 0x5d46 <snprintf+0x5a>
    5d32:	2f 81       	ldd	r18, Y+7	; 0x07
    5d34:	38 85       	ldd	r19, Y+8	; 0x08
    5d36:	42 17       	cp	r20, r18
    5d38:	53 07       	cpc	r21, r19
    5d3a:	0c f4       	brge	.+2      	; 0x5d3e <snprintf+0x52>
    5d3c:	9a 01       	movw	r18, r20
    5d3e:	02 0f       	add	r16, r18
    5d40:	13 1f       	adc	r17, r19
    5d42:	f8 01       	movw	r30, r16
    5d44:	10 82       	st	Z, r1
    5d46:	2e 96       	adiw	r28, 0x0e	; 14
    5d48:	e4 e0       	ldi	r30, 0x04	; 4
    5d4a:	0c 94 69 2e 	jmp	0x5cd2	; 0x5cd2 <__epilogue_restores__+0x1c>

00005d4e <vfprintf>:
    5d4e:	ab e0       	ldi	r26, 0x0B	; 11
    5d50:	b0 e0       	ldi	r27, 0x00	; 0
    5d52:	ed ea       	ldi	r30, 0xAD	; 173
    5d54:	fe e2       	ldi	r31, 0x2E	; 46
    5d56:	0c 94 3f 2e 	jmp	0x5c7e	; 0x5c7e <__prologue_saves__>
    5d5a:	3c 01       	movw	r6, r24
    5d5c:	2b 01       	movw	r4, r22
    5d5e:	5a 01       	movw	r10, r20
    5d60:	fc 01       	movw	r30, r24
    5d62:	17 82       	std	Z+7, r1	; 0x07
    5d64:	16 82       	std	Z+6, r1	; 0x06
    5d66:	83 81       	ldd	r24, Z+3	; 0x03
    5d68:	81 fd       	sbrc	r24, 1
    5d6a:	03 c0       	rjmp	.+6      	; 0x5d72 <vfprintf+0x24>
    5d6c:	6f ef       	ldi	r22, 0xFF	; 255
    5d6e:	7f ef       	ldi	r23, 0xFF	; 255
    5d70:	c6 c1       	rjmp	.+908    	; 0x60fe <vfprintf+0x3b0>
    5d72:	9a e0       	ldi	r25, 0x0A	; 10
    5d74:	89 2e       	mov	r8, r25
    5d76:	1e 01       	movw	r2, r28
    5d78:	08 94       	sec
    5d7a:	21 1c       	adc	r2, r1
    5d7c:	31 1c       	adc	r3, r1
    5d7e:	f3 01       	movw	r30, r6
    5d80:	23 81       	ldd	r18, Z+3	; 0x03
    5d82:	f2 01       	movw	r30, r4
    5d84:	23 fd       	sbrc	r18, 3
    5d86:	85 91       	lpm	r24, Z+
    5d88:	23 ff       	sbrs	r18, 3
    5d8a:	81 91       	ld	r24, Z+
    5d8c:	2f 01       	movw	r4, r30
    5d8e:	88 23       	and	r24, r24
    5d90:	09 f4       	brne	.+2      	; 0x5d94 <vfprintf+0x46>
    5d92:	b2 c1       	rjmp	.+868    	; 0x60f8 <vfprintf+0x3aa>
    5d94:	85 32       	cpi	r24, 0x25	; 37
    5d96:	39 f4       	brne	.+14     	; 0x5da6 <vfprintf+0x58>
    5d98:	23 fd       	sbrc	r18, 3
    5d9a:	85 91       	lpm	r24, Z+
    5d9c:	23 ff       	sbrs	r18, 3
    5d9e:	81 91       	ld	r24, Z+
    5da0:	2f 01       	movw	r4, r30
    5da2:	85 32       	cpi	r24, 0x25	; 37
    5da4:	29 f4       	brne	.+10     	; 0x5db0 <vfprintf+0x62>
    5da6:	90 e0       	ldi	r25, 0x00	; 0
    5da8:	b3 01       	movw	r22, r6
    5daa:	0e 94 9a 30 	call	0x6134	; 0x6134 <fputc>
    5dae:	e7 cf       	rjmp	.-50     	; 0x5d7e <vfprintf+0x30>
    5db0:	98 2f       	mov	r25, r24
    5db2:	ff 24       	eor	r15, r15
    5db4:	ee 24       	eor	r14, r14
    5db6:	99 24       	eor	r9, r9
    5db8:	ff e1       	ldi	r31, 0x1F	; 31
    5dba:	ff 15       	cp	r31, r15
    5dbc:	d0 f0       	brcs	.+52     	; 0x5df2 <vfprintf+0xa4>
    5dbe:	9b 32       	cpi	r25, 0x2B	; 43
    5dc0:	69 f0       	breq	.+26     	; 0x5ddc <vfprintf+0x8e>
    5dc2:	9c 32       	cpi	r25, 0x2C	; 44
    5dc4:	28 f4       	brcc	.+10     	; 0x5dd0 <vfprintf+0x82>
    5dc6:	90 32       	cpi	r25, 0x20	; 32
    5dc8:	59 f0       	breq	.+22     	; 0x5de0 <vfprintf+0x92>
    5dca:	93 32       	cpi	r25, 0x23	; 35
    5dcc:	91 f4       	brne	.+36     	; 0x5df2 <vfprintf+0xa4>
    5dce:	0e c0       	rjmp	.+28     	; 0x5dec <vfprintf+0x9e>
    5dd0:	9d 32       	cpi	r25, 0x2D	; 45
    5dd2:	49 f0       	breq	.+18     	; 0x5de6 <vfprintf+0x98>
    5dd4:	90 33       	cpi	r25, 0x30	; 48
    5dd6:	69 f4       	brne	.+26     	; 0x5df2 <vfprintf+0xa4>
    5dd8:	41 e0       	ldi	r20, 0x01	; 1
    5dda:	24 c0       	rjmp	.+72     	; 0x5e24 <vfprintf+0xd6>
    5ddc:	52 e0       	ldi	r21, 0x02	; 2
    5dde:	f5 2a       	or	r15, r21
    5de0:	84 e0       	ldi	r24, 0x04	; 4
    5de2:	f8 2a       	or	r15, r24
    5de4:	28 c0       	rjmp	.+80     	; 0x5e36 <vfprintf+0xe8>
    5de6:	98 e0       	ldi	r25, 0x08	; 8
    5de8:	f9 2a       	or	r15, r25
    5dea:	25 c0       	rjmp	.+74     	; 0x5e36 <vfprintf+0xe8>
    5dec:	e0 e1       	ldi	r30, 0x10	; 16
    5dee:	fe 2a       	or	r15, r30
    5df0:	22 c0       	rjmp	.+68     	; 0x5e36 <vfprintf+0xe8>
    5df2:	f7 fc       	sbrc	r15, 7
    5df4:	29 c0       	rjmp	.+82     	; 0x5e48 <vfprintf+0xfa>
    5df6:	89 2f       	mov	r24, r25
    5df8:	80 53       	subi	r24, 0x30	; 48
    5dfa:	8a 30       	cpi	r24, 0x0A	; 10
    5dfc:	70 f4       	brcc	.+28     	; 0x5e1a <vfprintf+0xcc>
    5dfe:	f6 fe       	sbrs	r15, 6
    5e00:	05 c0       	rjmp	.+10     	; 0x5e0c <vfprintf+0xbe>
    5e02:	98 9c       	mul	r9, r8
    5e04:	90 2c       	mov	r9, r0
    5e06:	11 24       	eor	r1, r1
    5e08:	98 0e       	add	r9, r24
    5e0a:	15 c0       	rjmp	.+42     	; 0x5e36 <vfprintf+0xe8>
    5e0c:	e8 9c       	mul	r14, r8
    5e0e:	e0 2c       	mov	r14, r0
    5e10:	11 24       	eor	r1, r1
    5e12:	e8 0e       	add	r14, r24
    5e14:	f0 e2       	ldi	r31, 0x20	; 32
    5e16:	ff 2a       	or	r15, r31
    5e18:	0e c0       	rjmp	.+28     	; 0x5e36 <vfprintf+0xe8>
    5e1a:	9e 32       	cpi	r25, 0x2E	; 46
    5e1c:	29 f4       	brne	.+10     	; 0x5e28 <vfprintf+0xda>
    5e1e:	f6 fc       	sbrc	r15, 6
    5e20:	6b c1       	rjmp	.+726    	; 0x60f8 <vfprintf+0x3aa>
    5e22:	40 e4       	ldi	r20, 0x40	; 64
    5e24:	f4 2a       	or	r15, r20
    5e26:	07 c0       	rjmp	.+14     	; 0x5e36 <vfprintf+0xe8>
    5e28:	9c 36       	cpi	r25, 0x6C	; 108
    5e2a:	19 f4       	brne	.+6      	; 0x5e32 <vfprintf+0xe4>
    5e2c:	50 e8       	ldi	r21, 0x80	; 128
    5e2e:	f5 2a       	or	r15, r21
    5e30:	02 c0       	rjmp	.+4      	; 0x5e36 <vfprintf+0xe8>
    5e32:	98 36       	cpi	r25, 0x68	; 104
    5e34:	49 f4       	brne	.+18     	; 0x5e48 <vfprintf+0xfa>
    5e36:	f2 01       	movw	r30, r4
    5e38:	23 fd       	sbrc	r18, 3
    5e3a:	95 91       	lpm	r25, Z+
    5e3c:	23 ff       	sbrs	r18, 3
    5e3e:	91 91       	ld	r25, Z+
    5e40:	2f 01       	movw	r4, r30
    5e42:	99 23       	and	r25, r25
    5e44:	09 f0       	breq	.+2      	; 0x5e48 <vfprintf+0xfa>
    5e46:	b8 cf       	rjmp	.-144    	; 0x5db8 <vfprintf+0x6a>
    5e48:	89 2f       	mov	r24, r25
    5e4a:	85 54       	subi	r24, 0x45	; 69
    5e4c:	83 30       	cpi	r24, 0x03	; 3
    5e4e:	18 f0       	brcs	.+6      	; 0x5e56 <vfprintf+0x108>
    5e50:	80 52       	subi	r24, 0x20	; 32
    5e52:	83 30       	cpi	r24, 0x03	; 3
    5e54:	38 f4       	brcc	.+14     	; 0x5e64 <vfprintf+0x116>
    5e56:	44 e0       	ldi	r20, 0x04	; 4
    5e58:	50 e0       	ldi	r21, 0x00	; 0
    5e5a:	a4 0e       	add	r10, r20
    5e5c:	b5 1e       	adc	r11, r21
    5e5e:	5f e3       	ldi	r21, 0x3F	; 63
    5e60:	59 83       	std	Y+1, r21	; 0x01
    5e62:	0f c0       	rjmp	.+30     	; 0x5e82 <vfprintf+0x134>
    5e64:	93 36       	cpi	r25, 0x63	; 99
    5e66:	31 f0       	breq	.+12     	; 0x5e74 <vfprintf+0x126>
    5e68:	93 37       	cpi	r25, 0x73	; 115
    5e6a:	79 f0       	breq	.+30     	; 0x5e8a <vfprintf+0x13c>
    5e6c:	93 35       	cpi	r25, 0x53	; 83
    5e6e:	09 f0       	breq	.+2      	; 0x5e72 <vfprintf+0x124>
    5e70:	56 c0       	rjmp	.+172    	; 0x5f1e <vfprintf+0x1d0>
    5e72:	20 c0       	rjmp	.+64     	; 0x5eb4 <vfprintf+0x166>
    5e74:	f5 01       	movw	r30, r10
    5e76:	80 81       	ld	r24, Z
    5e78:	89 83       	std	Y+1, r24	; 0x01
    5e7a:	42 e0       	ldi	r20, 0x02	; 2
    5e7c:	50 e0       	ldi	r21, 0x00	; 0
    5e7e:	a4 0e       	add	r10, r20
    5e80:	b5 1e       	adc	r11, r21
    5e82:	61 01       	movw	r12, r2
    5e84:	01 e0       	ldi	r16, 0x01	; 1
    5e86:	10 e0       	ldi	r17, 0x00	; 0
    5e88:	12 c0       	rjmp	.+36     	; 0x5eae <vfprintf+0x160>
    5e8a:	f5 01       	movw	r30, r10
    5e8c:	c0 80       	ld	r12, Z
    5e8e:	d1 80       	ldd	r13, Z+1	; 0x01
    5e90:	f6 fc       	sbrc	r15, 6
    5e92:	03 c0       	rjmp	.+6      	; 0x5e9a <vfprintf+0x14c>
    5e94:	6f ef       	ldi	r22, 0xFF	; 255
    5e96:	7f ef       	ldi	r23, 0xFF	; 255
    5e98:	02 c0       	rjmp	.+4      	; 0x5e9e <vfprintf+0x150>
    5e9a:	69 2d       	mov	r22, r9
    5e9c:	70 e0       	ldi	r23, 0x00	; 0
    5e9e:	42 e0       	ldi	r20, 0x02	; 2
    5ea0:	50 e0       	ldi	r21, 0x00	; 0
    5ea2:	a4 0e       	add	r10, r20
    5ea4:	b5 1e       	adc	r11, r21
    5ea6:	c6 01       	movw	r24, r12
    5ea8:	0e 94 8f 30 	call	0x611e	; 0x611e <strnlen>
    5eac:	8c 01       	movw	r16, r24
    5eae:	5f e7       	ldi	r21, 0x7F	; 127
    5eb0:	f5 22       	and	r15, r21
    5eb2:	14 c0       	rjmp	.+40     	; 0x5edc <vfprintf+0x18e>
    5eb4:	f5 01       	movw	r30, r10
    5eb6:	c0 80       	ld	r12, Z
    5eb8:	d1 80       	ldd	r13, Z+1	; 0x01
    5eba:	f6 fc       	sbrc	r15, 6
    5ebc:	03 c0       	rjmp	.+6      	; 0x5ec4 <vfprintf+0x176>
    5ebe:	6f ef       	ldi	r22, 0xFF	; 255
    5ec0:	7f ef       	ldi	r23, 0xFF	; 255
    5ec2:	02 c0       	rjmp	.+4      	; 0x5ec8 <vfprintf+0x17a>
    5ec4:	69 2d       	mov	r22, r9
    5ec6:	70 e0       	ldi	r23, 0x00	; 0
    5ec8:	42 e0       	ldi	r20, 0x02	; 2
    5eca:	50 e0       	ldi	r21, 0x00	; 0
    5ecc:	a4 0e       	add	r10, r20
    5ece:	b5 1e       	adc	r11, r21
    5ed0:	c6 01       	movw	r24, r12
    5ed2:	0e 94 84 30 	call	0x6108	; 0x6108 <strnlen_P>
    5ed6:	8c 01       	movw	r16, r24
    5ed8:	50 e8       	ldi	r21, 0x80	; 128
    5eda:	f5 2a       	or	r15, r21
    5edc:	f3 fe       	sbrs	r15, 3
    5ede:	07 c0       	rjmp	.+14     	; 0x5eee <vfprintf+0x1a0>
    5ee0:	1a c0       	rjmp	.+52     	; 0x5f16 <vfprintf+0x1c8>
    5ee2:	80 e2       	ldi	r24, 0x20	; 32
    5ee4:	90 e0       	ldi	r25, 0x00	; 0
    5ee6:	b3 01       	movw	r22, r6
    5ee8:	0e 94 9a 30 	call	0x6134	; 0x6134 <fputc>
    5eec:	ea 94       	dec	r14
    5eee:	8e 2d       	mov	r24, r14
    5ef0:	90 e0       	ldi	r25, 0x00	; 0
    5ef2:	08 17       	cp	r16, r24
    5ef4:	19 07       	cpc	r17, r25
    5ef6:	a8 f3       	brcs	.-22     	; 0x5ee2 <vfprintf+0x194>
    5ef8:	0e c0       	rjmp	.+28     	; 0x5f16 <vfprintf+0x1c8>
    5efa:	f6 01       	movw	r30, r12
    5efc:	f7 fc       	sbrc	r15, 7
    5efe:	85 91       	lpm	r24, Z+
    5f00:	f7 fe       	sbrs	r15, 7
    5f02:	81 91       	ld	r24, Z+
    5f04:	6f 01       	movw	r12, r30
    5f06:	90 e0       	ldi	r25, 0x00	; 0
    5f08:	b3 01       	movw	r22, r6
    5f0a:	0e 94 9a 30 	call	0x6134	; 0x6134 <fputc>
    5f0e:	e1 10       	cpse	r14, r1
    5f10:	ea 94       	dec	r14
    5f12:	01 50       	subi	r16, 0x01	; 1
    5f14:	10 40       	sbci	r17, 0x00	; 0
    5f16:	01 15       	cp	r16, r1
    5f18:	11 05       	cpc	r17, r1
    5f1a:	79 f7       	brne	.-34     	; 0x5efa <vfprintf+0x1ac>
    5f1c:	ea c0       	rjmp	.+468    	; 0x60f2 <vfprintf+0x3a4>
    5f1e:	94 36       	cpi	r25, 0x64	; 100
    5f20:	11 f0       	breq	.+4      	; 0x5f26 <vfprintf+0x1d8>
    5f22:	99 36       	cpi	r25, 0x69	; 105
    5f24:	69 f5       	brne	.+90     	; 0x5f80 <vfprintf+0x232>
    5f26:	f7 fe       	sbrs	r15, 7
    5f28:	08 c0       	rjmp	.+16     	; 0x5f3a <vfprintf+0x1ec>
    5f2a:	f5 01       	movw	r30, r10
    5f2c:	20 81       	ld	r18, Z
    5f2e:	31 81       	ldd	r19, Z+1	; 0x01
    5f30:	42 81       	ldd	r20, Z+2	; 0x02
    5f32:	53 81       	ldd	r21, Z+3	; 0x03
    5f34:	84 e0       	ldi	r24, 0x04	; 4
    5f36:	90 e0       	ldi	r25, 0x00	; 0
    5f38:	0a c0       	rjmp	.+20     	; 0x5f4e <vfprintf+0x200>
    5f3a:	f5 01       	movw	r30, r10
    5f3c:	80 81       	ld	r24, Z
    5f3e:	91 81       	ldd	r25, Z+1	; 0x01
    5f40:	9c 01       	movw	r18, r24
    5f42:	44 27       	eor	r20, r20
    5f44:	37 fd       	sbrc	r19, 7
    5f46:	40 95       	com	r20
    5f48:	54 2f       	mov	r21, r20
    5f4a:	82 e0       	ldi	r24, 0x02	; 2
    5f4c:	90 e0       	ldi	r25, 0x00	; 0
    5f4e:	a8 0e       	add	r10, r24
    5f50:	b9 1e       	adc	r11, r25
    5f52:	9f e6       	ldi	r25, 0x6F	; 111
    5f54:	f9 22       	and	r15, r25
    5f56:	57 ff       	sbrs	r21, 7
    5f58:	09 c0       	rjmp	.+18     	; 0x5f6c <vfprintf+0x21e>
    5f5a:	50 95       	com	r21
    5f5c:	40 95       	com	r20
    5f5e:	30 95       	com	r19
    5f60:	21 95       	neg	r18
    5f62:	3f 4f       	sbci	r19, 0xFF	; 255
    5f64:	4f 4f       	sbci	r20, 0xFF	; 255
    5f66:	5f 4f       	sbci	r21, 0xFF	; 255
    5f68:	e0 e8       	ldi	r30, 0x80	; 128
    5f6a:	fe 2a       	or	r15, r30
    5f6c:	ca 01       	movw	r24, r20
    5f6e:	b9 01       	movw	r22, r18
    5f70:	a1 01       	movw	r20, r2
    5f72:	2a e0       	ldi	r18, 0x0A	; 10
    5f74:	30 e0       	ldi	r19, 0x00	; 0
    5f76:	0e 94 c6 30 	call	0x618c	; 0x618c <__ultoa_invert>
    5f7a:	d8 2e       	mov	r13, r24
    5f7c:	d2 18       	sub	r13, r2
    5f7e:	40 c0       	rjmp	.+128    	; 0x6000 <vfprintf+0x2b2>
    5f80:	95 37       	cpi	r25, 0x75	; 117
    5f82:	29 f4       	brne	.+10     	; 0x5f8e <vfprintf+0x240>
    5f84:	1f 2d       	mov	r17, r15
    5f86:	1f 7e       	andi	r17, 0xEF	; 239
    5f88:	2a e0       	ldi	r18, 0x0A	; 10
    5f8a:	30 e0       	ldi	r19, 0x00	; 0
    5f8c:	1d c0       	rjmp	.+58     	; 0x5fc8 <vfprintf+0x27a>
    5f8e:	1f 2d       	mov	r17, r15
    5f90:	19 7f       	andi	r17, 0xF9	; 249
    5f92:	9f 36       	cpi	r25, 0x6F	; 111
    5f94:	61 f0       	breq	.+24     	; 0x5fae <vfprintf+0x260>
    5f96:	90 37       	cpi	r25, 0x70	; 112
    5f98:	20 f4       	brcc	.+8      	; 0x5fa2 <vfprintf+0x254>
    5f9a:	98 35       	cpi	r25, 0x58	; 88
    5f9c:	09 f0       	breq	.+2      	; 0x5fa0 <vfprintf+0x252>
    5f9e:	ac c0       	rjmp	.+344    	; 0x60f8 <vfprintf+0x3aa>
    5fa0:	0f c0       	rjmp	.+30     	; 0x5fc0 <vfprintf+0x272>
    5fa2:	90 37       	cpi	r25, 0x70	; 112
    5fa4:	39 f0       	breq	.+14     	; 0x5fb4 <vfprintf+0x266>
    5fa6:	98 37       	cpi	r25, 0x78	; 120
    5fa8:	09 f0       	breq	.+2      	; 0x5fac <vfprintf+0x25e>
    5faa:	a6 c0       	rjmp	.+332    	; 0x60f8 <vfprintf+0x3aa>
    5fac:	04 c0       	rjmp	.+8      	; 0x5fb6 <vfprintf+0x268>
    5fae:	28 e0       	ldi	r18, 0x08	; 8
    5fb0:	30 e0       	ldi	r19, 0x00	; 0
    5fb2:	0a c0       	rjmp	.+20     	; 0x5fc8 <vfprintf+0x27a>
    5fb4:	10 61       	ori	r17, 0x10	; 16
    5fb6:	14 fd       	sbrc	r17, 4
    5fb8:	14 60       	ori	r17, 0x04	; 4
    5fba:	20 e1       	ldi	r18, 0x10	; 16
    5fbc:	30 e0       	ldi	r19, 0x00	; 0
    5fbe:	04 c0       	rjmp	.+8      	; 0x5fc8 <vfprintf+0x27a>
    5fc0:	14 fd       	sbrc	r17, 4
    5fc2:	16 60       	ori	r17, 0x06	; 6
    5fc4:	20 e1       	ldi	r18, 0x10	; 16
    5fc6:	32 e0       	ldi	r19, 0x02	; 2
    5fc8:	17 ff       	sbrs	r17, 7
    5fca:	08 c0       	rjmp	.+16     	; 0x5fdc <vfprintf+0x28e>
    5fcc:	f5 01       	movw	r30, r10
    5fce:	60 81       	ld	r22, Z
    5fd0:	71 81       	ldd	r23, Z+1	; 0x01
    5fd2:	82 81       	ldd	r24, Z+2	; 0x02
    5fd4:	93 81       	ldd	r25, Z+3	; 0x03
    5fd6:	44 e0       	ldi	r20, 0x04	; 4
    5fd8:	50 e0       	ldi	r21, 0x00	; 0
    5fda:	08 c0       	rjmp	.+16     	; 0x5fec <vfprintf+0x29e>
    5fdc:	f5 01       	movw	r30, r10
    5fde:	80 81       	ld	r24, Z
    5fe0:	91 81       	ldd	r25, Z+1	; 0x01
    5fe2:	bc 01       	movw	r22, r24
    5fe4:	80 e0       	ldi	r24, 0x00	; 0
    5fe6:	90 e0       	ldi	r25, 0x00	; 0
    5fe8:	42 e0       	ldi	r20, 0x02	; 2
    5fea:	50 e0       	ldi	r21, 0x00	; 0
    5fec:	a4 0e       	add	r10, r20
    5fee:	b5 1e       	adc	r11, r21
    5ff0:	a1 01       	movw	r20, r2
    5ff2:	0e 94 c6 30 	call	0x618c	; 0x618c <__ultoa_invert>
    5ff6:	d8 2e       	mov	r13, r24
    5ff8:	d2 18       	sub	r13, r2
    5ffa:	8f e7       	ldi	r24, 0x7F	; 127
    5ffc:	f8 2e       	mov	r15, r24
    5ffe:	f1 22       	and	r15, r17
    6000:	f6 fe       	sbrs	r15, 6
    6002:	0b c0       	rjmp	.+22     	; 0x601a <vfprintf+0x2cc>
    6004:	5e ef       	ldi	r21, 0xFE	; 254
    6006:	f5 22       	and	r15, r21
    6008:	d9 14       	cp	r13, r9
    600a:	38 f4       	brcc	.+14     	; 0x601a <vfprintf+0x2cc>
    600c:	f4 fe       	sbrs	r15, 4
    600e:	07 c0       	rjmp	.+14     	; 0x601e <vfprintf+0x2d0>
    6010:	f2 fc       	sbrc	r15, 2
    6012:	05 c0       	rjmp	.+10     	; 0x601e <vfprintf+0x2d0>
    6014:	8f ee       	ldi	r24, 0xEF	; 239
    6016:	f8 22       	and	r15, r24
    6018:	02 c0       	rjmp	.+4      	; 0x601e <vfprintf+0x2d0>
    601a:	1d 2d       	mov	r17, r13
    601c:	01 c0       	rjmp	.+2      	; 0x6020 <vfprintf+0x2d2>
    601e:	19 2d       	mov	r17, r9
    6020:	f4 fe       	sbrs	r15, 4
    6022:	0d c0       	rjmp	.+26     	; 0x603e <vfprintf+0x2f0>
    6024:	fe 01       	movw	r30, r28
    6026:	ed 0d       	add	r30, r13
    6028:	f1 1d       	adc	r31, r1
    602a:	80 81       	ld	r24, Z
    602c:	80 33       	cpi	r24, 0x30	; 48
    602e:	19 f4       	brne	.+6      	; 0x6036 <vfprintf+0x2e8>
    6030:	99 ee       	ldi	r25, 0xE9	; 233
    6032:	f9 22       	and	r15, r25
    6034:	08 c0       	rjmp	.+16     	; 0x6046 <vfprintf+0x2f8>
    6036:	1f 5f       	subi	r17, 0xFF	; 255
    6038:	f2 fe       	sbrs	r15, 2
    603a:	05 c0       	rjmp	.+10     	; 0x6046 <vfprintf+0x2f8>
    603c:	03 c0       	rjmp	.+6      	; 0x6044 <vfprintf+0x2f6>
    603e:	8f 2d       	mov	r24, r15
    6040:	86 78       	andi	r24, 0x86	; 134
    6042:	09 f0       	breq	.+2      	; 0x6046 <vfprintf+0x2f8>
    6044:	1f 5f       	subi	r17, 0xFF	; 255
    6046:	0f 2d       	mov	r16, r15
    6048:	f3 fc       	sbrc	r15, 3
    604a:	14 c0       	rjmp	.+40     	; 0x6074 <vfprintf+0x326>
    604c:	f0 fe       	sbrs	r15, 0
    604e:	0f c0       	rjmp	.+30     	; 0x606e <vfprintf+0x320>
    6050:	1e 15       	cp	r17, r14
    6052:	10 f0       	brcs	.+4      	; 0x6058 <vfprintf+0x30a>
    6054:	9d 2c       	mov	r9, r13
    6056:	0b c0       	rjmp	.+22     	; 0x606e <vfprintf+0x320>
    6058:	9d 2c       	mov	r9, r13
    605a:	9e 0c       	add	r9, r14
    605c:	91 1a       	sub	r9, r17
    605e:	1e 2d       	mov	r17, r14
    6060:	06 c0       	rjmp	.+12     	; 0x606e <vfprintf+0x320>
    6062:	80 e2       	ldi	r24, 0x20	; 32
    6064:	90 e0       	ldi	r25, 0x00	; 0
    6066:	b3 01       	movw	r22, r6
    6068:	0e 94 9a 30 	call	0x6134	; 0x6134 <fputc>
    606c:	1f 5f       	subi	r17, 0xFF	; 255
    606e:	1e 15       	cp	r17, r14
    6070:	c0 f3       	brcs	.-16     	; 0x6062 <vfprintf+0x314>
    6072:	04 c0       	rjmp	.+8      	; 0x607c <vfprintf+0x32e>
    6074:	1e 15       	cp	r17, r14
    6076:	10 f4       	brcc	.+4      	; 0x607c <vfprintf+0x32e>
    6078:	e1 1a       	sub	r14, r17
    607a:	01 c0       	rjmp	.+2      	; 0x607e <vfprintf+0x330>
    607c:	ee 24       	eor	r14, r14
    607e:	04 ff       	sbrs	r16, 4
    6080:	0f c0       	rjmp	.+30     	; 0x60a0 <vfprintf+0x352>
    6082:	80 e3       	ldi	r24, 0x30	; 48
    6084:	90 e0       	ldi	r25, 0x00	; 0
    6086:	b3 01       	movw	r22, r6
    6088:	0e 94 9a 30 	call	0x6134	; 0x6134 <fputc>
    608c:	02 ff       	sbrs	r16, 2
    608e:	1d c0       	rjmp	.+58     	; 0x60ca <vfprintf+0x37c>
    6090:	01 fd       	sbrc	r16, 1
    6092:	03 c0       	rjmp	.+6      	; 0x609a <vfprintf+0x34c>
    6094:	88 e7       	ldi	r24, 0x78	; 120
    6096:	90 e0       	ldi	r25, 0x00	; 0
    6098:	0e c0       	rjmp	.+28     	; 0x60b6 <vfprintf+0x368>
    609a:	88 e5       	ldi	r24, 0x58	; 88
    609c:	90 e0       	ldi	r25, 0x00	; 0
    609e:	0b c0       	rjmp	.+22     	; 0x60b6 <vfprintf+0x368>
    60a0:	80 2f       	mov	r24, r16
    60a2:	86 78       	andi	r24, 0x86	; 134
    60a4:	91 f0       	breq	.+36     	; 0x60ca <vfprintf+0x37c>
    60a6:	01 ff       	sbrs	r16, 1
    60a8:	02 c0       	rjmp	.+4      	; 0x60ae <vfprintf+0x360>
    60aa:	8b e2       	ldi	r24, 0x2B	; 43
    60ac:	01 c0       	rjmp	.+2      	; 0x60b0 <vfprintf+0x362>
    60ae:	80 e2       	ldi	r24, 0x20	; 32
    60b0:	f7 fc       	sbrc	r15, 7
    60b2:	8d e2       	ldi	r24, 0x2D	; 45
    60b4:	90 e0       	ldi	r25, 0x00	; 0
    60b6:	b3 01       	movw	r22, r6
    60b8:	0e 94 9a 30 	call	0x6134	; 0x6134 <fputc>
    60bc:	06 c0       	rjmp	.+12     	; 0x60ca <vfprintf+0x37c>
    60be:	80 e3       	ldi	r24, 0x30	; 48
    60c0:	90 e0       	ldi	r25, 0x00	; 0
    60c2:	b3 01       	movw	r22, r6
    60c4:	0e 94 9a 30 	call	0x6134	; 0x6134 <fputc>
    60c8:	9a 94       	dec	r9
    60ca:	d9 14       	cp	r13, r9
    60cc:	c0 f3       	brcs	.-16     	; 0x60be <vfprintf+0x370>
    60ce:	da 94       	dec	r13
    60d0:	f1 01       	movw	r30, r2
    60d2:	ed 0d       	add	r30, r13
    60d4:	f1 1d       	adc	r31, r1
    60d6:	80 81       	ld	r24, Z
    60d8:	90 e0       	ldi	r25, 0x00	; 0
    60da:	b3 01       	movw	r22, r6
    60dc:	0e 94 9a 30 	call	0x6134	; 0x6134 <fputc>
    60e0:	dd 20       	and	r13, r13
    60e2:	a9 f7       	brne	.-22     	; 0x60ce <vfprintf+0x380>
    60e4:	06 c0       	rjmp	.+12     	; 0x60f2 <vfprintf+0x3a4>
    60e6:	80 e2       	ldi	r24, 0x20	; 32
    60e8:	90 e0       	ldi	r25, 0x00	; 0
    60ea:	b3 01       	movw	r22, r6
    60ec:	0e 94 9a 30 	call	0x6134	; 0x6134 <fputc>
    60f0:	ea 94       	dec	r14
    60f2:	ee 20       	and	r14, r14
    60f4:	c1 f7       	brne	.-16     	; 0x60e6 <vfprintf+0x398>
    60f6:	43 ce       	rjmp	.-890    	; 0x5d7e <vfprintf+0x30>
    60f8:	f3 01       	movw	r30, r6
    60fa:	66 81       	ldd	r22, Z+6	; 0x06
    60fc:	77 81       	ldd	r23, Z+7	; 0x07
    60fe:	cb 01       	movw	r24, r22
    6100:	2b 96       	adiw	r28, 0x0b	; 11
    6102:	e2 e1       	ldi	r30, 0x12	; 18
    6104:	0c 94 5b 2e 	jmp	0x5cb6	; 0x5cb6 <__epilogue_restores__>

00006108 <strnlen_P>:
    6108:	fc 01       	movw	r30, r24
    610a:	05 90       	lpm	r0, Z+
    610c:	61 50       	subi	r22, 0x01	; 1
    610e:	70 40       	sbci	r23, 0x00	; 0
    6110:	01 10       	cpse	r0, r1
    6112:	d8 f7       	brcc	.-10     	; 0x610a <strnlen_P+0x2>
    6114:	80 95       	com	r24
    6116:	90 95       	com	r25
    6118:	8e 0f       	add	r24, r30
    611a:	9f 1f       	adc	r25, r31
    611c:	08 95       	ret

0000611e <strnlen>:
    611e:	fc 01       	movw	r30, r24
    6120:	61 50       	subi	r22, 0x01	; 1
    6122:	70 40       	sbci	r23, 0x00	; 0
    6124:	01 90       	ld	r0, Z+
    6126:	01 10       	cpse	r0, r1
    6128:	d8 f7       	brcc	.-10     	; 0x6120 <strnlen+0x2>
    612a:	80 95       	com	r24
    612c:	90 95       	com	r25
    612e:	8e 0f       	add	r24, r30
    6130:	9f 1f       	adc	r25, r31
    6132:	08 95       	ret

00006134 <fputc>:
    6134:	0f 93       	push	r16
    6136:	1f 93       	push	r17
    6138:	cf 93       	push	r28
    613a:	df 93       	push	r29
    613c:	8c 01       	movw	r16, r24
    613e:	eb 01       	movw	r28, r22
    6140:	8b 81       	ldd	r24, Y+3	; 0x03
    6142:	81 ff       	sbrs	r24, 1
    6144:	1b c0       	rjmp	.+54     	; 0x617c <fputc+0x48>
    6146:	82 ff       	sbrs	r24, 2
    6148:	0d c0       	rjmp	.+26     	; 0x6164 <fputc+0x30>
    614a:	2e 81       	ldd	r18, Y+6	; 0x06
    614c:	3f 81       	ldd	r19, Y+7	; 0x07
    614e:	8c 81       	ldd	r24, Y+4	; 0x04
    6150:	9d 81       	ldd	r25, Y+5	; 0x05
    6152:	28 17       	cp	r18, r24
    6154:	39 07       	cpc	r19, r25
    6156:	64 f4       	brge	.+24     	; 0x6170 <fputc+0x3c>
    6158:	e8 81       	ld	r30, Y
    615a:	f9 81       	ldd	r31, Y+1	; 0x01
    615c:	01 93       	st	Z+, r16
    615e:	f9 83       	std	Y+1, r31	; 0x01
    6160:	e8 83       	st	Y, r30
    6162:	06 c0       	rjmp	.+12     	; 0x6170 <fputc+0x3c>
    6164:	e8 85       	ldd	r30, Y+8	; 0x08
    6166:	f9 85       	ldd	r31, Y+9	; 0x09
    6168:	80 2f       	mov	r24, r16
    616a:	09 95       	icall
    616c:	89 2b       	or	r24, r25
    616e:	31 f4       	brne	.+12     	; 0x617c <fputc+0x48>
    6170:	8e 81       	ldd	r24, Y+6	; 0x06
    6172:	9f 81       	ldd	r25, Y+7	; 0x07
    6174:	01 96       	adiw	r24, 0x01	; 1
    6176:	9f 83       	std	Y+7, r25	; 0x07
    6178:	8e 83       	std	Y+6, r24	; 0x06
    617a:	02 c0       	rjmp	.+4      	; 0x6180 <fputc+0x4c>
    617c:	0f ef       	ldi	r16, 0xFF	; 255
    617e:	1f ef       	ldi	r17, 0xFF	; 255
    6180:	c8 01       	movw	r24, r16
    6182:	df 91       	pop	r29
    6184:	cf 91       	pop	r28
    6186:	1f 91       	pop	r17
    6188:	0f 91       	pop	r16
    618a:	08 95       	ret

0000618c <__ultoa_invert>:
    618c:	fa 01       	movw	r30, r20
    618e:	aa 27       	eor	r26, r26
    6190:	28 30       	cpi	r18, 0x08	; 8
    6192:	51 f1       	breq	.+84     	; 0x61e8 <__ultoa_invert+0x5c>
    6194:	20 31       	cpi	r18, 0x10	; 16
    6196:	81 f1       	breq	.+96     	; 0x61f8 <__ultoa_invert+0x6c>
    6198:	e8 94       	clt
    619a:	6f 93       	push	r22
    619c:	6e 7f       	andi	r22, 0xFE	; 254
    619e:	6e 5f       	subi	r22, 0xFE	; 254
    61a0:	7f 4f       	sbci	r23, 0xFF	; 255
    61a2:	8f 4f       	sbci	r24, 0xFF	; 255
    61a4:	9f 4f       	sbci	r25, 0xFF	; 255
    61a6:	af 4f       	sbci	r26, 0xFF	; 255
    61a8:	b1 e0       	ldi	r27, 0x01	; 1
    61aa:	3e d0       	rcall	.+124    	; 0x6228 <__ultoa_invert+0x9c>
    61ac:	b4 e0       	ldi	r27, 0x04	; 4
    61ae:	3c d0       	rcall	.+120    	; 0x6228 <__ultoa_invert+0x9c>
    61b0:	67 0f       	add	r22, r23
    61b2:	78 1f       	adc	r23, r24
    61b4:	89 1f       	adc	r24, r25
    61b6:	9a 1f       	adc	r25, r26
    61b8:	a1 1d       	adc	r26, r1
    61ba:	68 0f       	add	r22, r24
    61bc:	79 1f       	adc	r23, r25
    61be:	8a 1f       	adc	r24, r26
    61c0:	91 1d       	adc	r25, r1
    61c2:	a1 1d       	adc	r26, r1
    61c4:	6a 0f       	add	r22, r26
    61c6:	71 1d       	adc	r23, r1
    61c8:	81 1d       	adc	r24, r1
    61ca:	91 1d       	adc	r25, r1
    61cc:	a1 1d       	adc	r26, r1
    61ce:	20 d0       	rcall	.+64     	; 0x6210 <__ultoa_invert+0x84>
    61d0:	09 f4       	brne	.+2      	; 0x61d4 <__ultoa_invert+0x48>
    61d2:	68 94       	set
    61d4:	3f 91       	pop	r19
    61d6:	2a e0       	ldi	r18, 0x0A	; 10
    61d8:	26 9f       	mul	r18, r22
    61da:	11 24       	eor	r1, r1
    61dc:	30 19       	sub	r19, r0
    61de:	30 5d       	subi	r19, 0xD0	; 208
    61e0:	31 93       	st	Z+, r19
    61e2:	de f6       	brtc	.-74     	; 0x619a <__ultoa_invert+0xe>
    61e4:	cf 01       	movw	r24, r30
    61e6:	08 95       	ret
    61e8:	46 2f       	mov	r20, r22
    61ea:	47 70       	andi	r20, 0x07	; 7
    61ec:	40 5d       	subi	r20, 0xD0	; 208
    61ee:	41 93       	st	Z+, r20
    61f0:	b3 e0       	ldi	r27, 0x03	; 3
    61f2:	0f d0       	rcall	.+30     	; 0x6212 <__ultoa_invert+0x86>
    61f4:	c9 f7       	brne	.-14     	; 0x61e8 <__ultoa_invert+0x5c>
    61f6:	f6 cf       	rjmp	.-20     	; 0x61e4 <__ultoa_invert+0x58>
    61f8:	46 2f       	mov	r20, r22
    61fa:	4f 70       	andi	r20, 0x0F	; 15
    61fc:	40 5d       	subi	r20, 0xD0	; 208
    61fe:	4a 33       	cpi	r20, 0x3A	; 58
    6200:	18 f0       	brcs	.+6      	; 0x6208 <__ultoa_invert+0x7c>
    6202:	49 5d       	subi	r20, 0xD9	; 217
    6204:	31 fd       	sbrc	r19, 1
    6206:	40 52       	subi	r20, 0x20	; 32
    6208:	41 93       	st	Z+, r20
    620a:	02 d0       	rcall	.+4      	; 0x6210 <__ultoa_invert+0x84>
    620c:	a9 f7       	brne	.-22     	; 0x61f8 <__ultoa_invert+0x6c>
    620e:	ea cf       	rjmp	.-44     	; 0x61e4 <__ultoa_invert+0x58>
    6210:	b4 e0       	ldi	r27, 0x04	; 4
    6212:	a6 95       	lsr	r26
    6214:	97 95       	ror	r25
    6216:	87 95       	ror	r24
    6218:	77 95       	ror	r23
    621a:	67 95       	ror	r22
    621c:	ba 95       	dec	r27
    621e:	c9 f7       	brne	.-14     	; 0x6212 <__ultoa_invert+0x86>
    6220:	00 97       	sbiw	r24, 0x00	; 0
    6222:	61 05       	cpc	r22, r1
    6224:	71 05       	cpc	r23, r1
    6226:	08 95       	ret
    6228:	9b 01       	movw	r18, r22
    622a:	ac 01       	movw	r20, r24
    622c:	0a 2e       	mov	r0, r26
    622e:	06 94       	lsr	r0
    6230:	57 95       	ror	r21
    6232:	47 95       	ror	r20
    6234:	37 95       	ror	r19
    6236:	27 95       	ror	r18
    6238:	ba 95       	dec	r27
    623a:	c9 f7       	brne	.-14     	; 0x622e <__ultoa_invert+0xa2>
    623c:	62 0f       	add	r22, r18
    623e:	73 1f       	adc	r23, r19
    6240:	84 1f       	adc	r24, r20
    6242:	95 1f       	adc	r25, r21
    6244:	a0 1d       	adc	r26, r0
    6246:	08 95       	ret

00006248 <_exit>:
    6248:	f8 94       	cli

0000624a <__stop_program>:
    624a:	ff cf       	rjmp	.-2      	; 0x624a <__stop_program>
