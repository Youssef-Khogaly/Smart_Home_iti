
Room.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003f30  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000016e  00800060  00003f30  00003fc4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002b  008001ce  008001ce  00004132  2**0
                  ALLOC
  3 .stab         00003c60  00000000  00000000  00004134  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002606  00000000  00000000  00007d94  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  0000a39a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000214  00000000  00000000  0000a55a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002612  00000000  00000000  0000a76e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014ce  00000000  00000000  0000cd80  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000130b  00000000  00000000  0000e24e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  0000f55c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000307  00000000  00000000  0000f73c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a1a  00000000  00000000  0000fa43  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0001045d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 e7 0b 	jmp	0x17ce	; 0x17ce <__vector_1>
       8:	0c 94 1a 0c 	jmp	0x1834	; 0x1834 <__vector_2>
       c:	0c 94 4d 0c 	jmp	0x189a	; 0x189a <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 4f 08 	jmp	0x109e	; 0x109e <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 16 10 	jmp	0x202c	; 0x202c <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e3       	ldi	r30, 0x30	; 48
      68:	ff e3       	ldi	r31, 0x3F	; 63
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 3c       	cpi	r26, 0xCE	; 206
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ae ec       	ldi	r26, 0xCE	; 206
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 3f       	cpi	r26, 0xF9	; 249
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 fc 1b 	call	0x37f8	; 0x37f8 <main>
      8a:	0c 94 96 1f 	jmp	0x3f2c	; 0x3f2c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 5f 1f 	jmp	0x3ebe	; 0x3ebe <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 7b 1f 	jmp	0x3ef6	; 0x3ef6 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 6b 1f 	jmp	0x3ed6	; 0x3ed6 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 87 1f 	jmp	0x3f0e	; 0x3f0e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 6b 1f 	jmp	0x3ed6	; 0x3ed6 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 87 1f 	jmp	0x3f0e	; 0x3f0e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 5f 1f 	jmp	0x3ebe	; 0x3ebe <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 7b 1f 	jmp	0x3ef6	; 0x3ef6 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 67 1f 	jmp	0x3ece	; 0x3ece <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 83 1f 	jmp	0x3f06	; 0x3f06 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 6b 1f 	jmp	0x3ed6	; 0x3ed6 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 87 1f 	jmp	0x3f0e	; 0x3f0e <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 6b 1f 	jmp	0x3ed6	; 0x3ed6 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 87 1f 	jmp	0x3f0e	; 0x3f0e <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 6b 1f 	jmp	0x3ed6	; 0x3ed6 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 87 1f 	jmp	0x3f0e	; 0x3f0e <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 68 1f 	jmp	0x3ed0	; 0x3ed0 <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 84 1f 	jmp	0x3f08	; 0x3f08 <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 6f 1f 	jmp	0x3ede	; 0x3ede <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 8b 1f 	jmp	0x3f16	; 0x3f16 <__epilogue_restores__+0x20>

00000a0e <__floatunsisf>:
     a0e:	a8 e0       	ldi	r26, 0x08	; 8
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	ed e0       	ldi	r30, 0x0D	; 13
     a14:	f5 e0       	ldi	r31, 0x05	; 5
     a16:	0c 94 67 1f 	jmp	0x3ece	; 0x3ece <__prologue_saves__+0x10>
     a1a:	7b 01       	movw	r14, r22
     a1c:	8c 01       	movw	r16, r24
     a1e:	61 15       	cp	r22, r1
     a20:	71 05       	cpc	r23, r1
     a22:	81 05       	cpc	r24, r1
     a24:	91 05       	cpc	r25, r1
     a26:	19 f4       	brne	.+6      	; 0xa2e <__floatunsisf+0x20>
     a28:	82 e0       	ldi	r24, 0x02	; 2
     a2a:	89 83       	std	Y+1, r24	; 0x01
     a2c:	60 c0       	rjmp	.+192    	; 0xaee <__floatunsisf+0xe0>
     a2e:	83 e0       	ldi	r24, 0x03	; 3
     a30:	89 83       	std	Y+1, r24	; 0x01
     a32:	8e e1       	ldi	r24, 0x1E	; 30
     a34:	c8 2e       	mov	r12, r24
     a36:	d1 2c       	mov	r13, r1
     a38:	dc 82       	std	Y+4, r13	; 0x04
     a3a:	cb 82       	std	Y+3, r12	; 0x03
     a3c:	ed 82       	std	Y+5, r14	; 0x05
     a3e:	fe 82       	std	Y+6, r15	; 0x06
     a40:	0f 83       	std	Y+7, r16	; 0x07
     a42:	18 87       	std	Y+8, r17	; 0x08
     a44:	c8 01       	movw	r24, r16
     a46:	b7 01       	movw	r22, r14
     a48:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     a4c:	fc 01       	movw	r30, r24
     a4e:	31 97       	sbiw	r30, 0x01	; 1
     a50:	f7 ff       	sbrs	r31, 7
     a52:	3b c0       	rjmp	.+118    	; 0xaca <__floatunsisf+0xbc>
     a54:	22 27       	eor	r18, r18
     a56:	33 27       	eor	r19, r19
     a58:	2e 1b       	sub	r18, r30
     a5a:	3f 0b       	sbc	r19, r31
     a5c:	57 01       	movw	r10, r14
     a5e:	68 01       	movw	r12, r16
     a60:	02 2e       	mov	r0, r18
     a62:	04 c0       	rjmp	.+8      	; 0xa6c <__floatunsisf+0x5e>
     a64:	d6 94       	lsr	r13
     a66:	c7 94       	ror	r12
     a68:	b7 94       	ror	r11
     a6a:	a7 94       	ror	r10
     a6c:	0a 94       	dec	r0
     a6e:	d2 f7       	brpl	.-12     	; 0xa64 <__floatunsisf+0x56>
     a70:	40 e0       	ldi	r20, 0x00	; 0
     a72:	50 e0       	ldi	r21, 0x00	; 0
     a74:	60 e0       	ldi	r22, 0x00	; 0
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	a0 e0       	ldi	r26, 0x00	; 0
     a7e:	b0 e0       	ldi	r27, 0x00	; 0
     a80:	04 c0       	rjmp	.+8      	; 0xa8a <__floatunsisf+0x7c>
     a82:	88 0f       	add	r24, r24
     a84:	99 1f       	adc	r25, r25
     a86:	aa 1f       	adc	r26, r26
     a88:	bb 1f       	adc	r27, r27
     a8a:	2a 95       	dec	r18
     a8c:	d2 f7       	brpl	.-12     	; 0xa82 <__floatunsisf+0x74>
     a8e:	01 97       	sbiw	r24, 0x01	; 1
     a90:	a1 09       	sbc	r26, r1
     a92:	b1 09       	sbc	r27, r1
     a94:	8e 21       	and	r24, r14
     a96:	9f 21       	and	r25, r15
     a98:	a0 23       	and	r26, r16
     a9a:	b1 23       	and	r27, r17
     a9c:	00 97       	sbiw	r24, 0x00	; 0
     a9e:	a1 05       	cpc	r26, r1
     aa0:	b1 05       	cpc	r27, r1
     aa2:	21 f0       	breq	.+8      	; 0xaac <__floatunsisf+0x9e>
     aa4:	41 e0       	ldi	r20, 0x01	; 1
     aa6:	50 e0       	ldi	r21, 0x00	; 0
     aa8:	60 e0       	ldi	r22, 0x00	; 0
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	4a 29       	or	r20, r10
     aae:	5b 29       	or	r21, r11
     ab0:	6c 29       	or	r22, r12
     ab2:	7d 29       	or	r23, r13
     ab4:	4d 83       	std	Y+5, r20	; 0x05
     ab6:	5e 83       	std	Y+6, r21	; 0x06
     ab8:	6f 83       	std	Y+7, r22	; 0x07
     aba:	78 87       	std	Y+8, r23	; 0x08
     abc:	8e e1       	ldi	r24, 0x1E	; 30
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	8e 1b       	sub	r24, r30
     ac2:	9f 0b       	sbc	r25, r31
     ac4:	9c 83       	std	Y+4, r25	; 0x04
     ac6:	8b 83       	std	Y+3, r24	; 0x03
     ac8:	12 c0       	rjmp	.+36     	; 0xaee <__floatunsisf+0xe0>
     aca:	30 97       	sbiw	r30, 0x00	; 0
     acc:	81 f0       	breq	.+32     	; 0xaee <__floatunsisf+0xe0>
     ace:	0e 2e       	mov	r0, r30
     ad0:	04 c0       	rjmp	.+8      	; 0xada <__floatunsisf+0xcc>
     ad2:	ee 0c       	add	r14, r14
     ad4:	ff 1c       	adc	r15, r15
     ad6:	00 1f       	adc	r16, r16
     ad8:	11 1f       	adc	r17, r17
     ada:	0a 94       	dec	r0
     adc:	d2 f7       	brpl	.-12     	; 0xad2 <__floatunsisf+0xc4>
     ade:	ed 82       	std	Y+5, r14	; 0x05
     ae0:	fe 82       	std	Y+6, r15	; 0x06
     ae2:	0f 83       	std	Y+7, r16	; 0x07
     ae4:	18 87       	std	Y+8, r17	; 0x08
     ae6:	ce 1a       	sub	r12, r30
     ae8:	df 0a       	sbc	r13, r31
     aea:	dc 82       	std	Y+4, r13	; 0x04
     aec:	cb 82       	std	Y+3, r12	; 0x03
     aee:	1a 82       	std	Y+2, r1	; 0x02
     af0:	ce 01       	movw	r24, r28
     af2:	01 96       	adiw	r24, 0x01	; 1
     af4:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     af8:	28 96       	adiw	r28, 0x08	; 8
     afa:	ea e0       	ldi	r30, 0x0A	; 10
     afc:	0c 94 83 1f 	jmp	0x3f06	; 0x3f06 <__epilogue_restores__+0x10>

00000b00 <__clzsi2>:
     b00:	ef 92       	push	r14
     b02:	ff 92       	push	r15
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	7b 01       	movw	r14, r22
     b0a:	8c 01       	movw	r16, r24
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	e8 16       	cp	r14, r24
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	f8 06       	cpc	r15, r24
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	08 07       	cpc	r16, r24
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	18 07       	cpc	r17, r24
     b1c:	88 f4       	brcc	.+34     	; 0xb40 <__clzsi2+0x40>
     b1e:	8f ef       	ldi	r24, 0xFF	; 255
     b20:	e8 16       	cp	r14, r24
     b22:	f1 04       	cpc	r15, r1
     b24:	01 05       	cpc	r16, r1
     b26:	11 05       	cpc	r17, r1
     b28:	31 f0       	breq	.+12     	; 0xb36 <__clzsi2+0x36>
     b2a:	28 f0       	brcs	.+10     	; 0xb36 <__clzsi2+0x36>
     b2c:	88 e0       	ldi	r24, 0x08	; 8
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	a0 e0       	ldi	r26, 0x00	; 0
     b32:	b0 e0       	ldi	r27, 0x00	; 0
     b34:	17 c0       	rjmp	.+46     	; 0xb64 <__clzsi2+0x64>
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	12 c0       	rjmp	.+36     	; 0xb64 <__clzsi2+0x64>
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	e8 16       	cp	r14, r24
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	f8 06       	cpc	r15, r24
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	08 07       	cpc	r16, r24
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	18 07       	cpc	r17, r24
     b50:	28 f0       	brcs	.+10     	; 0xb5c <__clzsi2+0x5c>
     b52:	88 e1       	ldi	r24, 0x18	; 24
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	a0 e0       	ldi	r26, 0x00	; 0
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	04 c0       	rjmp	.+8      	; 0xb64 <__clzsi2+0x64>
     b5c:	80 e1       	ldi	r24, 0x10	; 16
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	20 e2       	ldi	r18, 0x20	; 32
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	40 e0       	ldi	r20, 0x00	; 0
     b6a:	50 e0       	ldi	r21, 0x00	; 0
     b6c:	28 1b       	sub	r18, r24
     b6e:	39 0b       	sbc	r19, r25
     b70:	4a 0b       	sbc	r20, r26
     b72:	5b 0b       	sbc	r21, r27
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__clzsi2+0x7e>
     b76:	16 95       	lsr	r17
     b78:	07 95       	ror	r16
     b7a:	f7 94       	ror	r15
     b7c:	e7 94       	ror	r14
     b7e:	8a 95       	dec	r24
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__clzsi2+0x76>
     b82:	f7 01       	movw	r30, r14
     b84:	e8 59       	subi	r30, 0x98	; 152
     b86:	ff 4f       	sbci	r31, 0xFF	; 255
     b88:	80 81       	ld	r24, Z
     b8a:	28 1b       	sub	r18, r24
     b8c:	31 09       	sbc	r19, r1
     b8e:	41 09       	sbc	r20, r1
     b90:	51 09       	sbc	r21, r1
     b92:	c9 01       	movw	r24, r18
     b94:	1f 91       	pop	r17
     b96:	0f 91       	pop	r16
     b98:	ff 90       	pop	r15
     b9a:	ef 90       	pop	r14
     b9c:	08 95       	ret

00000b9e <__pack_f>:
     b9e:	df 92       	push	r13
     ba0:	ef 92       	push	r14
     ba2:	ff 92       	push	r15
     ba4:	0f 93       	push	r16
     ba6:	1f 93       	push	r17
     ba8:	fc 01       	movw	r30, r24
     baa:	e4 80       	ldd	r14, Z+4	; 0x04
     bac:	f5 80       	ldd	r15, Z+5	; 0x05
     bae:	06 81       	ldd	r16, Z+6	; 0x06
     bb0:	17 81       	ldd	r17, Z+7	; 0x07
     bb2:	d1 80       	ldd	r13, Z+1	; 0x01
     bb4:	80 81       	ld	r24, Z
     bb6:	82 30       	cpi	r24, 0x02	; 2
     bb8:	48 f4       	brcc	.+18     	; 0xbcc <__pack_f+0x2e>
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	a0 e1       	ldi	r26, 0x10	; 16
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e8 2a       	or	r14, r24
     bc4:	f9 2a       	or	r15, r25
     bc6:	0a 2b       	or	r16, r26
     bc8:	1b 2b       	or	r17, r27
     bca:	a5 c0       	rjmp	.+330    	; 0xd16 <__pack_f+0x178>
     bcc:	84 30       	cpi	r24, 0x04	; 4
     bce:	09 f4       	brne	.+2      	; 0xbd2 <__pack_f+0x34>
     bd0:	9f c0       	rjmp	.+318    	; 0xd10 <__pack_f+0x172>
     bd2:	82 30       	cpi	r24, 0x02	; 2
     bd4:	21 f4       	brne	.+8      	; 0xbde <__pack_f+0x40>
     bd6:	ee 24       	eor	r14, r14
     bd8:	ff 24       	eor	r15, r15
     bda:	87 01       	movw	r16, r14
     bdc:	05 c0       	rjmp	.+10     	; 0xbe8 <__pack_f+0x4a>
     bde:	e1 14       	cp	r14, r1
     be0:	f1 04       	cpc	r15, r1
     be2:	01 05       	cpc	r16, r1
     be4:	11 05       	cpc	r17, r1
     be6:	19 f4       	brne	.+6      	; 0xbee <__pack_f+0x50>
     be8:	e0 e0       	ldi	r30, 0x00	; 0
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	96 c0       	rjmp	.+300    	; 0xd1a <__pack_f+0x17c>
     bee:	62 81       	ldd	r22, Z+2	; 0x02
     bf0:	73 81       	ldd	r23, Z+3	; 0x03
     bf2:	9f ef       	ldi	r25, 0xFF	; 255
     bf4:	62 38       	cpi	r22, 0x82	; 130
     bf6:	79 07       	cpc	r23, r25
     bf8:	0c f0       	brlt	.+2      	; 0xbfc <__pack_f+0x5e>
     bfa:	5b c0       	rjmp	.+182    	; 0xcb2 <__pack_f+0x114>
     bfc:	22 e8       	ldi	r18, 0x82	; 130
     bfe:	3f ef       	ldi	r19, 0xFF	; 255
     c00:	26 1b       	sub	r18, r22
     c02:	37 0b       	sbc	r19, r23
     c04:	2a 31       	cpi	r18, 0x1A	; 26
     c06:	31 05       	cpc	r19, r1
     c08:	2c f0       	brlt	.+10     	; 0xc14 <__pack_f+0x76>
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	40 e0       	ldi	r20, 0x00	; 0
     c10:	50 e0       	ldi	r21, 0x00	; 0
     c12:	2a c0       	rjmp	.+84     	; 0xc68 <__pack_f+0xca>
     c14:	b8 01       	movw	r22, r16
     c16:	a7 01       	movw	r20, r14
     c18:	02 2e       	mov	r0, r18
     c1a:	04 c0       	rjmp	.+8      	; 0xc24 <__pack_f+0x86>
     c1c:	76 95       	lsr	r23
     c1e:	67 95       	ror	r22
     c20:	57 95       	ror	r21
     c22:	47 95       	ror	r20
     c24:	0a 94       	dec	r0
     c26:	d2 f7       	brpl	.-12     	; 0xc1c <__pack_f+0x7e>
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	a0 e0       	ldi	r26, 0x00	; 0
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	04 c0       	rjmp	.+8      	; 0xc3a <__pack_f+0x9c>
     c32:	88 0f       	add	r24, r24
     c34:	99 1f       	adc	r25, r25
     c36:	aa 1f       	adc	r26, r26
     c38:	bb 1f       	adc	r27, r27
     c3a:	2a 95       	dec	r18
     c3c:	d2 f7       	brpl	.-12     	; 0xc32 <__pack_f+0x94>
     c3e:	01 97       	sbiw	r24, 0x01	; 1
     c40:	a1 09       	sbc	r26, r1
     c42:	b1 09       	sbc	r27, r1
     c44:	8e 21       	and	r24, r14
     c46:	9f 21       	and	r25, r15
     c48:	a0 23       	and	r26, r16
     c4a:	b1 23       	and	r27, r17
     c4c:	00 97       	sbiw	r24, 0x00	; 0
     c4e:	a1 05       	cpc	r26, r1
     c50:	b1 05       	cpc	r27, r1
     c52:	21 f0       	breq	.+8      	; 0xc5c <__pack_f+0xbe>
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	a0 e0       	ldi	r26, 0x00	; 0
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	9a 01       	movw	r18, r20
     c5e:	ab 01       	movw	r20, r22
     c60:	28 2b       	or	r18, r24
     c62:	39 2b       	or	r19, r25
     c64:	4a 2b       	or	r20, r26
     c66:	5b 2b       	or	r21, r27
     c68:	da 01       	movw	r26, r20
     c6a:	c9 01       	movw	r24, r18
     c6c:	8f 77       	andi	r24, 0x7F	; 127
     c6e:	90 70       	andi	r25, 0x00	; 0
     c70:	a0 70       	andi	r26, 0x00	; 0
     c72:	b0 70       	andi	r27, 0x00	; 0
     c74:	80 34       	cpi	r24, 0x40	; 64
     c76:	91 05       	cpc	r25, r1
     c78:	a1 05       	cpc	r26, r1
     c7a:	b1 05       	cpc	r27, r1
     c7c:	39 f4       	brne	.+14     	; 0xc8c <__pack_f+0xee>
     c7e:	27 ff       	sbrs	r18, 7
     c80:	09 c0       	rjmp	.+18     	; 0xc94 <__pack_f+0xf6>
     c82:	20 5c       	subi	r18, 0xC0	; 192
     c84:	3f 4f       	sbci	r19, 0xFF	; 255
     c86:	4f 4f       	sbci	r20, 0xFF	; 255
     c88:	5f 4f       	sbci	r21, 0xFF	; 255
     c8a:	04 c0       	rjmp	.+8      	; 0xc94 <__pack_f+0xf6>
     c8c:	21 5c       	subi	r18, 0xC1	; 193
     c8e:	3f 4f       	sbci	r19, 0xFF	; 255
     c90:	4f 4f       	sbci	r20, 0xFF	; 255
     c92:	5f 4f       	sbci	r21, 0xFF	; 255
     c94:	e0 e0       	ldi	r30, 0x00	; 0
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	20 30       	cpi	r18, 0x00	; 0
     c9a:	a0 e0       	ldi	r26, 0x00	; 0
     c9c:	3a 07       	cpc	r19, r26
     c9e:	a0 e0       	ldi	r26, 0x00	; 0
     ca0:	4a 07       	cpc	r20, r26
     ca2:	a0 e4       	ldi	r26, 0x40	; 64
     ca4:	5a 07       	cpc	r21, r26
     ca6:	10 f0       	brcs	.+4      	; 0xcac <__pack_f+0x10e>
     ca8:	e1 e0       	ldi	r30, 0x01	; 1
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	79 01       	movw	r14, r18
     cae:	8a 01       	movw	r16, r20
     cb0:	27 c0       	rjmp	.+78     	; 0xd00 <__pack_f+0x162>
     cb2:	60 38       	cpi	r22, 0x80	; 128
     cb4:	71 05       	cpc	r23, r1
     cb6:	64 f5       	brge	.+88     	; 0xd10 <__pack_f+0x172>
     cb8:	fb 01       	movw	r30, r22
     cba:	e1 58       	subi	r30, 0x81	; 129
     cbc:	ff 4f       	sbci	r31, 0xFF	; 255
     cbe:	d8 01       	movw	r26, r16
     cc0:	c7 01       	movw	r24, r14
     cc2:	8f 77       	andi	r24, 0x7F	; 127
     cc4:	90 70       	andi	r25, 0x00	; 0
     cc6:	a0 70       	andi	r26, 0x00	; 0
     cc8:	b0 70       	andi	r27, 0x00	; 0
     cca:	80 34       	cpi	r24, 0x40	; 64
     ccc:	91 05       	cpc	r25, r1
     cce:	a1 05       	cpc	r26, r1
     cd0:	b1 05       	cpc	r27, r1
     cd2:	39 f4       	brne	.+14     	; 0xce2 <__pack_f+0x144>
     cd4:	e7 fe       	sbrs	r14, 7
     cd6:	0d c0       	rjmp	.+26     	; 0xcf2 <__pack_f+0x154>
     cd8:	80 e4       	ldi	r24, 0x40	; 64
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	a0 e0       	ldi	r26, 0x00	; 0
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	04 c0       	rjmp	.+8      	; 0xcea <__pack_f+0x14c>
     ce2:	8f e3       	ldi	r24, 0x3F	; 63
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	a0 e0       	ldi	r26, 0x00	; 0
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e8 0e       	add	r14, r24
     cec:	f9 1e       	adc	r15, r25
     cee:	0a 1f       	adc	r16, r26
     cf0:	1b 1f       	adc	r17, r27
     cf2:	17 ff       	sbrs	r17, 7
     cf4:	05 c0       	rjmp	.+10     	; 0xd00 <__pack_f+0x162>
     cf6:	16 95       	lsr	r17
     cf8:	07 95       	ror	r16
     cfa:	f7 94       	ror	r15
     cfc:	e7 94       	ror	r14
     cfe:	31 96       	adiw	r30, 0x01	; 1
     d00:	87 e0       	ldi	r24, 0x07	; 7
     d02:	16 95       	lsr	r17
     d04:	07 95       	ror	r16
     d06:	f7 94       	ror	r15
     d08:	e7 94       	ror	r14
     d0a:	8a 95       	dec	r24
     d0c:	d1 f7       	brne	.-12     	; 0xd02 <__pack_f+0x164>
     d0e:	05 c0       	rjmp	.+10     	; 0xd1a <__pack_f+0x17c>
     d10:	ee 24       	eor	r14, r14
     d12:	ff 24       	eor	r15, r15
     d14:	87 01       	movw	r16, r14
     d16:	ef ef       	ldi	r30, 0xFF	; 255
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	6e 2f       	mov	r22, r30
     d1c:	67 95       	ror	r22
     d1e:	66 27       	eor	r22, r22
     d20:	67 95       	ror	r22
     d22:	90 2f       	mov	r25, r16
     d24:	9f 77       	andi	r25, 0x7F	; 127
     d26:	d7 94       	ror	r13
     d28:	dd 24       	eor	r13, r13
     d2a:	d7 94       	ror	r13
     d2c:	8e 2f       	mov	r24, r30
     d2e:	86 95       	lsr	r24
     d30:	49 2f       	mov	r20, r25
     d32:	46 2b       	or	r20, r22
     d34:	58 2f       	mov	r21, r24
     d36:	5d 29       	or	r21, r13
     d38:	b7 01       	movw	r22, r14
     d3a:	ca 01       	movw	r24, r20
     d3c:	1f 91       	pop	r17
     d3e:	0f 91       	pop	r16
     d40:	ff 90       	pop	r15
     d42:	ef 90       	pop	r14
     d44:	df 90       	pop	r13
     d46:	08 95       	ret

00000d48 <__unpack_f>:
     d48:	fc 01       	movw	r30, r24
     d4a:	db 01       	movw	r26, r22
     d4c:	40 81       	ld	r20, Z
     d4e:	51 81       	ldd	r21, Z+1	; 0x01
     d50:	22 81       	ldd	r18, Z+2	; 0x02
     d52:	62 2f       	mov	r22, r18
     d54:	6f 77       	andi	r22, 0x7F	; 127
     d56:	70 e0       	ldi	r23, 0x00	; 0
     d58:	22 1f       	adc	r18, r18
     d5a:	22 27       	eor	r18, r18
     d5c:	22 1f       	adc	r18, r18
     d5e:	93 81       	ldd	r25, Z+3	; 0x03
     d60:	89 2f       	mov	r24, r25
     d62:	88 0f       	add	r24, r24
     d64:	82 2b       	or	r24, r18
     d66:	28 2f       	mov	r18, r24
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	99 1f       	adc	r25, r25
     d6c:	99 27       	eor	r25, r25
     d6e:	99 1f       	adc	r25, r25
     d70:	11 96       	adiw	r26, 0x01	; 1
     d72:	9c 93       	st	X, r25
     d74:	11 97       	sbiw	r26, 0x01	; 1
     d76:	21 15       	cp	r18, r1
     d78:	31 05       	cpc	r19, r1
     d7a:	a9 f5       	brne	.+106    	; 0xde6 <__unpack_f+0x9e>
     d7c:	41 15       	cp	r20, r1
     d7e:	51 05       	cpc	r21, r1
     d80:	61 05       	cpc	r22, r1
     d82:	71 05       	cpc	r23, r1
     d84:	11 f4       	brne	.+4      	; 0xd8a <__unpack_f+0x42>
     d86:	82 e0       	ldi	r24, 0x02	; 2
     d88:	37 c0       	rjmp	.+110    	; 0xdf8 <__unpack_f+0xb0>
     d8a:	82 e8       	ldi	r24, 0x82	; 130
     d8c:	9f ef       	ldi	r25, 0xFF	; 255
     d8e:	13 96       	adiw	r26, 0x03	; 3
     d90:	9c 93       	st	X, r25
     d92:	8e 93       	st	-X, r24
     d94:	12 97       	sbiw	r26, 0x02	; 2
     d96:	9a 01       	movw	r18, r20
     d98:	ab 01       	movw	r20, r22
     d9a:	67 e0       	ldi	r22, 0x07	; 7
     d9c:	22 0f       	add	r18, r18
     d9e:	33 1f       	adc	r19, r19
     da0:	44 1f       	adc	r20, r20
     da2:	55 1f       	adc	r21, r21
     da4:	6a 95       	dec	r22
     da6:	d1 f7       	brne	.-12     	; 0xd9c <__unpack_f+0x54>
     da8:	83 e0       	ldi	r24, 0x03	; 3
     daa:	8c 93       	st	X, r24
     dac:	0d c0       	rjmp	.+26     	; 0xdc8 <__unpack_f+0x80>
     dae:	22 0f       	add	r18, r18
     db0:	33 1f       	adc	r19, r19
     db2:	44 1f       	adc	r20, r20
     db4:	55 1f       	adc	r21, r21
     db6:	12 96       	adiw	r26, 0x02	; 2
     db8:	8d 91       	ld	r24, X+
     dba:	9c 91       	ld	r25, X
     dbc:	13 97       	sbiw	r26, 0x03	; 3
     dbe:	01 97       	sbiw	r24, 0x01	; 1
     dc0:	13 96       	adiw	r26, 0x03	; 3
     dc2:	9c 93       	st	X, r25
     dc4:	8e 93       	st	-X, r24
     dc6:	12 97       	sbiw	r26, 0x02	; 2
     dc8:	20 30       	cpi	r18, 0x00	; 0
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	38 07       	cpc	r19, r24
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	48 07       	cpc	r20, r24
     dd2:	80 e4       	ldi	r24, 0x40	; 64
     dd4:	58 07       	cpc	r21, r24
     dd6:	58 f3       	brcs	.-42     	; 0xdae <__unpack_f+0x66>
     dd8:	14 96       	adiw	r26, 0x04	; 4
     dda:	2d 93       	st	X+, r18
     ddc:	3d 93       	st	X+, r19
     dde:	4d 93       	st	X+, r20
     de0:	5c 93       	st	X, r21
     de2:	17 97       	sbiw	r26, 0x07	; 7
     de4:	08 95       	ret
     de6:	2f 3f       	cpi	r18, 0xFF	; 255
     de8:	31 05       	cpc	r19, r1
     dea:	79 f4       	brne	.+30     	; 0xe0a <__unpack_f+0xc2>
     dec:	41 15       	cp	r20, r1
     dee:	51 05       	cpc	r21, r1
     df0:	61 05       	cpc	r22, r1
     df2:	71 05       	cpc	r23, r1
     df4:	19 f4       	brne	.+6      	; 0xdfc <__unpack_f+0xb4>
     df6:	84 e0       	ldi	r24, 0x04	; 4
     df8:	8c 93       	st	X, r24
     dfa:	08 95       	ret
     dfc:	64 ff       	sbrs	r22, 4
     dfe:	03 c0       	rjmp	.+6      	; 0xe06 <__unpack_f+0xbe>
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	8c 93       	st	X, r24
     e04:	12 c0       	rjmp	.+36     	; 0xe2a <__unpack_f+0xe2>
     e06:	1c 92       	st	X, r1
     e08:	10 c0       	rjmp	.+32     	; 0xe2a <__unpack_f+0xe2>
     e0a:	2f 57       	subi	r18, 0x7F	; 127
     e0c:	30 40       	sbci	r19, 0x00	; 0
     e0e:	13 96       	adiw	r26, 0x03	; 3
     e10:	3c 93       	st	X, r19
     e12:	2e 93       	st	-X, r18
     e14:	12 97       	sbiw	r26, 0x02	; 2
     e16:	83 e0       	ldi	r24, 0x03	; 3
     e18:	8c 93       	st	X, r24
     e1a:	87 e0       	ldi	r24, 0x07	; 7
     e1c:	44 0f       	add	r20, r20
     e1e:	55 1f       	adc	r21, r21
     e20:	66 1f       	adc	r22, r22
     e22:	77 1f       	adc	r23, r23
     e24:	8a 95       	dec	r24
     e26:	d1 f7       	brne	.-12     	; 0xe1c <__unpack_f+0xd4>
     e28:	70 64       	ori	r23, 0x40	; 64
     e2a:	14 96       	adiw	r26, 0x04	; 4
     e2c:	4d 93       	st	X+, r20
     e2e:	5d 93       	st	X+, r21
     e30:	6d 93       	st	X+, r22
     e32:	7c 93       	st	X, r23
     e34:	17 97       	sbiw	r26, 0x07	; 7
     e36:	08 95       	ret

00000e38 <__fpcmp_parts_f>:
     e38:	1f 93       	push	r17
     e3a:	dc 01       	movw	r26, r24
     e3c:	fb 01       	movw	r30, r22
     e3e:	9c 91       	ld	r25, X
     e40:	92 30       	cpi	r25, 0x02	; 2
     e42:	08 f4       	brcc	.+2      	; 0xe46 <__fpcmp_parts_f+0xe>
     e44:	47 c0       	rjmp	.+142    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e46:	80 81       	ld	r24, Z
     e48:	82 30       	cpi	r24, 0x02	; 2
     e4a:	08 f4       	brcc	.+2      	; 0xe4e <__fpcmp_parts_f+0x16>
     e4c:	43 c0       	rjmp	.+134    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e4e:	94 30       	cpi	r25, 0x04	; 4
     e50:	51 f4       	brne	.+20     	; 0xe66 <__fpcmp_parts_f+0x2e>
     e52:	11 96       	adiw	r26, 0x01	; 1
     e54:	1c 91       	ld	r17, X
     e56:	84 30       	cpi	r24, 0x04	; 4
     e58:	99 f5       	brne	.+102    	; 0xec0 <__fpcmp_parts_f+0x88>
     e5a:	81 81       	ldd	r24, Z+1	; 0x01
     e5c:	68 2f       	mov	r22, r24
     e5e:	70 e0       	ldi	r23, 0x00	; 0
     e60:	61 1b       	sub	r22, r17
     e62:	71 09       	sbc	r23, r1
     e64:	3f c0       	rjmp	.+126    	; 0xee4 <__fpcmp_parts_f+0xac>
     e66:	84 30       	cpi	r24, 0x04	; 4
     e68:	21 f0       	breq	.+8      	; 0xe72 <__fpcmp_parts_f+0x3a>
     e6a:	92 30       	cpi	r25, 0x02	; 2
     e6c:	31 f4       	brne	.+12     	; 0xe7a <__fpcmp_parts_f+0x42>
     e6e:	82 30       	cpi	r24, 0x02	; 2
     e70:	b9 f1       	breq	.+110    	; 0xee0 <__fpcmp_parts_f+0xa8>
     e72:	81 81       	ldd	r24, Z+1	; 0x01
     e74:	88 23       	and	r24, r24
     e76:	89 f1       	breq	.+98     	; 0xeda <__fpcmp_parts_f+0xa2>
     e78:	2d c0       	rjmp	.+90     	; 0xed4 <__fpcmp_parts_f+0x9c>
     e7a:	11 96       	adiw	r26, 0x01	; 1
     e7c:	1c 91       	ld	r17, X
     e7e:	11 97       	sbiw	r26, 0x01	; 1
     e80:	82 30       	cpi	r24, 0x02	; 2
     e82:	f1 f0       	breq	.+60     	; 0xec0 <__fpcmp_parts_f+0x88>
     e84:	81 81       	ldd	r24, Z+1	; 0x01
     e86:	18 17       	cp	r17, r24
     e88:	d9 f4       	brne	.+54     	; 0xec0 <__fpcmp_parts_f+0x88>
     e8a:	12 96       	adiw	r26, 0x02	; 2
     e8c:	2d 91       	ld	r18, X+
     e8e:	3c 91       	ld	r19, X
     e90:	13 97       	sbiw	r26, 0x03	; 3
     e92:	82 81       	ldd	r24, Z+2	; 0x02
     e94:	93 81       	ldd	r25, Z+3	; 0x03
     e96:	82 17       	cp	r24, r18
     e98:	93 07       	cpc	r25, r19
     e9a:	94 f0       	brlt	.+36     	; 0xec0 <__fpcmp_parts_f+0x88>
     e9c:	28 17       	cp	r18, r24
     e9e:	39 07       	cpc	r19, r25
     ea0:	bc f0       	brlt	.+46     	; 0xed0 <__fpcmp_parts_f+0x98>
     ea2:	14 96       	adiw	r26, 0x04	; 4
     ea4:	8d 91       	ld	r24, X+
     ea6:	9d 91       	ld	r25, X+
     ea8:	0d 90       	ld	r0, X+
     eaa:	bc 91       	ld	r27, X
     eac:	a0 2d       	mov	r26, r0
     eae:	24 81       	ldd	r18, Z+4	; 0x04
     eb0:	35 81       	ldd	r19, Z+5	; 0x05
     eb2:	46 81       	ldd	r20, Z+6	; 0x06
     eb4:	57 81       	ldd	r21, Z+7	; 0x07
     eb6:	28 17       	cp	r18, r24
     eb8:	39 07       	cpc	r19, r25
     eba:	4a 07       	cpc	r20, r26
     ebc:	5b 07       	cpc	r21, r27
     ebe:	18 f4       	brcc	.+6      	; 0xec6 <__fpcmp_parts_f+0x8e>
     ec0:	11 23       	and	r17, r17
     ec2:	41 f0       	breq	.+16     	; 0xed4 <__fpcmp_parts_f+0x9c>
     ec4:	0a c0       	rjmp	.+20     	; 0xeda <__fpcmp_parts_f+0xa2>
     ec6:	82 17       	cp	r24, r18
     ec8:	93 07       	cpc	r25, r19
     eca:	a4 07       	cpc	r26, r20
     ecc:	b5 07       	cpc	r27, r21
     ece:	40 f4       	brcc	.+16     	; 0xee0 <__fpcmp_parts_f+0xa8>
     ed0:	11 23       	and	r17, r17
     ed2:	19 f0       	breq	.+6      	; 0xeda <__fpcmp_parts_f+0xa2>
     ed4:	61 e0       	ldi	r22, 0x01	; 1
     ed6:	70 e0       	ldi	r23, 0x00	; 0
     ed8:	05 c0       	rjmp	.+10     	; 0xee4 <__fpcmp_parts_f+0xac>
     eda:	6f ef       	ldi	r22, 0xFF	; 255
     edc:	7f ef       	ldi	r23, 0xFF	; 255
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <__fpcmp_parts_f+0xac>
     ee0:	60 e0       	ldi	r22, 0x00	; 0
     ee2:	70 e0       	ldi	r23, 0x00	; 0
     ee4:	cb 01       	movw	r24, r22
     ee6:	1f 91       	pop	r17
     ee8:	08 95       	ret

00000eea <UART_VoidInit>:

void __vector_13(void) __attribute__ ((signal,used));

ISR_FuncPtr_t ISR_UAST_RX_CBF = NULL;
void UART_VoidInit(void)
{
     eea:	df 93       	push	r29
     eec:	cf 93       	push	r28
     eee:	cd b7       	in	r28, 0x3d	; 61
     ef0:	de b7       	in	r29, 0x3e	; 62
	// select double speed config
	UART_UCSRA_REG |= (UART_D_TXSPEED_CFG <<  UART_UCSRA_U2X_BIT );
     ef2:	ab e2       	ldi	r26, 0x2B	; 43
     ef4:	b0 e0       	ldi	r27, 0x00	; 0
     ef6:	eb e2       	ldi	r30, 0x2B	; 43
     ef8:	f0 e0       	ldi	r31, 0x00	; 0
     efa:	80 81       	ld	r24, Z
     efc:	8c 93       	st	X, r24

	// enable write to UCSRC
	Set_Bit(UART_UCSRC_REG,UART_UCSRC_URSEL_BIT);
     efe:	a0 e4       	ldi	r26, 0x40	; 64
     f00:	b0 e0       	ldi	r27, 0x00	; 0
     f02:	e0 e4       	ldi	r30, 0x40	; 64
     f04:	f0 e0       	ldi	r31, 0x00	; 0
     f06:	80 81       	ld	r24, Z
     f08:	80 68       	ori	r24, 0x80	; 128
     f0a:	8c 93       	st	X, r24

	//select data lenth
	UART_UCSRB_REG |=  ( (Get_Bit(UART_DATA_LEN_CFG , 2)) << UART_UCSRB_UCSZ2_BIT); //bit2 in data lenth
     f0c:	aa e2       	ldi	r26, 0x2A	; 42
     f0e:	b0 e0       	ldi	r27, 0x00	; 0
     f10:	ea e2       	ldi	r30, 0x2A	; 42
     f12:	f0 e0       	ldi	r31, 0x00	; 0
     f14:	80 81       	ld	r24, Z
     f16:	8c 93       	st	X, r24

	// USCRC CONFIG
	UART_UCSRC_REG = UART_UCSRC_VAL_CFG ;
     f18:	e0 e4       	ldi	r30, 0x40	; 64
     f1a:	f0 e0       	ldi	r31, 0x00	; 0
     f1c:	88 e0       	ldi	r24, 0x08	; 8
     f1e:	80 83       	st	Z, r24

	// access  UBRRH
	Clr_Bit(UART_UCSRC_REG,UART_UCSRC_URSEL_BIT);
     f20:	a0 e4       	ldi	r26, 0x40	; 64
     f22:	b0 e0       	ldi	r27, 0x00	; 0
     f24:	e0 e4       	ldi	r30, 0x40	; 64
     f26:	f0 e0       	ldi	r31, 0x00	; 0
     f28:	80 81       	ld	r24, Z
     f2a:	8f 77       	andi	r24, 0x7F	; 127
     f2c:	8c 93       	st	X, r24

	// select Baud rate
	UART_UBRRL_REG = (u8)UART_BAUDRATE_CFG;
     f2e:	e9 e2       	ldi	r30, 0x29	; 41
     f30:	f0 e0       	ldi	r31, 0x00	; 0
     f32:	83 e3       	ldi	r24, 0x33	; 51
     f34:	80 83       	st	Z, r24
	UART_UBRRH_REG = (u8)(UART_BAUDRATE_CFG>>8);
     f36:	e0 e4       	ldi	r30, 0x40	; 64
     f38:	f0 e0       	ldi	r31, 0x00	; 0
     f3a:	10 82       	st	Z, r1
#if UART_RX_INTERRUPT_CFG == UART_INTERRUPT_FEATUER_ENABLE
	GIE_ENABLE();
     f3c:	af e5       	ldi	r26, 0x5F	; 95
     f3e:	b0 e0       	ldi	r27, 0x00	; 0
     f40:	ef e5       	ldi	r30, 0x5F	; 95
     f42:	f0 e0       	ldi	r31, 0x00	; 0
     f44:	80 81       	ld	r24, Z
     f46:	80 68       	ori	r24, 0x80	; 128
     f48:	8c 93       	st	X, r24
	// enable interrupt on data recived
	UART_UCSRB_REG |= (0x01 << UART_UCSRB_RXCIE_BIT);
     f4a:	aa e2       	ldi	r26, 0x2A	; 42
     f4c:	b0 e0       	ldi	r27, 0x00	; 0
     f4e:	ea e2       	ldi	r30, 0x2A	; 42
     f50:	f0 e0       	ldi	r31, 0x00	; 0
     f52:	80 81       	ld	r24, Z
     f54:	80 68       	ori	r24, 0x80	; 128
     f56:	8c 93       	st	X, r24

#endif
	//rx enable
	UART_UCSRB_REG |= (0x01 << UART_UCSRB_RXEN_BIT);
     f58:	aa e2       	ldi	r26, 0x2A	; 42
     f5a:	b0 e0       	ldi	r27, 0x00	; 0
     f5c:	ea e2       	ldi	r30, 0x2A	; 42
     f5e:	f0 e0       	ldi	r31, 0x00	; 0
     f60:	80 81       	ld	r24, Z
     f62:	80 61       	ori	r24, 0x10	; 16
     f64:	8c 93       	st	X, r24
	//tx enable
	UART_UCSRB_REG |= (0x01 << UART_UCSRB_TXEN_BIT);
     f66:	aa e2       	ldi	r26, 0x2A	; 42
     f68:	b0 e0       	ldi	r27, 0x00	; 0
     f6a:	ea e2       	ldi	r30, 0x2A	; 42
     f6c:	f0 e0       	ldi	r31, 0x00	; 0
     f6e:	80 81       	ld	r24, Z
     f70:	88 60       	ori	r24, 0x08	; 8
     f72:	8c 93       	st	X, r24
}
     f74:	cf 91       	pop	r28
     f76:	df 91       	pop	r29
     f78:	08 95       	ret

00000f7a <UART_VoidSetRxCBF>:


void UART_VoidSetRxCBF(ISR_FuncPtr_t copy_ISR_FuncPtr_t)
{
     f7a:	df 93       	push	r29
     f7c:	cf 93       	push	r28
     f7e:	00 d0       	rcall	.+0      	; 0xf80 <UART_VoidSetRxCBF+0x6>
     f80:	cd b7       	in	r28, 0x3d	; 61
     f82:	de b7       	in	r29, 0x3e	; 62
     f84:	9a 83       	std	Y+2, r25	; 0x02
     f86:	89 83       	std	Y+1, r24	; 0x01
	if(copy_ISR_FuncPtr_t)
     f88:	89 81       	ldd	r24, Y+1	; 0x01
     f8a:	9a 81       	ldd	r25, Y+2	; 0x02
     f8c:	00 97       	sbiw	r24, 0x00	; 0
     f8e:	31 f0       	breq	.+12     	; 0xf9c <UART_VoidSetRxCBF+0x22>
		ISR_UAST_RX_CBF = copy_ISR_FuncPtr_t;
     f90:	89 81       	ldd	r24, Y+1	; 0x01
     f92:	9a 81       	ldd	r25, Y+2	; 0x02
     f94:	90 93 cf 01 	sts	0x01CF, r25
     f98:	80 93 ce 01 	sts	0x01CE, r24
}
     f9c:	0f 90       	pop	r0
     f9e:	0f 90       	pop	r0
     fa0:	cf 91       	pop	r28
     fa2:	df 91       	pop	r29
     fa4:	08 95       	ret

00000fa6 <UART_Send>:
void UART_Send(u8 Copy_u8Data)
{
     fa6:	df 93       	push	r29
     fa8:	cf 93       	push	r28
     faa:	0f 92       	push	r0
     fac:	cd b7       	in	r28, 0x3d	; 61
     fae:	de b7       	in	r29, 0x3e	; 62
     fb0:	89 83       	std	Y+1, r24	; 0x01
	while( Get_Bit(UART_UCSRA_REG,UART_UCSRA_UDRE_BIT) != 1)
     fb2:	eb e2       	ldi	r30, 0x2B	; 43
     fb4:	f0 e0       	ldi	r31, 0x00	; 0
     fb6:	80 81       	ld	r24, Z
     fb8:	82 95       	swap	r24
     fba:	86 95       	lsr	r24
     fbc:	87 70       	andi	r24, 0x07	; 7
     fbe:	88 2f       	mov	r24, r24
     fc0:	90 e0       	ldi	r25, 0x00	; 0
     fc2:	81 70       	andi	r24, 0x01	; 1
     fc4:	90 70       	andi	r25, 0x00	; 0
     fc6:	00 97       	sbiw	r24, 0x00	; 0
     fc8:	a1 f3       	breq	.-24     	; 0xfb2 <UART_Send+0xc>
		;
	UART_UDR_REG = Copy_u8Data;
     fca:	ec e2       	ldi	r30, 0x2C	; 44
     fcc:	f0 e0       	ldi	r31, 0x00	; 0
     fce:	89 81       	ldd	r24, Y+1	; 0x01
     fd0:	80 83       	st	Z, r24

}
     fd2:	0f 90       	pop	r0
     fd4:	cf 91       	pop	r28
     fd6:	df 91       	pop	r29
     fd8:	08 95       	ret

00000fda <UART_Receive>:

void UART_Receive(u8* Copy_pu8GetData)
{
     fda:	df 93       	push	r29
     fdc:	cf 93       	push	r28
     fde:	00 d0       	rcall	.+0      	; 0xfe0 <UART_Receive+0x6>
     fe0:	cd b7       	in	r28, 0x3d	; 61
     fe2:	de b7       	in	r29, 0x3e	; 62
     fe4:	9a 83       	std	Y+2, r25	; 0x02
     fe6:	89 83       	std	Y+1, r24	; 0x01

	while( Get_Bit(UART_UCSRA_REG,UART_UCSRA_RXC_BIT) != 1)
     fe8:	eb e2       	ldi	r30, 0x2B	; 43
     fea:	f0 e0       	ldi	r31, 0x00	; 0
     fec:	80 81       	ld	r24, Z
     fee:	88 1f       	adc	r24, r24
     ff0:	88 27       	eor	r24, r24
     ff2:	88 1f       	adc	r24, r24
     ff4:	81 30       	cpi	r24, 0x01	; 1
     ff6:	c1 f7       	brne	.-16     	; 0xfe8 <UART_Receive+0xe>
		;
	*Copy_pu8GetData = UART_UDR_REG;
     ff8:	ec e2       	ldi	r30, 0x2C	; 44
     ffa:	f0 e0       	ldi	r31, 0x00	; 0
     ffc:	80 81       	ld	r24, Z
     ffe:	e9 81       	ldd	r30, Y+1	; 0x01
    1000:	fa 81       	ldd	r31, Y+2	; 0x02
    1002:	80 83       	st	Z, r24

}
    1004:	0f 90       	pop	r0
    1006:	0f 90       	pop	r0
    1008:	cf 91       	pop	r28
    100a:	df 91       	pop	r29
    100c:	08 95       	ret

0000100e <UART_Receive_interrupt>:

void UART_Receive_interrupt(u8* Copy_pu8GetData)
{
    100e:	df 93       	push	r29
    1010:	cf 93       	push	r28
    1012:	00 d0       	rcall	.+0      	; 0x1014 <UART_Receive_interrupt+0x6>
    1014:	cd b7       	in	r28, 0x3d	; 61
    1016:	de b7       	in	r29, 0x3e	; 62
    1018:	9a 83       	std	Y+2, r25	; 0x02
    101a:	89 83       	std	Y+1, r24	; 0x01
	*Copy_pu8GetData = UART_UDR_REG;
    101c:	ec e2       	ldi	r30, 0x2C	; 44
    101e:	f0 e0       	ldi	r31, 0x00	; 0
    1020:	80 81       	ld	r24, Z
    1022:	e9 81       	ldd	r30, Y+1	; 0x01
    1024:	fa 81       	ldd	r31, Y+2	; 0x02
    1026:	80 83       	st	Z, r24
}
    1028:	0f 90       	pop	r0
    102a:	0f 90       	pop	r0
    102c:	cf 91       	pop	r28
    102e:	df 91       	pop	r29
    1030:	08 95       	ret

00001032 <UART_SendString>:

void UART_SendString(u8* Copy_pu8Data)
{
    1032:	df 93       	push	r29
    1034:	cf 93       	push	r28
    1036:	00 d0       	rcall	.+0      	; 0x1038 <UART_SendString+0x6>
    1038:	0f 92       	push	r0
    103a:	cd b7       	in	r28, 0x3d	; 61
    103c:	de b7       	in	r29, 0x3e	; 62
    103e:	9b 83       	std	Y+3, r25	; 0x03
    1040:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0;
    1042:	19 82       	std	Y+1, r1	; 0x01
	while( Get_Bit(UART_UCSRA_REG,UART_UCSRA_UDRE_BIT) != 1)
    1044:	eb e2       	ldi	r30, 0x2B	; 43
    1046:	f0 e0       	ldi	r31, 0x00	; 0
    1048:	80 81       	ld	r24, Z
    104a:	82 95       	swap	r24
    104c:	86 95       	lsr	r24
    104e:	87 70       	andi	r24, 0x07	; 7
    1050:	88 2f       	mov	r24, r24
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	81 70       	andi	r24, 0x01	; 1
    1056:	90 70       	andi	r25, 0x00	; 0
    1058:	00 97       	sbiw	r24, 0x00	; 0
    105a:	a1 f3       	breq	.-24     	; 0x1044 <UART_SendString+0x12>
    105c:	0f c0       	rjmp	.+30     	; 0x107c <UART_SendString+0x4a>
			;
	while(Copy_pu8Data[i])
	{
		UART_Send(Copy_pu8Data[i++]);
    105e:	89 81       	ldd	r24, Y+1	; 0x01
    1060:	28 2f       	mov	r18, r24
    1062:	30 e0       	ldi	r19, 0x00	; 0
    1064:	8a 81       	ldd	r24, Y+2	; 0x02
    1066:	9b 81       	ldd	r25, Y+3	; 0x03
    1068:	fc 01       	movw	r30, r24
    106a:	e2 0f       	add	r30, r18
    106c:	f3 1f       	adc	r31, r19
    106e:	90 81       	ld	r25, Z
    1070:	89 81       	ldd	r24, Y+1	; 0x01
    1072:	8f 5f       	subi	r24, 0xFF	; 255
    1074:	89 83       	std	Y+1, r24	; 0x01
    1076:	89 2f       	mov	r24, r25
    1078:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <UART_Send>
void UART_SendString(u8* Copy_pu8Data)
{
	u8 i = 0;
	while( Get_Bit(UART_UCSRA_REG,UART_UCSRA_UDRE_BIT) != 1)
			;
	while(Copy_pu8Data[i])
    107c:	89 81       	ldd	r24, Y+1	; 0x01
    107e:	28 2f       	mov	r18, r24
    1080:	30 e0       	ldi	r19, 0x00	; 0
    1082:	8a 81       	ldd	r24, Y+2	; 0x02
    1084:	9b 81       	ldd	r25, Y+3	; 0x03
    1086:	fc 01       	movw	r30, r24
    1088:	e2 0f       	add	r30, r18
    108a:	f3 1f       	adc	r31, r19
    108c:	80 81       	ld	r24, Z
    108e:	88 23       	and	r24, r24
    1090:	31 f7       	brne	.-52     	; 0x105e <UART_SendString+0x2c>
	{
		UART_Send(Copy_pu8Data[i++]);
	}

}
    1092:	0f 90       	pop	r0
    1094:	0f 90       	pop	r0
    1096:	0f 90       	pop	r0
    1098:	cf 91       	pop	r28
    109a:	df 91       	pop	r29
    109c:	08 95       	ret

0000109e <__vector_13>:




void __vector_13(void)
{
    109e:	1f 92       	push	r1
    10a0:	0f 92       	push	r0
    10a2:	0f b6       	in	r0, 0x3f	; 63
    10a4:	0f 92       	push	r0
    10a6:	11 24       	eor	r1, r1
    10a8:	2f 93       	push	r18
    10aa:	3f 93       	push	r19
    10ac:	4f 93       	push	r20
    10ae:	5f 93       	push	r21
    10b0:	6f 93       	push	r22
    10b2:	7f 93       	push	r23
    10b4:	8f 93       	push	r24
    10b6:	9f 93       	push	r25
    10b8:	af 93       	push	r26
    10ba:	bf 93       	push	r27
    10bc:	ef 93       	push	r30
    10be:	ff 93       	push	r31
    10c0:	df 93       	push	r29
    10c2:	cf 93       	push	r28
    10c4:	cd b7       	in	r28, 0x3d	; 61
    10c6:	de b7       	in	r29, 0x3e	; 62
	if(ISR_UAST_RX_CBF)
    10c8:	80 91 ce 01 	lds	r24, 0x01CE
    10cc:	90 91 cf 01 	lds	r25, 0x01CF
    10d0:	00 97       	sbiw	r24, 0x00	; 0
    10d2:	29 f0       	breq	.+10     	; 0x10de <__vector_13+0x40>
		ISR_UAST_RX_CBF();
    10d4:	e0 91 ce 01 	lds	r30, 0x01CE
    10d8:	f0 91 cf 01 	lds	r31, 0x01CF
    10dc:	09 95       	icall
}
    10de:	cf 91       	pop	r28
    10e0:	df 91       	pop	r29
    10e2:	ff 91       	pop	r31
    10e4:	ef 91       	pop	r30
    10e6:	bf 91       	pop	r27
    10e8:	af 91       	pop	r26
    10ea:	9f 91       	pop	r25
    10ec:	8f 91       	pop	r24
    10ee:	7f 91       	pop	r23
    10f0:	6f 91       	pop	r22
    10f2:	5f 91       	pop	r21
    10f4:	4f 91       	pop	r20
    10f6:	3f 91       	pop	r19
    10f8:	2f 91       	pop	r18
    10fa:	0f 90       	pop	r0
    10fc:	0f be       	out	0x3f, r0	; 63
    10fe:	0f 90       	pop	r0
    1100:	1f 90       	pop	r1
    1102:	18 95       	reti

00001104 <PWM_voidInit>:
#include "../../LIB/Bit_Math.h"
#include "SPT_private.h"
#include "SPT_interface.h"

void PWM_voidInit(PWM_stConfig* copy_pst_config)
{
    1104:	df 93       	push	r29
    1106:	cf 93       	push	r28
    1108:	00 d0       	rcall	.+0      	; 0x110a <PWM_voidInit+0x6>
    110a:	cd b7       	in	r28, 0x3d	; 61
    110c:	de b7       	in	r29, 0x3e	; 62
    110e:	9a 83       	std	Y+2, r25	; 0x02
    1110:	89 83       	std	Y+1, r24	; 0x01
	if(copy_pst_config->PWM_timer == PWM_timer1_select)
    1112:	e9 81       	ldd	r30, Y+1	; 0x01
    1114:	fa 81       	ldd	r31, Y+2	; 0x02
    1116:	80 81       	ld	r24, Z
    1118:	81 30       	cpi	r24, 0x01	; 1
    111a:	09 f0       	breq	.+2      	; 0x111e <PWM_voidInit+0x1a>
    111c:	f0 c0       	rjmp	.+480    	; 0x12fe <PWM_voidInit+0x1fa>
	{
		if(copy_pst_config->PWM_mode == PWM_FastPwmMode)
    111e:	e9 81       	ldd	r30, Y+1	; 0x01
    1120:	fa 81       	ldd	r31, Y+2	; 0x02
    1122:	81 81       	ldd	r24, Z+1	; 0x01
    1124:	81 30       	cpi	r24, 0x01	; 1
    1126:	09 f0       	breq	.+2      	; 0x112a <PWM_voidInit+0x26>
    1128:	79 c0       	rjmp	.+242    	; 0x121c <PWM_voidInit+0x118>
		{
				// select fast pwm mode
				Clr_Bit(PWM_TCCR1A_REG,PWM_TCCR1A_WMG10_BIT);
    112a:	af e4       	ldi	r26, 0x4F	; 79
    112c:	b0 e0       	ldi	r27, 0x00	; 0
    112e:	ef e4       	ldi	r30, 0x4F	; 79
    1130:	f0 e0       	ldi	r31, 0x00	; 0
    1132:	80 81       	ld	r24, Z
    1134:	8e 7f       	andi	r24, 0xFE	; 254
    1136:	8c 93       	st	X, r24
				Set_Bit(PWM_TCCR1A_REG,PWM_TCCR1A_WMG11_BIT);
    1138:	af e4       	ldi	r26, 0x4F	; 79
    113a:	b0 e0       	ldi	r27, 0x00	; 0
    113c:	ef e4       	ldi	r30, 0x4F	; 79
    113e:	f0 e0       	ldi	r31, 0x00	; 0
    1140:	80 81       	ld	r24, Z
    1142:	82 60       	ori	r24, 0x02	; 2
    1144:	8c 93       	st	X, r24
				Set_Bit(PWM_TCCR1B_REG , PWM_TCCR1B_WGM12_BIT);
    1146:	ae e4       	ldi	r26, 0x4E	; 78
    1148:	b0 e0       	ldi	r27, 0x00	; 0
    114a:	ee e4       	ldi	r30, 0x4E	; 78
    114c:	f0 e0       	ldi	r31, 0x00	; 0
    114e:	80 81       	ld	r24, Z
    1150:	88 60       	ori	r24, 0x08	; 8
    1152:	8c 93       	st	X, r24
				Set_Bit(PWM_TCCR1B_REG , PWM_TCCR1B_WGM13_BIT);
    1154:	ae e4       	ldi	r26, 0x4E	; 78
    1156:	b0 e0       	ldi	r27, 0x00	; 0
    1158:	ee e4       	ldi	r30, 0x4E	; 78
    115a:	f0 e0       	ldi	r31, 0x00	; 0
    115c:	80 81       	ld	r24, Z
    115e:	80 61       	ori	r24, 0x10	; 16
    1160:	8c 93       	st	X, r24
				// select compare mode
				PWM_TCCR1A_REG |= (copy_pst_config->PWM_compareMode << PWM_TCCR1A_COM1A0_BIT);
    1162:	af e4       	ldi	r26, 0x4F	; 79
    1164:	b0 e0       	ldi	r27, 0x00	; 0
    1166:	ef e4       	ldi	r30, 0x4F	; 79
    1168:	f0 e0       	ldi	r31, 0x00	; 0
    116a:	80 81       	ld	r24, Z
    116c:	28 2f       	mov	r18, r24
    116e:	e9 81       	ldd	r30, Y+1	; 0x01
    1170:	fa 81       	ldd	r31, Y+2	; 0x02
    1172:	82 81       	ldd	r24, Z+2	; 0x02
    1174:	88 2f       	mov	r24, r24
    1176:	90 e0       	ldi	r25, 0x00	; 0
    1178:	00 24       	eor	r0, r0
    117a:	96 95       	lsr	r25
    117c:	87 95       	ror	r24
    117e:	07 94       	ror	r0
    1180:	96 95       	lsr	r25
    1182:	87 95       	ror	r24
    1184:	07 94       	ror	r0
    1186:	98 2f       	mov	r25, r24
    1188:	80 2d       	mov	r24, r0
    118a:	82 2b       	or	r24, r18
    118c:	8c 93       	st	X, r24
				PWM_TCCR1A_REG |= (copy_pst_config->PWM_compareMode << PWM_TCCR1A_COM1B0_BIT);
    118e:	af e4       	ldi	r26, 0x4F	; 79
    1190:	b0 e0       	ldi	r27, 0x00	; 0
    1192:	ef e4       	ldi	r30, 0x4F	; 79
    1194:	f0 e0       	ldi	r31, 0x00	; 0
    1196:	80 81       	ld	r24, Z
    1198:	28 2f       	mov	r18, r24
    119a:	e9 81       	ldd	r30, Y+1	; 0x01
    119c:	fa 81       	ldd	r31, Y+2	; 0x02
    119e:	82 81       	ldd	r24, Z+2	; 0x02
    11a0:	88 2f       	mov	r24, r24
    11a2:	90 e0       	ldi	r25, 0x00	; 0
    11a4:	82 95       	swap	r24
    11a6:	92 95       	swap	r25
    11a8:	90 7f       	andi	r25, 0xF0	; 240
    11aa:	98 27       	eor	r25, r24
    11ac:	80 7f       	andi	r24, 0xF0	; 240
    11ae:	98 27       	eor	r25, r24
    11b0:	82 2b       	or	r24, r18
    11b2:	8c 93       	st	X, r24
				//select prescaler

				PWM_TCCR1B_REG |= copy_pst_config->PWM_prescaler;
    11b4:	ae e4       	ldi	r26, 0x4E	; 78
    11b6:	b0 e0       	ldi	r27, 0x00	; 0
    11b8:	ee e4       	ldi	r30, 0x4E	; 78
    11ba:	f0 e0       	ldi	r31, 0x00	; 0
    11bc:	90 81       	ld	r25, Z
    11be:	e9 81       	ldd	r30, Y+1	; 0x01
    11c0:	fa 81       	ldd	r31, Y+2	; 0x02
    11c2:	83 81       	ldd	r24, Z+3	; 0x03
    11c4:	89 2b       	or	r24, r25
    11c6:	8c 93       	st	X, r24
				// select top value
				PWM_ICR1_REG  = copy_pst_config->PWM_topVal;
    11c8:	a6 e4       	ldi	r26, 0x46	; 70
    11ca:	b0 e0       	ldi	r27, 0x00	; 0
    11cc:	e9 81       	ldd	r30, Y+1	; 0x01
    11ce:	fa 81       	ldd	r31, Y+2	; 0x02
    11d0:	81 85       	ldd	r24, Z+9	; 0x09
    11d2:	92 85       	ldd	r25, Z+10	; 0x0a
    11d4:	11 96       	adiw	r26, 0x01	; 1
    11d6:	9c 93       	st	X, r25
    11d8:	8e 93       	st	-X, r24
				//cmp match value
				if(copy_pst_config->PWM_OCR == PWM_OCR1A)
    11da:	e9 81       	ldd	r30, Y+1	; 0x01
    11dc:	fa 81       	ldd	r31, Y+2	; 0x02
    11de:	84 81       	ldd	r24, Z+4	; 0x04
    11e0:	88 23       	and	r24, r24
    11e2:	59 f4       	brne	.+22     	; 0x11fa <PWM_voidInit+0xf6>
					PWM_OCR1A_REG = copy_pst_config->PWM_OCR1A_val;
    11e4:	ea e4       	ldi	r30, 0x4A	; 74
    11e6:	f0 e0       	ldi	r31, 0x00	; 0
    11e8:	a9 81       	ldd	r26, Y+1	; 0x01
    11ea:	ba 81       	ldd	r27, Y+2	; 0x02
    11ec:	15 96       	adiw	r26, 0x05	; 5
    11ee:	8d 91       	ld	r24, X+
    11f0:	9c 91       	ld	r25, X
    11f2:	16 97       	sbiw	r26, 0x06	; 6
    11f4:	91 83       	std	Z+1, r25	; 0x01
    11f6:	80 83       	st	Z, r24
    11f8:	f7 c0       	rjmp	.+494    	; 0x13e8 <PWM_voidInit+0x2e4>
				else if(copy_pst_config->PWM_OCR == PWM_OCR1B)
    11fa:	e9 81       	ldd	r30, Y+1	; 0x01
    11fc:	fa 81       	ldd	r31, Y+2	; 0x02
    11fe:	84 81       	ldd	r24, Z+4	; 0x04
    1200:	81 30       	cpi	r24, 0x01	; 1
    1202:	09 f0       	breq	.+2      	; 0x1206 <PWM_voidInit+0x102>
    1204:	f1 c0       	rjmp	.+482    	; 0x13e8 <PWM_voidInit+0x2e4>
					PWM_OCR1B_REG = copy_pst_config->PWM_OCR1B_val;
    1206:	e8 e4       	ldi	r30, 0x48	; 72
    1208:	f0 e0       	ldi	r31, 0x00	; 0
    120a:	a9 81       	ldd	r26, Y+1	; 0x01
    120c:	ba 81       	ldd	r27, Y+2	; 0x02
    120e:	17 96       	adiw	r26, 0x07	; 7
    1210:	8d 91       	ld	r24, X+
    1212:	9c 91       	ld	r25, X
    1214:	18 97       	sbiw	r26, 0x08	; 8
    1216:	91 83       	std	Z+1, r25	; 0x01
    1218:	80 83       	st	Z, r24
    121a:	e6 c0       	rjmp	.+460    	; 0x13e8 <PWM_voidInit+0x2e4>
		}
		else if(copy_pst_config->PWM_mode == PWM_PhaseCorrectMode)
    121c:	e9 81       	ldd	r30, Y+1	; 0x01
    121e:	fa 81       	ldd	r31, Y+2	; 0x02
    1220:	81 81       	ldd	r24, Z+1	; 0x01
    1222:	88 23       	and	r24, r24
    1224:	09 f0       	breq	.+2      	; 0x1228 <PWM_voidInit+0x124>
    1226:	e0 c0       	rjmp	.+448    	; 0x13e8 <PWM_voidInit+0x2e4>
		{
				// select fast pwm mode
				Clr_Bit(PWM_TCCR1A_REG,PWM_TCCR1A_WMG10_BIT);
    1228:	af e4       	ldi	r26, 0x4F	; 79
    122a:	b0 e0       	ldi	r27, 0x00	; 0
    122c:	ef e4       	ldi	r30, 0x4F	; 79
    122e:	f0 e0       	ldi	r31, 0x00	; 0
    1230:	80 81       	ld	r24, Z
    1232:	8e 7f       	andi	r24, 0xFE	; 254
    1234:	8c 93       	st	X, r24
				Set_Bit(PWM_TCCR1A_REG,PWM_TCCR1A_WMG11_BIT);
    1236:	af e4       	ldi	r26, 0x4F	; 79
    1238:	b0 e0       	ldi	r27, 0x00	; 0
    123a:	ef e4       	ldi	r30, 0x4F	; 79
    123c:	f0 e0       	ldi	r31, 0x00	; 0
    123e:	80 81       	ld	r24, Z
    1240:	82 60       	ori	r24, 0x02	; 2
    1242:	8c 93       	st	X, r24
				Clr_Bit(PWM_TCCR1B_REG , PWM_TCCR1B_WGM12_BIT);
    1244:	ae e4       	ldi	r26, 0x4E	; 78
    1246:	b0 e0       	ldi	r27, 0x00	; 0
    1248:	ee e4       	ldi	r30, 0x4E	; 78
    124a:	f0 e0       	ldi	r31, 0x00	; 0
    124c:	80 81       	ld	r24, Z
    124e:	87 7f       	andi	r24, 0xF7	; 247
    1250:	8c 93       	st	X, r24
				Set_Bit(PWM_TCCR1B_REG , PWM_TCCR1B_WGM13_BIT);
    1252:	ae e4       	ldi	r26, 0x4E	; 78
    1254:	b0 e0       	ldi	r27, 0x00	; 0
    1256:	ee e4       	ldi	r30, 0x4E	; 78
    1258:	f0 e0       	ldi	r31, 0x00	; 0
    125a:	80 81       	ld	r24, Z
    125c:	80 61       	ori	r24, 0x10	; 16
    125e:	8c 93       	st	X, r24
				// select compare mode
				PWM_TCCR1A_REG |= (copy_pst_config->PWM_compareMode << PWM_TCCR1A_COM1A0_BIT);
    1260:	af e4       	ldi	r26, 0x4F	; 79
    1262:	b0 e0       	ldi	r27, 0x00	; 0
    1264:	ef e4       	ldi	r30, 0x4F	; 79
    1266:	f0 e0       	ldi	r31, 0x00	; 0
    1268:	80 81       	ld	r24, Z
    126a:	28 2f       	mov	r18, r24
    126c:	e9 81       	ldd	r30, Y+1	; 0x01
    126e:	fa 81       	ldd	r31, Y+2	; 0x02
    1270:	82 81       	ldd	r24, Z+2	; 0x02
    1272:	88 2f       	mov	r24, r24
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	00 24       	eor	r0, r0
    1278:	96 95       	lsr	r25
    127a:	87 95       	ror	r24
    127c:	07 94       	ror	r0
    127e:	96 95       	lsr	r25
    1280:	87 95       	ror	r24
    1282:	07 94       	ror	r0
    1284:	98 2f       	mov	r25, r24
    1286:	80 2d       	mov	r24, r0
    1288:	82 2b       	or	r24, r18
    128a:	8c 93       	st	X, r24
				PWM_TCCR1A_REG |= (copy_pst_config->PWM_compareMode << PWM_TCCR1A_COM1B0_BIT);
    128c:	af e4       	ldi	r26, 0x4F	; 79
    128e:	b0 e0       	ldi	r27, 0x00	; 0
    1290:	ef e4       	ldi	r30, 0x4F	; 79
    1292:	f0 e0       	ldi	r31, 0x00	; 0
    1294:	80 81       	ld	r24, Z
    1296:	28 2f       	mov	r18, r24
    1298:	e9 81       	ldd	r30, Y+1	; 0x01
    129a:	fa 81       	ldd	r31, Y+2	; 0x02
    129c:	82 81       	ldd	r24, Z+2	; 0x02
    129e:	88 2f       	mov	r24, r24
    12a0:	90 e0       	ldi	r25, 0x00	; 0
    12a2:	82 95       	swap	r24
    12a4:	92 95       	swap	r25
    12a6:	90 7f       	andi	r25, 0xF0	; 240
    12a8:	98 27       	eor	r25, r24
    12aa:	80 7f       	andi	r24, 0xF0	; 240
    12ac:	98 27       	eor	r25, r24
    12ae:	82 2b       	or	r24, r18
    12b0:	8c 93       	st	X, r24
				//select prescaler

				PWM_TCCR1B_REG |= copy_pst_config->PWM_prescaler;
    12b2:	ae e4       	ldi	r26, 0x4E	; 78
    12b4:	b0 e0       	ldi	r27, 0x00	; 0
    12b6:	ee e4       	ldi	r30, 0x4E	; 78
    12b8:	f0 e0       	ldi	r31, 0x00	; 0
    12ba:	90 81       	ld	r25, Z
    12bc:	e9 81       	ldd	r30, Y+1	; 0x01
    12be:	fa 81       	ldd	r31, Y+2	; 0x02
    12c0:	83 81       	ldd	r24, Z+3	; 0x03
    12c2:	89 2b       	or	r24, r25
    12c4:	8c 93       	st	X, r24
				// select top value
				PWM_ICR1_REG  = copy_pst_config->PWM_topVal;
    12c6:	a6 e4       	ldi	r26, 0x46	; 70
    12c8:	b0 e0       	ldi	r27, 0x00	; 0
    12ca:	e9 81       	ldd	r30, Y+1	; 0x01
    12cc:	fa 81       	ldd	r31, Y+2	; 0x02
    12ce:	81 85       	ldd	r24, Z+9	; 0x09
    12d0:	92 85       	ldd	r25, Z+10	; 0x0a
    12d2:	11 96       	adiw	r26, 0x01	; 1
    12d4:	9c 93       	st	X, r25
    12d6:	8e 93       	st	-X, r24
				//cmp match value
				PWM_OCR1A_REG = copy_pst_config->PWM_OCR1A_val;
    12d8:	aa e4       	ldi	r26, 0x4A	; 74
    12da:	b0 e0       	ldi	r27, 0x00	; 0
    12dc:	e9 81       	ldd	r30, Y+1	; 0x01
    12de:	fa 81       	ldd	r31, Y+2	; 0x02
    12e0:	85 81       	ldd	r24, Z+5	; 0x05
    12e2:	96 81       	ldd	r25, Z+6	; 0x06
    12e4:	11 96       	adiw	r26, 0x01	; 1
    12e6:	9c 93       	st	X, r25
    12e8:	8e 93       	st	-X, r24
				PWM_OCR1B_REG = copy_pst_config->PWM_OCR1B_val;
    12ea:	a8 e4       	ldi	r26, 0x48	; 72
    12ec:	b0 e0       	ldi	r27, 0x00	; 0
    12ee:	e9 81       	ldd	r30, Y+1	; 0x01
    12f0:	fa 81       	ldd	r31, Y+2	; 0x02
    12f2:	87 81       	ldd	r24, Z+7	; 0x07
    12f4:	90 85       	ldd	r25, Z+8	; 0x08
    12f6:	11 96       	adiw	r26, 0x01	; 1
    12f8:	9c 93       	st	X, r25
    12fa:	8e 93       	st	-X, r24
    12fc:	75 c0       	rjmp	.+234    	; 0x13e8 <PWM_voidInit+0x2e4>
		}

	}

	else if (copy_pst_config->PWM_timer == PWM_timer0_select)
    12fe:	e9 81       	ldd	r30, Y+1	; 0x01
    1300:	fa 81       	ldd	r31, Y+2	; 0x02
    1302:	80 81       	ld	r24, Z
    1304:	88 23       	and	r24, r24
    1306:	09 f0       	breq	.+2      	; 0x130a <PWM_voidInit+0x206>
    1308:	6f c0       	rjmp	.+222    	; 0x13e8 <PWM_voidInit+0x2e4>
	{
		if(copy_pst_config->PWM_mode == PWM_FastPwmMode)
    130a:	e9 81       	ldd	r30, Y+1	; 0x01
    130c:	fa 81       	ldd	r31, Y+2	; 0x02
    130e:	81 81       	ldd	r24, Z+1	; 0x01
    1310:	81 30       	cpi	r24, 0x01	; 1
    1312:	99 f5       	brne	.+102    	; 0x137a <PWM_voidInit+0x276>
		{
			/*select prescaler*/
			PWM_TCCR0_REG |= copy_pst_config->PWM_prescaler;
    1314:	a3 e5       	ldi	r26, 0x53	; 83
    1316:	b0 e0       	ldi	r27, 0x00	; 0
    1318:	e3 e5       	ldi	r30, 0x53	; 83
    131a:	f0 e0       	ldi	r31, 0x00	; 0
    131c:	90 81       	ld	r25, Z
    131e:	e9 81       	ldd	r30, Y+1	; 0x01
    1320:	fa 81       	ldd	r31, Y+2	; 0x02
    1322:	83 81       	ldd	r24, Z+3	; 0x03
    1324:	89 2b       	or	r24, r25
    1326:	8c 93       	st	X, r24
			// select fast pwm mode
			Set_Bit(PWM_TCCR0_REG , PWM_TCCR0_WGM00_BIT);
    1328:	a3 e5       	ldi	r26, 0x53	; 83
    132a:	b0 e0       	ldi	r27, 0x00	; 0
    132c:	e3 e5       	ldi	r30, 0x53	; 83
    132e:	f0 e0       	ldi	r31, 0x00	; 0
    1330:	80 81       	ld	r24, Z
    1332:	80 64       	ori	r24, 0x40	; 64
    1334:	8c 93       	st	X, r24
			Set_Bit(PWM_TCCR0_REG , PWM_TCCR0_WGM01_BIT);
    1336:	a3 e5       	ldi	r26, 0x53	; 83
    1338:	b0 e0       	ldi	r27, 0x00	; 0
    133a:	e3 e5       	ldi	r30, 0x53	; 83
    133c:	f0 e0       	ldi	r31, 0x00	; 0
    133e:	80 81       	ld	r24, Z
    1340:	88 60       	ori	r24, 0x08	; 8
    1342:	8c 93       	st	X, r24
			// select Compare Mode
			PWM_TCCR0_REG |= (copy_pst_config->PWM_compareMode << PWM_TCCR0_COM00_BIT);
    1344:	a3 e5       	ldi	r26, 0x53	; 83
    1346:	b0 e0       	ldi	r27, 0x00	; 0
    1348:	e3 e5       	ldi	r30, 0x53	; 83
    134a:	f0 e0       	ldi	r31, 0x00	; 0
    134c:	80 81       	ld	r24, Z
    134e:	28 2f       	mov	r18, r24
    1350:	e9 81       	ldd	r30, Y+1	; 0x01
    1352:	fa 81       	ldd	r31, Y+2	; 0x02
    1354:	82 81       	ldd	r24, Z+2	; 0x02
    1356:	88 2f       	mov	r24, r24
    1358:	90 e0       	ldi	r25, 0x00	; 0
    135a:	82 95       	swap	r24
    135c:	92 95       	swap	r25
    135e:	90 7f       	andi	r25, 0xF0	; 240
    1360:	98 27       	eor	r25, r24
    1362:	80 7f       	andi	r24, 0xF0	; 240
    1364:	98 27       	eor	r25, r24
    1366:	82 2b       	or	r24, r18
    1368:	8c 93       	st	X, r24
			// write cmp value
			PWM_OCR0_REG = (u8)copy_pst_config->PWM_OCR1A_val;
    136a:	ac e5       	ldi	r26, 0x5C	; 92
    136c:	b0 e0       	ldi	r27, 0x00	; 0
    136e:	e9 81       	ldd	r30, Y+1	; 0x01
    1370:	fa 81       	ldd	r31, Y+2	; 0x02
    1372:	85 81       	ldd	r24, Z+5	; 0x05
    1374:	96 81       	ldd	r25, Z+6	; 0x06
    1376:	8c 93       	st	X, r24
    1378:	37 c0       	rjmp	.+110    	; 0x13e8 <PWM_voidInit+0x2e4>
		}
		else if(copy_pst_config->PWM_mode == PWM_PhaseCorrectMode)
    137a:	e9 81       	ldd	r30, Y+1	; 0x01
    137c:	fa 81       	ldd	r31, Y+2	; 0x02
    137e:	81 81       	ldd	r24, Z+1	; 0x01
    1380:	88 23       	and	r24, r24
    1382:	91 f5       	brne	.+100    	; 0x13e8 <PWM_voidInit+0x2e4>
		{
			/*select prescaler*/
			PWM_TCCR0_REG |= copy_pst_config->PWM_prescaler;
    1384:	a3 e5       	ldi	r26, 0x53	; 83
    1386:	b0 e0       	ldi	r27, 0x00	; 0
    1388:	e3 e5       	ldi	r30, 0x53	; 83
    138a:	f0 e0       	ldi	r31, 0x00	; 0
    138c:	90 81       	ld	r25, Z
    138e:	e9 81       	ldd	r30, Y+1	; 0x01
    1390:	fa 81       	ldd	r31, Y+2	; 0x02
    1392:	83 81       	ldd	r24, Z+3	; 0x03
    1394:	89 2b       	or	r24, r25
    1396:	8c 93       	st	X, r24
			// select phase correct pwm mode
			Set_Bit(PWM_TCCR0_REG , PWM_TCCR0_WGM00_BIT);
    1398:	a3 e5       	ldi	r26, 0x53	; 83
    139a:	b0 e0       	ldi	r27, 0x00	; 0
    139c:	e3 e5       	ldi	r30, 0x53	; 83
    139e:	f0 e0       	ldi	r31, 0x00	; 0
    13a0:	80 81       	ld	r24, Z
    13a2:	80 64       	ori	r24, 0x40	; 64
    13a4:	8c 93       	st	X, r24
			Clr_Bit(PWM_TCCR0_REG , PWM_TCCR0_WGM01_BIT);
    13a6:	a3 e5       	ldi	r26, 0x53	; 83
    13a8:	b0 e0       	ldi	r27, 0x00	; 0
    13aa:	e3 e5       	ldi	r30, 0x53	; 83
    13ac:	f0 e0       	ldi	r31, 0x00	; 0
    13ae:	80 81       	ld	r24, Z
    13b0:	87 7f       	andi	r24, 0xF7	; 247
    13b2:	8c 93       	st	X, r24
			// select Compare Mode
			PWM_TCCR0_REG |= (copy_pst_config->PWM_compareMode << PWM_TCCR0_COM00_BIT);
    13b4:	a3 e5       	ldi	r26, 0x53	; 83
    13b6:	b0 e0       	ldi	r27, 0x00	; 0
    13b8:	e3 e5       	ldi	r30, 0x53	; 83
    13ba:	f0 e0       	ldi	r31, 0x00	; 0
    13bc:	80 81       	ld	r24, Z
    13be:	28 2f       	mov	r18, r24
    13c0:	e9 81       	ldd	r30, Y+1	; 0x01
    13c2:	fa 81       	ldd	r31, Y+2	; 0x02
    13c4:	82 81       	ldd	r24, Z+2	; 0x02
    13c6:	88 2f       	mov	r24, r24
    13c8:	90 e0       	ldi	r25, 0x00	; 0
    13ca:	82 95       	swap	r24
    13cc:	92 95       	swap	r25
    13ce:	90 7f       	andi	r25, 0xF0	; 240
    13d0:	98 27       	eor	r25, r24
    13d2:	80 7f       	andi	r24, 0xF0	; 240
    13d4:	98 27       	eor	r25, r24
    13d6:	82 2b       	or	r24, r18
    13d8:	8c 93       	st	X, r24
			// write cmp value
			PWM_OCR0_REG = (u8)copy_pst_config->PWM_OCR1A_val;
    13da:	ac e5       	ldi	r26, 0x5C	; 92
    13dc:	b0 e0       	ldi	r27, 0x00	; 0
    13de:	e9 81       	ldd	r30, Y+1	; 0x01
    13e0:	fa 81       	ldd	r31, Y+2	; 0x02
    13e2:	85 81       	ldd	r24, Z+5	; 0x05
    13e4:	96 81       	ldd	r25, Z+6	; 0x06
    13e6:	8c 93       	st	X, r24
		}
	}
}
    13e8:	0f 90       	pop	r0
    13ea:	0f 90       	pop	r0
    13ec:	cf 91       	pop	r28
    13ee:	df 91       	pop	r29
    13f0:	08 95       	ret

000013f2 <PWM_VoidSetDuty>:

void PWM_VoidSetDuty(PWM_stConfig* copy_pst_config , u8 copy_u8DutyCycle)
{
    13f2:	cf 92       	push	r12
    13f4:	df 92       	push	r13
    13f6:	ef 92       	push	r14
    13f8:	ff 92       	push	r15
    13fa:	0f 93       	push	r16
    13fc:	1f 93       	push	r17
    13fe:	df 93       	push	r29
    1400:	cf 93       	push	r28
    1402:	00 d0       	rcall	.+0      	; 0x1404 <PWM_VoidSetDuty+0x12>
    1404:	0f 92       	push	r0
    1406:	cd b7       	in	r28, 0x3d	; 61
    1408:	de b7       	in	r29, 0x3e	; 62
    140a:	9a 83       	std	Y+2, r25	; 0x02
    140c:	89 83       	std	Y+1, r24	; 0x01
    140e:	6b 83       	std	Y+3, r22	; 0x03
	if(copy_pst_config && copy_pst_config->PWM_timer == PWM_timer1_select && copy_u8DutyCycle <= 100 )
    1410:	89 81       	ldd	r24, Y+1	; 0x01
    1412:	9a 81       	ldd	r25, Y+2	; 0x02
    1414:	00 97       	sbiw	r24, 0x00	; 0
    1416:	09 f4       	brne	.+2      	; 0x141a <PWM_VoidSetDuty+0x28>
    1418:	89 c0       	rjmp	.+274    	; 0x152c <PWM_VoidSetDuty+0x13a>
    141a:	e9 81       	ldd	r30, Y+1	; 0x01
    141c:	fa 81       	ldd	r31, Y+2	; 0x02
    141e:	80 81       	ld	r24, Z
    1420:	81 30       	cpi	r24, 0x01	; 1
    1422:	09 f0       	breq	.+2      	; 0x1426 <PWM_VoidSetDuty+0x34>
    1424:	83 c0       	rjmp	.+262    	; 0x152c <PWM_VoidSetDuty+0x13a>
    1426:	8b 81       	ldd	r24, Y+3	; 0x03
    1428:	85 36       	cpi	r24, 0x65	; 101
    142a:	08 f0       	brcs	.+2      	; 0x142e <PWM_VoidSetDuty+0x3c>
    142c:	7f c0       	rjmp	.+254    	; 0x152c <PWM_VoidSetDuty+0x13a>
	{
		if(copy_pst_config->PWM_OCR == PWM_OCR1A)
    142e:	e9 81       	ldd	r30, Y+1	; 0x01
    1430:	fa 81       	ldd	r31, Y+2	; 0x02
    1432:	84 81       	ldd	r24, Z+4	; 0x04
    1434:	88 23       	and	r24, r24
    1436:	d9 f5       	brne	.+118    	; 0x14ae <PWM_VoidSetDuty+0xbc>
		{
			PWM_OCR1A_REG = (u16)((copy_u8DutyCycle/(f32)100.0) * copy_pst_config->PWM_topVal);
    1438:	0f 2e       	mov	r0, r31
    143a:	fa e4       	ldi	r31, 0x4A	; 74
    143c:	cf 2e       	mov	r12, r31
    143e:	dd 24       	eor	r13, r13
    1440:	f0 2d       	mov	r31, r0
    1442:	8b 81       	ldd	r24, Y+3	; 0x03
    1444:	88 2f       	mov	r24, r24
    1446:	90 e0       	ldi	r25, 0x00	; 0
    1448:	aa 27       	eor	r26, r26
    144a:	97 fd       	sbrc	r25, 7
    144c:	a0 95       	com	r26
    144e:	ba 2f       	mov	r27, r26
    1450:	bc 01       	movw	r22, r24
    1452:	cd 01       	movw	r24, r26
    1454:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    1458:	dc 01       	movw	r26, r24
    145a:	cb 01       	movw	r24, r22
    145c:	bc 01       	movw	r22, r24
    145e:	cd 01       	movw	r24, r26
    1460:	20 e0       	ldi	r18, 0x00	; 0
    1462:	30 e0       	ldi	r19, 0x00	; 0
    1464:	48 ec       	ldi	r20, 0xC8	; 200
    1466:	52 e4       	ldi	r21, 0x42	; 66
    1468:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    146c:	dc 01       	movw	r26, r24
    146e:	cb 01       	movw	r24, r22
    1470:	7c 01       	movw	r14, r24
    1472:	8d 01       	movw	r16, r26
    1474:	e9 81       	ldd	r30, Y+1	; 0x01
    1476:	fa 81       	ldd	r31, Y+2	; 0x02
    1478:	81 85       	ldd	r24, Z+9	; 0x09
    147a:	92 85       	ldd	r25, Z+10	; 0x0a
    147c:	cc 01       	movw	r24, r24
    147e:	a0 e0       	ldi	r26, 0x00	; 0
    1480:	b0 e0       	ldi	r27, 0x00	; 0
    1482:	bc 01       	movw	r22, r24
    1484:	cd 01       	movw	r24, r26
    1486:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    148a:	9b 01       	movw	r18, r22
    148c:	ac 01       	movw	r20, r24
    148e:	c8 01       	movw	r24, r16
    1490:	b7 01       	movw	r22, r14
    1492:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1496:	dc 01       	movw	r26, r24
    1498:	cb 01       	movw	r24, r22
    149a:	bc 01       	movw	r22, r24
    149c:	cd 01       	movw	r24, r26
    149e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14a2:	dc 01       	movw	r26, r24
    14a4:	cb 01       	movw	r24, r22
    14a6:	f6 01       	movw	r30, r12
    14a8:	91 83       	std	Z+1, r25	; 0x01
    14aa:	80 83       	st	Z, r24
    14ac:	3f c0       	rjmp	.+126    	; 0x152c <PWM_VoidSetDuty+0x13a>
		}
		else if(copy_pst_config->PWM_OCR == PWM_OCR1B)
    14ae:	e9 81       	ldd	r30, Y+1	; 0x01
    14b0:	fa 81       	ldd	r31, Y+2	; 0x02
    14b2:	84 81       	ldd	r24, Z+4	; 0x04
    14b4:	81 30       	cpi	r24, 0x01	; 1
    14b6:	d1 f5       	brne	.+116    	; 0x152c <PWM_VoidSetDuty+0x13a>
		{
			PWM_OCR1B_REG = (u16)((copy_u8DutyCycle/(f32)100.0) * copy_pst_config->PWM_topVal);
    14b8:	0f 2e       	mov	r0, r31
    14ba:	f8 e4       	ldi	r31, 0x48	; 72
    14bc:	cf 2e       	mov	r12, r31
    14be:	dd 24       	eor	r13, r13
    14c0:	f0 2d       	mov	r31, r0
    14c2:	8b 81       	ldd	r24, Y+3	; 0x03
    14c4:	88 2f       	mov	r24, r24
    14c6:	90 e0       	ldi	r25, 0x00	; 0
    14c8:	aa 27       	eor	r26, r26
    14ca:	97 fd       	sbrc	r25, 7
    14cc:	a0 95       	com	r26
    14ce:	ba 2f       	mov	r27, r26
    14d0:	bc 01       	movw	r22, r24
    14d2:	cd 01       	movw	r24, r26
    14d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    14d8:	dc 01       	movw	r26, r24
    14da:	cb 01       	movw	r24, r22
    14dc:	bc 01       	movw	r22, r24
    14de:	cd 01       	movw	r24, r26
    14e0:	20 e0       	ldi	r18, 0x00	; 0
    14e2:	30 e0       	ldi	r19, 0x00	; 0
    14e4:	48 ec       	ldi	r20, 0xC8	; 200
    14e6:	52 e4       	ldi	r21, 0x42	; 66
    14e8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    14ec:	dc 01       	movw	r26, r24
    14ee:	cb 01       	movw	r24, r22
    14f0:	7c 01       	movw	r14, r24
    14f2:	8d 01       	movw	r16, r26
    14f4:	e9 81       	ldd	r30, Y+1	; 0x01
    14f6:	fa 81       	ldd	r31, Y+2	; 0x02
    14f8:	81 85       	ldd	r24, Z+9	; 0x09
    14fa:	92 85       	ldd	r25, Z+10	; 0x0a
    14fc:	cc 01       	movw	r24, r24
    14fe:	a0 e0       	ldi	r26, 0x00	; 0
    1500:	b0 e0       	ldi	r27, 0x00	; 0
    1502:	bc 01       	movw	r22, r24
    1504:	cd 01       	movw	r24, r26
    1506:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    150a:	9b 01       	movw	r18, r22
    150c:	ac 01       	movw	r20, r24
    150e:	c8 01       	movw	r24, r16
    1510:	b7 01       	movw	r22, r14
    1512:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1516:	dc 01       	movw	r26, r24
    1518:	cb 01       	movw	r24, r22
    151a:	bc 01       	movw	r22, r24
    151c:	cd 01       	movw	r24, r26
    151e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1522:	dc 01       	movw	r26, r24
    1524:	cb 01       	movw	r24, r22
    1526:	f6 01       	movw	r30, r12
    1528:	91 83       	std	Z+1, r25	; 0x01
    152a:	80 83       	st	Z, r24
	else
	{
		// nothing
	}

}
    152c:	0f 90       	pop	r0
    152e:	0f 90       	pop	r0
    1530:	0f 90       	pop	r0
    1532:	cf 91       	pop	r28
    1534:	df 91       	pop	r29
    1536:	1f 91       	pop	r17
    1538:	0f 91       	pop	r16
    153a:	ff 90       	pop	r15
    153c:	ef 90       	pop	r14
    153e:	df 90       	pop	r13
    1540:	cf 90       	pop	r12
    1542:	08 95       	ret

00001544 <ExtINT_VoidInit>:
void __vector_1(void) __attribute__ ((signal, used));
void __vector_2(void) __attribute__ ((signal , used));
void __vector_3(void) __attribute__ ((signal , used));

void ExtINT_VoidInit(ExtInt_stCfg* copy_pExtInt_stCfg)
{
    1544:	df 93       	push	r29
    1546:	cf 93       	push	r28
    1548:	00 d0       	rcall	.+0      	; 0x154a <ExtINT_VoidInit+0x6>
    154a:	cd b7       	in	r28, 0x3d	; 61
    154c:	de b7       	in	r29, 0x3e	; 62
    154e:	9a 83       	std	Y+2, r25	; 0x02
    1550:	89 83       	std	Y+1, r24	; 0x01
	if(NULL != copy_pExtInt_stCfg && ( copy_pExtInt_stCfg->EXT_INT0_SC != EX_INT_DISABLE || copy_pExtInt_stCfg->EXT_INT1_SC != EX_INT_DISABLE || copy_pExtInt_stCfg->EXT_INT2_SC != EX_INT_DISABLE  ) )
    1552:	89 81       	ldd	r24, Y+1	; 0x01
    1554:	9a 81       	ldd	r25, Y+2	; 0x02
    1556:	00 97       	sbiw	r24, 0x00	; 0
    1558:	09 f4       	brne	.+2      	; 0x155c <ExtINT_VoidInit+0x18>
    155a:	bf c0       	rjmp	.+382    	; 0x16da <ExtINT_VoidInit+0x196>
    155c:	e9 81       	ldd	r30, Y+1	; 0x01
    155e:	fa 81       	ldd	r31, Y+2	; 0x02
    1560:	80 81       	ld	r24, Z
    1562:	87 70       	andi	r24, 0x07	; 7
    1564:	84 30       	cpi	r24, 0x04	; 4
    1566:	b1 f4       	brne	.+44     	; 0x1594 <ExtINT_VoidInit+0x50>
    1568:	e9 81       	ldd	r30, Y+1	; 0x01
    156a:	fa 81       	ldd	r31, Y+2	; 0x02
    156c:	80 81       	ld	r24, Z
    156e:	88 73       	andi	r24, 0x38	; 56
    1570:	80 32       	cpi	r24, 0x20	; 32
    1572:	81 f4       	brne	.+32     	; 0x1594 <ExtINT_VoidInit+0x50>
    1574:	e9 81       	ldd	r30, Y+1	; 0x01
    1576:	fa 81       	ldd	r31, Y+2	; 0x02
    1578:	80 81       	ld	r24, Z
    157a:	98 2f       	mov	r25, r24
    157c:	92 95       	swap	r25
    157e:	96 95       	lsr	r25
    1580:	96 95       	lsr	r25
    1582:	93 70       	andi	r25, 0x03	; 3
    1584:	81 81       	ldd	r24, Z+1	; 0x01
    1586:	81 70       	andi	r24, 0x01	; 1
    1588:	88 0f       	add	r24, r24
    158a:	88 0f       	add	r24, r24
    158c:	89 2b       	or	r24, r25
    158e:	84 30       	cpi	r24, 0x04	; 4
    1590:	09 f4       	brne	.+2      	; 0x1594 <ExtINT_VoidInit+0x50>
    1592:	a3 c0       	rjmp	.+326    	; 0x16da <ExtINT_VoidInit+0x196>
	{
		/*Enable Global Interrupt*/
		GIE_ENABLE();
    1594:	af e5       	ldi	r26, 0x5F	; 95
    1596:	b0 e0       	ldi	r27, 0x00	; 0
    1598:	ef e5       	ldi	r30, 0x5F	; 95
    159a:	f0 e0       	ldi	r31, 0x00	; 0
    159c:	80 81       	ld	r24, Z
    159e:	80 68       	ori	r24, 0x80	; 128
    15a0:	8c 93       	st	X, r24

		if(copy_pExtInt_stCfg->EXT_INT0_SC != EX_INT_DISABLE)
    15a2:	e9 81       	ldd	r30, Y+1	; 0x01
    15a4:	fa 81       	ldd	r31, Y+2	; 0x02
    15a6:	80 81       	ld	r24, Z
    15a8:	87 70       	andi	r24, 0x07	; 7
    15aa:	84 30       	cpi	r24, 0x04	; 4
    15ac:	09 f1       	breq	.+66     	; 0x15f0 <ExtINT_VoidInit+0xac>
			 *
			 * */
#if	EXT_INT0_INTERNAL_PULLUP == EXT_INT_INT_PULLUP_ENABLE
			DIO_VoidSetPinValue(DIO_PORTD_IDX , DIO_PIN2 , DIO_PIN_LOGIC_HIGH);
#elif EXT_INT0_INTERNAL_PULLUP == EXT_INT_INT_PULLUP_DISABLE
			DIO_VoidSetPinValue(DIO_PORTD_IDX , DIO_PIN2,DIO_PIN_LOGIC_LOW);
    15ae:	83 e0       	ldi	r24, 0x03	; 3
    15b0:	62 e0       	ldi	r22, 0x02	; 2
    15b2:	40 e0       	ldi	r20, 0x00	; 0
    15b4:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <DIO_VoidSetPinValue>
#else
#warning "Check EXT_INT_Config.h please"
#endif
			/*configure sense control*/
			EXT_INT0_ISC_SET(copy_pExtInt_stCfg->EXT_INT0_SC);
    15b8:	a5 e5       	ldi	r26, 0x55	; 85
    15ba:	b0 e0       	ldi	r27, 0x00	; 0
    15bc:	e5 e5       	ldi	r30, 0x55	; 85
    15be:	f0 e0       	ldi	r31, 0x00	; 0
    15c0:	80 81       	ld	r24, Z
    15c2:	98 2f       	mov	r25, r24
    15c4:	9c 7f       	andi	r25, 0xFC	; 252
    15c6:	e9 81       	ldd	r30, Y+1	; 0x01
    15c8:	fa 81       	ldd	r31, Y+2	; 0x02
    15ca:	80 81       	ld	r24, Z
    15cc:	87 70       	andi	r24, 0x07	; 7
    15ce:	89 2b       	or	r24, r25
    15d0:	8c 93       	st	X, r24
			/*set ISR Function*/
			ptrFunc_Int0CallBack = copy_pExtInt_stCfg->ExtInt0_CBF;
    15d2:	e9 81       	ldd	r30, Y+1	; 0x01
    15d4:	fa 81       	ldd	r31, Y+2	; 0x02
    15d6:	82 81       	ldd	r24, Z+2	; 0x02
    15d8:	93 81       	ldd	r25, Z+3	; 0x03
    15da:	90 93 d1 01 	sts	0x01D1, r25
    15de:	80 93 d0 01 	sts	0x01D0, r24
			/*enable INT0 interrupt*/
			EXT_INT0_ENABLE();
    15e2:	ab e5       	ldi	r26, 0x5B	; 91
    15e4:	b0 e0       	ldi	r27, 0x00	; 0
    15e6:	eb e5       	ldi	r30, 0x5B	; 91
    15e8:	f0 e0       	ldi	r31, 0x00	; 0
    15ea:	80 81       	ld	r24, Z
    15ec:	80 64       	ori	r24, 0x40	; 64
    15ee:	8c 93       	st	X, r24

		}
		else{/*Nothing*/}
		if(copy_pExtInt_stCfg->EXT_INT1_SC != EX_INT_DISABLE)
    15f0:	e9 81       	ldd	r30, Y+1	; 0x01
    15f2:	fa 81       	ldd	r31, Y+2	; 0x02
    15f4:	80 81       	ld	r24, Z
    15f6:	88 73       	andi	r24, 0x38	; 56
    15f8:	80 32       	cpi	r24, 0x20	; 32
    15fa:	51 f1       	breq	.+84     	; 0x1650 <ExtINT_VoidInit+0x10c>
		{
#if	EXT_INT1_INTERNAL_PULLUP == EXT_INT_INT_PULLUP_ENABLE
			DIO_VoidSetPinValue(DIO_PORTD_IDX , DIO_PIN3 , DIO_PIN_LOGIC_HIGH);
#elif EXT_INT1_INTERNAL_PULLUP == EXT_INT_INT_PULLUP_DISABLE
			DIO_VoidSetPinValue(DIO_PORTD_IDX , DIO_PIN3,DIO_PIN_LOGIC_LOW);
    15fc:	83 e0       	ldi	r24, 0x03	; 3
    15fe:	63 e0       	ldi	r22, 0x03	; 3
    1600:	40 e0       	ldi	r20, 0x00	; 0
    1602:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <DIO_VoidSetPinValue>
#else
#warning "Check EXT_INT_Config.h please"
#endif
			/*configure sense control*/
			EXT_INT1_ISC_SET(copy_pExtInt_stCfg->EXT_INT1_SC);
    1606:	a5 e5       	ldi	r26, 0x55	; 85
    1608:	b0 e0       	ldi	r27, 0x00	; 0
    160a:	e5 e5       	ldi	r30, 0x55	; 85
    160c:	f0 e0       	ldi	r31, 0x00	; 0
    160e:	80 81       	ld	r24, Z
    1610:	28 2f       	mov	r18, r24
    1612:	23 7f       	andi	r18, 0xF3	; 243
    1614:	e9 81       	ldd	r30, Y+1	; 0x01
    1616:	fa 81       	ldd	r31, Y+2	; 0x02
    1618:	80 81       	ld	r24, Z
    161a:	86 95       	lsr	r24
    161c:	86 95       	lsr	r24
    161e:	86 95       	lsr	r24
    1620:	87 70       	andi	r24, 0x07	; 7
    1622:	88 2f       	mov	r24, r24
    1624:	90 e0       	ldi	r25, 0x00	; 0
    1626:	88 0f       	add	r24, r24
    1628:	99 1f       	adc	r25, r25
    162a:	88 0f       	add	r24, r24
    162c:	99 1f       	adc	r25, r25
    162e:	82 2b       	or	r24, r18
    1630:	8c 93       	st	X, r24
			/*set ISR Function*/
			ptrFunc_Int1CallBack = copy_pExtInt_stCfg->ExtInt1_CBF;
    1632:	e9 81       	ldd	r30, Y+1	; 0x01
    1634:	fa 81       	ldd	r31, Y+2	; 0x02
    1636:	84 81       	ldd	r24, Z+4	; 0x04
    1638:	95 81       	ldd	r25, Z+5	; 0x05
    163a:	90 93 d3 01 	sts	0x01D3, r25
    163e:	80 93 d2 01 	sts	0x01D2, r24
			/*enable INT1 interrupt*/
			EXT_INT1_ENABLE();
    1642:	ab e5       	ldi	r26, 0x5B	; 91
    1644:	b0 e0       	ldi	r27, 0x00	; 0
    1646:	eb e5       	ldi	r30, 0x5B	; 91
    1648:	f0 e0       	ldi	r31, 0x00	; 0
    164a:	80 81       	ld	r24, Z
    164c:	80 68       	ori	r24, 0x80	; 128
    164e:	8c 93       	st	X, r24
		}
		else{/*Nothing*/}
		if(copy_pExtInt_stCfg->EXT_INT2_SC != EX_INT_DISABLE)
    1650:	e9 81       	ldd	r30, Y+1	; 0x01
    1652:	fa 81       	ldd	r31, Y+2	; 0x02
    1654:	80 81       	ld	r24, Z
    1656:	98 2f       	mov	r25, r24
    1658:	92 95       	swap	r25
    165a:	96 95       	lsr	r25
    165c:	96 95       	lsr	r25
    165e:	93 70       	andi	r25, 0x03	; 3
    1660:	81 81       	ldd	r24, Z+1	; 0x01
    1662:	81 70       	andi	r24, 0x01	; 1
    1664:	88 0f       	add	r24, r24
    1666:	88 0f       	add	r24, r24
    1668:	89 2b       	or	r24, r25
    166a:	84 30       	cpi	r24, 0x04	; 4
    166c:	b1 f1       	breq	.+108    	; 0x16da <ExtINT_VoidInit+0x196>
		{
#if	EXT_INT2_INTERNAL_PULLUP == EXT_INT_INT_PULLUP_ENABLE
			DIO_VoidSetPinValue(DIO_PORTB_IDX , DIO_PIN2 , DIO_PIN_LOGIC_HIGH);
#elif EXT_INT2_INTERNAL_PULLUP == EXT_INT_INT_PULLUP_DISABLE
			DIO_VoidSetPinValue(DIO_PORTB_IDX , DIO_PIN2,DIO_PIN_LOGIC_LOW);
    166e:	81 e0       	ldi	r24, 0x01	; 1
    1670:	62 e0       	ldi	r22, 0x02	; 2
    1672:	40 e0       	ldi	r20, 0x00	; 0
    1674:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <DIO_VoidSetPinValue>
#else
#warning "Check EXT_INT_Config.h please"
#endif
			/*configure sense control*/
			EXT_INT2_ISC_SET(copy_pExtInt_stCfg->EXT_INT2_SC);
    1678:	a4 e5       	ldi	r26, 0x54	; 84
    167a:	b0 e0       	ldi	r27, 0x00	; 0
    167c:	e4 e5       	ldi	r30, 0x54	; 84
    167e:	f0 e0       	ldi	r31, 0x00	; 0
    1680:	80 81       	ld	r24, Z
    1682:	28 2f       	mov	r18, r24
    1684:	e9 81       	ldd	r30, Y+1	; 0x01
    1686:	fa 81       	ldd	r31, Y+2	; 0x02
    1688:	80 81       	ld	r24, Z
    168a:	98 2f       	mov	r25, r24
    168c:	92 95       	swap	r25
    168e:	96 95       	lsr	r25
    1690:	96 95       	lsr	r25
    1692:	93 70       	andi	r25, 0x03	; 3
    1694:	81 81       	ldd	r24, Z+1	; 0x01
    1696:	81 70       	andi	r24, 0x01	; 1
    1698:	88 0f       	add	r24, r24
    169a:	88 0f       	add	r24, r24
    169c:	89 2b       	or	r24, r25
    169e:	88 2f       	mov	r24, r24
    16a0:	90 e0       	ldi	r25, 0x00	; 0
    16a2:	81 70       	andi	r24, 0x01	; 1
    16a4:	90 70       	andi	r25, 0x00	; 0
    16a6:	00 24       	eor	r0, r0
    16a8:	96 95       	lsr	r25
    16aa:	87 95       	ror	r24
    16ac:	07 94       	ror	r0
    16ae:	96 95       	lsr	r25
    16b0:	87 95       	ror	r24
    16b2:	07 94       	ror	r0
    16b4:	98 2f       	mov	r25, r24
    16b6:	80 2d       	mov	r24, r0
    16b8:	82 2b       	or	r24, r18
    16ba:	8c 93       	st	X, r24
			/*set ISR Function*/
			ptrFunc_Int2CallBack = copy_pExtInt_stCfg->ExtInt2_CBF;
    16bc:	e9 81       	ldd	r30, Y+1	; 0x01
    16be:	fa 81       	ldd	r31, Y+2	; 0x02
    16c0:	86 81       	ldd	r24, Z+6	; 0x06
    16c2:	97 81       	ldd	r25, Z+7	; 0x07
    16c4:	90 93 d5 01 	sts	0x01D5, r25
    16c8:	80 93 d4 01 	sts	0x01D4, r24
			/*enable INT2 interrupt*/
			EXT_INT2_ENABLE();
    16cc:	ab e5       	ldi	r26, 0x5B	; 91
    16ce:	b0 e0       	ldi	r27, 0x00	; 0
    16d0:	eb e5       	ldi	r30, 0x5B	; 91
    16d2:	f0 e0       	ldi	r31, 0x00	; 0
    16d4:	80 81       	ld	r24, Z
    16d6:	80 62       	ori	r24, 0x20	; 32
    16d8:	8c 93       	st	X, r24
	else
	{

	}
	return;
}
    16da:	0f 90       	pop	r0
    16dc:	0f 90       	pop	r0
    16de:	cf 91       	pop	r28
    16e0:	df 91       	pop	r29
    16e2:	08 95       	ret

000016e4 <ExtINT_VoidDeInit>:

void ExtINT_VoidDeInit(ExtInt_stCfg* copy_pExtInt_stCfg)
{
    16e4:	df 93       	push	r29
    16e6:	cf 93       	push	r28
    16e8:	00 d0       	rcall	.+0      	; 0x16ea <ExtINT_VoidDeInit+0x6>
    16ea:	cd b7       	in	r28, 0x3d	; 61
    16ec:	de b7       	in	r29, 0x3e	; 62
    16ee:	9a 83       	std	Y+2, r25	; 0x02
    16f0:	89 83       	std	Y+1, r24	; 0x01
	EXT_INT0_DISABLE();
    16f2:	ab e5       	ldi	r26, 0x5B	; 91
    16f4:	b0 e0       	ldi	r27, 0x00	; 0
    16f6:	eb e5       	ldi	r30, 0x5B	; 91
    16f8:	f0 e0       	ldi	r31, 0x00	; 0
    16fa:	80 81       	ld	r24, Z
    16fc:	8f 7b       	andi	r24, 0xBF	; 191
    16fe:	8c 93       	st	X, r24
	EXT_INT1_DISABLE();
    1700:	ab e5       	ldi	r26, 0x5B	; 91
    1702:	b0 e0       	ldi	r27, 0x00	; 0
    1704:	eb e5       	ldi	r30, 0x5B	; 91
    1706:	f0 e0       	ldi	r31, 0x00	; 0
    1708:	80 81       	ld	r24, Z
    170a:	8f 77       	andi	r24, 0x7F	; 127
    170c:	8c 93       	st	X, r24
	EXT_INT2_DISABLE();
    170e:	ab e5       	ldi	r26, 0x5B	; 91
    1710:	b0 e0       	ldi	r27, 0x00	; 0
    1712:	eb e5       	ldi	r30, 0x5B	; 91
    1714:	f0 e0       	ldi	r31, 0x00	; 0
    1716:	80 81       	ld	r24, Z
    1718:	8f 7d       	andi	r24, 0xDF	; 223
    171a:	8c 93       	st	X, r24
}
    171c:	0f 90       	pop	r0
    171e:	0f 90       	pop	r0
    1720:	cf 91       	pop	r28
    1722:	df 91       	pop	r29
    1724:	08 95       	ret

00001726 <ExtINT_changeSense>:
void ExtINT_changeSense(u8 copy_u8Ext_INT , u8 copy_u8NewSens)
{
    1726:	df 93       	push	r29
    1728:	cf 93       	push	r28
    172a:	00 d0       	rcall	.+0      	; 0x172c <ExtINT_changeSense+0x6>
    172c:	00 d0       	rcall	.+0      	; 0x172e <ExtINT_changeSense+0x8>
    172e:	cd b7       	in	r28, 0x3d	; 61
    1730:	de b7       	in	r29, 0x3e	; 62
    1732:	89 83       	std	Y+1, r24	; 0x01
    1734:	6a 83       	std	Y+2, r22	; 0x02
	switch(copy_u8Ext_INT)
    1736:	89 81       	ldd	r24, Y+1	; 0x01
    1738:	28 2f       	mov	r18, r24
    173a:	30 e0       	ldi	r19, 0x00	; 0
    173c:	3c 83       	std	Y+4, r19	; 0x04
    173e:	2b 83       	std	Y+3, r18	; 0x03
    1740:	8b 81       	ldd	r24, Y+3	; 0x03
    1742:	9c 81       	ldd	r25, Y+4	; 0x04
    1744:	81 30       	cpi	r24, 0x01	; 1
    1746:	91 05       	cpc	r25, r1
    1748:	a1 f0       	breq	.+40     	; 0x1772 <ExtINT_changeSense+0x4c>
    174a:	2b 81       	ldd	r18, Y+3	; 0x03
    174c:	3c 81       	ldd	r19, Y+4	; 0x04
    174e:	22 30       	cpi	r18, 0x02	; 2
    1750:	31 05       	cpc	r19, r1
    1752:	01 f1       	breq	.+64     	; 0x1794 <ExtINT_changeSense+0x6e>
    1754:	8b 81       	ldd	r24, Y+3	; 0x03
    1756:	9c 81       	ldd	r25, Y+4	; 0x04
    1758:	00 97       	sbiw	r24, 0x00	; 0
    175a:	91 f5       	brne	.+100    	; 0x17c0 <ExtINT_changeSense+0x9a>
	{
	case EXT_INT0:
		EXT_INT0_ISC_SET(copy_u8NewSens);
    175c:	a5 e5       	ldi	r26, 0x55	; 85
    175e:	b0 e0       	ldi	r27, 0x00	; 0
    1760:	e5 e5       	ldi	r30, 0x55	; 85
    1762:	f0 e0       	ldi	r31, 0x00	; 0
    1764:	80 81       	ld	r24, Z
    1766:	98 2f       	mov	r25, r24
    1768:	9c 7f       	andi	r25, 0xFC	; 252
    176a:	8a 81       	ldd	r24, Y+2	; 0x02
    176c:	89 2b       	or	r24, r25
    176e:	8c 93       	st	X, r24
    1770:	27 c0       	rjmp	.+78     	; 0x17c0 <ExtINT_changeSense+0x9a>
		break;
	case EXT_INT1:
		EXT_INT1_ISC_SET(copy_u8NewSens);
    1772:	a5 e5       	ldi	r26, 0x55	; 85
    1774:	b0 e0       	ldi	r27, 0x00	; 0
    1776:	e5 e5       	ldi	r30, 0x55	; 85
    1778:	f0 e0       	ldi	r31, 0x00	; 0
    177a:	80 81       	ld	r24, Z
    177c:	28 2f       	mov	r18, r24
    177e:	23 7f       	andi	r18, 0xF3	; 243
    1780:	8a 81       	ldd	r24, Y+2	; 0x02
    1782:	88 2f       	mov	r24, r24
    1784:	90 e0       	ldi	r25, 0x00	; 0
    1786:	88 0f       	add	r24, r24
    1788:	99 1f       	adc	r25, r25
    178a:	88 0f       	add	r24, r24
    178c:	99 1f       	adc	r25, r25
    178e:	82 2b       	or	r24, r18
    1790:	8c 93       	st	X, r24
    1792:	16 c0       	rjmp	.+44     	; 0x17c0 <ExtINT_changeSense+0x9a>
		break;
	case EXT_INT2:
		EXT_INT2_ISC_SET(copy_u8NewSens);
    1794:	a4 e5       	ldi	r26, 0x54	; 84
    1796:	b0 e0       	ldi	r27, 0x00	; 0
    1798:	e4 e5       	ldi	r30, 0x54	; 84
    179a:	f0 e0       	ldi	r31, 0x00	; 0
    179c:	80 81       	ld	r24, Z
    179e:	28 2f       	mov	r18, r24
    17a0:	8a 81       	ldd	r24, Y+2	; 0x02
    17a2:	88 2f       	mov	r24, r24
    17a4:	90 e0       	ldi	r25, 0x00	; 0
    17a6:	81 70       	andi	r24, 0x01	; 1
    17a8:	90 70       	andi	r25, 0x00	; 0
    17aa:	00 24       	eor	r0, r0
    17ac:	96 95       	lsr	r25
    17ae:	87 95       	ror	r24
    17b0:	07 94       	ror	r0
    17b2:	96 95       	lsr	r25
    17b4:	87 95       	ror	r24
    17b6:	07 94       	ror	r0
    17b8:	98 2f       	mov	r25, r24
    17ba:	80 2d       	mov	r24, r0
    17bc:	82 2b       	or	r24, r18
    17be:	8c 93       	st	X, r24
		break;
	}

}
    17c0:	0f 90       	pop	r0
    17c2:	0f 90       	pop	r0
    17c4:	0f 90       	pop	r0
    17c6:	0f 90       	pop	r0
    17c8:	cf 91       	pop	r28
    17ca:	df 91       	pop	r29
    17cc:	08 95       	ret

000017ce <__vector_1>:



void __vector_1(void)
{
    17ce:	1f 92       	push	r1
    17d0:	0f 92       	push	r0
    17d2:	0f b6       	in	r0, 0x3f	; 63
    17d4:	0f 92       	push	r0
    17d6:	11 24       	eor	r1, r1
    17d8:	2f 93       	push	r18
    17da:	3f 93       	push	r19
    17dc:	4f 93       	push	r20
    17de:	5f 93       	push	r21
    17e0:	6f 93       	push	r22
    17e2:	7f 93       	push	r23
    17e4:	8f 93       	push	r24
    17e6:	9f 93       	push	r25
    17e8:	af 93       	push	r26
    17ea:	bf 93       	push	r27
    17ec:	ef 93       	push	r30
    17ee:	ff 93       	push	r31
    17f0:	df 93       	push	r29
    17f2:	cf 93       	push	r28
    17f4:	cd b7       	in	r28, 0x3d	; 61
    17f6:	de b7       	in	r29, 0x3e	; 62
	if(NULL != ptrFunc_Int0CallBack)
    17f8:	80 91 d0 01 	lds	r24, 0x01D0
    17fc:	90 91 d1 01 	lds	r25, 0x01D1
    1800:	00 97       	sbiw	r24, 0x00	; 0
    1802:	29 f0       	breq	.+10     	; 0x180e <__vector_1+0x40>
		ptrFunc_Int0CallBack();
    1804:	e0 91 d0 01 	lds	r30, 0x01D0
    1808:	f0 91 d1 01 	lds	r31, 0x01D1
    180c:	09 95       	icall
}
    180e:	cf 91       	pop	r28
    1810:	df 91       	pop	r29
    1812:	ff 91       	pop	r31
    1814:	ef 91       	pop	r30
    1816:	bf 91       	pop	r27
    1818:	af 91       	pop	r26
    181a:	9f 91       	pop	r25
    181c:	8f 91       	pop	r24
    181e:	7f 91       	pop	r23
    1820:	6f 91       	pop	r22
    1822:	5f 91       	pop	r21
    1824:	4f 91       	pop	r20
    1826:	3f 91       	pop	r19
    1828:	2f 91       	pop	r18
    182a:	0f 90       	pop	r0
    182c:	0f be       	out	0x3f, r0	; 63
    182e:	0f 90       	pop	r0
    1830:	1f 90       	pop	r1
    1832:	18 95       	reti

00001834 <__vector_2>:

void __vector_2(void)
{
    1834:	1f 92       	push	r1
    1836:	0f 92       	push	r0
    1838:	0f b6       	in	r0, 0x3f	; 63
    183a:	0f 92       	push	r0
    183c:	11 24       	eor	r1, r1
    183e:	2f 93       	push	r18
    1840:	3f 93       	push	r19
    1842:	4f 93       	push	r20
    1844:	5f 93       	push	r21
    1846:	6f 93       	push	r22
    1848:	7f 93       	push	r23
    184a:	8f 93       	push	r24
    184c:	9f 93       	push	r25
    184e:	af 93       	push	r26
    1850:	bf 93       	push	r27
    1852:	ef 93       	push	r30
    1854:	ff 93       	push	r31
    1856:	df 93       	push	r29
    1858:	cf 93       	push	r28
    185a:	cd b7       	in	r28, 0x3d	; 61
    185c:	de b7       	in	r29, 0x3e	; 62
	if(NULL != ptrFunc_Int1CallBack)
    185e:	80 91 d2 01 	lds	r24, 0x01D2
    1862:	90 91 d3 01 	lds	r25, 0x01D3
    1866:	00 97       	sbiw	r24, 0x00	; 0
    1868:	29 f0       	breq	.+10     	; 0x1874 <__vector_2+0x40>
		ptrFunc_Int1CallBack();
    186a:	e0 91 d2 01 	lds	r30, 0x01D2
    186e:	f0 91 d3 01 	lds	r31, 0x01D3
    1872:	09 95       	icall
}
    1874:	cf 91       	pop	r28
    1876:	df 91       	pop	r29
    1878:	ff 91       	pop	r31
    187a:	ef 91       	pop	r30
    187c:	bf 91       	pop	r27
    187e:	af 91       	pop	r26
    1880:	9f 91       	pop	r25
    1882:	8f 91       	pop	r24
    1884:	7f 91       	pop	r23
    1886:	6f 91       	pop	r22
    1888:	5f 91       	pop	r21
    188a:	4f 91       	pop	r20
    188c:	3f 91       	pop	r19
    188e:	2f 91       	pop	r18
    1890:	0f 90       	pop	r0
    1892:	0f be       	out	0x3f, r0	; 63
    1894:	0f 90       	pop	r0
    1896:	1f 90       	pop	r1
    1898:	18 95       	reti

0000189a <__vector_3>:

void __vector_3(void)
{
    189a:	1f 92       	push	r1
    189c:	0f 92       	push	r0
    189e:	0f b6       	in	r0, 0x3f	; 63
    18a0:	0f 92       	push	r0
    18a2:	11 24       	eor	r1, r1
    18a4:	2f 93       	push	r18
    18a6:	3f 93       	push	r19
    18a8:	4f 93       	push	r20
    18aa:	5f 93       	push	r21
    18ac:	6f 93       	push	r22
    18ae:	7f 93       	push	r23
    18b0:	8f 93       	push	r24
    18b2:	9f 93       	push	r25
    18b4:	af 93       	push	r26
    18b6:	bf 93       	push	r27
    18b8:	ef 93       	push	r30
    18ba:	ff 93       	push	r31
    18bc:	df 93       	push	r29
    18be:	cf 93       	push	r28
    18c0:	cd b7       	in	r28, 0x3d	; 61
    18c2:	de b7       	in	r29, 0x3e	; 62
	if(NULL != ptrFunc_Int2CallBack)
    18c4:	80 91 d4 01 	lds	r24, 0x01D4
    18c8:	90 91 d5 01 	lds	r25, 0x01D5
    18cc:	00 97       	sbiw	r24, 0x00	; 0
    18ce:	29 f0       	breq	.+10     	; 0x18da <__vector_3+0x40>
		ptrFunc_Int2CallBack();
    18d0:	e0 91 d4 01 	lds	r30, 0x01D4
    18d4:	f0 91 d5 01 	lds	r31, 0x01D5
    18d8:	09 95       	icall
}
    18da:	cf 91       	pop	r28
    18dc:	df 91       	pop	r29
    18de:	ff 91       	pop	r31
    18e0:	ef 91       	pop	r30
    18e2:	bf 91       	pop	r27
    18e4:	af 91       	pop	r26
    18e6:	9f 91       	pop	r25
    18e8:	8f 91       	pop	r24
    18ea:	7f 91       	pop	r23
    18ec:	6f 91       	pop	r22
    18ee:	5f 91       	pop	r21
    18f0:	4f 91       	pop	r20
    18f2:	3f 91       	pop	r19
    18f4:	2f 91       	pop	r18
    18f6:	0f 90       	pop	r0
    18f8:	0f be       	out	0x3f, r0	; 63
    18fa:	0f 90       	pop	r0
    18fc:	1f 90       	pop	r1
    18fe:	18 95       	reti

00001900 <DIO_VoidSetPinDirection>:
static volatile u8* DIO_ARR_PIN[4] = {DIO_PINA_REG,DIO_PINB_REG,DIO_PINC_REG,DIO_PIND_REG};



void DIO_VoidSetPinDirection(u8 Copy_u8port,u8 Copy_u8pin,u8 Copy_u8direction)
{
    1900:	df 93       	push	r29
    1902:	cf 93       	push	r28
    1904:	00 d0       	rcall	.+0      	; 0x1906 <DIO_VoidSetPinDirection+0x6>
    1906:	00 d0       	rcall	.+0      	; 0x1908 <DIO_VoidSetPinDirection+0x8>
    1908:	0f 92       	push	r0
    190a:	cd b7       	in	r28, 0x3d	; 61
    190c:	de b7       	in	r29, 0x3e	; 62
    190e:	89 83       	std	Y+1, r24	; 0x01
    1910:	6a 83       	std	Y+2, r22	; 0x02
    1912:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8port <= DIO_PORTD_IDX  && Copy_u8pin <= DIO_PIN7 )
    1914:	89 81       	ldd	r24, Y+1	; 0x01
    1916:	84 30       	cpi	r24, 0x04	; 4
    1918:	08 f0       	brcs	.+2      	; 0x191c <DIO_VoidSetPinDirection+0x1c>
    191a:	5d c0       	rjmp	.+186    	; 0x19d6 <DIO_VoidSetPinDirection+0xd6>
    191c:	8a 81       	ldd	r24, Y+2	; 0x02
    191e:	88 30       	cpi	r24, 0x08	; 8
    1920:	08 f0       	brcs	.+2      	; 0x1924 <DIO_VoidSetPinDirection+0x24>
    1922:	59 c0       	rjmp	.+178    	; 0x19d6 <DIO_VoidSetPinDirection+0xd6>
	{
		switch(Copy_u8direction)
    1924:	8b 81       	ldd	r24, Y+3	; 0x03
    1926:	28 2f       	mov	r18, r24
    1928:	30 e0       	ldi	r19, 0x00	; 0
    192a:	3d 83       	std	Y+5, r19	; 0x05
    192c:	2c 83       	std	Y+4, r18	; 0x04
    192e:	8c 81       	ldd	r24, Y+4	; 0x04
    1930:	9d 81       	ldd	r25, Y+5	; 0x05
    1932:	00 97       	sbiw	r24, 0x00	; 0
    1934:	31 f0       	breq	.+12     	; 0x1942 <DIO_VoidSetPinDirection+0x42>
    1936:	2c 81       	ldd	r18, Y+4	; 0x04
    1938:	3d 81       	ldd	r19, Y+5	; 0x05
    193a:	21 30       	cpi	r18, 0x01	; 1
    193c:	31 05       	cpc	r19, r1
    193e:	39 f1       	breq	.+78     	; 0x198e <DIO_VoidSetPinDirection+0x8e>
    1940:	4a c0       	rjmp	.+148    	; 0x19d6 <DIO_VoidSetPinDirection+0xd6>
		{
		case DIO_PIN_DIR_INPUT:
			Clr_Bit( (*DIO_ARR_DDR[Copy_u8port]) , Copy_u8pin);
    1942:	89 81       	ldd	r24, Y+1	; 0x01
    1944:	88 2f       	mov	r24, r24
    1946:	90 e0       	ldi	r25, 0x00	; 0
    1948:	88 0f       	add	r24, r24
    194a:	99 1f       	adc	r25, r25
    194c:	fc 01       	movw	r30, r24
    194e:	e0 59       	subi	r30, 0x90	; 144
    1950:	fe 4f       	sbci	r31, 0xFE	; 254
    1952:	a0 81       	ld	r26, Z
    1954:	b1 81       	ldd	r27, Z+1	; 0x01
    1956:	89 81       	ldd	r24, Y+1	; 0x01
    1958:	88 2f       	mov	r24, r24
    195a:	90 e0       	ldi	r25, 0x00	; 0
    195c:	88 0f       	add	r24, r24
    195e:	99 1f       	adc	r25, r25
    1960:	fc 01       	movw	r30, r24
    1962:	e0 59       	subi	r30, 0x90	; 144
    1964:	fe 4f       	sbci	r31, 0xFE	; 254
    1966:	01 90       	ld	r0, Z+
    1968:	f0 81       	ld	r31, Z
    196a:	e0 2d       	mov	r30, r0
    196c:	80 81       	ld	r24, Z
    196e:	48 2f       	mov	r20, r24
    1970:	8a 81       	ldd	r24, Y+2	; 0x02
    1972:	28 2f       	mov	r18, r24
    1974:	30 e0       	ldi	r19, 0x00	; 0
    1976:	81 e0       	ldi	r24, 0x01	; 1
    1978:	90 e0       	ldi	r25, 0x00	; 0
    197a:	02 2e       	mov	r0, r18
    197c:	02 c0       	rjmp	.+4      	; 0x1982 <DIO_VoidSetPinDirection+0x82>
    197e:	88 0f       	add	r24, r24
    1980:	99 1f       	adc	r25, r25
    1982:	0a 94       	dec	r0
    1984:	e2 f7       	brpl	.-8      	; 0x197e <DIO_VoidSetPinDirection+0x7e>
    1986:	80 95       	com	r24
    1988:	84 23       	and	r24, r20
    198a:	8c 93       	st	X, r24
    198c:	24 c0       	rjmp	.+72     	; 0x19d6 <DIO_VoidSetPinDirection+0xd6>
			break;
		case DIO_PIN_DIR_OUTPUT:
			Set_Bit( (*DIO_ARR_DDR[Copy_u8port]) , Copy_u8pin);
    198e:	89 81       	ldd	r24, Y+1	; 0x01
    1990:	88 2f       	mov	r24, r24
    1992:	90 e0       	ldi	r25, 0x00	; 0
    1994:	88 0f       	add	r24, r24
    1996:	99 1f       	adc	r25, r25
    1998:	fc 01       	movw	r30, r24
    199a:	e0 59       	subi	r30, 0x90	; 144
    199c:	fe 4f       	sbci	r31, 0xFE	; 254
    199e:	a0 81       	ld	r26, Z
    19a0:	b1 81       	ldd	r27, Z+1	; 0x01
    19a2:	89 81       	ldd	r24, Y+1	; 0x01
    19a4:	88 2f       	mov	r24, r24
    19a6:	90 e0       	ldi	r25, 0x00	; 0
    19a8:	88 0f       	add	r24, r24
    19aa:	99 1f       	adc	r25, r25
    19ac:	fc 01       	movw	r30, r24
    19ae:	e0 59       	subi	r30, 0x90	; 144
    19b0:	fe 4f       	sbci	r31, 0xFE	; 254
    19b2:	01 90       	ld	r0, Z+
    19b4:	f0 81       	ld	r31, Z
    19b6:	e0 2d       	mov	r30, r0
    19b8:	80 81       	ld	r24, Z
    19ba:	48 2f       	mov	r20, r24
    19bc:	8a 81       	ldd	r24, Y+2	; 0x02
    19be:	28 2f       	mov	r18, r24
    19c0:	30 e0       	ldi	r19, 0x00	; 0
    19c2:	81 e0       	ldi	r24, 0x01	; 1
    19c4:	90 e0       	ldi	r25, 0x00	; 0
    19c6:	02 2e       	mov	r0, r18
    19c8:	02 c0       	rjmp	.+4      	; 0x19ce <DIO_VoidSetPinDirection+0xce>
    19ca:	88 0f       	add	r24, r24
    19cc:	99 1f       	adc	r25, r25
    19ce:	0a 94       	dec	r0
    19d0:	e2 f7       	brpl	.-8      	; 0x19ca <DIO_VoidSetPinDirection+0xca>
    19d2:	84 2b       	or	r24, r20
    19d4:	8c 93       	st	X, r24
	else
	{
		// nothing
	}
	return;
}
    19d6:	0f 90       	pop	r0
    19d8:	0f 90       	pop	r0
    19da:	0f 90       	pop	r0
    19dc:	0f 90       	pop	r0
    19de:	0f 90       	pop	r0
    19e0:	cf 91       	pop	r28
    19e2:	df 91       	pop	r29
    19e4:	08 95       	ret

000019e6 <DIO_VoidSetPinValue>:

void DIO_VoidSetPinValue(u8 Copy_u8port,u8 Copy_u8pin,u8 Copy_u8value)
{
    19e6:	df 93       	push	r29
    19e8:	cf 93       	push	r28
    19ea:	00 d0       	rcall	.+0      	; 0x19ec <DIO_VoidSetPinValue+0x6>
    19ec:	00 d0       	rcall	.+0      	; 0x19ee <DIO_VoidSetPinValue+0x8>
    19ee:	0f 92       	push	r0
    19f0:	cd b7       	in	r28, 0x3d	; 61
    19f2:	de b7       	in	r29, 0x3e	; 62
    19f4:	89 83       	std	Y+1, r24	; 0x01
    19f6:	6a 83       	std	Y+2, r22	; 0x02
    19f8:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8port <= DIO_PORTD_IDX  && Copy_u8pin <= DIO_PIN7 )
    19fa:	89 81       	ldd	r24, Y+1	; 0x01
    19fc:	84 30       	cpi	r24, 0x04	; 4
    19fe:	08 f0       	brcs	.+2      	; 0x1a02 <DIO_VoidSetPinValue+0x1c>
    1a00:	5d c0       	rjmp	.+186    	; 0x1abc <DIO_VoidSetPinValue+0xd6>
    1a02:	8a 81       	ldd	r24, Y+2	; 0x02
    1a04:	88 30       	cpi	r24, 0x08	; 8
    1a06:	08 f0       	brcs	.+2      	; 0x1a0a <DIO_VoidSetPinValue+0x24>
    1a08:	59 c0       	rjmp	.+178    	; 0x1abc <DIO_VoidSetPinValue+0xd6>
	{
		switch(Copy_u8value)
    1a0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a0c:	28 2f       	mov	r18, r24
    1a0e:	30 e0       	ldi	r19, 0x00	; 0
    1a10:	3d 83       	std	Y+5, r19	; 0x05
    1a12:	2c 83       	std	Y+4, r18	; 0x04
    1a14:	8c 81       	ldd	r24, Y+4	; 0x04
    1a16:	9d 81       	ldd	r25, Y+5	; 0x05
    1a18:	00 97       	sbiw	r24, 0x00	; 0
    1a1a:	31 f0       	breq	.+12     	; 0x1a28 <DIO_VoidSetPinValue+0x42>
    1a1c:	2c 81       	ldd	r18, Y+4	; 0x04
    1a1e:	3d 81       	ldd	r19, Y+5	; 0x05
    1a20:	21 30       	cpi	r18, 0x01	; 1
    1a22:	31 05       	cpc	r19, r1
    1a24:	39 f1       	breq	.+78     	; 0x1a74 <DIO_VoidSetPinValue+0x8e>
    1a26:	4a c0       	rjmp	.+148    	; 0x1abc <DIO_VoidSetPinValue+0xd6>
		{
		case DIO_PIN_LOGIC_LOW:
			Clr_Bit((*DIO_ARR_PORT[Copy_u8port]) , Copy_u8pin);
    1a28:	89 81       	ldd	r24, Y+1	; 0x01
    1a2a:	88 2f       	mov	r24, r24
    1a2c:	90 e0       	ldi	r25, 0x00	; 0
    1a2e:	88 0f       	add	r24, r24
    1a30:	99 1f       	adc	r25, r25
    1a32:	fc 01       	movw	r30, r24
    1a34:	e8 59       	subi	r30, 0x98	; 152
    1a36:	fe 4f       	sbci	r31, 0xFE	; 254
    1a38:	a0 81       	ld	r26, Z
    1a3a:	b1 81       	ldd	r27, Z+1	; 0x01
    1a3c:	89 81       	ldd	r24, Y+1	; 0x01
    1a3e:	88 2f       	mov	r24, r24
    1a40:	90 e0       	ldi	r25, 0x00	; 0
    1a42:	88 0f       	add	r24, r24
    1a44:	99 1f       	adc	r25, r25
    1a46:	fc 01       	movw	r30, r24
    1a48:	e8 59       	subi	r30, 0x98	; 152
    1a4a:	fe 4f       	sbci	r31, 0xFE	; 254
    1a4c:	01 90       	ld	r0, Z+
    1a4e:	f0 81       	ld	r31, Z
    1a50:	e0 2d       	mov	r30, r0
    1a52:	80 81       	ld	r24, Z
    1a54:	48 2f       	mov	r20, r24
    1a56:	8a 81       	ldd	r24, Y+2	; 0x02
    1a58:	28 2f       	mov	r18, r24
    1a5a:	30 e0       	ldi	r19, 0x00	; 0
    1a5c:	81 e0       	ldi	r24, 0x01	; 1
    1a5e:	90 e0       	ldi	r25, 0x00	; 0
    1a60:	02 2e       	mov	r0, r18
    1a62:	02 c0       	rjmp	.+4      	; 0x1a68 <DIO_VoidSetPinValue+0x82>
    1a64:	88 0f       	add	r24, r24
    1a66:	99 1f       	adc	r25, r25
    1a68:	0a 94       	dec	r0
    1a6a:	e2 f7       	brpl	.-8      	; 0x1a64 <DIO_VoidSetPinValue+0x7e>
    1a6c:	80 95       	com	r24
    1a6e:	84 23       	and	r24, r20
    1a70:	8c 93       	st	X, r24
    1a72:	24 c0       	rjmp	.+72     	; 0x1abc <DIO_VoidSetPinValue+0xd6>
			break;
		case DIO_PIN_LOGIC_HIGH:
			Set_Bit((*DIO_ARR_PORT[Copy_u8port]) , Copy_u8pin);
    1a74:	89 81       	ldd	r24, Y+1	; 0x01
    1a76:	88 2f       	mov	r24, r24
    1a78:	90 e0       	ldi	r25, 0x00	; 0
    1a7a:	88 0f       	add	r24, r24
    1a7c:	99 1f       	adc	r25, r25
    1a7e:	fc 01       	movw	r30, r24
    1a80:	e8 59       	subi	r30, 0x98	; 152
    1a82:	fe 4f       	sbci	r31, 0xFE	; 254
    1a84:	a0 81       	ld	r26, Z
    1a86:	b1 81       	ldd	r27, Z+1	; 0x01
    1a88:	89 81       	ldd	r24, Y+1	; 0x01
    1a8a:	88 2f       	mov	r24, r24
    1a8c:	90 e0       	ldi	r25, 0x00	; 0
    1a8e:	88 0f       	add	r24, r24
    1a90:	99 1f       	adc	r25, r25
    1a92:	fc 01       	movw	r30, r24
    1a94:	e8 59       	subi	r30, 0x98	; 152
    1a96:	fe 4f       	sbci	r31, 0xFE	; 254
    1a98:	01 90       	ld	r0, Z+
    1a9a:	f0 81       	ld	r31, Z
    1a9c:	e0 2d       	mov	r30, r0
    1a9e:	80 81       	ld	r24, Z
    1aa0:	48 2f       	mov	r20, r24
    1aa2:	8a 81       	ldd	r24, Y+2	; 0x02
    1aa4:	28 2f       	mov	r18, r24
    1aa6:	30 e0       	ldi	r19, 0x00	; 0
    1aa8:	81 e0       	ldi	r24, 0x01	; 1
    1aaa:	90 e0       	ldi	r25, 0x00	; 0
    1aac:	02 2e       	mov	r0, r18
    1aae:	02 c0       	rjmp	.+4      	; 0x1ab4 <DIO_VoidSetPinValue+0xce>
    1ab0:	88 0f       	add	r24, r24
    1ab2:	99 1f       	adc	r25, r25
    1ab4:	0a 94       	dec	r0
    1ab6:	e2 f7       	brpl	.-8      	; 0x1ab0 <DIO_VoidSetPinValue+0xca>
    1ab8:	84 2b       	or	r24, r20
    1aba:	8c 93       	st	X, r24
		}
	}
	else
	{/*nothing*/}
	return;
}
    1abc:	0f 90       	pop	r0
    1abe:	0f 90       	pop	r0
    1ac0:	0f 90       	pop	r0
    1ac2:	0f 90       	pop	r0
    1ac4:	0f 90       	pop	r0
    1ac6:	cf 91       	pop	r28
    1ac8:	df 91       	pop	r29
    1aca:	08 95       	ret

00001acc <DIO_VoidTogglePinValue>:
void DIO_VoidTogglePinValue(u8 Copy_u8port,u8 Copy_u8pin)
{
    1acc:	df 93       	push	r29
    1ace:	cf 93       	push	r28
    1ad0:	00 d0       	rcall	.+0      	; 0x1ad2 <DIO_VoidTogglePinValue+0x6>
    1ad2:	cd b7       	in	r28, 0x3d	; 61
    1ad4:	de b7       	in	r29, 0x3e	; 62
    1ad6:	89 83       	std	Y+1, r24	; 0x01
    1ad8:	6a 83       	std	Y+2, r22	; 0x02
	if(Copy_u8port <= DIO_PORTD_IDX  && Copy_u8pin <= DIO_PIN7 )
    1ada:	89 81       	ldd	r24, Y+1	; 0x01
    1adc:	84 30       	cpi	r24, 0x04	; 4
    1ade:	38 f5       	brcc	.+78     	; 0x1b2e <DIO_VoidTogglePinValue+0x62>
    1ae0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae2:	88 30       	cpi	r24, 0x08	; 8
    1ae4:	20 f5       	brcc	.+72     	; 0x1b2e <DIO_VoidTogglePinValue+0x62>
	{
		Toggle_Bit((*DIO_ARR_PORT[Copy_u8port]) , Copy_u8pin);
    1ae6:	89 81       	ldd	r24, Y+1	; 0x01
    1ae8:	88 2f       	mov	r24, r24
    1aea:	90 e0       	ldi	r25, 0x00	; 0
    1aec:	88 0f       	add	r24, r24
    1aee:	99 1f       	adc	r25, r25
    1af0:	fc 01       	movw	r30, r24
    1af2:	e8 59       	subi	r30, 0x98	; 152
    1af4:	fe 4f       	sbci	r31, 0xFE	; 254
    1af6:	a0 81       	ld	r26, Z
    1af8:	b1 81       	ldd	r27, Z+1	; 0x01
    1afa:	89 81       	ldd	r24, Y+1	; 0x01
    1afc:	88 2f       	mov	r24, r24
    1afe:	90 e0       	ldi	r25, 0x00	; 0
    1b00:	88 0f       	add	r24, r24
    1b02:	99 1f       	adc	r25, r25
    1b04:	fc 01       	movw	r30, r24
    1b06:	e8 59       	subi	r30, 0x98	; 152
    1b08:	fe 4f       	sbci	r31, 0xFE	; 254
    1b0a:	01 90       	ld	r0, Z+
    1b0c:	f0 81       	ld	r31, Z
    1b0e:	e0 2d       	mov	r30, r0
    1b10:	80 81       	ld	r24, Z
    1b12:	48 2f       	mov	r20, r24
    1b14:	8a 81       	ldd	r24, Y+2	; 0x02
    1b16:	28 2f       	mov	r18, r24
    1b18:	30 e0       	ldi	r19, 0x00	; 0
    1b1a:	81 e0       	ldi	r24, 0x01	; 1
    1b1c:	90 e0       	ldi	r25, 0x00	; 0
    1b1e:	02 2e       	mov	r0, r18
    1b20:	02 c0       	rjmp	.+4      	; 0x1b26 <DIO_VoidTogglePinValue+0x5a>
    1b22:	88 0f       	add	r24, r24
    1b24:	99 1f       	adc	r25, r25
    1b26:	0a 94       	dec	r0
    1b28:	e2 f7       	brpl	.-8      	; 0x1b22 <DIO_VoidTogglePinValue+0x56>
    1b2a:	84 27       	eor	r24, r20
    1b2c:	8c 93       	st	X, r24
	}
	else
	{/*nothing*/}
	return;
}
    1b2e:	0f 90       	pop	r0
    1b30:	0f 90       	pop	r0
    1b32:	cf 91       	pop	r28
    1b34:	df 91       	pop	r29
    1b36:	08 95       	ret

00001b38 <DIO_VoidGetPinValue>:
void DIO_VoidGetPinValue(u8 Copy_u8port,u8 Copy_u8pin,u8 *Copy_pu8Return)
{
    1b38:	df 93       	push	r29
    1b3a:	cf 93       	push	r28
    1b3c:	00 d0       	rcall	.+0      	; 0x1b3e <DIO_VoidGetPinValue+0x6>
    1b3e:	00 d0       	rcall	.+0      	; 0x1b40 <DIO_VoidGetPinValue+0x8>
    1b40:	cd b7       	in	r28, 0x3d	; 61
    1b42:	de b7       	in	r29, 0x3e	; 62
    1b44:	89 83       	std	Y+1, r24	; 0x01
    1b46:	6a 83       	std	Y+2, r22	; 0x02
    1b48:	5c 83       	std	Y+4, r21	; 0x04
    1b4a:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8port <= DIO_PORTD_IDX  && Copy_u8pin <= DIO_PIN7 && Copy_pu8Return )
    1b4c:	89 81       	ldd	r24, Y+1	; 0x01
    1b4e:	84 30       	cpi	r24, 0x04	; 4
    1b50:	18 f5       	brcc	.+70     	; 0x1b98 <DIO_VoidGetPinValue+0x60>
    1b52:	8a 81       	ldd	r24, Y+2	; 0x02
    1b54:	88 30       	cpi	r24, 0x08	; 8
    1b56:	00 f5       	brcc	.+64     	; 0x1b98 <DIO_VoidGetPinValue+0x60>
    1b58:	8b 81       	ldd	r24, Y+3	; 0x03
    1b5a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b5c:	00 97       	sbiw	r24, 0x00	; 0
    1b5e:	e1 f0       	breq	.+56     	; 0x1b98 <DIO_VoidGetPinValue+0x60>
	{
		*Copy_pu8Return = Get_Bit(*(DIO_ARR_PIN[Copy_u8port]) , Copy_u8pin);
    1b60:	89 81       	ldd	r24, Y+1	; 0x01
    1b62:	88 2f       	mov	r24, r24
    1b64:	90 e0       	ldi	r25, 0x00	; 0
    1b66:	88 0f       	add	r24, r24
    1b68:	99 1f       	adc	r25, r25
    1b6a:	fc 01       	movw	r30, r24
    1b6c:	e8 58       	subi	r30, 0x88	; 136
    1b6e:	fe 4f       	sbci	r31, 0xFE	; 254
    1b70:	01 90       	ld	r0, Z+
    1b72:	f0 81       	ld	r31, Z
    1b74:	e0 2d       	mov	r30, r0
    1b76:	80 81       	ld	r24, Z
    1b78:	28 2f       	mov	r18, r24
    1b7a:	30 e0       	ldi	r19, 0x00	; 0
    1b7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b7e:	88 2f       	mov	r24, r24
    1b80:	90 e0       	ldi	r25, 0x00	; 0
    1b82:	a9 01       	movw	r20, r18
    1b84:	02 c0       	rjmp	.+4      	; 0x1b8a <DIO_VoidGetPinValue+0x52>
    1b86:	55 95       	asr	r21
    1b88:	47 95       	ror	r20
    1b8a:	8a 95       	dec	r24
    1b8c:	e2 f7       	brpl	.-8      	; 0x1b86 <DIO_VoidGetPinValue+0x4e>
    1b8e:	ca 01       	movw	r24, r20
    1b90:	81 70       	andi	r24, 0x01	; 1
    1b92:	eb 81       	ldd	r30, Y+3	; 0x03
    1b94:	fc 81       	ldd	r31, Y+4	; 0x04
    1b96:	80 83       	st	Z, r24
	}
	else
	{/*nothing*/}
	return;
}
    1b98:	0f 90       	pop	r0
    1b9a:	0f 90       	pop	r0
    1b9c:	0f 90       	pop	r0
    1b9e:	0f 90       	pop	r0
    1ba0:	cf 91       	pop	r28
    1ba2:	df 91       	pop	r29
    1ba4:	08 95       	ret

00001ba6 <DIO_VoidSetPortDirection>:

void DIO_VoidSetPortDirection(u8 Copy_u8port,u8 Copy_u8direction)
{
    1ba6:	df 93       	push	r29
    1ba8:	cf 93       	push	r28
    1baa:	00 d0       	rcall	.+0      	; 0x1bac <DIO_VoidSetPortDirection+0x6>
    1bac:	cd b7       	in	r28, 0x3d	; 61
    1bae:	de b7       	in	r29, 0x3e	; 62
    1bb0:	89 83       	std	Y+1, r24	; 0x01
    1bb2:	6a 83       	std	Y+2, r22	; 0x02
	if(Copy_u8port <= DIO_PORTD_IDX)
    1bb4:	89 81       	ldd	r24, Y+1	; 0x01
    1bb6:	84 30       	cpi	r24, 0x04	; 4
    1bb8:	68 f4       	brcc	.+26     	; 0x1bd4 <DIO_VoidSetPortDirection+0x2e>
	{
		*DIO_ARR_DDR[Copy_u8port] = Copy_u8direction;
    1bba:	89 81       	ldd	r24, Y+1	; 0x01
    1bbc:	88 2f       	mov	r24, r24
    1bbe:	90 e0       	ldi	r25, 0x00	; 0
    1bc0:	88 0f       	add	r24, r24
    1bc2:	99 1f       	adc	r25, r25
    1bc4:	fc 01       	movw	r30, r24
    1bc6:	e0 59       	subi	r30, 0x90	; 144
    1bc8:	fe 4f       	sbci	r31, 0xFE	; 254
    1bca:	01 90       	ld	r0, Z+
    1bcc:	f0 81       	ld	r31, Z
    1bce:	e0 2d       	mov	r30, r0
    1bd0:	8a 81       	ldd	r24, Y+2	; 0x02
    1bd2:	80 83       	st	Z, r24
	}
	else {/*nothing*/}
	return;
}
    1bd4:	0f 90       	pop	r0
    1bd6:	0f 90       	pop	r0
    1bd8:	cf 91       	pop	r28
    1bda:	df 91       	pop	r29
    1bdc:	08 95       	ret

00001bde <DIO_VoidSetPortValue>:
void DIO_VoidSetPortValue(u8 Copy_u8port,u8 Copy_u8value)
{
    1bde:	df 93       	push	r29
    1be0:	cf 93       	push	r28
    1be2:	00 d0       	rcall	.+0      	; 0x1be4 <DIO_VoidSetPortValue+0x6>
    1be4:	cd b7       	in	r28, 0x3d	; 61
    1be6:	de b7       	in	r29, 0x3e	; 62
    1be8:	89 83       	std	Y+1, r24	; 0x01
    1bea:	6a 83       	std	Y+2, r22	; 0x02
	if(Copy_u8port <= DIO_PORTD_IDX)
    1bec:	89 81       	ldd	r24, Y+1	; 0x01
    1bee:	84 30       	cpi	r24, 0x04	; 4
    1bf0:	68 f4       	brcc	.+26     	; 0x1c0c <DIO_VoidSetPortValue+0x2e>
	{
		*DIO_ARR_PORT[Copy_u8port] = Copy_u8value;
    1bf2:	89 81       	ldd	r24, Y+1	; 0x01
    1bf4:	88 2f       	mov	r24, r24
    1bf6:	90 e0       	ldi	r25, 0x00	; 0
    1bf8:	88 0f       	add	r24, r24
    1bfa:	99 1f       	adc	r25, r25
    1bfc:	fc 01       	movw	r30, r24
    1bfe:	e8 59       	subi	r30, 0x98	; 152
    1c00:	fe 4f       	sbci	r31, 0xFE	; 254
    1c02:	01 90       	ld	r0, Z+
    1c04:	f0 81       	ld	r31, Z
    1c06:	e0 2d       	mov	r30, r0
    1c08:	8a 81       	ldd	r24, Y+2	; 0x02
    1c0a:	80 83       	st	Z, r24
	}
	else {/*nothing*/}
	return;
}
    1c0c:	0f 90       	pop	r0
    1c0e:	0f 90       	pop	r0
    1c10:	cf 91       	pop	r28
    1c12:	df 91       	pop	r29
    1c14:	08 95       	ret

00001c16 <DIO_VoidTogglePortValue>:

void DIO_VoidTogglePortValue(u8 Copy_u8port)
{
    1c16:	df 93       	push	r29
    1c18:	cf 93       	push	r28
    1c1a:	0f 92       	push	r0
    1c1c:	cd b7       	in	r28, 0x3d	; 61
    1c1e:	de b7       	in	r29, 0x3e	; 62
    1c20:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8port <= DIO_PORTD_IDX)
    1c22:	89 81       	ldd	r24, Y+1	; 0x01
    1c24:	84 30       	cpi	r24, 0x04	; 4
    1c26:	c0 f4       	brcc	.+48     	; 0x1c58 <DIO_VoidTogglePortValue+0x42>
	{
		( *DIO_ARR_PORT[Copy_u8port] ) ^= (0xff);
    1c28:	89 81       	ldd	r24, Y+1	; 0x01
    1c2a:	88 2f       	mov	r24, r24
    1c2c:	90 e0       	ldi	r25, 0x00	; 0
    1c2e:	88 0f       	add	r24, r24
    1c30:	99 1f       	adc	r25, r25
    1c32:	fc 01       	movw	r30, r24
    1c34:	e8 59       	subi	r30, 0x98	; 152
    1c36:	fe 4f       	sbci	r31, 0xFE	; 254
    1c38:	a0 81       	ld	r26, Z
    1c3a:	b1 81       	ldd	r27, Z+1	; 0x01
    1c3c:	89 81       	ldd	r24, Y+1	; 0x01
    1c3e:	88 2f       	mov	r24, r24
    1c40:	90 e0       	ldi	r25, 0x00	; 0
    1c42:	88 0f       	add	r24, r24
    1c44:	99 1f       	adc	r25, r25
    1c46:	fc 01       	movw	r30, r24
    1c48:	e8 59       	subi	r30, 0x98	; 152
    1c4a:	fe 4f       	sbci	r31, 0xFE	; 254
    1c4c:	01 90       	ld	r0, Z+
    1c4e:	f0 81       	ld	r31, Z
    1c50:	e0 2d       	mov	r30, r0
    1c52:	80 81       	ld	r24, Z
    1c54:	80 95       	com	r24
    1c56:	8c 93       	st	X, r24
	}
	else {/*nothing*/}
	return;
}
    1c58:	0f 90       	pop	r0
    1c5a:	cf 91       	pop	r28
    1c5c:	df 91       	pop	r29
    1c5e:	08 95       	ret

00001c60 <DIO_VoidGetPortValue>:
void DIO_VoidGetPortValue(u8 Copy_u8port,u8 *Copy_pu8Return)
{
    1c60:	df 93       	push	r29
    1c62:	cf 93       	push	r28
    1c64:	00 d0       	rcall	.+0      	; 0x1c66 <DIO_VoidGetPortValue+0x6>
    1c66:	0f 92       	push	r0
    1c68:	cd b7       	in	r28, 0x3d	; 61
    1c6a:	de b7       	in	r29, 0x3e	; 62
    1c6c:	89 83       	std	Y+1, r24	; 0x01
    1c6e:	7b 83       	std	Y+3, r23	; 0x03
    1c70:	6a 83       	std	Y+2, r22	; 0x02
	if(Copy_u8port <= DIO_PORTD_IDX && Copy_pu8Return)
    1c72:	89 81       	ldd	r24, Y+1	; 0x01
    1c74:	84 30       	cpi	r24, 0x04	; 4
    1c76:	98 f4       	brcc	.+38     	; 0x1c9e <DIO_VoidGetPortValue+0x3e>
    1c78:	8a 81       	ldd	r24, Y+2	; 0x02
    1c7a:	9b 81       	ldd	r25, Y+3	; 0x03
    1c7c:	00 97       	sbiw	r24, 0x00	; 0
    1c7e:	79 f0       	breq	.+30     	; 0x1c9e <DIO_VoidGetPortValue+0x3e>
	{
		*Copy_pu8Return = *DIO_ARR_PIN[Copy_u8port];
    1c80:	89 81       	ldd	r24, Y+1	; 0x01
    1c82:	88 2f       	mov	r24, r24
    1c84:	90 e0       	ldi	r25, 0x00	; 0
    1c86:	88 0f       	add	r24, r24
    1c88:	99 1f       	adc	r25, r25
    1c8a:	fc 01       	movw	r30, r24
    1c8c:	e8 58       	subi	r30, 0x88	; 136
    1c8e:	fe 4f       	sbci	r31, 0xFE	; 254
    1c90:	01 90       	ld	r0, Z+
    1c92:	f0 81       	ld	r31, Z
    1c94:	e0 2d       	mov	r30, r0
    1c96:	80 81       	ld	r24, Z
    1c98:	ea 81       	ldd	r30, Y+2	; 0x02
    1c9a:	fb 81       	ldd	r31, Y+3	; 0x03
    1c9c:	80 83       	st	Z, r24
	}
	else {/*nothing*/}
	return;
}
    1c9e:	0f 90       	pop	r0
    1ca0:	0f 90       	pop	r0
    1ca2:	0f 90       	pop	r0
    1ca4:	cf 91       	pop	r28
    1ca6:	df 91       	pop	r29
    1ca8:	08 95       	ret

00001caa <DIO_VoidSet4bitsValue>:

void DIO_VoidSet4bitsValue(u8 Copy_u8port,u8 Copy_u8value,u8 Copy_u8Bitselection)
{
    1caa:	df 93       	push	r29
    1cac:	cf 93       	push	r28
    1cae:	00 d0       	rcall	.+0      	; 0x1cb0 <DIO_VoidSet4bitsValue+0x6>
    1cb0:	0f 92       	push	r0
    1cb2:	cd b7       	in	r28, 0x3d	; 61
    1cb4:	de b7       	in	r29, 0x3e	; 62
    1cb6:	89 83       	std	Y+1, r24	; 0x01
    1cb8:	6a 83       	std	Y+2, r22	; 0x02
    1cba:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8port <= DIO_PORTD_IDX && Copy_u8value <= 15 && Copy_u8Bitselection <= DIO_PIN5 )
    1cbc:	89 81       	ldd	r24, Y+1	; 0x01
    1cbe:	84 30       	cpi	r24, 0x04	; 4
    1cc0:	08 f0       	brcs	.+2      	; 0x1cc4 <DIO_VoidSet4bitsValue+0x1a>
    1cc2:	52 c0       	rjmp	.+164    	; 0x1d68 <DIO_VoidSet4bitsValue+0xbe>
    1cc4:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc6:	80 31       	cpi	r24, 0x10	; 16
    1cc8:	08 f0       	brcs	.+2      	; 0x1ccc <DIO_VoidSet4bitsValue+0x22>
    1cca:	4e c0       	rjmp	.+156    	; 0x1d68 <DIO_VoidSet4bitsValue+0xbe>
    1ccc:	8b 81       	ldd	r24, Y+3	; 0x03
    1cce:	86 30       	cpi	r24, 0x06	; 6
    1cd0:	08 f0       	brcs	.+2      	; 0x1cd4 <DIO_VoidSet4bitsValue+0x2a>
    1cd2:	4a c0       	rjmp	.+148    	; 0x1d68 <DIO_VoidSet4bitsValue+0xbe>
	{
		(*DIO_ARR_PORT[Copy_u8port]) &= ~(0x0f << Copy_u8Bitselection); // to delete old value
    1cd4:	89 81       	ldd	r24, Y+1	; 0x01
    1cd6:	88 2f       	mov	r24, r24
    1cd8:	90 e0       	ldi	r25, 0x00	; 0
    1cda:	88 0f       	add	r24, r24
    1cdc:	99 1f       	adc	r25, r25
    1cde:	fc 01       	movw	r30, r24
    1ce0:	e8 59       	subi	r30, 0x98	; 152
    1ce2:	fe 4f       	sbci	r31, 0xFE	; 254
    1ce4:	a0 81       	ld	r26, Z
    1ce6:	b1 81       	ldd	r27, Z+1	; 0x01
    1ce8:	89 81       	ldd	r24, Y+1	; 0x01
    1cea:	88 2f       	mov	r24, r24
    1cec:	90 e0       	ldi	r25, 0x00	; 0
    1cee:	88 0f       	add	r24, r24
    1cf0:	99 1f       	adc	r25, r25
    1cf2:	fc 01       	movw	r30, r24
    1cf4:	e8 59       	subi	r30, 0x98	; 152
    1cf6:	fe 4f       	sbci	r31, 0xFE	; 254
    1cf8:	01 90       	ld	r0, Z+
    1cfa:	f0 81       	ld	r31, Z
    1cfc:	e0 2d       	mov	r30, r0
    1cfe:	80 81       	ld	r24, Z
    1d00:	48 2f       	mov	r20, r24
    1d02:	8b 81       	ldd	r24, Y+3	; 0x03
    1d04:	28 2f       	mov	r18, r24
    1d06:	30 e0       	ldi	r19, 0x00	; 0
    1d08:	8f e0       	ldi	r24, 0x0F	; 15
    1d0a:	90 e0       	ldi	r25, 0x00	; 0
    1d0c:	02 c0       	rjmp	.+4      	; 0x1d12 <DIO_VoidSet4bitsValue+0x68>
    1d0e:	88 0f       	add	r24, r24
    1d10:	99 1f       	adc	r25, r25
    1d12:	2a 95       	dec	r18
    1d14:	e2 f7       	brpl	.-8      	; 0x1d0e <DIO_VoidSet4bitsValue+0x64>
    1d16:	80 95       	com	r24
    1d18:	84 23       	and	r24, r20
    1d1a:	8c 93       	st	X, r24
		(*DIO_ARR_PORT[Copy_u8port]) |=  (Copy_u8value << Copy_u8Bitselection); // write new value
    1d1c:	89 81       	ldd	r24, Y+1	; 0x01
    1d1e:	88 2f       	mov	r24, r24
    1d20:	90 e0       	ldi	r25, 0x00	; 0
    1d22:	88 0f       	add	r24, r24
    1d24:	99 1f       	adc	r25, r25
    1d26:	fc 01       	movw	r30, r24
    1d28:	e8 59       	subi	r30, 0x98	; 152
    1d2a:	fe 4f       	sbci	r31, 0xFE	; 254
    1d2c:	a0 81       	ld	r26, Z
    1d2e:	b1 81       	ldd	r27, Z+1	; 0x01
    1d30:	89 81       	ldd	r24, Y+1	; 0x01
    1d32:	88 2f       	mov	r24, r24
    1d34:	90 e0       	ldi	r25, 0x00	; 0
    1d36:	88 0f       	add	r24, r24
    1d38:	99 1f       	adc	r25, r25
    1d3a:	fc 01       	movw	r30, r24
    1d3c:	e8 59       	subi	r30, 0x98	; 152
    1d3e:	fe 4f       	sbci	r31, 0xFE	; 254
    1d40:	01 90       	ld	r0, Z+
    1d42:	f0 81       	ld	r31, Z
    1d44:	e0 2d       	mov	r30, r0
    1d46:	80 81       	ld	r24, Z
    1d48:	48 2f       	mov	r20, r24
    1d4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d4c:	28 2f       	mov	r18, r24
    1d4e:	30 e0       	ldi	r19, 0x00	; 0
    1d50:	8b 81       	ldd	r24, Y+3	; 0x03
    1d52:	88 2f       	mov	r24, r24
    1d54:	90 e0       	ldi	r25, 0x00	; 0
    1d56:	b9 01       	movw	r22, r18
    1d58:	02 c0       	rjmp	.+4      	; 0x1d5e <DIO_VoidSet4bitsValue+0xb4>
    1d5a:	66 0f       	add	r22, r22
    1d5c:	77 1f       	adc	r23, r23
    1d5e:	8a 95       	dec	r24
    1d60:	e2 f7       	brpl	.-8      	; 0x1d5a <DIO_VoidSet4bitsValue+0xb0>
    1d62:	cb 01       	movw	r24, r22
    1d64:	84 2b       	or	r24, r20
    1d66:	8c 93       	st	X, r24

	}
	else {/*nothing*/}
	return;
}
    1d68:	0f 90       	pop	r0
    1d6a:	0f 90       	pop	r0
    1d6c:	0f 90       	pop	r0
    1d6e:	cf 91       	pop	r28
    1d70:	df 91       	pop	r29
    1d72:	08 95       	ret

00001d74 <DIO_VoidGet4bitsValue>:

void DIO_VoidGet4bitsValue(u8 Copy_u8port,u8* Copy_u8value,u8 Copy_u8Bitselection)
{
    1d74:	df 93       	push	r29
    1d76:	cf 93       	push	r28
    1d78:	00 d0       	rcall	.+0      	; 0x1d7a <DIO_VoidGet4bitsValue+0x6>
    1d7a:	00 d0       	rcall	.+0      	; 0x1d7c <DIO_VoidGet4bitsValue+0x8>
    1d7c:	0f 92       	push	r0
    1d7e:	cd b7       	in	r28, 0x3d	; 61
    1d80:	de b7       	in	r29, 0x3e	; 62
    1d82:	8a 83       	std	Y+2, r24	; 0x02
    1d84:	7c 83       	std	Y+4, r23	; 0x04
    1d86:	6b 83       	std	Y+3, r22	; 0x03
    1d88:	4d 83       	std	Y+5, r20	; 0x05
	u8 l_copyOfPinVal = *DIO_ARR_PIN[Copy_u8port];
    1d8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d8c:	88 2f       	mov	r24, r24
    1d8e:	90 e0       	ldi	r25, 0x00	; 0
    1d90:	88 0f       	add	r24, r24
    1d92:	99 1f       	adc	r25, r25
    1d94:	fc 01       	movw	r30, r24
    1d96:	e8 58       	subi	r30, 0x88	; 136
    1d98:	fe 4f       	sbci	r31, 0xFE	; 254
    1d9a:	01 90       	ld	r0, Z+
    1d9c:	f0 81       	ld	r31, Z
    1d9e:	e0 2d       	mov	r30, r0
    1da0:	80 81       	ld	r24, Z
    1da2:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8port <= DIO_PORTD_IDX && Copy_u8value  && Copy_u8Bitselection <= DIO_PIN5 )
    1da4:	8a 81       	ldd	r24, Y+2	; 0x02
    1da6:	84 30       	cpi	r24, 0x04	; 4
    1da8:	c0 f4       	brcc	.+48     	; 0x1dda <DIO_VoidGet4bitsValue+0x66>
    1daa:	8b 81       	ldd	r24, Y+3	; 0x03
    1dac:	9c 81       	ldd	r25, Y+4	; 0x04
    1dae:	00 97       	sbiw	r24, 0x00	; 0
    1db0:	a1 f0       	breq	.+40     	; 0x1dda <DIO_VoidGet4bitsValue+0x66>
    1db2:	8d 81       	ldd	r24, Y+5	; 0x05
    1db4:	86 30       	cpi	r24, 0x06	; 6
    1db6:	88 f4       	brcc	.+34     	; 0x1dda <DIO_VoidGet4bitsValue+0x66>
	{
		(*Copy_u8value) = (l_copyOfPinVal >> Copy_u8Bitselection) & 0x0f;
    1db8:	89 81       	ldd	r24, Y+1	; 0x01
    1dba:	28 2f       	mov	r18, r24
    1dbc:	30 e0       	ldi	r19, 0x00	; 0
    1dbe:	8d 81       	ldd	r24, Y+5	; 0x05
    1dc0:	88 2f       	mov	r24, r24
    1dc2:	90 e0       	ldi	r25, 0x00	; 0
    1dc4:	a9 01       	movw	r20, r18
    1dc6:	02 c0       	rjmp	.+4      	; 0x1dcc <DIO_VoidGet4bitsValue+0x58>
    1dc8:	55 95       	asr	r21
    1dca:	47 95       	ror	r20
    1dcc:	8a 95       	dec	r24
    1dce:	e2 f7       	brpl	.-8      	; 0x1dc8 <DIO_VoidGet4bitsValue+0x54>
    1dd0:	ca 01       	movw	r24, r20
    1dd2:	8f 70       	andi	r24, 0x0F	; 15
    1dd4:	eb 81       	ldd	r30, Y+3	; 0x03
    1dd6:	fc 81       	ldd	r31, Y+4	; 0x04
    1dd8:	80 83       	st	Z, r24

	}
	else {/*nothing*/}
	return;
}
    1dda:	0f 90       	pop	r0
    1ddc:	0f 90       	pop	r0
    1dde:	0f 90       	pop	r0
    1de0:	0f 90       	pop	r0
    1de2:	0f 90       	pop	r0
    1de4:	cf 91       	pop	r28
    1de6:	df 91       	pop	r29
    1de8:	08 95       	ret

00001dea <DIO_voidPortInit>:

void DIO_voidPortInit(u8 Copy_u8port , u8 Copy_u8direction , u8 Copy_u8value)
{
    1dea:	df 93       	push	r29
    1dec:	cf 93       	push	r28
    1dee:	00 d0       	rcall	.+0      	; 0x1df0 <DIO_voidPortInit+0x6>
    1df0:	0f 92       	push	r0
    1df2:	cd b7       	in	r28, 0x3d	; 61
    1df4:	de b7       	in	r29, 0x3e	; 62
    1df6:	89 83       	std	Y+1, r24	; 0x01
    1df8:	6a 83       	std	Y+2, r22	; 0x02
    1dfa:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8port <= DIO_PORTD_IDX)
    1dfc:	89 81       	ldd	r24, Y+1	; 0x01
    1dfe:	84 30       	cpi	r24, 0x04	; 4
    1e00:	d0 f4       	brcc	.+52     	; 0x1e36 <DIO_voidPortInit+0x4c>
	{
		*DIO_ARR_DDR[Copy_u8port] = Copy_u8direction;
    1e02:	89 81       	ldd	r24, Y+1	; 0x01
    1e04:	88 2f       	mov	r24, r24
    1e06:	90 e0       	ldi	r25, 0x00	; 0
    1e08:	88 0f       	add	r24, r24
    1e0a:	99 1f       	adc	r25, r25
    1e0c:	fc 01       	movw	r30, r24
    1e0e:	e0 59       	subi	r30, 0x90	; 144
    1e10:	fe 4f       	sbci	r31, 0xFE	; 254
    1e12:	01 90       	ld	r0, Z+
    1e14:	f0 81       	ld	r31, Z
    1e16:	e0 2d       	mov	r30, r0
    1e18:	8a 81       	ldd	r24, Y+2	; 0x02
    1e1a:	80 83       	st	Z, r24
		*DIO_ARR_PORT[Copy_u8port] = Copy_u8value;
    1e1c:	89 81       	ldd	r24, Y+1	; 0x01
    1e1e:	88 2f       	mov	r24, r24
    1e20:	90 e0       	ldi	r25, 0x00	; 0
    1e22:	88 0f       	add	r24, r24
    1e24:	99 1f       	adc	r25, r25
    1e26:	fc 01       	movw	r30, r24
    1e28:	e8 59       	subi	r30, 0x98	; 152
    1e2a:	fe 4f       	sbci	r31, 0xFE	; 254
    1e2c:	01 90       	ld	r0, Z+
    1e2e:	f0 81       	ld	r31, Z
    1e30:	e0 2d       	mov	r30, r0
    1e32:	8b 81       	ldd	r24, Y+3	; 0x03
    1e34:	80 83       	st	Z, r24
	}
	else {/*nothing*/}
	return;
}
    1e36:	0f 90       	pop	r0
    1e38:	0f 90       	pop	r0
    1e3a:	0f 90       	pop	r0
    1e3c:	cf 91       	pop	r28
    1e3e:	df 91       	pop	r29
    1e40:	08 95       	ret

00001e42 <DIO_voidPinInit>:

void DIO_voidPinInit(u8 Copy_u8port ,u8 Copy_u8pin,u8 Copy_u8direction , u8 Copy_u8value)
{
    1e42:	df 93       	push	r29
    1e44:	cf 93       	push	r28
    1e46:	00 d0       	rcall	.+0      	; 0x1e48 <DIO_voidPinInit+0x6>
    1e48:	00 d0       	rcall	.+0      	; 0x1e4a <DIO_voidPinInit+0x8>
    1e4a:	cd b7       	in	r28, 0x3d	; 61
    1e4c:	de b7       	in	r29, 0x3e	; 62
    1e4e:	89 83       	std	Y+1, r24	; 0x01
    1e50:	6a 83       	std	Y+2, r22	; 0x02
    1e52:	4b 83       	std	Y+3, r20	; 0x03
    1e54:	2c 83       	std	Y+4, r18	; 0x04
	if(Copy_u8port <= DIO_PORTD_IDX  && Copy_u8pin <= DIO_PIN7 )
    1e56:	89 81       	ldd	r24, Y+1	; 0x01
    1e58:	84 30       	cpi	r24, 0x04	; 4
    1e5a:	68 f4       	brcc	.+26     	; 0x1e76 <DIO_voidPinInit+0x34>
    1e5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e5e:	88 30       	cpi	r24, 0x08	; 8
    1e60:	50 f4       	brcc	.+20     	; 0x1e76 <DIO_voidPinInit+0x34>
	{
		DIO_VoidSetPinValue(Copy_u8port,Copy_u8pin,Copy_u8value);
    1e62:	89 81       	ldd	r24, Y+1	; 0x01
    1e64:	6a 81       	ldd	r22, Y+2	; 0x02
    1e66:	4c 81       	ldd	r20, Y+4	; 0x04
    1e68:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <DIO_VoidSetPinValue>
		DIO_VoidSetPinDirection(Copy_u8port,Copy_u8pin,Copy_u8direction);
    1e6c:	89 81       	ldd	r24, Y+1	; 0x01
    1e6e:	6a 81       	ldd	r22, Y+2	; 0x02
    1e70:	4b 81       	ldd	r20, Y+3	; 0x03
    1e72:	0e 94 80 0c 	call	0x1900	; 0x1900 <DIO_VoidSetPinDirection>

	}
	else {/*nothing*/}
	return;
}
    1e76:	0f 90       	pop	r0
    1e78:	0f 90       	pop	r0
    1e7a:	0f 90       	pop	r0
    1e7c:	0f 90       	pop	r0
    1e7e:	cf 91       	pop	r28
    1e80:	df 91       	pop	r29
    1e82:	08 95       	ret

00001e84 <ADC_VoidInit>:


#if ADC_INTERRUPT_CFG == ADC_INTERRUPT_DISABLE_CFG

void ADC_VoidInit(void)
{
    1e84:	df 93       	push	r29
    1e86:	cf 93       	push	r28
    1e88:	cd b7       	in	r28, 0x3d	; 61
    1e8a:	de b7       	in	r29, 0x3e	; 62
	/*Set ADC Voltage Ref*/
	AD_VREF_SELECT(ADC_VOLTAGE_REF_CFG);
    1e8c:	a7 e2       	ldi	r26, 0x27	; 39
    1e8e:	b0 e0       	ldi	r27, 0x00	; 0
    1e90:	e7 e2       	ldi	r30, 0x27	; 39
    1e92:	f0 e0       	ldi	r31, 0x00	; 0
    1e94:	80 81       	ld	r24, Z
    1e96:	8f 73       	andi	r24, 0x3F	; 63
    1e98:	80 64       	ori	r24, 0x40	; 64
    1e9a:	8c 93       	st	X, r24

	/*Set ADC PRESCALER*/
	AD_PRESCALER_SELECT(ADC_PRESCALER_CFG);
    1e9c:	a6 e2       	ldi	r26, 0x26	; 38
    1e9e:	b0 e0       	ldi	r27, 0x00	; 0
    1ea0:	e6 e2       	ldi	r30, 0x26	; 38
    1ea2:	f0 e0       	ldi	r31, 0x00	; 0
    1ea4:	80 81       	ld	r24, Z
    1ea6:	87 60       	ori	r24, 0x07	; 7
    1ea8:	8c 93       	st	X, r24

	/*set ADC Result read as right Adjust clear ADLAR*/
	AD_ADMUX_REG &=	~(0x01 << AD_ADMUX_ADLAR_BIT);
    1eaa:	a7 e2       	ldi	r26, 0x27	; 39
    1eac:	b0 e0       	ldi	r27, 0x00	; 0
    1eae:	e7 e2       	ldi	r30, 0x27	; 39
    1eb0:	f0 e0       	ldi	r31, 0x00	; 0
    1eb2:	80 81       	ld	r24, Z
    1eb4:	8f 7d       	andi	r24, 0xDF	; 223
    1eb6:	8c 93       	st	X, r24

	/*Enable ADC*/
	AD_ENABLE();
    1eb8:	a6 e2       	ldi	r26, 0x26	; 38
    1eba:	b0 e0       	ldi	r27, 0x00	; 0
    1ebc:	e6 e2       	ldi	r30, 0x26	; 38
    1ebe:	f0 e0       	ldi	r31, 0x00	; 0
    1ec0:	80 81       	ld	r24, Z
    1ec2:	80 68       	ori	r24, 0x80	; 128
    1ec4:	8c 93       	st	X, r24

	return;
}
    1ec6:	cf 91       	pop	r28
    1ec8:	df 91       	pop	r29
    1eca:	08 95       	ret

00001ecc <ADC_VoidStartConv_Blocking>:

void ADC_VoidStartConv_Blocking(u8 copy_u8ADChannel , u16* copy_pu16ReadVal )
{
    1ecc:	df 93       	push	r29
    1ece:	cf 93       	push	r28
    1ed0:	00 d0       	rcall	.+0      	; 0x1ed2 <ADC_VoidStartConv_Blocking+0x6>
    1ed2:	0f 92       	push	r0
    1ed4:	cd b7       	in	r28, 0x3d	; 61
    1ed6:	de b7       	in	r29, 0x3e	; 62
    1ed8:	89 83       	std	Y+1, r24	; 0x01
    1eda:	7b 83       	std	Y+3, r23	; 0x03
    1edc:	6a 83       	std	Y+2, r22	; 0x02
	if(copy_pu16ReadVal && copy_u8ADChannel <= ADC_CHANNEL7)
    1ede:	8a 81       	ldd	r24, Y+2	; 0x02
    1ee0:	9b 81       	ldd	r25, Y+3	; 0x03
    1ee2:	00 97       	sbiw	r24, 0x00	; 0
    1ee4:	99 f1       	breq	.+102    	; 0x1f4c <ADC_VoidStartConv_Blocking+0x80>
    1ee6:	89 81       	ldd	r24, Y+1	; 0x01
    1ee8:	88 30       	cpi	r24, 0x08	; 8
    1eea:	80 f5       	brcc	.+96     	; 0x1f4c <ADC_VoidStartConv_Blocking+0x80>
	{
		// select adc channel before start adc conversion
		AD_CHANNEL_SELECT(copy_u8ADChannel);
    1eec:	a7 e2       	ldi	r26, 0x27	; 39
    1eee:	b0 e0       	ldi	r27, 0x00	; 0
    1ef0:	e7 e2       	ldi	r30, 0x27	; 39
    1ef2:	f0 e0       	ldi	r31, 0x00	; 0
    1ef4:	80 81       	ld	r24, Z
    1ef6:	98 2f       	mov	r25, r24
    1ef8:	90 7e       	andi	r25, 0xE0	; 224
    1efa:	89 81       	ldd	r24, Y+1	; 0x01
    1efc:	89 2b       	or	r24, r25
    1efe:	8c 93       	st	X, r24
		// start adc convertion
		AD_STARTCONV();
    1f00:	a6 e2       	ldi	r26, 0x26	; 38
    1f02:	b0 e0       	ldi	r27, 0x00	; 0
    1f04:	e6 e2       	ldi	r30, 0x26	; 38
    1f06:	f0 e0       	ldi	r31, 0x00	; 0
    1f08:	80 81       	ld	r24, Z
    1f0a:	80 64       	ori	r24, 0x40	; 64
    1f0c:	8c 93       	st	X, r24
		// wait till adc finsh conversion
		while( AD_READ_CONVSTAT() == ADC_CONV_INPROGRESS_CFG )
    1f0e:	e6 e2       	ldi	r30, 0x26	; 38
    1f10:	f0 e0       	ldi	r31, 0x00	; 0
    1f12:	80 81       	ld	r24, Z
    1f14:	82 95       	swap	r24
    1f16:	86 95       	lsr	r24
    1f18:	86 95       	lsr	r24
    1f1a:	83 70       	andi	r24, 0x03	; 3
    1f1c:	88 2f       	mov	r24, r24
    1f1e:	90 e0       	ldi	r25, 0x00	; 0
    1f20:	81 70       	andi	r24, 0x01	; 1
    1f22:	90 70       	andi	r25, 0x00	; 0
    1f24:	88 23       	and	r24, r24
    1f26:	99 f7       	brne	.-26     	; 0x1f0e <ADC_VoidStartConv_Blocking+0x42>
			;
		// return adc result in pointer
		*copy_pu16ReadVal = AD_READ_RESULT();
    1f28:	e4 e2       	ldi	r30, 0x24	; 36
    1f2a:	f0 e0       	ldi	r31, 0x00	; 0
    1f2c:	80 81       	ld	r24, Z
    1f2e:	28 2f       	mov	r18, r24
    1f30:	30 e0       	ldi	r19, 0x00	; 0
    1f32:	e5 e2       	ldi	r30, 0x25	; 37
    1f34:	f0 e0       	ldi	r31, 0x00	; 0
    1f36:	80 81       	ld	r24, Z
    1f38:	88 2f       	mov	r24, r24
    1f3a:	90 e0       	ldi	r25, 0x00	; 0
    1f3c:	98 2f       	mov	r25, r24
    1f3e:	88 27       	eor	r24, r24
    1f40:	82 2b       	or	r24, r18
    1f42:	93 2b       	or	r25, r19
    1f44:	ea 81       	ldd	r30, Y+2	; 0x02
    1f46:	fb 81       	ldd	r31, Y+3	; 0x03
    1f48:	91 83       	std	Z+1, r25	; 0x01
    1f4a:	80 83       	st	Z, r24
	else
	{
		/*nothing*/
	}
	return;
}
    1f4c:	0f 90       	pop	r0
    1f4e:	0f 90       	pop	r0
    1f50:	0f 90       	pop	r0
    1f52:	cf 91       	pop	r28
    1f54:	df 91       	pop	r29
    1f56:	08 95       	ret

00001f58 <ADC_voidReadResult>:


#endif

void ADC_voidReadResult(u16* copy_pu16AdcResult)
{
    1f58:	df 93       	push	r29
    1f5a:	cf 93       	push	r28
    1f5c:	00 d0       	rcall	.+0      	; 0x1f5e <ADC_voidReadResult+0x6>
    1f5e:	cd b7       	in	r28, 0x3d	; 61
    1f60:	de b7       	in	r29, 0x3e	; 62
    1f62:	9a 83       	std	Y+2, r25	; 0x02
    1f64:	89 83       	std	Y+1, r24	; 0x01
	if(copy_pu16AdcResult)
    1f66:	89 81       	ldd	r24, Y+1	; 0x01
    1f68:	9a 81       	ldd	r25, Y+2	; 0x02
    1f6a:	00 97       	sbiw	r24, 0x00	; 0
    1f6c:	91 f0       	breq	.+36     	; 0x1f92 <ADC_voidReadResult+0x3a>
	{
		*copy_pu16AdcResult = AD_READ_RESULT();
    1f6e:	e4 e2       	ldi	r30, 0x24	; 36
    1f70:	f0 e0       	ldi	r31, 0x00	; 0
    1f72:	80 81       	ld	r24, Z
    1f74:	28 2f       	mov	r18, r24
    1f76:	30 e0       	ldi	r19, 0x00	; 0
    1f78:	e5 e2       	ldi	r30, 0x25	; 37
    1f7a:	f0 e0       	ldi	r31, 0x00	; 0
    1f7c:	80 81       	ld	r24, Z
    1f7e:	88 2f       	mov	r24, r24
    1f80:	90 e0       	ldi	r25, 0x00	; 0
    1f82:	98 2f       	mov	r25, r24
    1f84:	88 27       	eor	r24, r24
    1f86:	82 2b       	or	r24, r18
    1f88:	93 2b       	or	r25, r19
    1f8a:	e9 81       	ldd	r30, Y+1	; 0x01
    1f8c:	fa 81       	ldd	r31, Y+2	; 0x02
    1f8e:	91 83       	std	Z+1, r25	; 0x01
    1f90:	80 83       	st	Z, r24
	}
	else
	{
		/*nothing*/
	}
}
    1f92:	0f 90       	pop	r0
    1f94:	0f 90       	pop	r0
    1f96:	cf 91       	pop	r28
    1f98:	df 91       	pop	r29
    1f9a:	08 95       	ret

00001f9c <ADC_voidGetCurrChannel>:

void ADC_voidGetCurrChannel(u8* copy_pu8CurrAdcChannel)
{
    1f9c:	df 93       	push	r29
    1f9e:	cf 93       	push	r28
    1fa0:	00 d0       	rcall	.+0      	; 0x1fa2 <ADC_voidGetCurrChannel+0x6>
    1fa2:	cd b7       	in	r28, 0x3d	; 61
    1fa4:	de b7       	in	r29, 0x3e	; 62
    1fa6:	9a 83       	std	Y+2, r25	; 0x02
    1fa8:	89 83       	std	Y+1, r24	; 0x01
		*copy_pu8CurrAdcChannel = (AD_ADMUX_REG &0x1F);
    1faa:	e7 e2       	ldi	r30, 0x27	; 39
    1fac:	f0 e0       	ldi	r31, 0x00	; 0
    1fae:	80 81       	ld	r24, Z
    1fb0:	8f 71       	andi	r24, 0x1F	; 31
    1fb2:	e9 81       	ldd	r30, Y+1	; 0x01
    1fb4:	fa 81       	ldd	r31, Y+2	; 0x02
    1fb6:	80 83       	st	Z, r24
}
    1fb8:	0f 90       	pop	r0
    1fba:	0f 90       	pop	r0
    1fbc:	cf 91       	pop	r28
    1fbe:	df 91       	pop	r29
    1fc0:	08 95       	ret

00001fc2 <ADC_VoidSelectChannel>:

void ADC_VoidSelectChannel(u8 copy_u8Channel)
{
    1fc2:	df 93       	push	r29
    1fc4:	cf 93       	push	r28
    1fc6:	0f 92       	push	r0
    1fc8:	cd b7       	in	r28, 0x3d	; 61
    1fca:	de b7       	in	r29, 0x3e	; 62
    1fcc:	89 83       	std	Y+1, r24	; 0x01
	AD_CHANNEL_SELECT(copy_u8Channel);
    1fce:	a7 e2       	ldi	r26, 0x27	; 39
    1fd0:	b0 e0       	ldi	r27, 0x00	; 0
    1fd2:	e7 e2       	ldi	r30, 0x27	; 39
    1fd4:	f0 e0       	ldi	r31, 0x00	; 0
    1fd6:	80 81       	ld	r24, Z
    1fd8:	98 2f       	mov	r25, r24
    1fda:	90 7e       	andi	r25, 0xE0	; 224
    1fdc:	89 81       	ldd	r24, Y+1	; 0x01
    1fde:	89 2b       	or	r24, r25
    1fe0:	8c 93       	st	X, r24
}
    1fe2:	0f 90       	pop	r0
    1fe4:	cf 91       	pop	r28
    1fe6:	df 91       	pop	r29
    1fe8:	08 95       	ret

00001fea <ADC_VoidRefresh_freeRunning>:
void ADC_VoidRefresh_freeRunning(void)
{
    1fea:	df 93       	push	r29
    1fec:	cf 93       	push	r28
    1fee:	cd b7       	in	r28, 0x3d	; 61
    1ff0:	de b7       	in	r29, 0x3e	; 62
	ADC_CURR_CHANNEL_IDX = 0;
    1ff2:	10 92 d8 01 	sts	0x01D8, r1
	AD_CHANNEL_SELECT(ADC_CHANNEL_AT_ARR[ADC_CURR_CHANNEL_IDX]);
    1ff6:	a7 e2       	ldi	r26, 0x27	; 39
    1ff8:	b0 e0       	ldi	r27, 0x00	; 0
    1ffa:	e7 e2       	ldi	r30, 0x27	; 39
    1ffc:	f0 e0       	ldi	r31, 0x00	; 0
    1ffe:	80 81       	ld	r24, Z
    2000:	28 2f       	mov	r18, r24
    2002:	20 7e       	andi	r18, 0xE0	; 224
    2004:	80 91 d8 01 	lds	r24, 0x01D8
    2008:	88 2f       	mov	r24, r24
    200a:	90 e0       	ldi	r25, 0x00	; 0
    200c:	fc 01       	movw	r30, r24
    200e:	e0 58       	subi	r30, 0x80	; 128
    2010:	fe 4f       	sbci	r31, 0xFE	; 254
    2012:	80 81       	ld	r24, Z
    2014:	82 2b       	or	r24, r18
    2016:	8c 93       	st	X, r24
	AD_STARTCONV();
    2018:	a6 e2       	ldi	r26, 0x26	; 38
    201a:	b0 e0       	ldi	r27, 0x00	; 0
    201c:	e6 e2       	ldi	r30, 0x26	; 38
    201e:	f0 e0       	ldi	r31, 0x00	; 0
    2020:	80 81       	ld	r24, Z
    2022:	80 64       	ori	r24, 0x40	; 64
    2024:	8c 93       	st	X, r24
}
    2026:	cf 91       	pop	r28
    2028:	df 91       	pop	r29
    202a:	08 95       	ret

0000202c <__vector_16>:

void __vector_16(void)
{
    202c:	1f 92       	push	r1
    202e:	0f 92       	push	r0
    2030:	0f b6       	in	r0, 0x3f	; 63
    2032:	0f 92       	push	r0
    2034:	11 24       	eor	r1, r1
    2036:	2f 93       	push	r18
    2038:	3f 93       	push	r19
    203a:	4f 93       	push	r20
    203c:	5f 93       	push	r21
    203e:	6f 93       	push	r22
    2040:	7f 93       	push	r23
    2042:	8f 93       	push	r24
    2044:	9f 93       	push	r25
    2046:	af 93       	push	r26
    2048:	bf 93       	push	r27
    204a:	ef 93       	push	r30
    204c:	ff 93       	push	r31
    204e:	df 93       	push	r29
    2050:	cf 93       	push	r28
    2052:	cd b7       	in	r28, 0x3d	; 61
    2054:	de b7       	in	r29, 0x3e	; 62
			AD_STARTCONV();
		}
	}

#else
	if(Global_pADC_ISR)
    2056:	80 91 d6 01 	lds	r24, 0x01D6
    205a:	90 91 d7 01 	lds	r25, 0x01D7
    205e:	00 97       	sbiw	r24, 0x00	; 0
    2060:	29 f0       	breq	.+10     	; 0x206c <__vector_16+0x40>
		Global_pADC_ISR();
    2062:	e0 91 d6 01 	lds	r30, 0x01D6
    2066:	f0 91 d7 01 	lds	r31, 0x01D7
    206a:	09 95       	icall
#endif


}
    206c:	cf 91       	pop	r28
    206e:	df 91       	pop	r29
    2070:	ff 91       	pop	r31
    2072:	ef 91       	pop	r30
    2074:	bf 91       	pop	r27
    2076:	af 91       	pop	r26
    2078:	9f 91       	pop	r25
    207a:	8f 91       	pop	r24
    207c:	7f 91       	pop	r23
    207e:	6f 91       	pop	r22
    2080:	5f 91       	pop	r21
    2082:	4f 91       	pop	r20
    2084:	3f 91       	pop	r19
    2086:	2f 91       	pop	r18
    2088:	0f 90       	pop	r0
    208a:	0f be       	out	0x3f, r0	; 63
    208c:	0f 90       	pop	r0
    208e:	1f 90       	pop	r1
    2090:	18 95       	reti

00002092 <StepperMotor_VoidInit>:
#include "StepperMotor_config.h"
#include "StepperMotor_interface.h"


void StepperMotor_VoidInit(const StepMotor_st* Copy_pStepMotor_st_Config)
{
    2092:	df 93       	push	r29
    2094:	cf 93       	push	r28
    2096:	00 d0       	rcall	.+0      	; 0x2098 <StepperMotor_VoidInit+0x6>
    2098:	cd b7       	in	r28, 0x3d	; 61
    209a:	de b7       	in	r29, 0x3e	; 62
    209c:	9a 83       	std	Y+2, r25	; 0x02
    209e:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pStepMotor_st_Config)
    20a0:	89 81       	ldd	r24, Y+1	; 0x01
    20a2:	9a 81       	ldd	r25, Y+2	; 0x02
    20a4:	00 97       	sbiw	r24, 0x00	; 0
    20a6:	09 f4       	brne	.+2      	; 0x20aa <StepperMotor_VoidInit+0x18>
    20a8:	4a c0       	rjmp	.+148    	; 0x213e <StepperMotor_VoidInit+0xac>
	{
		// init blue pin
		DIO_VoidSetPinDirection(Copy_pStepMotor_st_Config->Motor_BluePort, Copy_pStepMotor_st_Config->Motor_BluePin , DIO_PIN_DIR_OUTPUT);
    20aa:	e9 81       	ldd	r30, Y+1	; 0x01
    20ac:	fa 81       	ldd	r31, Y+2	; 0x02
    20ae:	84 81       	ldd	r24, Z+4	; 0x04
    20b0:	82 95       	swap	r24
    20b2:	86 95       	lsr	r24
    20b4:	86 95       	lsr	r24
    20b6:	83 70       	andi	r24, 0x03	; 3
    20b8:	28 2f       	mov	r18, r24
    20ba:	e9 81       	ldd	r30, Y+1	; 0x01
    20bc:	fa 81       	ldd	r31, Y+2	; 0x02
    20be:	84 81       	ldd	r24, Z+4	; 0x04
    20c0:	87 70       	andi	r24, 0x07	; 7
    20c2:	98 2f       	mov	r25, r24
    20c4:	82 2f       	mov	r24, r18
    20c6:	69 2f       	mov	r22, r25
    20c8:	41 e0       	ldi	r20, 0x01	; 1
    20ca:	0e 94 80 0c 	call	0x1900	; 0x1900 <DIO_VoidSetPinDirection>
		//pink
		DIO_VoidSetPinDirection(Copy_pStepMotor_st_Config->Motor_PinkPort, Copy_pStepMotor_st_Config->Motor_PinkPin , DIO_PIN_DIR_OUTPUT);
    20ce:	e9 81       	ldd	r30, Y+1	; 0x01
    20d0:	fa 81       	ldd	r31, Y+2	; 0x02
    20d2:	85 81       	ldd	r24, Z+5	; 0x05
    20d4:	82 95       	swap	r24
    20d6:	86 95       	lsr	r24
    20d8:	86 95       	lsr	r24
    20da:	83 70       	andi	r24, 0x03	; 3
    20dc:	28 2f       	mov	r18, r24
    20de:	e9 81       	ldd	r30, Y+1	; 0x01
    20e0:	fa 81       	ldd	r31, Y+2	; 0x02
    20e2:	84 81       	ldd	r24, Z+4	; 0x04
    20e4:	86 95       	lsr	r24
    20e6:	86 95       	lsr	r24
    20e8:	86 95       	lsr	r24
    20ea:	87 70       	andi	r24, 0x07	; 7
    20ec:	98 2f       	mov	r25, r24
    20ee:	82 2f       	mov	r24, r18
    20f0:	69 2f       	mov	r22, r25
    20f2:	41 e0       	ldi	r20, 0x01	; 1
    20f4:	0e 94 80 0c 	call	0x1900	; 0x1900 <DIO_VoidSetPinDirection>
		//orange
		DIO_VoidSetPinDirection(Copy_pStepMotor_st_Config->Motor_OrangePort, Copy_pStepMotor_st_Config->Motor_OrangePin , DIO_PIN_DIR_OUTPUT);
    20f8:	e9 81       	ldd	r30, Y+1	; 0x01
    20fa:	fa 81       	ldd	r31, Y+2	; 0x02
    20fc:	86 81       	ldd	r24, Z+6	; 0x06
    20fe:	83 70       	andi	r24, 0x03	; 3
    2100:	28 2f       	mov	r18, r24
    2102:	e9 81       	ldd	r30, Y+1	; 0x01
    2104:	fa 81       	ldd	r31, Y+2	; 0x02
    2106:	85 81       	ldd	r24, Z+5	; 0x05
    2108:	87 70       	andi	r24, 0x07	; 7
    210a:	98 2f       	mov	r25, r24
    210c:	82 2f       	mov	r24, r18
    210e:	69 2f       	mov	r22, r25
    2110:	41 e0       	ldi	r20, 0x01	; 1
    2112:	0e 94 80 0c 	call	0x1900	; 0x1900 <DIO_VoidSetPinDirection>
		//yellow
		DIO_VoidSetPinDirection(Copy_pStepMotor_st_Config->Motor_YellowPort, Copy_pStepMotor_st_Config->Motor_YellowPin , DIO_PIN_DIR_OUTPUT);
    2116:	e9 81       	ldd	r30, Y+1	; 0x01
    2118:	fa 81       	ldd	r31, Y+2	; 0x02
    211a:	86 81       	ldd	r24, Z+6	; 0x06
    211c:	86 95       	lsr	r24
    211e:	86 95       	lsr	r24
    2120:	83 70       	andi	r24, 0x03	; 3
    2122:	28 2f       	mov	r18, r24
    2124:	e9 81       	ldd	r30, Y+1	; 0x01
    2126:	fa 81       	ldd	r31, Y+2	; 0x02
    2128:	85 81       	ldd	r24, Z+5	; 0x05
    212a:	86 95       	lsr	r24
    212c:	86 95       	lsr	r24
    212e:	86 95       	lsr	r24
    2130:	87 70       	andi	r24, 0x07	; 7
    2132:	98 2f       	mov	r25, r24
    2134:	82 2f       	mov	r24, r18
    2136:	69 2f       	mov	r22, r25
    2138:	41 e0       	ldi	r20, 0x01	; 1
    213a:	0e 94 80 0c 	call	0x1900	; 0x1900 <DIO_VoidSetPinDirection>
	else
	{

	}
	return;
}
    213e:	0f 90       	pop	r0
    2140:	0f 90       	pop	r0
    2142:	cf 91       	pop	r28
    2144:	df 91       	pop	r29
    2146:	08 95       	ret

00002148 <StepperMotor_VoidStepClockWise>:

void StepperMotor_VoidStepClockWise(const StepMotor_st* Copy_pStepMotor_st_Config)
{
    2148:	0f 93       	push	r16
    214a:	1f 93       	push	r17
    214c:	df 93       	push	r29
    214e:	cf 93       	push	r28
    2150:	cd b7       	in	r28, 0x3d	; 61
    2152:	de b7       	in	r29, 0x3e	; 62
    2154:	c8 54       	subi	r28, 0x48	; 72
    2156:	d0 40       	sbci	r29, 0x00	; 0
    2158:	0f b6       	in	r0, 0x3f	; 63
    215a:	f8 94       	cli
    215c:	de bf       	out	0x3e, r29	; 62
    215e:	0f be       	out	0x3f, r0	; 63
    2160:	cd bf       	out	0x3d, r28	; 61
    2162:	fe 01       	movw	r30, r28
    2164:	e9 5b       	subi	r30, 0xB9	; 185
    2166:	ff 4f       	sbci	r31, 0xFF	; 255
    2168:	91 83       	std	Z+1, r25	; 0x01
    216a:	80 83       	st	Z, r24
	if(Copy_pStepMotor_st_Config)
    216c:	fe 01       	movw	r30, r28
    216e:	e9 5b       	subi	r30, 0xB9	; 185
    2170:	ff 4f       	sbci	r31, 0xFF	; 255
    2172:	80 81       	ld	r24, Z
    2174:	91 81       	ldd	r25, Z+1	; 0x01
    2176:	00 97       	sbiw	r24, 0x00	; 0
    2178:	09 f4       	brne	.+2      	; 0x217c <StepperMotor_VoidStepClockWise+0x34>
    217a:	21 c3       	rjmp	.+1602   	; 0x27be <StepperMotor_VoidStepClockWise+0x676>
	{
		DIO_VoidSetPinValue(Copy_pStepMotor_st_Config->Motor_BluePort, Copy_pStepMotor_st_Config->Motor_BluePin , DIO_PIN_LOGIC_HIGH);
    217c:	fe 01       	movw	r30, r28
    217e:	e9 5b       	subi	r30, 0xB9	; 185
    2180:	ff 4f       	sbci	r31, 0xFF	; 255
    2182:	01 90       	ld	r0, Z+
    2184:	f0 81       	ld	r31, Z
    2186:	e0 2d       	mov	r30, r0
    2188:	84 81       	ldd	r24, Z+4	; 0x04
    218a:	82 95       	swap	r24
    218c:	86 95       	lsr	r24
    218e:	86 95       	lsr	r24
    2190:	83 70       	andi	r24, 0x03	; 3
    2192:	28 2f       	mov	r18, r24
    2194:	fe 01       	movw	r30, r28
    2196:	e9 5b       	subi	r30, 0xB9	; 185
    2198:	ff 4f       	sbci	r31, 0xFF	; 255
    219a:	01 90       	ld	r0, Z+
    219c:	f0 81       	ld	r31, Z
    219e:	e0 2d       	mov	r30, r0
    21a0:	84 81       	ldd	r24, Z+4	; 0x04
    21a2:	87 70       	andi	r24, 0x07	; 7
    21a4:	98 2f       	mov	r25, r24
    21a6:	82 2f       	mov	r24, r18
    21a8:	69 2f       	mov	r22, r25
    21aa:	41 e0       	ldi	r20, 0x01	; 1
    21ac:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <DIO_VoidSetPinValue>
    21b0:	fe 01       	movw	r30, r28
    21b2:	ed 5b       	subi	r30, 0xBD	; 189
    21b4:	ff 4f       	sbci	r31, 0xFF	; 255
    21b6:	80 e0       	ldi	r24, 0x00	; 0
    21b8:	90 e0       	ldi	r25, 0x00	; 0
    21ba:	a0 e2       	ldi	r26, 0x20	; 32
    21bc:	b1 e4       	ldi	r27, 0x41	; 65
    21be:	80 83       	st	Z, r24
    21c0:	91 83       	std	Z+1, r25	; 0x01
    21c2:	a2 83       	std	Z+2, r26	; 0x02
    21c4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21c6:	8e 01       	movw	r16, r28
    21c8:	01 5c       	subi	r16, 0xC1	; 193
    21ca:	1f 4f       	sbci	r17, 0xFF	; 255
    21cc:	fe 01       	movw	r30, r28
    21ce:	ed 5b       	subi	r30, 0xBD	; 189
    21d0:	ff 4f       	sbci	r31, 0xFF	; 255
    21d2:	60 81       	ld	r22, Z
    21d4:	71 81       	ldd	r23, Z+1	; 0x01
    21d6:	82 81       	ldd	r24, Z+2	; 0x02
    21d8:	93 81       	ldd	r25, Z+3	; 0x03
    21da:	20 e0       	ldi	r18, 0x00	; 0
    21dc:	30 e0       	ldi	r19, 0x00	; 0
    21de:	4a ef       	ldi	r20, 0xFA	; 250
    21e0:	54 e4       	ldi	r21, 0x44	; 68
    21e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21e6:	dc 01       	movw	r26, r24
    21e8:	cb 01       	movw	r24, r22
    21ea:	f8 01       	movw	r30, r16
    21ec:	80 83       	st	Z, r24
    21ee:	91 83       	std	Z+1, r25	; 0x01
    21f0:	a2 83       	std	Z+2, r26	; 0x02
    21f2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    21f4:	fe 01       	movw	r30, r28
    21f6:	ff 96       	adiw	r30, 0x3f	; 63
    21f8:	60 81       	ld	r22, Z
    21fa:	71 81       	ldd	r23, Z+1	; 0x01
    21fc:	82 81       	ldd	r24, Z+2	; 0x02
    21fe:	93 81       	ldd	r25, Z+3	; 0x03
    2200:	20 e0       	ldi	r18, 0x00	; 0
    2202:	30 e0       	ldi	r19, 0x00	; 0
    2204:	40 e8       	ldi	r20, 0x80	; 128
    2206:	5f e3       	ldi	r21, 0x3F	; 63
    2208:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    220c:	88 23       	and	r24, r24
    220e:	2c f4       	brge	.+10     	; 0x221a <StepperMotor_VoidStepClockWise+0xd2>
		__ticks = 1;
    2210:	81 e0       	ldi	r24, 0x01	; 1
    2212:	90 e0       	ldi	r25, 0x00	; 0
    2214:	9e af       	std	Y+62, r25	; 0x3e
    2216:	8d af       	std	Y+61, r24	; 0x3d
    2218:	46 c0       	rjmp	.+140    	; 0x22a6 <StepperMotor_VoidStepClockWise+0x15e>
	else if (__tmp > 65535)
    221a:	fe 01       	movw	r30, r28
    221c:	ff 96       	adiw	r30, 0x3f	; 63
    221e:	60 81       	ld	r22, Z
    2220:	71 81       	ldd	r23, Z+1	; 0x01
    2222:	82 81       	ldd	r24, Z+2	; 0x02
    2224:	93 81       	ldd	r25, Z+3	; 0x03
    2226:	20 e0       	ldi	r18, 0x00	; 0
    2228:	3f ef       	ldi	r19, 0xFF	; 255
    222a:	4f e7       	ldi	r20, 0x7F	; 127
    222c:	57 e4       	ldi	r21, 0x47	; 71
    222e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2232:	18 16       	cp	r1, r24
    2234:	64 f5       	brge	.+88     	; 0x228e <StepperMotor_VoidStepClockWise+0x146>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2236:	fe 01       	movw	r30, r28
    2238:	ed 5b       	subi	r30, 0xBD	; 189
    223a:	ff 4f       	sbci	r31, 0xFF	; 255
    223c:	60 81       	ld	r22, Z
    223e:	71 81       	ldd	r23, Z+1	; 0x01
    2240:	82 81       	ldd	r24, Z+2	; 0x02
    2242:	93 81       	ldd	r25, Z+3	; 0x03
    2244:	20 e0       	ldi	r18, 0x00	; 0
    2246:	30 e0       	ldi	r19, 0x00	; 0
    2248:	40 e2       	ldi	r20, 0x20	; 32
    224a:	51 e4       	ldi	r21, 0x41	; 65
    224c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2250:	dc 01       	movw	r26, r24
    2252:	cb 01       	movw	r24, r22
    2254:	bc 01       	movw	r22, r24
    2256:	cd 01       	movw	r24, r26
    2258:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    225c:	dc 01       	movw	r26, r24
    225e:	cb 01       	movw	r24, r22
    2260:	9e af       	std	Y+62, r25	; 0x3e
    2262:	8d af       	std	Y+61, r24	; 0x3d
    2264:	0f c0       	rjmp	.+30     	; 0x2284 <StepperMotor_VoidStepClockWise+0x13c>
    2266:	88 ec       	ldi	r24, 0xC8	; 200
    2268:	90 e0       	ldi	r25, 0x00	; 0
    226a:	9c af       	std	Y+60, r25	; 0x3c
    226c:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    226e:	8b ad       	ldd	r24, Y+59	; 0x3b
    2270:	9c ad       	ldd	r25, Y+60	; 0x3c
    2272:	01 97       	sbiw	r24, 0x01	; 1
    2274:	f1 f7       	brne	.-4      	; 0x2272 <StepperMotor_VoidStepClockWise+0x12a>
    2276:	9c af       	std	Y+60, r25	; 0x3c
    2278:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    227a:	8d ad       	ldd	r24, Y+61	; 0x3d
    227c:	9e ad       	ldd	r25, Y+62	; 0x3e
    227e:	01 97       	sbiw	r24, 0x01	; 1
    2280:	9e af       	std	Y+62, r25	; 0x3e
    2282:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2284:	8d ad       	ldd	r24, Y+61	; 0x3d
    2286:	9e ad       	ldd	r25, Y+62	; 0x3e
    2288:	00 97       	sbiw	r24, 0x00	; 0
    228a:	69 f7       	brne	.-38     	; 0x2266 <StepperMotor_VoidStepClockWise+0x11e>
    228c:	16 c0       	rjmp	.+44     	; 0x22ba <StepperMotor_VoidStepClockWise+0x172>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    228e:	fe 01       	movw	r30, r28
    2290:	ff 96       	adiw	r30, 0x3f	; 63
    2292:	60 81       	ld	r22, Z
    2294:	71 81       	ldd	r23, Z+1	; 0x01
    2296:	82 81       	ldd	r24, Z+2	; 0x02
    2298:	93 81       	ldd	r25, Z+3	; 0x03
    229a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    229e:	dc 01       	movw	r26, r24
    22a0:	cb 01       	movw	r24, r22
    22a2:	9e af       	std	Y+62, r25	; 0x3e
    22a4:	8d af       	std	Y+61, r24	; 0x3d
    22a6:	8d ad       	ldd	r24, Y+61	; 0x3d
    22a8:	9e ad       	ldd	r25, Y+62	; 0x3e
    22aa:	9a af       	std	Y+58, r25	; 0x3a
    22ac:	89 af       	std	Y+57, r24	; 0x39
    22ae:	89 ad       	ldd	r24, Y+57	; 0x39
    22b0:	9a ad       	ldd	r25, Y+58	; 0x3a
    22b2:	01 97       	sbiw	r24, 0x01	; 1
    22b4:	f1 f7       	brne	.-4      	; 0x22b2 <StepperMotor_VoidStepClockWise+0x16a>
    22b6:	9a af       	std	Y+58, r25	; 0x3a
    22b8:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(10);

		DIO_VoidSetPinValue(Copy_pStepMotor_st_Config->Motor_BluePort, Copy_pStepMotor_st_Config->Motor_BluePin , DIO_PIN_LOGIC_LOW);
    22ba:	fe 01       	movw	r30, r28
    22bc:	e9 5b       	subi	r30, 0xB9	; 185
    22be:	ff 4f       	sbci	r31, 0xFF	; 255
    22c0:	01 90       	ld	r0, Z+
    22c2:	f0 81       	ld	r31, Z
    22c4:	e0 2d       	mov	r30, r0
    22c6:	84 81       	ldd	r24, Z+4	; 0x04
    22c8:	82 95       	swap	r24
    22ca:	86 95       	lsr	r24
    22cc:	86 95       	lsr	r24
    22ce:	83 70       	andi	r24, 0x03	; 3
    22d0:	28 2f       	mov	r18, r24
    22d2:	fe 01       	movw	r30, r28
    22d4:	e9 5b       	subi	r30, 0xB9	; 185
    22d6:	ff 4f       	sbci	r31, 0xFF	; 255
    22d8:	01 90       	ld	r0, Z+
    22da:	f0 81       	ld	r31, Z
    22dc:	e0 2d       	mov	r30, r0
    22de:	84 81       	ldd	r24, Z+4	; 0x04
    22e0:	87 70       	andi	r24, 0x07	; 7
    22e2:	98 2f       	mov	r25, r24
    22e4:	82 2f       	mov	r24, r18
    22e6:	69 2f       	mov	r22, r25
    22e8:	40 e0       	ldi	r20, 0x00	; 0
    22ea:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <DIO_VoidSetPinValue>
		DIO_VoidSetPinValue(Copy_pStepMotor_st_Config->Motor_PinkPort, Copy_pStepMotor_st_Config->Motor_PinkPin , DIO_PIN_LOGIC_HIGH);
    22ee:	fe 01       	movw	r30, r28
    22f0:	e9 5b       	subi	r30, 0xB9	; 185
    22f2:	ff 4f       	sbci	r31, 0xFF	; 255
    22f4:	01 90       	ld	r0, Z+
    22f6:	f0 81       	ld	r31, Z
    22f8:	e0 2d       	mov	r30, r0
    22fa:	85 81       	ldd	r24, Z+5	; 0x05
    22fc:	82 95       	swap	r24
    22fe:	86 95       	lsr	r24
    2300:	86 95       	lsr	r24
    2302:	83 70       	andi	r24, 0x03	; 3
    2304:	28 2f       	mov	r18, r24
    2306:	fe 01       	movw	r30, r28
    2308:	e9 5b       	subi	r30, 0xB9	; 185
    230a:	ff 4f       	sbci	r31, 0xFF	; 255
    230c:	01 90       	ld	r0, Z+
    230e:	f0 81       	ld	r31, Z
    2310:	e0 2d       	mov	r30, r0
    2312:	84 81       	ldd	r24, Z+4	; 0x04
    2314:	86 95       	lsr	r24
    2316:	86 95       	lsr	r24
    2318:	86 95       	lsr	r24
    231a:	87 70       	andi	r24, 0x07	; 7
    231c:	98 2f       	mov	r25, r24
    231e:	82 2f       	mov	r24, r18
    2320:	69 2f       	mov	r22, r25
    2322:	41 e0       	ldi	r20, 0x01	; 1
    2324:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <DIO_VoidSetPinValue>
    2328:	80 e0       	ldi	r24, 0x00	; 0
    232a:	90 e0       	ldi	r25, 0x00	; 0
    232c:	a0 e2       	ldi	r26, 0x20	; 32
    232e:	b1 e4       	ldi	r27, 0x41	; 65
    2330:	8d ab       	std	Y+53, r24	; 0x35
    2332:	9e ab       	std	Y+54, r25	; 0x36
    2334:	af ab       	std	Y+55, r26	; 0x37
    2336:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2338:	6d a9       	ldd	r22, Y+53	; 0x35
    233a:	7e a9       	ldd	r23, Y+54	; 0x36
    233c:	8f a9       	ldd	r24, Y+55	; 0x37
    233e:	98 ad       	ldd	r25, Y+56	; 0x38
    2340:	20 e0       	ldi	r18, 0x00	; 0
    2342:	30 e0       	ldi	r19, 0x00	; 0
    2344:	4a ef       	ldi	r20, 0xFA	; 250
    2346:	54 e4       	ldi	r21, 0x44	; 68
    2348:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    234c:	dc 01       	movw	r26, r24
    234e:	cb 01       	movw	r24, r22
    2350:	89 ab       	std	Y+49, r24	; 0x31
    2352:	9a ab       	std	Y+50, r25	; 0x32
    2354:	ab ab       	std	Y+51, r26	; 0x33
    2356:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2358:	69 a9       	ldd	r22, Y+49	; 0x31
    235a:	7a a9       	ldd	r23, Y+50	; 0x32
    235c:	8b a9       	ldd	r24, Y+51	; 0x33
    235e:	9c a9       	ldd	r25, Y+52	; 0x34
    2360:	20 e0       	ldi	r18, 0x00	; 0
    2362:	30 e0       	ldi	r19, 0x00	; 0
    2364:	40 e8       	ldi	r20, 0x80	; 128
    2366:	5f e3       	ldi	r21, 0x3F	; 63
    2368:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    236c:	88 23       	and	r24, r24
    236e:	2c f4       	brge	.+10     	; 0x237a <StepperMotor_VoidStepClockWise+0x232>
		__ticks = 1;
    2370:	81 e0       	ldi	r24, 0x01	; 1
    2372:	90 e0       	ldi	r25, 0x00	; 0
    2374:	98 ab       	std	Y+48, r25	; 0x30
    2376:	8f a7       	std	Y+47, r24	; 0x2f
    2378:	3f c0       	rjmp	.+126    	; 0x23f8 <StepperMotor_VoidStepClockWise+0x2b0>
	else if (__tmp > 65535)
    237a:	69 a9       	ldd	r22, Y+49	; 0x31
    237c:	7a a9       	ldd	r23, Y+50	; 0x32
    237e:	8b a9       	ldd	r24, Y+51	; 0x33
    2380:	9c a9       	ldd	r25, Y+52	; 0x34
    2382:	20 e0       	ldi	r18, 0x00	; 0
    2384:	3f ef       	ldi	r19, 0xFF	; 255
    2386:	4f e7       	ldi	r20, 0x7F	; 127
    2388:	57 e4       	ldi	r21, 0x47	; 71
    238a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    238e:	18 16       	cp	r1, r24
    2390:	4c f5       	brge	.+82     	; 0x23e4 <StepperMotor_VoidStepClockWise+0x29c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2392:	6d a9       	ldd	r22, Y+53	; 0x35
    2394:	7e a9       	ldd	r23, Y+54	; 0x36
    2396:	8f a9       	ldd	r24, Y+55	; 0x37
    2398:	98 ad       	ldd	r25, Y+56	; 0x38
    239a:	20 e0       	ldi	r18, 0x00	; 0
    239c:	30 e0       	ldi	r19, 0x00	; 0
    239e:	40 e2       	ldi	r20, 0x20	; 32
    23a0:	51 e4       	ldi	r21, 0x41	; 65
    23a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23a6:	dc 01       	movw	r26, r24
    23a8:	cb 01       	movw	r24, r22
    23aa:	bc 01       	movw	r22, r24
    23ac:	cd 01       	movw	r24, r26
    23ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23b2:	dc 01       	movw	r26, r24
    23b4:	cb 01       	movw	r24, r22
    23b6:	98 ab       	std	Y+48, r25	; 0x30
    23b8:	8f a7       	std	Y+47, r24	; 0x2f
    23ba:	0f c0       	rjmp	.+30     	; 0x23da <StepperMotor_VoidStepClockWise+0x292>
    23bc:	88 ec       	ldi	r24, 0xC8	; 200
    23be:	90 e0       	ldi	r25, 0x00	; 0
    23c0:	9e a7       	std	Y+46, r25	; 0x2e
    23c2:	8d a7       	std	Y+45, r24	; 0x2d
    23c4:	8d a5       	ldd	r24, Y+45	; 0x2d
    23c6:	9e a5       	ldd	r25, Y+46	; 0x2e
    23c8:	01 97       	sbiw	r24, 0x01	; 1
    23ca:	f1 f7       	brne	.-4      	; 0x23c8 <StepperMotor_VoidStepClockWise+0x280>
    23cc:	9e a7       	std	Y+46, r25	; 0x2e
    23ce:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23d0:	8f a5       	ldd	r24, Y+47	; 0x2f
    23d2:	98 a9       	ldd	r25, Y+48	; 0x30
    23d4:	01 97       	sbiw	r24, 0x01	; 1
    23d6:	98 ab       	std	Y+48, r25	; 0x30
    23d8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23da:	8f a5       	ldd	r24, Y+47	; 0x2f
    23dc:	98 a9       	ldd	r25, Y+48	; 0x30
    23de:	00 97       	sbiw	r24, 0x00	; 0
    23e0:	69 f7       	brne	.-38     	; 0x23bc <StepperMotor_VoidStepClockWise+0x274>
    23e2:	14 c0       	rjmp	.+40     	; 0x240c <StepperMotor_VoidStepClockWise+0x2c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23e4:	69 a9       	ldd	r22, Y+49	; 0x31
    23e6:	7a a9       	ldd	r23, Y+50	; 0x32
    23e8:	8b a9       	ldd	r24, Y+51	; 0x33
    23ea:	9c a9       	ldd	r25, Y+52	; 0x34
    23ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23f0:	dc 01       	movw	r26, r24
    23f2:	cb 01       	movw	r24, r22
    23f4:	98 ab       	std	Y+48, r25	; 0x30
    23f6:	8f a7       	std	Y+47, r24	; 0x2f
    23f8:	8f a5       	ldd	r24, Y+47	; 0x2f
    23fa:	98 a9       	ldd	r25, Y+48	; 0x30
    23fc:	9c a7       	std	Y+44, r25	; 0x2c
    23fe:	8b a7       	std	Y+43, r24	; 0x2b
    2400:	8b a5       	ldd	r24, Y+43	; 0x2b
    2402:	9c a5       	ldd	r25, Y+44	; 0x2c
    2404:	01 97       	sbiw	r24, 0x01	; 1
    2406:	f1 f7       	brne	.-4      	; 0x2404 <StepperMotor_VoidStepClockWise+0x2bc>
    2408:	9c a7       	std	Y+44, r25	; 0x2c
    240a:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(10);

		DIO_VoidSetPinValue(Copy_pStepMotor_st_Config->Motor_PinkPort, Copy_pStepMotor_st_Config->Motor_PinkPin , DIO_PIN_LOGIC_LOW);
    240c:	fe 01       	movw	r30, r28
    240e:	e9 5b       	subi	r30, 0xB9	; 185
    2410:	ff 4f       	sbci	r31, 0xFF	; 255
    2412:	01 90       	ld	r0, Z+
    2414:	f0 81       	ld	r31, Z
    2416:	e0 2d       	mov	r30, r0
    2418:	85 81       	ldd	r24, Z+5	; 0x05
    241a:	82 95       	swap	r24
    241c:	86 95       	lsr	r24
    241e:	86 95       	lsr	r24
    2420:	83 70       	andi	r24, 0x03	; 3
    2422:	28 2f       	mov	r18, r24
    2424:	fe 01       	movw	r30, r28
    2426:	e9 5b       	subi	r30, 0xB9	; 185
    2428:	ff 4f       	sbci	r31, 0xFF	; 255
    242a:	01 90       	ld	r0, Z+
    242c:	f0 81       	ld	r31, Z
    242e:	e0 2d       	mov	r30, r0
    2430:	84 81       	ldd	r24, Z+4	; 0x04
    2432:	86 95       	lsr	r24
    2434:	86 95       	lsr	r24
    2436:	86 95       	lsr	r24
    2438:	87 70       	andi	r24, 0x07	; 7
    243a:	98 2f       	mov	r25, r24
    243c:	82 2f       	mov	r24, r18
    243e:	69 2f       	mov	r22, r25
    2440:	40 e0       	ldi	r20, 0x00	; 0
    2442:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <DIO_VoidSetPinValue>
		DIO_VoidSetPinValue(Copy_pStepMotor_st_Config->Motor_OrangePort, Copy_pStepMotor_st_Config->Motor_OrangePin , DIO_PIN_LOGIC_HIGH);
    2446:	fe 01       	movw	r30, r28
    2448:	e9 5b       	subi	r30, 0xB9	; 185
    244a:	ff 4f       	sbci	r31, 0xFF	; 255
    244c:	01 90       	ld	r0, Z+
    244e:	f0 81       	ld	r31, Z
    2450:	e0 2d       	mov	r30, r0
    2452:	86 81       	ldd	r24, Z+6	; 0x06
    2454:	83 70       	andi	r24, 0x03	; 3
    2456:	28 2f       	mov	r18, r24
    2458:	fe 01       	movw	r30, r28
    245a:	e9 5b       	subi	r30, 0xB9	; 185
    245c:	ff 4f       	sbci	r31, 0xFF	; 255
    245e:	01 90       	ld	r0, Z+
    2460:	f0 81       	ld	r31, Z
    2462:	e0 2d       	mov	r30, r0
    2464:	85 81       	ldd	r24, Z+5	; 0x05
    2466:	87 70       	andi	r24, 0x07	; 7
    2468:	98 2f       	mov	r25, r24
    246a:	82 2f       	mov	r24, r18
    246c:	69 2f       	mov	r22, r25
    246e:	41 e0       	ldi	r20, 0x01	; 1
    2470:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <DIO_VoidSetPinValue>
    2474:	80 e0       	ldi	r24, 0x00	; 0
    2476:	90 e0       	ldi	r25, 0x00	; 0
    2478:	a0 e2       	ldi	r26, 0x20	; 32
    247a:	b1 e4       	ldi	r27, 0x41	; 65
    247c:	8f a3       	std	Y+39, r24	; 0x27
    247e:	98 a7       	std	Y+40, r25	; 0x28
    2480:	a9 a7       	std	Y+41, r26	; 0x29
    2482:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2484:	6f a1       	ldd	r22, Y+39	; 0x27
    2486:	78 a5       	ldd	r23, Y+40	; 0x28
    2488:	89 a5       	ldd	r24, Y+41	; 0x29
    248a:	9a a5       	ldd	r25, Y+42	; 0x2a
    248c:	20 e0       	ldi	r18, 0x00	; 0
    248e:	30 e0       	ldi	r19, 0x00	; 0
    2490:	4a ef       	ldi	r20, 0xFA	; 250
    2492:	54 e4       	ldi	r21, 0x44	; 68
    2494:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2498:	dc 01       	movw	r26, r24
    249a:	cb 01       	movw	r24, r22
    249c:	8b a3       	std	Y+35, r24	; 0x23
    249e:	9c a3       	std	Y+36, r25	; 0x24
    24a0:	ad a3       	std	Y+37, r26	; 0x25
    24a2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    24a4:	6b a1       	ldd	r22, Y+35	; 0x23
    24a6:	7c a1       	ldd	r23, Y+36	; 0x24
    24a8:	8d a1       	ldd	r24, Y+37	; 0x25
    24aa:	9e a1       	ldd	r25, Y+38	; 0x26
    24ac:	20 e0       	ldi	r18, 0x00	; 0
    24ae:	30 e0       	ldi	r19, 0x00	; 0
    24b0:	40 e8       	ldi	r20, 0x80	; 128
    24b2:	5f e3       	ldi	r21, 0x3F	; 63
    24b4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    24b8:	88 23       	and	r24, r24
    24ba:	2c f4       	brge	.+10     	; 0x24c6 <StepperMotor_VoidStepClockWise+0x37e>
		__ticks = 1;
    24bc:	81 e0       	ldi	r24, 0x01	; 1
    24be:	90 e0       	ldi	r25, 0x00	; 0
    24c0:	9a a3       	std	Y+34, r25	; 0x22
    24c2:	89 a3       	std	Y+33, r24	; 0x21
    24c4:	3f c0       	rjmp	.+126    	; 0x2544 <StepperMotor_VoidStepClockWise+0x3fc>
	else if (__tmp > 65535)
    24c6:	6b a1       	ldd	r22, Y+35	; 0x23
    24c8:	7c a1       	ldd	r23, Y+36	; 0x24
    24ca:	8d a1       	ldd	r24, Y+37	; 0x25
    24cc:	9e a1       	ldd	r25, Y+38	; 0x26
    24ce:	20 e0       	ldi	r18, 0x00	; 0
    24d0:	3f ef       	ldi	r19, 0xFF	; 255
    24d2:	4f e7       	ldi	r20, 0x7F	; 127
    24d4:	57 e4       	ldi	r21, 0x47	; 71
    24d6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    24da:	18 16       	cp	r1, r24
    24dc:	4c f5       	brge	.+82     	; 0x2530 <StepperMotor_VoidStepClockWise+0x3e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24de:	6f a1       	ldd	r22, Y+39	; 0x27
    24e0:	78 a5       	ldd	r23, Y+40	; 0x28
    24e2:	89 a5       	ldd	r24, Y+41	; 0x29
    24e4:	9a a5       	ldd	r25, Y+42	; 0x2a
    24e6:	20 e0       	ldi	r18, 0x00	; 0
    24e8:	30 e0       	ldi	r19, 0x00	; 0
    24ea:	40 e2       	ldi	r20, 0x20	; 32
    24ec:	51 e4       	ldi	r21, 0x41	; 65
    24ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24f2:	dc 01       	movw	r26, r24
    24f4:	cb 01       	movw	r24, r22
    24f6:	bc 01       	movw	r22, r24
    24f8:	cd 01       	movw	r24, r26
    24fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24fe:	dc 01       	movw	r26, r24
    2500:	cb 01       	movw	r24, r22
    2502:	9a a3       	std	Y+34, r25	; 0x22
    2504:	89 a3       	std	Y+33, r24	; 0x21
    2506:	0f c0       	rjmp	.+30     	; 0x2526 <StepperMotor_VoidStepClockWise+0x3de>
    2508:	88 ec       	ldi	r24, 0xC8	; 200
    250a:	90 e0       	ldi	r25, 0x00	; 0
    250c:	98 a3       	std	Y+32, r25	; 0x20
    250e:	8f 8f       	std	Y+31, r24	; 0x1f
    2510:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2512:	98 a1       	ldd	r25, Y+32	; 0x20
    2514:	01 97       	sbiw	r24, 0x01	; 1
    2516:	f1 f7       	brne	.-4      	; 0x2514 <StepperMotor_VoidStepClockWise+0x3cc>
    2518:	98 a3       	std	Y+32, r25	; 0x20
    251a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    251c:	89 a1       	ldd	r24, Y+33	; 0x21
    251e:	9a a1       	ldd	r25, Y+34	; 0x22
    2520:	01 97       	sbiw	r24, 0x01	; 1
    2522:	9a a3       	std	Y+34, r25	; 0x22
    2524:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2526:	89 a1       	ldd	r24, Y+33	; 0x21
    2528:	9a a1       	ldd	r25, Y+34	; 0x22
    252a:	00 97       	sbiw	r24, 0x00	; 0
    252c:	69 f7       	brne	.-38     	; 0x2508 <StepperMotor_VoidStepClockWise+0x3c0>
    252e:	14 c0       	rjmp	.+40     	; 0x2558 <StepperMotor_VoidStepClockWise+0x410>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2530:	6b a1       	ldd	r22, Y+35	; 0x23
    2532:	7c a1       	ldd	r23, Y+36	; 0x24
    2534:	8d a1       	ldd	r24, Y+37	; 0x25
    2536:	9e a1       	ldd	r25, Y+38	; 0x26
    2538:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    253c:	dc 01       	movw	r26, r24
    253e:	cb 01       	movw	r24, r22
    2540:	9a a3       	std	Y+34, r25	; 0x22
    2542:	89 a3       	std	Y+33, r24	; 0x21
    2544:	89 a1       	ldd	r24, Y+33	; 0x21
    2546:	9a a1       	ldd	r25, Y+34	; 0x22
    2548:	9e 8f       	std	Y+30, r25	; 0x1e
    254a:	8d 8f       	std	Y+29, r24	; 0x1d
    254c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    254e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2550:	01 97       	sbiw	r24, 0x01	; 1
    2552:	f1 f7       	brne	.-4      	; 0x2550 <StepperMotor_VoidStepClockWise+0x408>
    2554:	9e 8f       	std	Y+30, r25	; 0x1e
    2556:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(10);
		DIO_VoidSetPinValue(Copy_pStepMotor_st_Config->Motor_OrangePort, Copy_pStepMotor_st_Config->Motor_OrangePin , DIO_PIN_LOGIC_LOW);
    2558:	fe 01       	movw	r30, r28
    255a:	e9 5b       	subi	r30, 0xB9	; 185
    255c:	ff 4f       	sbci	r31, 0xFF	; 255
    255e:	01 90       	ld	r0, Z+
    2560:	f0 81       	ld	r31, Z
    2562:	e0 2d       	mov	r30, r0
    2564:	86 81       	ldd	r24, Z+6	; 0x06
    2566:	83 70       	andi	r24, 0x03	; 3
    2568:	28 2f       	mov	r18, r24
    256a:	fe 01       	movw	r30, r28
    256c:	e9 5b       	subi	r30, 0xB9	; 185
    256e:	ff 4f       	sbci	r31, 0xFF	; 255
    2570:	01 90       	ld	r0, Z+
    2572:	f0 81       	ld	r31, Z
    2574:	e0 2d       	mov	r30, r0
    2576:	85 81       	ldd	r24, Z+5	; 0x05
    2578:	87 70       	andi	r24, 0x07	; 7
    257a:	98 2f       	mov	r25, r24
    257c:	82 2f       	mov	r24, r18
    257e:	69 2f       	mov	r22, r25
    2580:	40 e0       	ldi	r20, 0x00	; 0
    2582:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <DIO_VoidSetPinValue>
		DIO_VoidSetPinValue(Copy_pStepMotor_st_Config->Motor_YellowPort, Copy_pStepMotor_st_Config->Motor_YellowPin , DIO_PIN_LOGIC_HIGH);
    2586:	fe 01       	movw	r30, r28
    2588:	e9 5b       	subi	r30, 0xB9	; 185
    258a:	ff 4f       	sbci	r31, 0xFF	; 255
    258c:	01 90       	ld	r0, Z+
    258e:	f0 81       	ld	r31, Z
    2590:	e0 2d       	mov	r30, r0
    2592:	86 81       	ldd	r24, Z+6	; 0x06
    2594:	86 95       	lsr	r24
    2596:	86 95       	lsr	r24
    2598:	83 70       	andi	r24, 0x03	; 3
    259a:	28 2f       	mov	r18, r24
    259c:	fe 01       	movw	r30, r28
    259e:	e9 5b       	subi	r30, 0xB9	; 185
    25a0:	ff 4f       	sbci	r31, 0xFF	; 255
    25a2:	01 90       	ld	r0, Z+
    25a4:	f0 81       	ld	r31, Z
    25a6:	e0 2d       	mov	r30, r0
    25a8:	85 81       	ldd	r24, Z+5	; 0x05
    25aa:	86 95       	lsr	r24
    25ac:	86 95       	lsr	r24
    25ae:	86 95       	lsr	r24
    25b0:	87 70       	andi	r24, 0x07	; 7
    25b2:	98 2f       	mov	r25, r24
    25b4:	82 2f       	mov	r24, r18
    25b6:	69 2f       	mov	r22, r25
    25b8:	41 e0       	ldi	r20, 0x01	; 1
    25ba:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <DIO_VoidSetPinValue>
    25be:	80 e0       	ldi	r24, 0x00	; 0
    25c0:	90 e0       	ldi	r25, 0x00	; 0
    25c2:	a0 e2       	ldi	r26, 0x20	; 32
    25c4:	b1 e4       	ldi	r27, 0x41	; 65
    25c6:	89 8f       	std	Y+25, r24	; 0x19
    25c8:	9a 8f       	std	Y+26, r25	; 0x1a
    25ca:	ab 8f       	std	Y+27, r26	; 0x1b
    25cc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25ce:	69 8d       	ldd	r22, Y+25	; 0x19
    25d0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    25d2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25d4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    25d6:	20 e0       	ldi	r18, 0x00	; 0
    25d8:	30 e0       	ldi	r19, 0x00	; 0
    25da:	4a ef       	ldi	r20, 0xFA	; 250
    25dc:	54 e4       	ldi	r21, 0x44	; 68
    25de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25e2:	dc 01       	movw	r26, r24
    25e4:	cb 01       	movw	r24, r22
    25e6:	8d 8b       	std	Y+21, r24	; 0x15
    25e8:	9e 8b       	std	Y+22, r25	; 0x16
    25ea:	af 8b       	std	Y+23, r26	; 0x17
    25ec:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    25ee:	6d 89       	ldd	r22, Y+21	; 0x15
    25f0:	7e 89       	ldd	r23, Y+22	; 0x16
    25f2:	8f 89       	ldd	r24, Y+23	; 0x17
    25f4:	98 8d       	ldd	r25, Y+24	; 0x18
    25f6:	20 e0       	ldi	r18, 0x00	; 0
    25f8:	30 e0       	ldi	r19, 0x00	; 0
    25fa:	40 e8       	ldi	r20, 0x80	; 128
    25fc:	5f e3       	ldi	r21, 0x3F	; 63
    25fe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2602:	88 23       	and	r24, r24
    2604:	2c f4       	brge	.+10     	; 0x2610 <StepperMotor_VoidStepClockWise+0x4c8>
		__ticks = 1;
    2606:	81 e0       	ldi	r24, 0x01	; 1
    2608:	90 e0       	ldi	r25, 0x00	; 0
    260a:	9c 8b       	std	Y+20, r25	; 0x14
    260c:	8b 8b       	std	Y+19, r24	; 0x13
    260e:	3f c0       	rjmp	.+126    	; 0x268e <StepperMotor_VoidStepClockWise+0x546>
	else if (__tmp > 65535)
    2610:	6d 89       	ldd	r22, Y+21	; 0x15
    2612:	7e 89       	ldd	r23, Y+22	; 0x16
    2614:	8f 89       	ldd	r24, Y+23	; 0x17
    2616:	98 8d       	ldd	r25, Y+24	; 0x18
    2618:	20 e0       	ldi	r18, 0x00	; 0
    261a:	3f ef       	ldi	r19, 0xFF	; 255
    261c:	4f e7       	ldi	r20, 0x7F	; 127
    261e:	57 e4       	ldi	r21, 0x47	; 71
    2620:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2624:	18 16       	cp	r1, r24
    2626:	4c f5       	brge	.+82     	; 0x267a <StepperMotor_VoidStepClockWise+0x532>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2628:	69 8d       	ldd	r22, Y+25	; 0x19
    262a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    262c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    262e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2630:	20 e0       	ldi	r18, 0x00	; 0
    2632:	30 e0       	ldi	r19, 0x00	; 0
    2634:	40 e2       	ldi	r20, 0x20	; 32
    2636:	51 e4       	ldi	r21, 0x41	; 65
    2638:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    263c:	dc 01       	movw	r26, r24
    263e:	cb 01       	movw	r24, r22
    2640:	bc 01       	movw	r22, r24
    2642:	cd 01       	movw	r24, r26
    2644:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2648:	dc 01       	movw	r26, r24
    264a:	cb 01       	movw	r24, r22
    264c:	9c 8b       	std	Y+20, r25	; 0x14
    264e:	8b 8b       	std	Y+19, r24	; 0x13
    2650:	0f c0       	rjmp	.+30     	; 0x2670 <StepperMotor_VoidStepClockWise+0x528>
    2652:	88 ec       	ldi	r24, 0xC8	; 200
    2654:	90 e0       	ldi	r25, 0x00	; 0
    2656:	9a 8b       	std	Y+18, r25	; 0x12
    2658:	89 8b       	std	Y+17, r24	; 0x11
    265a:	89 89       	ldd	r24, Y+17	; 0x11
    265c:	9a 89       	ldd	r25, Y+18	; 0x12
    265e:	01 97       	sbiw	r24, 0x01	; 1
    2660:	f1 f7       	brne	.-4      	; 0x265e <StepperMotor_VoidStepClockWise+0x516>
    2662:	9a 8b       	std	Y+18, r25	; 0x12
    2664:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2666:	8b 89       	ldd	r24, Y+19	; 0x13
    2668:	9c 89       	ldd	r25, Y+20	; 0x14
    266a:	01 97       	sbiw	r24, 0x01	; 1
    266c:	9c 8b       	std	Y+20, r25	; 0x14
    266e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2670:	8b 89       	ldd	r24, Y+19	; 0x13
    2672:	9c 89       	ldd	r25, Y+20	; 0x14
    2674:	00 97       	sbiw	r24, 0x00	; 0
    2676:	69 f7       	brne	.-38     	; 0x2652 <StepperMotor_VoidStepClockWise+0x50a>
    2678:	14 c0       	rjmp	.+40     	; 0x26a2 <StepperMotor_VoidStepClockWise+0x55a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    267a:	6d 89       	ldd	r22, Y+21	; 0x15
    267c:	7e 89       	ldd	r23, Y+22	; 0x16
    267e:	8f 89       	ldd	r24, Y+23	; 0x17
    2680:	98 8d       	ldd	r25, Y+24	; 0x18
    2682:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2686:	dc 01       	movw	r26, r24
    2688:	cb 01       	movw	r24, r22
    268a:	9c 8b       	std	Y+20, r25	; 0x14
    268c:	8b 8b       	std	Y+19, r24	; 0x13
    268e:	8b 89       	ldd	r24, Y+19	; 0x13
    2690:	9c 89       	ldd	r25, Y+20	; 0x14
    2692:	98 8b       	std	Y+16, r25	; 0x10
    2694:	8f 87       	std	Y+15, r24	; 0x0f
    2696:	8f 85       	ldd	r24, Y+15	; 0x0f
    2698:	98 89       	ldd	r25, Y+16	; 0x10
    269a:	01 97       	sbiw	r24, 0x01	; 1
    269c:	f1 f7       	brne	.-4      	; 0x269a <StepperMotor_VoidStepClockWise+0x552>
    269e:	98 8b       	std	Y+16, r25	; 0x10
    26a0:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(10);
		DIO_VoidSetPinValue(Copy_pStepMotor_st_Config->Motor_YellowPort, Copy_pStepMotor_st_Config->Motor_YellowPin , DIO_PIN_LOGIC_LOW);
    26a2:	fe 01       	movw	r30, r28
    26a4:	e9 5b       	subi	r30, 0xB9	; 185
    26a6:	ff 4f       	sbci	r31, 0xFF	; 255
    26a8:	01 90       	ld	r0, Z+
    26aa:	f0 81       	ld	r31, Z
    26ac:	e0 2d       	mov	r30, r0
    26ae:	86 81       	ldd	r24, Z+6	; 0x06
    26b0:	86 95       	lsr	r24
    26b2:	86 95       	lsr	r24
    26b4:	83 70       	andi	r24, 0x03	; 3
    26b6:	28 2f       	mov	r18, r24
    26b8:	fe 01       	movw	r30, r28
    26ba:	e9 5b       	subi	r30, 0xB9	; 185
    26bc:	ff 4f       	sbci	r31, 0xFF	; 255
    26be:	01 90       	ld	r0, Z+
    26c0:	f0 81       	ld	r31, Z
    26c2:	e0 2d       	mov	r30, r0
    26c4:	85 81       	ldd	r24, Z+5	; 0x05
    26c6:	86 95       	lsr	r24
    26c8:	86 95       	lsr	r24
    26ca:	86 95       	lsr	r24
    26cc:	87 70       	andi	r24, 0x07	; 7
    26ce:	98 2f       	mov	r25, r24
    26d0:	82 2f       	mov	r24, r18
    26d2:	69 2f       	mov	r22, r25
    26d4:	40 e0       	ldi	r20, 0x00	; 0
    26d6:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <DIO_VoidSetPinValue>
    26da:	80 e0       	ldi	r24, 0x00	; 0
    26dc:	90 e0       	ldi	r25, 0x00	; 0
    26de:	a0 e2       	ldi	r26, 0x20	; 32
    26e0:	b1 e4       	ldi	r27, 0x41	; 65
    26e2:	8b 87       	std	Y+11, r24	; 0x0b
    26e4:	9c 87       	std	Y+12, r25	; 0x0c
    26e6:	ad 87       	std	Y+13, r26	; 0x0d
    26e8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    26ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    26ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    26f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    26f2:	20 e0       	ldi	r18, 0x00	; 0
    26f4:	30 e0       	ldi	r19, 0x00	; 0
    26f6:	4a ef       	ldi	r20, 0xFA	; 250
    26f8:	54 e4       	ldi	r21, 0x44	; 68
    26fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26fe:	dc 01       	movw	r26, r24
    2700:	cb 01       	movw	r24, r22
    2702:	8f 83       	std	Y+7, r24	; 0x07
    2704:	98 87       	std	Y+8, r25	; 0x08
    2706:	a9 87       	std	Y+9, r26	; 0x09
    2708:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    270a:	6f 81       	ldd	r22, Y+7	; 0x07
    270c:	78 85       	ldd	r23, Y+8	; 0x08
    270e:	89 85       	ldd	r24, Y+9	; 0x09
    2710:	9a 85       	ldd	r25, Y+10	; 0x0a
    2712:	20 e0       	ldi	r18, 0x00	; 0
    2714:	30 e0       	ldi	r19, 0x00	; 0
    2716:	40 e8       	ldi	r20, 0x80	; 128
    2718:	5f e3       	ldi	r21, 0x3F	; 63
    271a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    271e:	88 23       	and	r24, r24
    2720:	2c f4       	brge	.+10     	; 0x272c <StepperMotor_VoidStepClockWise+0x5e4>
		__ticks = 1;
    2722:	81 e0       	ldi	r24, 0x01	; 1
    2724:	90 e0       	ldi	r25, 0x00	; 0
    2726:	9e 83       	std	Y+6, r25	; 0x06
    2728:	8d 83       	std	Y+5, r24	; 0x05
    272a:	3f c0       	rjmp	.+126    	; 0x27aa <StepperMotor_VoidStepClockWise+0x662>
	else if (__tmp > 65535)
    272c:	6f 81       	ldd	r22, Y+7	; 0x07
    272e:	78 85       	ldd	r23, Y+8	; 0x08
    2730:	89 85       	ldd	r24, Y+9	; 0x09
    2732:	9a 85       	ldd	r25, Y+10	; 0x0a
    2734:	20 e0       	ldi	r18, 0x00	; 0
    2736:	3f ef       	ldi	r19, 0xFF	; 255
    2738:	4f e7       	ldi	r20, 0x7F	; 127
    273a:	57 e4       	ldi	r21, 0x47	; 71
    273c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2740:	18 16       	cp	r1, r24
    2742:	4c f5       	brge	.+82     	; 0x2796 <StepperMotor_VoidStepClockWise+0x64e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2744:	6b 85       	ldd	r22, Y+11	; 0x0b
    2746:	7c 85       	ldd	r23, Y+12	; 0x0c
    2748:	8d 85       	ldd	r24, Y+13	; 0x0d
    274a:	9e 85       	ldd	r25, Y+14	; 0x0e
    274c:	20 e0       	ldi	r18, 0x00	; 0
    274e:	30 e0       	ldi	r19, 0x00	; 0
    2750:	40 e2       	ldi	r20, 0x20	; 32
    2752:	51 e4       	ldi	r21, 0x41	; 65
    2754:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2758:	dc 01       	movw	r26, r24
    275a:	cb 01       	movw	r24, r22
    275c:	bc 01       	movw	r22, r24
    275e:	cd 01       	movw	r24, r26
    2760:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2764:	dc 01       	movw	r26, r24
    2766:	cb 01       	movw	r24, r22
    2768:	9e 83       	std	Y+6, r25	; 0x06
    276a:	8d 83       	std	Y+5, r24	; 0x05
    276c:	0f c0       	rjmp	.+30     	; 0x278c <StepperMotor_VoidStepClockWise+0x644>
    276e:	88 ec       	ldi	r24, 0xC8	; 200
    2770:	90 e0       	ldi	r25, 0x00	; 0
    2772:	9c 83       	std	Y+4, r25	; 0x04
    2774:	8b 83       	std	Y+3, r24	; 0x03
    2776:	8b 81       	ldd	r24, Y+3	; 0x03
    2778:	9c 81       	ldd	r25, Y+4	; 0x04
    277a:	01 97       	sbiw	r24, 0x01	; 1
    277c:	f1 f7       	brne	.-4      	; 0x277a <StepperMotor_VoidStepClockWise+0x632>
    277e:	9c 83       	std	Y+4, r25	; 0x04
    2780:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2782:	8d 81       	ldd	r24, Y+5	; 0x05
    2784:	9e 81       	ldd	r25, Y+6	; 0x06
    2786:	01 97       	sbiw	r24, 0x01	; 1
    2788:	9e 83       	std	Y+6, r25	; 0x06
    278a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    278c:	8d 81       	ldd	r24, Y+5	; 0x05
    278e:	9e 81       	ldd	r25, Y+6	; 0x06
    2790:	00 97       	sbiw	r24, 0x00	; 0
    2792:	69 f7       	brne	.-38     	; 0x276e <StepperMotor_VoidStepClockWise+0x626>
    2794:	14 c0       	rjmp	.+40     	; 0x27be <StepperMotor_VoidStepClockWise+0x676>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2796:	6f 81       	ldd	r22, Y+7	; 0x07
    2798:	78 85       	ldd	r23, Y+8	; 0x08
    279a:	89 85       	ldd	r24, Y+9	; 0x09
    279c:	9a 85       	ldd	r25, Y+10	; 0x0a
    279e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27a2:	dc 01       	movw	r26, r24
    27a4:	cb 01       	movw	r24, r22
    27a6:	9e 83       	std	Y+6, r25	; 0x06
    27a8:	8d 83       	std	Y+5, r24	; 0x05
    27aa:	8d 81       	ldd	r24, Y+5	; 0x05
    27ac:	9e 81       	ldd	r25, Y+6	; 0x06
    27ae:	9a 83       	std	Y+2, r25	; 0x02
    27b0:	89 83       	std	Y+1, r24	; 0x01
    27b2:	89 81       	ldd	r24, Y+1	; 0x01
    27b4:	9a 81       	ldd	r25, Y+2	; 0x02
    27b6:	01 97       	sbiw	r24, 0x01	; 1
    27b8:	f1 f7       	brne	.-4      	; 0x27b6 <StepperMotor_VoidStepClockWise+0x66e>
    27ba:	9a 83       	std	Y+2, r25	; 0x02
    27bc:	89 83       	std	Y+1, r24	; 0x01
	else
	{

	}
	return;
}
    27be:	c8 5b       	subi	r28, 0xB8	; 184
    27c0:	df 4f       	sbci	r29, 0xFF	; 255
    27c2:	0f b6       	in	r0, 0x3f	; 63
    27c4:	f8 94       	cli
    27c6:	de bf       	out	0x3e, r29	; 62
    27c8:	0f be       	out	0x3f, r0	; 63
    27ca:	cd bf       	out	0x3d, r28	; 61
    27cc:	cf 91       	pop	r28
    27ce:	df 91       	pop	r29
    27d0:	1f 91       	pop	r17
    27d2:	0f 91       	pop	r16
    27d4:	08 95       	ret

000027d6 <StepperMotor_VoidStepAntiClockWise>:

void StepperMotor_VoidStepAntiClockWise(const StepMotor_st* Copy_pStepMotor_st_Config)
{
    27d6:	0f 93       	push	r16
    27d8:	1f 93       	push	r17
    27da:	df 93       	push	r29
    27dc:	cf 93       	push	r28
    27de:	cd b7       	in	r28, 0x3d	; 61
    27e0:	de b7       	in	r29, 0x3e	; 62
    27e2:	c8 54       	subi	r28, 0x48	; 72
    27e4:	d0 40       	sbci	r29, 0x00	; 0
    27e6:	0f b6       	in	r0, 0x3f	; 63
    27e8:	f8 94       	cli
    27ea:	de bf       	out	0x3e, r29	; 62
    27ec:	0f be       	out	0x3f, r0	; 63
    27ee:	cd bf       	out	0x3d, r28	; 61
    27f0:	fe 01       	movw	r30, r28
    27f2:	e9 5b       	subi	r30, 0xB9	; 185
    27f4:	ff 4f       	sbci	r31, 0xFF	; 255
    27f6:	91 83       	std	Z+1, r25	; 0x01
    27f8:	80 83       	st	Z, r24
	if(Copy_pStepMotor_st_Config)
    27fa:	fe 01       	movw	r30, r28
    27fc:	e9 5b       	subi	r30, 0xB9	; 185
    27fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2800:	80 81       	ld	r24, Z
    2802:	91 81       	ldd	r25, Z+1	; 0x01
    2804:	00 97       	sbiw	r24, 0x00	; 0
    2806:	09 f4       	brne	.+2      	; 0x280a <StepperMotor_VoidStepAntiClockWise+0x34>
    2808:	21 c3       	rjmp	.+1602   	; 0x2e4c <StepperMotor_VoidStepAntiClockWise+0x676>
	{
		DIO_VoidSetPinValue(Copy_pStepMotor_st_Config->Motor_OrangePort, Copy_pStepMotor_st_Config->Motor_OrangePin , DIO_PIN_LOGIC_HIGH);
    280a:	fe 01       	movw	r30, r28
    280c:	e9 5b       	subi	r30, 0xB9	; 185
    280e:	ff 4f       	sbci	r31, 0xFF	; 255
    2810:	01 90       	ld	r0, Z+
    2812:	f0 81       	ld	r31, Z
    2814:	e0 2d       	mov	r30, r0
    2816:	86 81       	ldd	r24, Z+6	; 0x06
    2818:	83 70       	andi	r24, 0x03	; 3
    281a:	28 2f       	mov	r18, r24
    281c:	fe 01       	movw	r30, r28
    281e:	e9 5b       	subi	r30, 0xB9	; 185
    2820:	ff 4f       	sbci	r31, 0xFF	; 255
    2822:	01 90       	ld	r0, Z+
    2824:	f0 81       	ld	r31, Z
    2826:	e0 2d       	mov	r30, r0
    2828:	85 81       	ldd	r24, Z+5	; 0x05
    282a:	87 70       	andi	r24, 0x07	; 7
    282c:	98 2f       	mov	r25, r24
    282e:	82 2f       	mov	r24, r18
    2830:	69 2f       	mov	r22, r25
    2832:	41 e0       	ldi	r20, 0x01	; 1
    2834:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <DIO_VoidSetPinValue>
    2838:	fe 01       	movw	r30, r28
    283a:	ed 5b       	subi	r30, 0xBD	; 189
    283c:	ff 4f       	sbci	r31, 0xFF	; 255
    283e:	80 e0       	ldi	r24, 0x00	; 0
    2840:	90 e0       	ldi	r25, 0x00	; 0
    2842:	a0 ea       	ldi	r26, 0xA0	; 160
    2844:	b0 e4       	ldi	r27, 0x40	; 64
    2846:	80 83       	st	Z, r24
    2848:	91 83       	std	Z+1, r25	; 0x01
    284a:	a2 83       	std	Z+2, r26	; 0x02
    284c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    284e:	8e 01       	movw	r16, r28
    2850:	01 5c       	subi	r16, 0xC1	; 193
    2852:	1f 4f       	sbci	r17, 0xFF	; 255
    2854:	fe 01       	movw	r30, r28
    2856:	ed 5b       	subi	r30, 0xBD	; 189
    2858:	ff 4f       	sbci	r31, 0xFF	; 255
    285a:	60 81       	ld	r22, Z
    285c:	71 81       	ldd	r23, Z+1	; 0x01
    285e:	82 81       	ldd	r24, Z+2	; 0x02
    2860:	93 81       	ldd	r25, Z+3	; 0x03
    2862:	20 e0       	ldi	r18, 0x00	; 0
    2864:	30 e0       	ldi	r19, 0x00	; 0
    2866:	4a ef       	ldi	r20, 0xFA	; 250
    2868:	54 e4       	ldi	r21, 0x44	; 68
    286a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    286e:	dc 01       	movw	r26, r24
    2870:	cb 01       	movw	r24, r22
    2872:	f8 01       	movw	r30, r16
    2874:	80 83       	st	Z, r24
    2876:	91 83       	std	Z+1, r25	; 0x01
    2878:	a2 83       	std	Z+2, r26	; 0x02
    287a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    287c:	fe 01       	movw	r30, r28
    287e:	ff 96       	adiw	r30, 0x3f	; 63
    2880:	60 81       	ld	r22, Z
    2882:	71 81       	ldd	r23, Z+1	; 0x01
    2884:	82 81       	ldd	r24, Z+2	; 0x02
    2886:	93 81       	ldd	r25, Z+3	; 0x03
    2888:	20 e0       	ldi	r18, 0x00	; 0
    288a:	30 e0       	ldi	r19, 0x00	; 0
    288c:	40 e8       	ldi	r20, 0x80	; 128
    288e:	5f e3       	ldi	r21, 0x3F	; 63
    2890:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2894:	88 23       	and	r24, r24
    2896:	2c f4       	brge	.+10     	; 0x28a2 <StepperMotor_VoidStepAntiClockWise+0xcc>
		__ticks = 1;
    2898:	81 e0       	ldi	r24, 0x01	; 1
    289a:	90 e0       	ldi	r25, 0x00	; 0
    289c:	9e af       	std	Y+62, r25	; 0x3e
    289e:	8d af       	std	Y+61, r24	; 0x3d
    28a0:	46 c0       	rjmp	.+140    	; 0x292e <StepperMotor_VoidStepAntiClockWise+0x158>
	else if (__tmp > 65535)
    28a2:	fe 01       	movw	r30, r28
    28a4:	ff 96       	adiw	r30, 0x3f	; 63
    28a6:	60 81       	ld	r22, Z
    28a8:	71 81       	ldd	r23, Z+1	; 0x01
    28aa:	82 81       	ldd	r24, Z+2	; 0x02
    28ac:	93 81       	ldd	r25, Z+3	; 0x03
    28ae:	20 e0       	ldi	r18, 0x00	; 0
    28b0:	3f ef       	ldi	r19, 0xFF	; 255
    28b2:	4f e7       	ldi	r20, 0x7F	; 127
    28b4:	57 e4       	ldi	r21, 0x47	; 71
    28b6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    28ba:	18 16       	cp	r1, r24
    28bc:	64 f5       	brge	.+88     	; 0x2916 <StepperMotor_VoidStepAntiClockWise+0x140>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28be:	fe 01       	movw	r30, r28
    28c0:	ed 5b       	subi	r30, 0xBD	; 189
    28c2:	ff 4f       	sbci	r31, 0xFF	; 255
    28c4:	60 81       	ld	r22, Z
    28c6:	71 81       	ldd	r23, Z+1	; 0x01
    28c8:	82 81       	ldd	r24, Z+2	; 0x02
    28ca:	93 81       	ldd	r25, Z+3	; 0x03
    28cc:	20 e0       	ldi	r18, 0x00	; 0
    28ce:	30 e0       	ldi	r19, 0x00	; 0
    28d0:	40 e2       	ldi	r20, 0x20	; 32
    28d2:	51 e4       	ldi	r21, 0x41	; 65
    28d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28d8:	dc 01       	movw	r26, r24
    28da:	cb 01       	movw	r24, r22
    28dc:	bc 01       	movw	r22, r24
    28de:	cd 01       	movw	r24, r26
    28e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28e4:	dc 01       	movw	r26, r24
    28e6:	cb 01       	movw	r24, r22
    28e8:	9e af       	std	Y+62, r25	; 0x3e
    28ea:	8d af       	std	Y+61, r24	; 0x3d
    28ec:	0f c0       	rjmp	.+30     	; 0x290c <StepperMotor_VoidStepAntiClockWise+0x136>
    28ee:	88 ec       	ldi	r24, 0xC8	; 200
    28f0:	90 e0       	ldi	r25, 0x00	; 0
    28f2:	9c af       	std	Y+60, r25	; 0x3c
    28f4:	8b af       	std	Y+59, r24	; 0x3b
    28f6:	8b ad       	ldd	r24, Y+59	; 0x3b
    28f8:	9c ad       	ldd	r25, Y+60	; 0x3c
    28fa:	01 97       	sbiw	r24, 0x01	; 1
    28fc:	f1 f7       	brne	.-4      	; 0x28fa <StepperMotor_VoidStepAntiClockWise+0x124>
    28fe:	9c af       	std	Y+60, r25	; 0x3c
    2900:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2902:	8d ad       	ldd	r24, Y+61	; 0x3d
    2904:	9e ad       	ldd	r25, Y+62	; 0x3e
    2906:	01 97       	sbiw	r24, 0x01	; 1
    2908:	9e af       	std	Y+62, r25	; 0x3e
    290a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    290c:	8d ad       	ldd	r24, Y+61	; 0x3d
    290e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2910:	00 97       	sbiw	r24, 0x00	; 0
    2912:	69 f7       	brne	.-38     	; 0x28ee <StepperMotor_VoidStepAntiClockWise+0x118>
    2914:	16 c0       	rjmp	.+44     	; 0x2942 <StepperMotor_VoidStepAntiClockWise+0x16c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2916:	fe 01       	movw	r30, r28
    2918:	ff 96       	adiw	r30, 0x3f	; 63
    291a:	60 81       	ld	r22, Z
    291c:	71 81       	ldd	r23, Z+1	; 0x01
    291e:	82 81       	ldd	r24, Z+2	; 0x02
    2920:	93 81       	ldd	r25, Z+3	; 0x03
    2922:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2926:	dc 01       	movw	r26, r24
    2928:	cb 01       	movw	r24, r22
    292a:	9e af       	std	Y+62, r25	; 0x3e
    292c:	8d af       	std	Y+61, r24	; 0x3d
    292e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2930:	9e ad       	ldd	r25, Y+62	; 0x3e
    2932:	9a af       	std	Y+58, r25	; 0x3a
    2934:	89 af       	std	Y+57, r24	; 0x39
    2936:	89 ad       	ldd	r24, Y+57	; 0x39
    2938:	9a ad       	ldd	r25, Y+58	; 0x3a
    293a:	01 97       	sbiw	r24, 0x01	; 1
    293c:	f1 f7       	brne	.-4      	; 0x293a <StepperMotor_VoidStepAntiClockWise+0x164>
    293e:	9a af       	std	Y+58, r25	; 0x3a
    2940:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(5);

		DIO_VoidSetPinValue(Copy_pStepMotor_st_Config->Motor_OrangePort, Copy_pStepMotor_st_Config->Motor_OrangePin , DIO_PIN_LOGIC_LOW);
    2942:	fe 01       	movw	r30, r28
    2944:	e9 5b       	subi	r30, 0xB9	; 185
    2946:	ff 4f       	sbci	r31, 0xFF	; 255
    2948:	01 90       	ld	r0, Z+
    294a:	f0 81       	ld	r31, Z
    294c:	e0 2d       	mov	r30, r0
    294e:	86 81       	ldd	r24, Z+6	; 0x06
    2950:	83 70       	andi	r24, 0x03	; 3
    2952:	28 2f       	mov	r18, r24
    2954:	fe 01       	movw	r30, r28
    2956:	e9 5b       	subi	r30, 0xB9	; 185
    2958:	ff 4f       	sbci	r31, 0xFF	; 255
    295a:	01 90       	ld	r0, Z+
    295c:	f0 81       	ld	r31, Z
    295e:	e0 2d       	mov	r30, r0
    2960:	85 81       	ldd	r24, Z+5	; 0x05
    2962:	87 70       	andi	r24, 0x07	; 7
    2964:	98 2f       	mov	r25, r24
    2966:	82 2f       	mov	r24, r18
    2968:	69 2f       	mov	r22, r25
    296a:	40 e0       	ldi	r20, 0x00	; 0
    296c:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <DIO_VoidSetPinValue>
		DIO_VoidSetPinValue(Copy_pStepMotor_st_Config->Motor_YellowPort, Copy_pStepMotor_st_Config->Motor_YellowPin , DIO_PIN_LOGIC_HIGH);
    2970:	fe 01       	movw	r30, r28
    2972:	e9 5b       	subi	r30, 0xB9	; 185
    2974:	ff 4f       	sbci	r31, 0xFF	; 255
    2976:	01 90       	ld	r0, Z+
    2978:	f0 81       	ld	r31, Z
    297a:	e0 2d       	mov	r30, r0
    297c:	86 81       	ldd	r24, Z+6	; 0x06
    297e:	86 95       	lsr	r24
    2980:	86 95       	lsr	r24
    2982:	83 70       	andi	r24, 0x03	; 3
    2984:	28 2f       	mov	r18, r24
    2986:	fe 01       	movw	r30, r28
    2988:	e9 5b       	subi	r30, 0xB9	; 185
    298a:	ff 4f       	sbci	r31, 0xFF	; 255
    298c:	01 90       	ld	r0, Z+
    298e:	f0 81       	ld	r31, Z
    2990:	e0 2d       	mov	r30, r0
    2992:	85 81       	ldd	r24, Z+5	; 0x05
    2994:	86 95       	lsr	r24
    2996:	86 95       	lsr	r24
    2998:	86 95       	lsr	r24
    299a:	87 70       	andi	r24, 0x07	; 7
    299c:	98 2f       	mov	r25, r24
    299e:	82 2f       	mov	r24, r18
    29a0:	69 2f       	mov	r22, r25
    29a2:	41 e0       	ldi	r20, 0x01	; 1
    29a4:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <DIO_VoidSetPinValue>
    29a8:	80 e0       	ldi	r24, 0x00	; 0
    29aa:	90 e0       	ldi	r25, 0x00	; 0
    29ac:	a0 ea       	ldi	r26, 0xA0	; 160
    29ae:	b0 e4       	ldi	r27, 0x40	; 64
    29b0:	8d ab       	std	Y+53, r24	; 0x35
    29b2:	9e ab       	std	Y+54, r25	; 0x36
    29b4:	af ab       	std	Y+55, r26	; 0x37
    29b6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29b8:	6d a9       	ldd	r22, Y+53	; 0x35
    29ba:	7e a9       	ldd	r23, Y+54	; 0x36
    29bc:	8f a9       	ldd	r24, Y+55	; 0x37
    29be:	98 ad       	ldd	r25, Y+56	; 0x38
    29c0:	20 e0       	ldi	r18, 0x00	; 0
    29c2:	30 e0       	ldi	r19, 0x00	; 0
    29c4:	4a ef       	ldi	r20, 0xFA	; 250
    29c6:	54 e4       	ldi	r21, 0x44	; 68
    29c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29cc:	dc 01       	movw	r26, r24
    29ce:	cb 01       	movw	r24, r22
    29d0:	89 ab       	std	Y+49, r24	; 0x31
    29d2:	9a ab       	std	Y+50, r25	; 0x32
    29d4:	ab ab       	std	Y+51, r26	; 0x33
    29d6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    29d8:	69 a9       	ldd	r22, Y+49	; 0x31
    29da:	7a a9       	ldd	r23, Y+50	; 0x32
    29dc:	8b a9       	ldd	r24, Y+51	; 0x33
    29de:	9c a9       	ldd	r25, Y+52	; 0x34
    29e0:	20 e0       	ldi	r18, 0x00	; 0
    29e2:	30 e0       	ldi	r19, 0x00	; 0
    29e4:	40 e8       	ldi	r20, 0x80	; 128
    29e6:	5f e3       	ldi	r21, 0x3F	; 63
    29e8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    29ec:	88 23       	and	r24, r24
    29ee:	2c f4       	brge	.+10     	; 0x29fa <StepperMotor_VoidStepAntiClockWise+0x224>
		__ticks = 1;
    29f0:	81 e0       	ldi	r24, 0x01	; 1
    29f2:	90 e0       	ldi	r25, 0x00	; 0
    29f4:	98 ab       	std	Y+48, r25	; 0x30
    29f6:	8f a7       	std	Y+47, r24	; 0x2f
    29f8:	3f c0       	rjmp	.+126    	; 0x2a78 <StepperMotor_VoidStepAntiClockWise+0x2a2>
	else if (__tmp > 65535)
    29fa:	69 a9       	ldd	r22, Y+49	; 0x31
    29fc:	7a a9       	ldd	r23, Y+50	; 0x32
    29fe:	8b a9       	ldd	r24, Y+51	; 0x33
    2a00:	9c a9       	ldd	r25, Y+52	; 0x34
    2a02:	20 e0       	ldi	r18, 0x00	; 0
    2a04:	3f ef       	ldi	r19, 0xFF	; 255
    2a06:	4f e7       	ldi	r20, 0x7F	; 127
    2a08:	57 e4       	ldi	r21, 0x47	; 71
    2a0a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a0e:	18 16       	cp	r1, r24
    2a10:	4c f5       	brge	.+82     	; 0x2a64 <StepperMotor_VoidStepAntiClockWise+0x28e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a12:	6d a9       	ldd	r22, Y+53	; 0x35
    2a14:	7e a9       	ldd	r23, Y+54	; 0x36
    2a16:	8f a9       	ldd	r24, Y+55	; 0x37
    2a18:	98 ad       	ldd	r25, Y+56	; 0x38
    2a1a:	20 e0       	ldi	r18, 0x00	; 0
    2a1c:	30 e0       	ldi	r19, 0x00	; 0
    2a1e:	40 e2       	ldi	r20, 0x20	; 32
    2a20:	51 e4       	ldi	r21, 0x41	; 65
    2a22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a26:	dc 01       	movw	r26, r24
    2a28:	cb 01       	movw	r24, r22
    2a2a:	bc 01       	movw	r22, r24
    2a2c:	cd 01       	movw	r24, r26
    2a2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a32:	dc 01       	movw	r26, r24
    2a34:	cb 01       	movw	r24, r22
    2a36:	98 ab       	std	Y+48, r25	; 0x30
    2a38:	8f a7       	std	Y+47, r24	; 0x2f
    2a3a:	0f c0       	rjmp	.+30     	; 0x2a5a <StepperMotor_VoidStepAntiClockWise+0x284>
    2a3c:	88 ec       	ldi	r24, 0xC8	; 200
    2a3e:	90 e0       	ldi	r25, 0x00	; 0
    2a40:	9e a7       	std	Y+46, r25	; 0x2e
    2a42:	8d a7       	std	Y+45, r24	; 0x2d
    2a44:	8d a5       	ldd	r24, Y+45	; 0x2d
    2a46:	9e a5       	ldd	r25, Y+46	; 0x2e
    2a48:	01 97       	sbiw	r24, 0x01	; 1
    2a4a:	f1 f7       	brne	.-4      	; 0x2a48 <StepperMotor_VoidStepAntiClockWise+0x272>
    2a4c:	9e a7       	std	Y+46, r25	; 0x2e
    2a4e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a50:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a52:	98 a9       	ldd	r25, Y+48	; 0x30
    2a54:	01 97       	sbiw	r24, 0x01	; 1
    2a56:	98 ab       	std	Y+48, r25	; 0x30
    2a58:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a5a:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a5c:	98 a9       	ldd	r25, Y+48	; 0x30
    2a5e:	00 97       	sbiw	r24, 0x00	; 0
    2a60:	69 f7       	brne	.-38     	; 0x2a3c <StepperMotor_VoidStepAntiClockWise+0x266>
    2a62:	14 c0       	rjmp	.+40     	; 0x2a8c <StepperMotor_VoidStepAntiClockWise+0x2b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a64:	69 a9       	ldd	r22, Y+49	; 0x31
    2a66:	7a a9       	ldd	r23, Y+50	; 0x32
    2a68:	8b a9       	ldd	r24, Y+51	; 0x33
    2a6a:	9c a9       	ldd	r25, Y+52	; 0x34
    2a6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a70:	dc 01       	movw	r26, r24
    2a72:	cb 01       	movw	r24, r22
    2a74:	98 ab       	std	Y+48, r25	; 0x30
    2a76:	8f a7       	std	Y+47, r24	; 0x2f
    2a78:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a7a:	98 a9       	ldd	r25, Y+48	; 0x30
    2a7c:	9c a7       	std	Y+44, r25	; 0x2c
    2a7e:	8b a7       	std	Y+43, r24	; 0x2b
    2a80:	8b a5       	ldd	r24, Y+43	; 0x2b
    2a82:	9c a5       	ldd	r25, Y+44	; 0x2c
    2a84:	01 97       	sbiw	r24, 0x01	; 1
    2a86:	f1 f7       	brne	.-4      	; 0x2a84 <StepperMotor_VoidStepAntiClockWise+0x2ae>
    2a88:	9c a7       	std	Y+44, r25	; 0x2c
    2a8a:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(5);

		DIO_VoidSetPinValue(Copy_pStepMotor_st_Config->Motor_YellowPort , Copy_pStepMotor_st_Config->Motor_YellowPin , DIO_PIN_LOGIC_LOW);
    2a8c:	fe 01       	movw	r30, r28
    2a8e:	e9 5b       	subi	r30, 0xB9	; 185
    2a90:	ff 4f       	sbci	r31, 0xFF	; 255
    2a92:	01 90       	ld	r0, Z+
    2a94:	f0 81       	ld	r31, Z
    2a96:	e0 2d       	mov	r30, r0
    2a98:	86 81       	ldd	r24, Z+6	; 0x06
    2a9a:	86 95       	lsr	r24
    2a9c:	86 95       	lsr	r24
    2a9e:	83 70       	andi	r24, 0x03	; 3
    2aa0:	28 2f       	mov	r18, r24
    2aa2:	fe 01       	movw	r30, r28
    2aa4:	e9 5b       	subi	r30, 0xB9	; 185
    2aa6:	ff 4f       	sbci	r31, 0xFF	; 255
    2aa8:	01 90       	ld	r0, Z+
    2aaa:	f0 81       	ld	r31, Z
    2aac:	e0 2d       	mov	r30, r0
    2aae:	85 81       	ldd	r24, Z+5	; 0x05
    2ab0:	86 95       	lsr	r24
    2ab2:	86 95       	lsr	r24
    2ab4:	86 95       	lsr	r24
    2ab6:	87 70       	andi	r24, 0x07	; 7
    2ab8:	98 2f       	mov	r25, r24
    2aba:	82 2f       	mov	r24, r18
    2abc:	69 2f       	mov	r22, r25
    2abe:	40 e0       	ldi	r20, 0x00	; 0
    2ac0:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <DIO_VoidSetPinValue>
		DIO_VoidSetPinValue(Copy_pStepMotor_st_Config->Motor_PinkPort, Copy_pStepMotor_st_Config->Motor_PinkPin , DIO_PIN_LOGIC_HIGH);
    2ac4:	fe 01       	movw	r30, r28
    2ac6:	e9 5b       	subi	r30, 0xB9	; 185
    2ac8:	ff 4f       	sbci	r31, 0xFF	; 255
    2aca:	01 90       	ld	r0, Z+
    2acc:	f0 81       	ld	r31, Z
    2ace:	e0 2d       	mov	r30, r0
    2ad0:	85 81       	ldd	r24, Z+5	; 0x05
    2ad2:	82 95       	swap	r24
    2ad4:	86 95       	lsr	r24
    2ad6:	86 95       	lsr	r24
    2ad8:	83 70       	andi	r24, 0x03	; 3
    2ada:	28 2f       	mov	r18, r24
    2adc:	fe 01       	movw	r30, r28
    2ade:	e9 5b       	subi	r30, 0xB9	; 185
    2ae0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ae2:	01 90       	ld	r0, Z+
    2ae4:	f0 81       	ld	r31, Z
    2ae6:	e0 2d       	mov	r30, r0
    2ae8:	84 81       	ldd	r24, Z+4	; 0x04
    2aea:	86 95       	lsr	r24
    2aec:	86 95       	lsr	r24
    2aee:	86 95       	lsr	r24
    2af0:	87 70       	andi	r24, 0x07	; 7
    2af2:	98 2f       	mov	r25, r24
    2af4:	82 2f       	mov	r24, r18
    2af6:	69 2f       	mov	r22, r25
    2af8:	41 e0       	ldi	r20, 0x01	; 1
    2afa:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <DIO_VoidSetPinValue>
    2afe:	80 e0       	ldi	r24, 0x00	; 0
    2b00:	90 e0       	ldi	r25, 0x00	; 0
    2b02:	a0 ea       	ldi	r26, 0xA0	; 160
    2b04:	b0 e4       	ldi	r27, 0x40	; 64
    2b06:	8f a3       	std	Y+39, r24	; 0x27
    2b08:	98 a7       	std	Y+40, r25	; 0x28
    2b0a:	a9 a7       	std	Y+41, r26	; 0x29
    2b0c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b0e:	6f a1       	ldd	r22, Y+39	; 0x27
    2b10:	78 a5       	ldd	r23, Y+40	; 0x28
    2b12:	89 a5       	ldd	r24, Y+41	; 0x29
    2b14:	9a a5       	ldd	r25, Y+42	; 0x2a
    2b16:	20 e0       	ldi	r18, 0x00	; 0
    2b18:	30 e0       	ldi	r19, 0x00	; 0
    2b1a:	4a ef       	ldi	r20, 0xFA	; 250
    2b1c:	54 e4       	ldi	r21, 0x44	; 68
    2b1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b22:	dc 01       	movw	r26, r24
    2b24:	cb 01       	movw	r24, r22
    2b26:	8b a3       	std	Y+35, r24	; 0x23
    2b28:	9c a3       	std	Y+36, r25	; 0x24
    2b2a:	ad a3       	std	Y+37, r26	; 0x25
    2b2c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2b2e:	6b a1       	ldd	r22, Y+35	; 0x23
    2b30:	7c a1       	ldd	r23, Y+36	; 0x24
    2b32:	8d a1       	ldd	r24, Y+37	; 0x25
    2b34:	9e a1       	ldd	r25, Y+38	; 0x26
    2b36:	20 e0       	ldi	r18, 0x00	; 0
    2b38:	30 e0       	ldi	r19, 0x00	; 0
    2b3a:	40 e8       	ldi	r20, 0x80	; 128
    2b3c:	5f e3       	ldi	r21, 0x3F	; 63
    2b3e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b42:	88 23       	and	r24, r24
    2b44:	2c f4       	brge	.+10     	; 0x2b50 <StepperMotor_VoidStepAntiClockWise+0x37a>
		__ticks = 1;
    2b46:	81 e0       	ldi	r24, 0x01	; 1
    2b48:	90 e0       	ldi	r25, 0x00	; 0
    2b4a:	9a a3       	std	Y+34, r25	; 0x22
    2b4c:	89 a3       	std	Y+33, r24	; 0x21
    2b4e:	3f c0       	rjmp	.+126    	; 0x2bce <StepperMotor_VoidStepAntiClockWise+0x3f8>
	else if (__tmp > 65535)
    2b50:	6b a1       	ldd	r22, Y+35	; 0x23
    2b52:	7c a1       	ldd	r23, Y+36	; 0x24
    2b54:	8d a1       	ldd	r24, Y+37	; 0x25
    2b56:	9e a1       	ldd	r25, Y+38	; 0x26
    2b58:	20 e0       	ldi	r18, 0x00	; 0
    2b5a:	3f ef       	ldi	r19, 0xFF	; 255
    2b5c:	4f e7       	ldi	r20, 0x7F	; 127
    2b5e:	57 e4       	ldi	r21, 0x47	; 71
    2b60:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b64:	18 16       	cp	r1, r24
    2b66:	4c f5       	brge	.+82     	; 0x2bba <StepperMotor_VoidStepAntiClockWise+0x3e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b68:	6f a1       	ldd	r22, Y+39	; 0x27
    2b6a:	78 a5       	ldd	r23, Y+40	; 0x28
    2b6c:	89 a5       	ldd	r24, Y+41	; 0x29
    2b6e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2b70:	20 e0       	ldi	r18, 0x00	; 0
    2b72:	30 e0       	ldi	r19, 0x00	; 0
    2b74:	40 e2       	ldi	r20, 0x20	; 32
    2b76:	51 e4       	ldi	r21, 0x41	; 65
    2b78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b7c:	dc 01       	movw	r26, r24
    2b7e:	cb 01       	movw	r24, r22
    2b80:	bc 01       	movw	r22, r24
    2b82:	cd 01       	movw	r24, r26
    2b84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b88:	dc 01       	movw	r26, r24
    2b8a:	cb 01       	movw	r24, r22
    2b8c:	9a a3       	std	Y+34, r25	; 0x22
    2b8e:	89 a3       	std	Y+33, r24	; 0x21
    2b90:	0f c0       	rjmp	.+30     	; 0x2bb0 <StepperMotor_VoidStepAntiClockWise+0x3da>
    2b92:	88 ec       	ldi	r24, 0xC8	; 200
    2b94:	90 e0       	ldi	r25, 0x00	; 0
    2b96:	98 a3       	std	Y+32, r25	; 0x20
    2b98:	8f 8f       	std	Y+31, r24	; 0x1f
    2b9a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2b9c:	98 a1       	ldd	r25, Y+32	; 0x20
    2b9e:	01 97       	sbiw	r24, 0x01	; 1
    2ba0:	f1 f7       	brne	.-4      	; 0x2b9e <StepperMotor_VoidStepAntiClockWise+0x3c8>
    2ba2:	98 a3       	std	Y+32, r25	; 0x20
    2ba4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ba6:	89 a1       	ldd	r24, Y+33	; 0x21
    2ba8:	9a a1       	ldd	r25, Y+34	; 0x22
    2baa:	01 97       	sbiw	r24, 0x01	; 1
    2bac:	9a a3       	std	Y+34, r25	; 0x22
    2bae:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bb0:	89 a1       	ldd	r24, Y+33	; 0x21
    2bb2:	9a a1       	ldd	r25, Y+34	; 0x22
    2bb4:	00 97       	sbiw	r24, 0x00	; 0
    2bb6:	69 f7       	brne	.-38     	; 0x2b92 <StepperMotor_VoidStepAntiClockWise+0x3bc>
    2bb8:	14 c0       	rjmp	.+40     	; 0x2be2 <StepperMotor_VoidStepAntiClockWise+0x40c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bba:	6b a1       	ldd	r22, Y+35	; 0x23
    2bbc:	7c a1       	ldd	r23, Y+36	; 0x24
    2bbe:	8d a1       	ldd	r24, Y+37	; 0x25
    2bc0:	9e a1       	ldd	r25, Y+38	; 0x26
    2bc2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bc6:	dc 01       	movw	r26, r24
    2bc8:	cb 01       	movw	r24, r22
    2bca:	9a a3       	std	Y+34, r25	; 0x22
    2bcc:	89 a3       	std	Y+33, r24	; 0x21
    2bce:	89 a1       	ldd	r24, Y+33	; 0x21
    2bd0:	9a a1       	ldd	r25, Y+34	; 0x22
    2bd2:	9e 8f       	std	Y+30, r25	; 0x1e
    2bd4:	8d 8f       	std	Y+29, r24	; 0x1d
    2bd6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2bd8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2bda:	01 97       	sbiw	r24, 0x01	; 1
    2bdc:	f1 f7       	brne	.-4      	; 0x2bda <StepperMotor_VoidStepAntiClockWise+0x404>
    2bde:	9e 8f       	std	Y+30, r25	; 0x1e
    2be0:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(5);
		DIO_VoidSetPinValue(Copy_pStepMotor_st_Config->Motor_PinkPort, Copy_pStepMotor_st_Config->Motor_PinkPin , DIO_PIN_LOGIC_LOW);
    2be2:	fe 01       	movw	r30, r28
    2be4:	e9 5b       	subi	r30, 0xB9	; 185
    2be6:	ff 4f       	sbci	r31, 0xFF	; 255
    2be8:	01 90       	ld	r0, Z+
    2bea:	f0 81       	ld	r31, Z
    2bec:	e0 2d       	mov	r30, r0
    2bee:	85 81       	ldd	r24, Z+5	; 0x05
    2bf0:	82 95       	swap	r24
    2bf2:	86 95       	lsr	r24
    2bf4:	86 95       	lsr	r24
    2bf6:	83 70       	andi	r24, 0x03	; 3
    2bf8:	28 2f       	mov	r18, r24
    2bfa:	fe 01       	movw	r30, r28
    2bfc:	e9 5b       	subi	r30, 0xB9	; 185
    2bfe:	ff 4f       	sbci	r31, 0xFF	; 255
    2c00:	01 90       	ld	r0, Z+
    2c02:	f0 81       	ld	r31, Z
    2c04:	e0 2d       	mov	r30, r0
    2c06:	84 81       	ldd	r24, Z+4	; 0x04
    2c08:	86 95       	lsr	r24
    2c0a:	86 95       	lsr	r24
    2c0c:	86 95       	lsr	r24
    2c0e:	87 70       	andi	r24, 0x07	; 7
    2c10:	98 2f       	mov	r25, r24
    2c12:	82 2f       	mov	r24, r18
    2c14:	69 2f       	mov	r22, r25
    2c16:	40 e0       	ldi	r20, 0x00	; 0
    2c18:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <DIO_VoidSetPinValue>
		DIO_VoidSetPinValue(Copy_pStepMotor_st_Config->Motor_BluePort, Copy_pStepMotor_st_Config->Motor_BluePin , DIO_PIN_LOGIC_HIGH);
    2c1c:	fe 01       	movw	r30, r28
    2c1e:	e9 5b       	subi	r30, 0xB9	; 185
    2c20:	ff 4f       	sbci	r31, 0xFF	; 255
    2c22:	01 90       	ld	r0, Z+
    2c24:	f0 81       	ld	r31, Z
    2c26:	e0 2d       	mov	r30, r0
    2c28:	84 81       	ldd	r24, Z+4	; 0x04
    2c2a:	82 95       	swap	r24
    2c2c:	86 95       	lsr	r24
    2c2e:	86 95       	lsr	r24
    2c30:	83 70       	andi	r24, 0x03	; 3
    2c32:	28 2f       	mov	r18, r24
    2c34:	fe 01       	movw	r30, r28
    2c36:	e9 5b       	subi	r30, 0xB9	; 185
    2c38:	ff 4f       	sbci	r31, 0xFF	; 255
    2c3a:	01 90       	ld	r0, Z+
    2c3c:	f0 81       	ld	r31, Z
    2c3e:	e0 2d       	mov	r30, r0
    2c40:	84 81       	ldd	r24, Z+4	; 0x04
    2c42:	87 70       	andi	r24, 0x07	; 7
    2c44:	98 2f       	mov	r25, r24
    2c46:	82 2f       	mov	r24, r18
    2c48:	69 2f       	mov	r22, r25
    2c4a:	41 e0       	ldi	r20, 0x01	; 1
    2c4c:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <DIO_VoidSetPinValue>
    2c50:	80 e0       	ldi	r24, 0x00	; 0
    2c52:	90 e0       	ldi	r25, 0x00	; 0
    2c54:	a0 ea       	ldi	r26, 0xA0	; 160
    2c56:	b0 e4       	ldi	r27, 0x40	; 64
    2c58:	89 8f       	std	Y+25, r24	; 0x19
    2c5a:	9a 8f       	std	Y+26, r25	; 0x1a
    2c5c:	ab 8f       	std	Y+27, r26	; 0x1b
    2c5e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c60:	69 8d       	ldd	r22, Y+25	; 0x19
    2c62:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c64:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c66:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c68:	20 e0       	ldi	r18, 0x00	; 0
    2c6a:	30 e0       	ldi	r19, 0x00	; 0
    2c6c:	4a ef       	ldi	r20, 0xFA	; 250
    2c6e:	54 e4       	ldi	r21, 0x44	; 68
    2c70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c74:	dc 01       	movw	r26, r24
    2c76:	cb 01       	movw	r24, r22
    2c78:	8d 8b       	std	Y+21, r24	; 0x15
    2c7a:	9e 8b       	std	Y+22, r25	; 0x16
    2c7c:	af 8b       	std	Y+23, r26	; 0x17
    2c7e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2c80:	6d 89       	ldd	r22, Y+21	; 0x15
    2c82:	7e 89       	ldd	r23, Y+22	; 0x16
    2c84:	8f 89       	ldd	r24, Y+23	; 0x17
    2c86:	98 8d       	ldd	r25, Y+24	; 0x18
    2c88:	20 e0       	ldi	r18, 0x00	; 0
    2c8a:	30 e0       	ldi	r19, 0x00	; 0
    2c8c:	40 e8       	ldi	r20, 0x80	; 128
    2c8e:	5f e3       	ldi	r21, 0x3F	; 63
    2c90:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c94:	88 23       	and	r24, r24
    2c96:	2c f4       	brge	.+10     	; 0x2ca2 <StepperMotor_VoidStepAntiClockWise+0x4cc>
		__ticks = 1;
    2c98:	81 e0       	ldi	r24, 0x01	; 1
    2c9a:	90 e0       	ldi	r25, 0x00	; 0
    2c9c:	9c 8b       	std	Y+20, r25	; 0x14
    2c9e:	8b 8b       	std	Y+19, r24	; 0x13
    2ca0:	3f c0       	rjmp	.+126    	; 0x2d20 <StepperMotor_VoidStepAntiClockWise+0x54a>
	else if (__tmp > 65535)
    2ca2:	6d 89       	ldd	r22, Y+21	; 0x15
    2ca4:	7e 89       	ldd	r23, Y+22	; 0x16
    2ca6:	8f 89       	ldd	r24, Y+23	; 0x17
    2ca8:	98 8d       	ldd	r25, Y+24	; 0x18
    2caa:	20 e0       	ldi	r18, 0x00	; 0
    2cac:	3f ef       	ldi	r19, 0xFF	; 255
    2cae:	4f e7       	ldi	r20, 0x7F	; 127
    2cb0:	57 e4       	ldi	r21, 0x47	; 71
    2cb2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2cb6:	18 16       	cp	r1, r24
    2cb8:	4c f5       	brge	.+82     	; 0x2d0c <StepperMotor_VoidStepAntiClockWise+0x536>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cba:	69 8d       	ldd	r22, Y+25	; 0x19
    2cbc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2cbe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2cc0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2cc2:	20 e0       	ldi	r18, 0x00	; 0
    2cc4:	30 e0       	ldi	r19, 0x00	; 0
    2cc6:	40 e2       	ldi	r20, 0x20	; 32
    2cc8:	51 e4       	ldi	r21, 0x41	; 65
    2cca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cce:	dc 01       	movw	r26, r24
    2cd0:	cb 01       	movw	r24, r22
    2cd2:	bc 01       	movw	r22, r24
    2cd4:	cd 01       	movw	r24, r26
    2cd6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cda:	dc 01       	movw	r26, r24
    2cdc:	cb 01       	movw	r24, r22
    2cde:	9c 8b       	std	Y+20, r25	; 0x14
    2ce0:	8b 8b       	std	Y+19, r24	; 0x13
    2ce2:	0f c0       	rjmp	.+30     	; 0x2d02 <StepperMotor_VoidStepAntiClockWise+0x52c>
    2ce4:	88 ec       	ldi	r24, 0xC8	; 200
    2ce6:	90 e0       	ldi	r25, 0x00	; 0
    2ce8:	9a 8b       	std	Y+18, r25	; 0x12
    2cea:	89 8b       	std	Y+17, r24	; 0x11
    2cec:	89 89       	ldd	r24, Y+17	; 0x11
    2cee:	9a 89       	ldd	r25, Y+18	; 0x12
    2cf0:	01 97       	sbiw	r24, 0x01	; 1
    2cf2:	f1 f7       	brne	.-4      	; 0x2cf0 <StepperMotor_VoidStepAntiClockWise+0x51a>
    2cf4:	9a 8b       	std	Y+18, r25	; 0x12
    2cf6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cf8:	8b 89       	ldd	r24, Y+19	; 0x13
    2cfa:	9c 89       	ldd	r25, Y+20	; 0x14
    2cfc:	01 97       	sbiw	r24, 0x01	; 1
    2cfe:	9c 8b       	std	Y+20, r25	; 0x14
    2d00:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d02:	8b 89       	ldd	r24, Y+19	; 0x13
    2d04:	9c 89       	ldd	r25, Y+20	; 0x14
    2d06:	00 97       	sbiw	r24, 0x00	; 0
    2d08:	69 f7       	brne	.-38     	; 0x2ce4 <StepperMotor_VoidStepAntiClockWise+0x50e>
    2d0a:	14 c0       	rjmp	.+40     	; 0x2d34 <StepperMotor_VoidStepAntiClockWise+0x55e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d0c:	6d 89       	ldd	r22, Y+21	; 0x15
    2d0e:	7e 89       	ldd	r23, Y+22	; 0x16
    2d10:	8f 89       	ldd	r24, Y+23	; 0x17
    2d12:	98 8d       	ldd	r25, Y+24	; 0x18
    2d14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d18:	dc 01       	movw	r26, r24
    2d1a:	cb 01       	movw	r24, r22
    2d1c:	9c 8b       	std	Y+20, r25	; 0x14
    2d1e:	8b 8b       	std	Y+19, r24	; 0x13
    2d20:	8b 89       	ldd	r24, Y+19	; 0x13
    2d22:	9c 89       	ldd	r25, Y+20	; 0x14
    2d24:	98 8b       	std	Y+16, r25	; 0x10
    2d26:	8f 87       	std	Y+15, r24	; 0x0f
    2d28:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d2a:	98 89       	ldd	r25, Y+16	; 0x10
    2d2c:	01 97       	sbiw	r24, 0x01	; 1
    2d2e:	f1 f7       	brne	.-4      	; 0x2d2c <StepperMotor_VoidStepAntiClockWise+0x556>
    2d30:	98 8b       	std	Y+16, r25	; 0x10
    2d32:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(5);
		DIO_VoidSetPinValue(Copy_pStepMotor_st_Config->Motor_BluePort, Copy_pStepMotor_st_Config->Motor_BluePin , DIO_PIN_LOGIC_LOW);
    2d34:	fe 01       	movw	r30, r28
    2d36:	e9 5b       	subi	r30, 0xB9	; 185
    2d38:	ff 4f       	sbci	r31, 0xFF	; 255
    2d3a:	01 90       	ld	r0, Z+
    2d3c:	f0 81       	ld	r31, Z
    2d3e:	e0 2d       	mov	r30, r0
    2d40:	84 81       	ldd	r24, Z+4	; 0x04
    2d42:	82 95       	swap	r24
    2d44:	86 95       	lsr	r24
    2d46:	86 95       	lsr	r24
    2d48:	83 70       	andi	r24, 0x03	; 3
    2d4a:	28 2f       	mov	r18, r24
    2d4c:	fe 01       	movw	r30, r28
    2d4e:	e9 5b       	subi	r30, 0xB9	; 185
    2d50:	ff 4f       	sbci	r31, 0xFF	; 255
    2d52:	01 90       	ld	r0, Z+
    2d54:	f0 81       	ld	r31, Z
    2d56:	e0 2d       	mov	r30, r0
    2d58:	84 81       	ldd	r24, Z+4	; 0x04
    2d5a:	87 70       	andi	r24, 0x07	; 7
    2d5c:	98 2f       	mov	r25, r24
    2d5e:	82 2f       	mov	r24, r18
    2d60:	69 2f       	mov	r22, r25
    2d62:	40 e0       	ldi	r20, 0x00	; 0
    2d64:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <DIO_VoidSetPinValue>
    2d68:	80 e0       	ldi	r24, 0x00	; 0
    2d6a:	90 e0       	ldi	r25, 0x00	; 0
    2d6c:	a0 ea       	ldi	r26, 0xA0	; 160
    2d6e:	b0 e4       	ldi	r27, 0x40	; 64
    2d70:	8b 87       	std	Y+11, r24	; 0x0b
    2d72:	9c 87       	std	Y+12, r25	; 0x0c
    2d74:	ad 87       	std	Y+13, r26	; 0x0d
    2d76:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d78:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d7a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d7c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d7e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d80:	20 e0       	ldi	r18, 0x00	; 0
    2d82:	30 e0       	ldi	r19, 0x00	; 0
    2d84:	4a ef       	ldi	r20, 0xFA	; 250
    2d86:	54 e4       	ldi	r21, 0x44	; 68
    2d88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d8c:	dc 01       	movw	r26, r24
    2d8e:	cb 01       	movw	r24, r22
    2d90:	8f 83       	std	Y+7, r24	; 0x07
    2d92:	98 87       	std	Y+8, r25	; 0x08
    2d94:	a9 87       	std	Y+9, r26	; 0x09
    2d96:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d98:	6f 81       	ldd	r22, Y+7	; 0x07
    2d9a:	78 85       	ldd	r23, Y+8	; 0x08
    2d9c:	89 85       	ldd	r24, Y+9	; 0x09
    2d9e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2da0:	20 e0       	ldi	r18, 0x00	; 0
    2da2:	30 e0       	ldi	r19, 0x00	; 0
    2da4:	40 e8       	ldi	r20, 0x80	; 128
    2da6:	5f e3       	ldi	r21, 0x3F	; 63
    2da8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2dac:	88 23       	and	r24, r24
    2dae:	2c f4       	brge	.+10     	; 0x2dba <StepperMotor_VoidStepAntiClockWise+0x5e4>
		__ticks = 1;
    2db0:	81 e0       	ldi	r24, 0x01	; 1
    2db2:	90 e0       	ldi	r25, 0x00	; 0
    2db4:	9e 83       	std	Y+6, r25	; 0x06
    2db6:	8d 83       	std	Y+5, r24	; 0x05
    2db8:	3f c0       	rjmp	.+126    	; 0x2e38 <StepperMotor_VoidStepAntiClockWise+0x662>
	else if (__tmp > 65535)
    2dba:	6f 81       	ldd	r22, Y+7	; 0x07
    2dbc:	78 85       	ldd	r23, Y+8	; 0x08
    2dbe:	89 85       	ldd	r24, Y+9	; 0x09
    2dc0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dc2:	20 e0       	ldi	r18, 0x00	; 0
    2dc4:	3f ef       	ldi	r19, 0xFF	; 255
    2dc6:	4f e7       	ldi	r20, 0x7F	; 127
    2dc8:	57 e4       	ldi	r21, 0x47	; 71
    2dca:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2dce:	18 16       	cp	r1, r24
    2dd0:	4c f5       	brge	.+82     	; 0x2e24 <StepperMotor_VoidStepAntiClockWise+0x64e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dd2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2dd4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2dd6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2dd8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2dda:	20 e0       	ldi	r18, 0x00	; 0
    2ddc:	30 e0       	ldi	r19, 0x00	; 0
    2dde:	40 e2       	ldi	r20, 0x20	; 32
    2de0:	51 e4       	ldi	r21, 0x41	; 65
    2de2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2de6:	dc 01       	movw	r26, r24
    2de8:	cb 01       	movw	r24, r22
    2dea:	bc 01       	movw	r22, r24
    2dec:	cd 01       	movw	r24, r26
    2dee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2df2:	dc 01       	movw	r26, r24
    2df4:	cb 01       	movw	r24, r22
    2df6:	9e 83       	std	Y+6, r25	; 0x06
    2df8:	8d 83       	std	Y+5, r24	; 0x05
    2dfa:	0f c0       	rjmp	.+30     	; 0x2e1a <StepperMotor_VoidStepAntiClockWise+0x644>
    2dfc:	88 ec       	ldi	r24, 0xC8	; 200
    2dfe:	90 e0       	ldi	r25, 0x00	; 0
    2e00:	9c 83       	std	Y+4, r25	; 0x04
    2e02:	8b 83       	std	Y+3, r24	; 0x03
    2e04:	8b 81       	ldd	r24, Y+3	; 0x03
    2e06:	9c 81       	ldd	r25, Y+4	; 0x04
    2e08:	01 97       	sbiw	r24, 0x01	; 1
    2e0a:	f1 f7       	brne	.-4      	; 0x2e08 <StepperMotor_VoidStepAntiClockWise+0x632>
    2e0c:	9c 83       	std	Y+4, r25	; 0x04
    2e0e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e10:	8d 81       	ldd	r24, Y+5	; 0x05
    2e12:	9e 81       	ldd	r25, Y+6	; 0x06
    2e14:	01 97       	sbiw	r24, 0x01	; 1
    2e16:	9e 83       	std	Y+6, r25	; 0x06
    2e18:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e1a:	8d 81       	ldd	r24, Y+5	; 0x05
    2e1c:	9e 81       	ldd	r25, Y+6	; 0x06
    2e1e:	00 97       	sbiw	r24, 0x00	; 0
    2e20:	69 f7       	brne	.-38     	; 0x2dfc <StepperMotor_VoidStepAntiClockWise+0x626>
    2e22:	14 c0       	rjmp	.+40     	; 0x2e4c <StepperMotor_VoidStepAntiClockWise+0x676>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e24:	6f 81       	ldd	r22, Y+7	; 0x07
    2e26:	78 85       	ldd	r23, Y+8	; 0x08
    2e28:	89 85       	ldd	r24, Y+9	; 0x09
    2e2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e30:	dc 01       	movw	r26, r24
    2e32:	cb 01       	movw	r24, r22
    2e34:	9e 83       	std	Y+6, r25	; 0x06
    2e36:	8d 83       	std	Y+5, r24	; 0x05
    2e38:	8d 81       	ldd	r24, Y+5	; 0x05
    2e3a:	9e 81       	ldd	r25, Y+6	; 0x06
    2e3c:	9a 83       	std	Y+2, r25	; 0x02
    2e3e:	89 83       	std	Y+1, r24	; 0x01
    2e40:	89 81       	ldd	r24, Y+1	; 0x01
    2e42:	9a 81       	ldd	r25, Y+2	; 0x02
    2e44:	01 97       	sbiw	r24, 0x01	; 1
    2e46:	f1 f7       	brne	.-4      	; 0x2e44 <StepperMotor_VoidStepAntiClockWise+0x66e>
    2e48:	9a 83       	std	Y+2, r25	; 0x02
    2e4a:	89 83       	std	Y+1, r24	; 0x01
	else
	{

	}
	return;
}
    2e4c:	c8 5b       	subi	r28, 0xB8	; 184
    2e4e:	df 4f       	sbci	r29, 0xFF	; 255
    2e50:	0f b6       	in	r0, 0x3f	; 63
    2e52:	f8 94       	cli
    2e54:	de bf       	out	0x3e, r29	; 62
    2e56:	0f be       	out	0x3f, r0	; 63
    2e58:	cd bf       	out	0x3d, r28	; 61
    2e5a:	cf 91       	pop	r28
    2e5c:	df 91       	pop	r29
    2e5e:	1f 91       	pop	r17
    2e60:	0f 91       	pop	r16
    2e62:	08 95       	ret

00002e64 <StepperMotor_VoidSteps_ClockWise>:


void StepperMotor_VoidSteps_ClockWise(const StepMotor_st* Copy_pStepMotor_st_Config , u32 copy_u8Numsteps)
{
    2e64:	df 93       	push	r29
    2e66:	cf 93       	push	r28
    2e68:	cd b7       	in	r28, 0x3d	; 61
    2e6a:	de b7       	in	r29, 0x3e	; 62
    2e6c:	2a 97       	sbiw	r28, 0x0a	; 10
    2e6e:	0f b6       	in	r0, 0x3f	; 63
    2e70:	f8 94       	cli
    2e72:	de bf       	out	0x3e, r29	; 62
    2e74:	0f be       	out	0x3f, r0	; 63
    2e76:	cd bf       	out	0x3d, r28	; 61
    2e78:	9e 83       	std	Y+6, r25	; 0x06
    2e7a:	8d 83       	std	Y+5, r24	; 0x05
    2e7c:	4f 83       	std	Y+7, r20	; 0x07
    2e7e:	58 87       	std	Y+8, r21	; 0x08
    2e80:	69 87       	std	Y+9, r22	; 0x09
    2e82:	7a 87       	std	Y+10, r23	; 0x0a
	u32 i = 0;
    2e84:	19 82       	std	Y+1, r1	; 0x01
    2e86:	1a 82       	std	Y+2, r1	; 0x02
    2e88:	1b 82       	std	Y+3, r1	; 0x03
    2e8a:	1c 82       	std	Y+4, r1	; 0x04
    2e8c:	0f c0       	rjmp	.+30     	; 0x2eac <StepperMotor_VoidSteps_ClockWise+0x48>
	for(; i <copy_u8Numsteps ; ++i)
		StepperMotor_VoidStepClockWise(Copy_pStepMotor_st_Config);
    2e8e:	8d 81       	ldd	r24, Y+5	; 0x05
    2e90:	9e 81       	ldd	r25, Y+6	; 0x06
    2e92:	0e 94 a4 10 	call	0x2148	; 0x2148 <StepperMotor_VoidStepClockWise>


void StepperMotor_VoidSteps_ClockWise(const StepMotor_st* Copy_pStepMotor_st_Config , u32 copy_u8Numsteps)
{
	u32 i = 0;
	for(; i <copy_u8Numsteps ; ++i)
    2e96:	89 81       	ldd	r24, Y+1	; 0x01
    2e98:	9a 81       	ldd	r25, Y+2	; 0x02
    2e9a:	ab 81       	ldd	r26, Y+3	; 0x03
    2e9c:	bc 81       	ldd	r27, Y+4	; 0x04
    2e9e:	01 96       	adiw	r24, 0x01	; 1
    2ea0:	a1 1d       	adc	r26, r1
    2ea2:	b1 1d       	adc	r27, r1
    2ea4:	89 83       	std	Y+1, r24	; 0x01
    2ea6:	9a 83       	std	Y+2, r25	; 0x02
    2ea8:	ab 83       	std	Y+3, r26	; 0x03
    2eaa:	bc 83       	std	Y+4, r27	; 0x04
    2eac:	29 81       	ldd	r18, Y+1	; 0x01
    2eae:	3a 81       	ldd	r19, Y+2	; 0x02
    2eb0:	4b 81       	ldd	r20, Y+3	; 0x03
    2eb2:	5c 81       	ldd	r21, Y+4	; 0x04
    2eb4:	8f 81       	ldd	r24, Y+7	; 0x07
    2eb6:	98 85       	ldd	r25, Y+8	; 0x08
    2eb8:	a9 85       	ldd	r26, Y+9	; 0x09
    2eba:	ba 85       	ldd	r27, Y+10	; 0x0a
    2ebc:	28 17       	cp	r18, r24
    2ebe:	39 07       	cpc	r19, r25
    2ec0:	4a 07       	cpc	r20, r26
    2ec2:	5b 07       	cpc	r21, r27
    2ec4:	20 f3       	brcs	.-56     	; 0x2e8e <StepperMotor_VoidSteps_ClockWise+0x2a>
		StepperMotor_VoidStepClockWise(Copy_pStepMotor_st_Config);
	return;
}
    2ec6:	2a 96       	adiw	r28, 0x0a	; 10
    2ec8:	0f b6       	in	r0, 0x3f	; 63
    2eca:	f8 94       	cli
    2ecc:	de bf       	out	0x3e, r29	; 62
    2ece:	0f be       	out	0x3f, r0	; 63
    2ed0:	cd bf       	out	0x3d, r28	; 61
    2ed2:	cf 91       	pop	r28
    2ed4:	df 91       	pop	r29
    2ed6:	08 95       	ret

00002ed8 <StepperMotor_VoidSteps_AntiClockWise>:
void StepperMotor_VoidSteps_AntiClockWise(const StepMotor_st* Copy_pStepMotor_st_Config , u32 copy_u8Numsteps)
{
    2ed8:	df 93       	push	r29
    2eda:	cf 93       	push	r28
    2edc:	cd b7       	in	r28, 0x3d	; 61
    2ede:	de b7       	in	r29, 0x3e	; 62
    2ee0:	2a 97       	sbiw	r28, 0x0a	; 10
    2ee2:	0f b6       	in	r0, 0x3f	; 63
    2ee4:	f8 94       	cli
    2ee6:	de bf       	out	0x3e, r29	; 62
    2ee8:	0f be       	out	0x3f, r0	; 63
    2eea:	cd bf       	out	0x3d, r28	; 61
    2eec:	9e 83       	std	Y+6, r25	; 0x06
    2eee:	8d 83       	std	Y+5, r24	; 0x05
    2ef0:	4f 83       	std	Y+7, r20	; 0x07
    2ef2:	58 87       	std	Y+8, r21	; 0x08
    2ef4:	69 87       	std	Y+9, r22	; 0x09
    2ef6:	7a 87       	std	Y+10, r23	; 0x0a
	u32 i = 0;
    2ef8:	19 82       	std	Y+1, r1	; 0x01
    2efa:	1a 82       	std	Y+2, r1	; 0x02
    2efc:	1b 82       	std	Y+3, r1	; 0x03
    2efe:	1c 82       	std	Y+4, r1	; 0x04
    2f00:	0f c0       	rjmp	.+30     	; 0x2f20 <StepperMotor_VoidSteps_AntiClockWise+0x48>
	for(; i <copy_u8Numsteps ; ++i)
		StepperMotor_VoidStepAntiClockWise(Copy_pStepMotor_st_Config);
    2f02:	8d 81       	ldd	r24, Y+5	; 0x05
    2f04:	9e 81       	ldd	r25, Y+6	; 0x06
    2f06:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <StepperMotor_VoidStepAntiClockWise>
	return;
}
void StepperMotor_VoidSteps_AntiClockWise(const StepMotor_st* Copy_pStepMotor_st_Config , u32 copy_u8Numsteps)
{
	u32 i = 0;
	for(; i <copy_u8Numsteps ; ++i)
    2f0a:	89 81       	ldd	r24, Y+1	; 0x01
    2f0c:	9a 81       	ldd	r25, Y+2	; 0x02
    2f0e:	ab 81       	ldd	r26, Y+3	; 0x03
    2f10:	bc 81       	ldd	r27, Y+4	; 0x04
    2f12:	01 96       	adiw	r24, 0x01	; 1
    2f14:	a1 1d       	adc	r26, r1
    2f16:	b1 1d       	adc	r27, r1
    2f18:	89 83       	std	Y+1, r24	; 0x01
    2f1a:	9a 83       	std	Y+2, r25	; 0x02
    2f1c:	ab 83       	std	Y+3, r26	; 0x03
    2f1e:	bc 83       	std	Y+4, r27	; 0x04
    2f20:	29 81       	ldd	r18, Y+1	; 0x01
    2f22:	3a 81       	ldd	r19, Y+2	; 0x02
    2f24:	4b 81       	ldd	r20, Y+3	; 0x03
    2f26:	5c 81       	ldd	r21, Y+4	; 0x04
    2f28:	8f 81       	ldd	r24, Y+7	; 0x07
    2f2a:	98 85       	ldd	r25, Y+8	; 0x08
    2f2c:	a9 85       	ldd	r26, Y+9	; 0x09
    2f2e:	ba 85       	ldd	r27, Y+10	; 0x0a
    2f30:	28 17       	cp	r18, r24
    2f32:	39 07       	cpc	r19, r25
    2f34:	4a 07       	cpc	r20, r26
    2f36:	5b 07       	cpc	r21, r27
    2f38:	20 f3       	brcs	.-56     	; 0x2f02 <StepperMotor_VoidSteps_AntiClockWise+0x2a>
		StepperMotor_VoidStepAntiClockWise(Copy_pStepMotor_st_Config);
}
    2f3a:	2a 96       	adiw	r28, 0x0a	; 10
    2f3c:	0f b6       	in	r0, 0x3f	; 63
    2f3e:	f8 94       	cli
    2f40:	de bf       	out	0x3e, r29	; 62
    2f42:	0f be       	out	0x3f, r0	; 63
    2f44:	cd bf       	out	0x3d, r28	; 61
    2f46:	cf 91       	pop	r28
    2f48:	df 91       	pop	r29
    2f4a:	08 95       	ret

00002f4c <LED_u8Init>:
#include"Led_interface.h"
#include "Led_private.h"
#include "led_config.h"

u8 LED_u8Init(const LED_t* Copy_pled_tConfig)
{
    2f4c:	df 93       	push	r29
    2f4e:	cf 93       	push	r28
    2f50:	00 d0       	rcall	.+0      	; 0x2f52 <LED_u8Init+0x6>
    2f52:	00 d0       	rcall	.+0      	; 0x2f54 <LED_u8Init+0x8>
    2f54:	0f 92       	push	r0
    2f56:	cd b7       	in	r28, 0x3d	; 61
    2f58:	de b7       	in	r29, 0x3e	; 62
    2f5a:	9b 83       	std	Y+3, r25	; 0x03
    2f5c:	8a 83       	std	Y+2, r24	; 0x02
	u8 ret = 0;
    2f5e:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pled_tConfig  && Copy_pled_tConfig->Port <= DIO_PORTD_IDX && Copy_pled_tConfig->Pin <= DIO_PIN7 )
    2f60:	8a 81       	ldd	r24, Y+2	; 0x02
    2f62:	9b 81       	ldd	r25, Y+3	; 0x03
    2f64:	00 97       	sbiw	r24, 0x00	; 0
    2f66:	09 f4       	brne	.+2      	; 0x2f6a <LED_u8Init+0x1e>
    2f68:	55 c0       	rjmp	.+170    	; 0x3014 <LED_u8Init+0xc8>
    2f6a:	ea 81       	ldd	r30, Y+2	; 0x02
    2f6c:	fb 81       	ldd	r31, Y+3	; 0x03
    2f6e:	80 81       	ld	r24, Z
    2f70:	8f 70       	andi	r24, 0x0F	; 15
    2f72:	88 2f       	mov	r24, r24
    2f74:	90 e0       	ldi	r25, 0x00	; 0
    2f76:	84 30       	cpi	r24, 0x04	; 4
    2f78:	91 05       	cpc	r25, r1
    2f7a:	0c f0       	brlt	.+2      	; 0x2f7e <LED_u8Init+0x32>
    2f7c:	4b c0       	rjmp	.+150    	; 0x3014 <LED_u8Init+0xc8>
    2f7e:	ea 81       	ldd	r30, Y+2	; 0x02
    2f80:	fb 81       	ldd	r31, Y+3	; 0x03
    2f82:	80 81       	ld	r24, Z
    2f84:	82 95       	swap	r24
    2f86:	8f 70       	andi	r24, 0x0F	; 15
    2f88:	87 70       	andi	r24, 0x07	; 7
    2f8a:	88 2f       	mov	r24, r24
    2f8c:	90 e0       	ldi	r25, 0x00	; 0
    2f8e:	88 30       	cpi	r24, 0x08	; 8
    2f90:	91 05       	cpc	r25, r1
    2f92:	0c f0       	brlt	.+2      	; 0x2f96 <LED_u8Init+0x4a>
    2f94:	3f c0       	rjmp	.+126    	; 0x3014 <LED_u8Init+0xc8>
	{
		switch(Copy_pled_tConfig->ConType)
    2f96:	ea 81       	ldd	r30, Y+2	; 0x02
    2f98:	fb 81       	ldd	r31, Y+3	; 0x03
    2f9a:	80 81       	ld	r24, Z
    2f9c:	88 1f       	adc	r24, r24
    2f9e:	88 27       	eor	r24, r24
    2fa0:	88 1f       	adc	r24, r24
    2fa2:	28 2f       	mov	r18, r24
    2fa4:	30 e0       	ldi	r19, 0x00	; 0
    2fa6:	3d 83       	std	Y+5, r19	; 0x05
    2fa8:	2c 83       	std	Y+4, r18	; 0x04
    2faa:	8c 81       	ldd	r24, Y+4	; 0x04
    2fac:	9d 81       	ldd	r25, Y+5	; 0x05
    2fae:	00 97       	sbiw	r24, 0x00	; 0
    2fb0:	d1 f0       	breq	.+52     	; 0x2fe6 <LED_u8Init+0x9a>
    2fb2:	2c 81       	ldd	r18, Y+4	; 0x04
    2fb4:	3d 81       	ldd	r19, Y+5	; 0x05
    2fb6:	21 30       	cpi	r18, 0x01	; 1
    2fb8:	31 05       	cpc	r19, r1
    2fba:	51 f5       	brne	.+84     	; 0x3010 <LED_u8Init+0xc4>
		{
		case LED_Con_Source:
			DIO_voidPinInit(Copy_pled_tConfig->Port , Copy_pled_tConfig->Pin , DIO_PIN_DIR_OUTPUT , DIO_PIN_LOGIC_LOW);
    2fbc:	ea 81       	ldd	r30, Y+2	; 0x02
    2fbe:	fb 81       	ldd	r31, Y+3	; 0x03
    2fc0:	80 81       	ld	r24, Z
    2fc2:	8f 70       	andi	r24, 0x0F	; 15
    2fc4:	28 2f       	mov	r18, r24
    2fc6:	ea 81       	ldd	r30, Y+2	; 0x02
    2fc8:	fb 81       	ldd	r31, Y+3	; 0x03
    2fca:	80 81       	ld	r24, Z
    2fcc:	82 95       	swap	r24
    2fce:	8f 70       	andi	r24, 0x0F	; 15
    2fd0:	87 70       	andi	r24, 0x07	; 7
    2fd2:	98 2f       	mov	r25, r24
    2fd4:	82 2f       	mov	r24, r18
    2fd6:	69 2f       	mov	r22, r25
    2fd8:	41 e0       	ldi	r20, 0x01	; 1
    2fda:	20 e0       	ldi	r18, 0x00	; 0
    2fdc:	0e 94 21 0f 	call	0x1e42	; 0x1e42 <DIO_voidPinInit>
			ret = 1;
    2fe0:	81 e0       	ldi	r24, 0x01	; 1
    2fe2:	89 83       	std	Y+1, r24	; 0x01
    2fe4:	18 c0       	rjmp	.+48     	; 0x3016 <LED_u8Init+0xca>
			break;
		case LED_Con_Sink:
			DIO_voidPinInit(Copy_pled_tConfig->Port , Copy_pled_tConfig->Pin , DIO_PIN_DIR_OUTPUT , DIO_PIN_LOGIC_HIGH);
    2fe6:	ea 81       	ldd	r30, Y+2	; 0x02
    2fe8:	fb 81       	ldd	r31, Y+3	; 0x03
    2fea:	80 81       	ld	r24, Z
    2fec:	8f 70       	andi	r24, 0x0F	; 15
    2fee:	28 2f       	mov	r18, r24
    2ff0:	ea 81       	ldd	r30, Y+2	; 0x02
    2ff2:	fb 81       	ldd	r31, Y+3	; 0x03
    2ff4:	80 81       	ld	r24, Z
    2ff6:	82 95       	swap	r24
    2ff8:	8f 70       	andi	r24, 0x0F	; 15
    2ffa:	87 70       	andi	r24, 0x07	; 7
    2ffc:	98 2f       	mov	r25, r24
    2ffe:	82 2f       	mov	r24, r18
    3000:	69 2f       	mov	r22, r25
    3002:	41 e0       	ldi	r20, 0x01	; 1
    3004:	21 e0       	ldi	r18, 0x01	; 1
    3006:	0e 94 21 0f 	call	0x1e42	; 0x1e42 <DIO_voidPinInit>
			ret = 1;
    300a:	81 e0       	ldi	r24, 0x01	; 1
    300c:	89 83       	std	Y+1, r24	; 0x01
    300e:	03 c0       	rjmp	.+6      	; 0x3016 <LED_u8Init+0xca>
			break;
		default: ret = 0; break;
    3010:	19 82       	std	Y+1, r1	; 0x01
    3012:	01 c0       	rjmp	.+2      	; 0x3016 <LED_u8Init+0xca>
		}
	}
	else
	{
		ret = 0;
    3014:	19 82       	std	Y+1, r1	; 0x01
	}
	return ret;
    3016:	89 81       	ldd	r24, Y+1	; 0x01
}
    3018:	0f 90       	pop	r0
    301a:	0f 90       	pop	r0
    301c:	0f 90       	pop	r0
    301e:	0f 90       	pop	r0
    3020:	0f 90       	pop	r0
    3022:	cf 91       	pop	r28
    3024:	df 91       	pop	r29
    3026:	08 95       	ret

00003028 <LED_u8TurnOff>:
u8 LED_u8TurnOff(const LED_t* Copy_pled_tConfig)
{
    3028:	df 93       	push	r29
    302a:	cf 93       	push	r28
    302c:	00 d0       	rcall	.+0      	; 0x302e <LED_u8TurnOff+0x6>
    302e:	00 d0       	rcall	.+0      	; 0x3030 <LED_u8TurnOff+0x8>
    3030:	0f 92       	push	r0
    3032:	cd b7       	in	r28, 0x3d	; 61
    3034:	de b7       	in	r29, 0x3e	; 62
    3036:	9b 83       	std	Y+3, r25	; 0x03
    3038:	8a 83       	std	Y+2, r24	; 0x02
	u8 ret = 0;
    303a:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pled_tConfig  && Copy_pled_tConfig->Port <= DIO_PORTD_IDX && Copy_pled_tConfig->Pin <= DIO_PIN7 )
    303c:	8a 81       	ldd	r24, Y+2	; 0x02
    303e:	9b 81       	ldd	r25, Y+3	; 0x03
    3040:	00 97       	sbiw	r24, 0x00	; 0
    3042:	09 f4       	brne	.+2      	; 0x3046 <LED_u8TurnOff+0x1e>
    3044:	52 c0       	rjmp	.+164    	; 0x30ea <LED_u8TurnOff+0xc2>
    3046:	ea 81       	ldd	r30, Y+2	; 0x02
    3048:	fb 81       	ldd	r31, Y+3	; 0x03
    304a:	80 81       	ld	r24, Z
    304c:	8f 70       	andi	r24, 0x0F	; 15
    304e:	88 2f       	mov	r24, r24
    3050:	90 e0       	ldi	r25, 0x00	; 0
    3052:	84 30       	cpi	r24, 0x04	; 4
    3054:	91 05       	cpc	r25, r1
    3056:	0c f0       	brlt	.+2      	; 0x305a <LED_u8TurnOff+0x32>
    3058:	48 c0       	rjmp	.+144    	; 0x30ea <LED_u8TurnOff+0xc2>
    305a:	ea 81       	ldd	r30, Y+2	; 0x02
    305c:	fb 81       	ldd	r31, Y+3	; 0x03
    305e:	80 81       	ld	r24, Z
    3060:	82 95       	swap	r24
    3062:	8f 70       	andi	r24, 0x0F	; 15
    3064:	87 70       	andi	r24, 0x07	; 7
    3066:	88 2f       	mov	r24, r24
    3068:	90 e0       	ldi	r25, 0x00	; 0
    306a:	88 30       	cpi	r24, 0x08	; 8
    306c:	91 05       	cpc	r25, r1
    306e:	ec f5       	brge	.+122    	; 0x30ea <LED_u8TurnOff+0xc2>
	{
		switch(Copy_pled_tConfig->ConType)
    3070:	ea 81       	ldd	r30, Y+2	; 0x02
    3072:	fb 81       	ldd	r31, Y+3	; 0x03
    3074:	80 81       	ld	r24, Z
    3076:	88 1f       	adc	r24, r24
    3078:	88 27       	eor	r24, r24
    307a:	88 1f       	adc	r24, r24
    307c:	28 2f       	mov	r18, r24
    307e:	30 e0       	ldi	r19, 0x00	; 0
    3080:	3d 83       	std	Y+5, r19	; 0x05
    3082:	2c 83       	std	Y+4, r18	; 0x04
    3084:	8c 81       	ldd	r24, Y+4	; 0x04
    3086:	9d 81       	ldd	r25, Y+5	; 0x05
    3088:	00 97       	sbiw	r24, 0x00	; 0
    308a:	c9 f0       	breq	.+50     	; 0x30be <LED_u8TurnOff+0x96>
    308c:	2c 81       	ldd	r18, Y+4	; 0x04
    308e:	3d 81       	ldd	r19, Y+5	; 0x05
    3090:	21 30       	cpi	r18, 0x01	; 1
    3092:	31 05       	cpc	r19, r1
    3094:	41 f5       	brne	.+80     	; 0x30e6 <LED_u8TurnOff+0xbe>
		{
			case LED_Con_Source:
				DIO_VoidSetPinValue(Copy_pled_tConfig->Port,Copy_pled_tConfig->Pin, DIO_PIN_LOGIC_LOW);
    3096:	ea 81       	ldd	r30, Y+2	; 0x02
    3098:	fb 81       	ldd	r31, Y+3	; 0x03
    309a:	80 81       	ld	r24, Z
    309c:	8f 70       	andi	r24, 0x0F	; 15
    309e:	28 2f       	mov	r18, r24
    30a0:	ea 81       	ldd	r30, Y+2	; 0x02
    30a2:	fb 81       	ldd	r31, Y+3	; 0x03
    30a4:	80 81       	ld	r24, Z
    30a6:	82 95       	swap	r24
    30a8:	8f 70       	andi	r24, 0x0F	; 15
    30aa:	87 70       	andi	r24, 0x07	; 7
    30ac:	98 2f       	mov	r25, r24
    30ae:	82 2f       	mov	r24, r18
    30b0:	69 2f       	mov	r22, r25
    30b2:	40 e0       	ldi	r20, 0x00	; 0
    30b4:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <DIO_VoidSetPinValue>
				ret = 1;
    30b8:	81 e0       	ldi	r24, 0x01	; 1
    30ba:	89 83       	std	Y+1, r24	; 0x01
    30bc:	17 c0       	rjmp	.+46     	; 0x30ec <LED_u8TurnOff+0xc4>
				break;
			case LED_Con_Sink:
				DIO_VoidSetPinValue(Copy_pled_tConfig->Port,Copy_pled_tConfig->Pin, DIO_PIN_LOGIC_HIGH);
    30be:	ea 81       	ldd	r30, Y+2	; 0x02
    30c0:	fb 81       	ldd	r31, Y+3	; 0x03
    30c2:	80 81       	ld	r24, Z
    30c4:	8f 70       	andi	r24, 0x0F	; 15
    30c6:	28 2f       	mov	r18, r24
    30c8:	ea 81       	ldd	r30, Y+2	; 0x02
    30ca:	fb 81       	ldd	r31, Y+3	; 0x03
    30cc:	80 81       	ld	r24, Z
    30ce:	82 95       	swap	r24
    30d0:	8f 70       	andi	r24, 0x0F	; 15
    30d2:	87 70       	andi	r24, 0x07	; 7
    30d4:	98 2f       	mov	r25, r24
    30d6:	82 2f       	mov	r24, r18
    30d8:	69 2f       	mov	r22, r25
    30da:	41 e0       	ldi	r20, 0x01	; 1
    30dc:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <DIO_VoidSetPinValue>
				ret = 1;
    30e0:	81 e0       	ldi	r24, 0x01	; 1
    30e2:	89 83       	std	Y+1, r24	; 0x01
    30e4:	03 c0       	rjmp	.+6      	; 0x30ec <LED_u8TurnOff+0xc4>
				break;
			default: ret = 0; break;
    30e6:	19 82       	std	Y+1, r1	; 0x01
    30e8:	01 c0       	rjmp	.+2      	; 0x30ec <LED_u8TurnOff+0xc4>
		}
	}
	else
	{
		ret = 0;
    30ea:	19 82       	std	Y+1, r1	; 0x01
	}
	return ret;
    30ec:	89 81       	ldd	r24, Y+1	; 0x01
}
    30ee:	0f 90       	pop	r0
    30f0:	0f 90       	pop	r0
    30f2:	0f 90       	pop	r0
    30f4:	0f 90       	pop	r0
    30f6:	0f 90       	pop	r0
    30f8:	cf 91       	pop	r28
    30fa:	df 91       	pop	r29
    30fc:	08 95       	ret

000030fe <LED_u8TurnOn>:

u8 LED_u8TurnOn(const LED_t* Copy_pled_tConfig)
{
    30fe:	df 93       	push	r29
    3100:	cf 93       	push	r28
    3102:	00 d0       	rcall	.+0      	; 0x3104 <LED_u8TurnOn+0x6>
    3104:	00 d0       	rcall	.+0      	; 0x3106 <LED_u8TurnOn+0x8>
    3106:	0f 92       	push	r0
    3108:	cd b7       	in	r28, 0x3d	; 61
    310a:	de b7       	in	r29, 0x3e	; 62
    310c:	9b 83       	std	Y+3, r25	; 0x03
    310e:	8a 83       	std	Y+2, r24	; 0x02
	u8 ret = 0;
    3110:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pled_tConfig  && Copy_pled_tConfig->Port <= DIO_PORTD_IDX && Copy_pled_tConfig->Pin <= DIO_PIN7 )
    3112:	8a 81       	ldd	r24, Y+2	; 0x02
    3114:	9b 81       	ldd	r25, Y+3	; 0x03
    3116:	00 97       	sbiw	r24, 0x00	; 0
    3118:	09 f4       	brne	.+2      	; 0x311c <LED_u8TurnOn+0x1e>
    311a:	52 c0       	rjmp	.+164    	; 0x31c0 <LED_u8TurnOn+0xc2>
    311c:	ea 81       	ldd	r30, Y+2	; 0x02
    311e:	fb 81       	ldd	r31, Y+3	; 0x03
    3120:	80 81       	ld	r24, Z
    3122:	8f 70       	andi	r24, 0x0F	; 15
    3124:	88 2f       	mov	r24, r24
    3126:	90 e0       	ldi	r25, 0x00	; 0
    3128:	84 30       	cpi	r24, 0x04	; 4
    312a:	91 05       	cpc	r25, r1
    312c:	0c f0       	brlt	.+2      	; 0x3130 <LED_u8TurnOn+0x32>
    312e:	48 c0       	rjmp	.+144    	; 0x31c0 <LED_u8TurnOn+0xc2>
    3130:	ea 81       	ldd	r30, Y+2	; 0x02
    3132:	fb 81       	ldd	r31, Y+3	; 0x03
    3134:	80 81       	ld	r24, Z
    3136:	82 95       	swap	r24
    3138:	8f 70       	andi	r24, 0x0F	; 15
    313a:	87 70       	andi	r24, 0x07	; 7
    313c:	88 2f       	mov	r24, r24
    313e:	90 e0       	ldi	r25, 0x00	; 0
    3140:	88 30       	cpi	r24, 0x08	; 8
    3142:	91 05       	cpc	r25, r1
    3144:	ec f5       	brge	.+122    	; 0x31c0 <LED_u8TurnOn+0xc2>
	{
		switch(Copy_pled_tConfig->ConType)
    3146:	ea 81       	ldd	r30, Y+2	; 0x02
    3148:	fb 81       	ldd	r31, Y+3	; 0x03
    314a:	80 81       	ld	r24, Z
    314c:	88 1f       	adc	r24, r24
    314e:	88 27       	eor	r24, r24
    3150:	88 1f       	adc	r24, r24
    3152:	28 2f       	mov	r18, r24
    3154:	30 e0       	ldi	r19, 0x00	; 0
    3156:	3d 83       	std	Y+5, r19	; 0x05
    3158:	2c 83       	std	Y+4, r18	; 0x04
    315a:	8c 81       	ldd	r24, Y+4	; 0x04
    315c:	9d 81       	ldd	r25, Y+5	; 0x05
    315e:	00 97       	sbiw	r24, 0x00	; 0
    3160:	c9 f0       	breq	.+50     	; 0x3194 <LED_u8TurnOn+0x96>
    3162:	2c 81       	ldd	r18, Y+4	; 0x04
    3164:	3d 81       	ldd	r19, Y+5	; 0x05
    3166:	21 30       	cpi	r18, 0x01	; 1
    3168:	31 05       	cpc	r19, r1
    316a:	41 f5       	brne	.+80     	; 0x31bc <LED_u8TurnOn+0xbe>
		{
			case LED_Con_Source:
				DIO_VoidSetPinValue(Copy_pled_tConfig->Port,Copy_pled_tConfig->Pin, DIO_PIN_LOGIC_HIGH);
    316c:	ea 81       	ldd	r30, Y+2	; 0x02
    316e:	fb 81       	ldd	r31, Y+3	; 0x03
    3170:	80 81       	ld	r24, Z
    3172:	8f 70       	andi	r24, 0x0F	; 15
    3174:	28 2f       	mov	r18, r24
    3176:	ea 81       	ldd	r30, Y+2	; 0x02
    3178:	fb 81       	ldd	r31, Y+3	; 0x03
    317a:	80 81       	ld	r24, Z
    317c:	82 95       	swap	r24
    317e:	8f 70       	andi	r24, 0x0F	; 15
    3180:	87 70       	andi	r24, 0x07	; 7
    3182:	98 2f       	mov	r25, r24
    3184:	82 2f       	mov	r24, r18
    3186:	69 2f       	mov	r22, r25
    3188:	41 e0       	ldi	r20, 0x01	; 1
    318a:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <DIO_VoidSetPinValue>
				ret = 1;
    318e:	81 e0       	ldi	r24, 0x01	; 1
    3190:	89 83       	std	Y+1, r24	; 0x01
    3192:	17 c0       	rjmp	.+46     	; 0x31c2 <LED_u8TurnOn+0xc4>
				break;
			case LED_Con_Sink:
				DIO_VoidSetPinValue(Copy_pled_tConfig->Port,Copy_pled_tConfig->Pin, DIO_PIN_LOGIC_LOW);
    3194:	ea 81       	ldd	r30, Y+2	; 0x02
    3196:	fb 81       	ldd	r31, Y+3	; 0x03
    3198:	80 81       	ld	r24, Z
    319a:	8f 70       	andi	r24, 0x0F	; 15
    319c:	28 2f       	mov	r18, r24
    319e:	ea 81       	ldd	r30, Y+2	; 0x02
    31a0:	fb 81       	ldd	r31, Y+3	; 0x03
    31a2:	80 81       	ld	r24, Z
    31a4:	82 95       	swap	r24
    31a6:	8f 70       	andi	r24, 0x0F	; 15
    31a8:	87 70       	andi	r24, 0x07	; 7
    31aa:	98 2f       	mov	r25, r24
    31ac:	82 2f       	mov	r24, r18
    31ae:	69 2f       	mov	r22, r25
    31b0:	40 e0       	ldi	r20, 0x00	; 0
    31b2:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <DIO_VoidSetPinValue>
				ret = 1;
    31b6:	81 e0       	ldi	r24, 0x01	; 1
    31b8:	89 83       	std	Y+1, r24	; 0x01
    31ba:	03 c0       	rjmp	.+6      	; 0x31c2 <LED_u8TurnOn+0xc4>
				break;
			default: ret = 0; break;
    31bc:	19 82       	std	Y+1, r1	; 0x01
    31be:	01 c0       	rjmp	.+2      	; 0x31c2 <LED_u8TurnOn+0xc4>
		}
	}
	else
	{
		ret = 0;
    31c0:	19 82       	std	Y+1, r1	; 0x01
	}
	return ret;
    31c2:	89 81       	ldd	r24, Y+1	; 0x01
}
    31c4:	0f 90       	pop	r0
    31c6:	0f 90       	pop	r0
    31c8:	0f 90       	pop	r0
    31ca:	0f 90       	pop	r0
    31cc:	0f 90       	pop	r0
    31ce:	cf 91       	pop	r28
    31d0:	df 91       	pop	r29
    31d2:	08 95       	ret

000031d4 <LED_u8Toggle>:

u8 LED_u8Toggle(const LED_t* Copy_pled_tConfig)
{
    31d4:	df 93       	push	r29
    31d6:	cf 93       	push	r28
    31d8:	00 d0       	rcall	.+0      	; 0x31da <LED_u8Toggle+0x6>
    31da:	0f 92       	push	r0
    31dc:	cd b7       	in	r28, 0x3d	; 61
    31de:	de b7       	in	r29, 0x3e	; 62
    31e0:	9b 83       	std	Y+3, r25	; 0x03
    31e2:	8a 83       	std	Y+2, r24	; 0x02
	u8 ret = 0;
    31e4:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pled_tConfig  && Copy_pled_tConfig->Port <= DIO_PORTD_IDX && Copy_pled_tConfig->Pin <= DIO_PIN7 )
    31e6:	8a 81       	ldd	r24, Y+2	; 0x02
    31e8:	9b 81       	ldd	r25, Y+3	; 0x03
    31ea:	00 97       	sbiw	r24, 0x00	; 0
    31ec:	39 f1       	breq	.+78     	; 0x323c <LED_u8Toggle+0x68>
    31ee:	ea 81       	ldd	r30, Y+2	; 0x02
    31f0:	fb 81       	ldd	r31, Y+3	; 0x03
    31f2:	80 81       	ld	r24, Z
    31f4:	8f 70       	andi	r24, 0x0F	; 15
    31f6:	88 2f       	mov	r24, r24
    31f8:	90 e0       	ldi	r25, 0x00	; 0
    31fa:	84 30       	cpi	r24, 0x04	; 4
    31fc:	91 05       	cpc	r25, r1
    31fe:	f4 f4       	brge	.+60     	; 0x323c <LED_u8Toggle+0x68>
    3200:	ea 81       	ldd	r30, Y+2	; 0x02
    3202:	fb 81       	ldd	r31, Y+3	; 0x03
    3204:	80 81       	ld	r24, Z
    3206:	82 95       	swap	r24
    3208:	8f 70       	andi	r24, 0x0F	; 15
    320a:	87 70       	andi	r24, 0x07	; 7
    320c:	88 2f       	mov	r24, r24
    320e:	90 e0       	ldi	r25, 0x00	; 0
    3210:	88 30       	cpi	r24, 0x08	; 8
    3212:	91 05       	cpc	r25, r1
    3214:	9c f4       	brge	.+38     	; 0x323c <LED_u8Toggle+0x68>
	{
		DIO_VoidTogglePinValue(Copy_pled_tConfig->Port , Copy_pled_tConfig->Pin);
    3216:	ea 81       	ldd	r30, Y+2	; 0x02
    3218:	fb 81       	ldd	r31, Y+3	; 0x03
    321a:	80 81       	ld	r24, Z
    321c:	8f 70       	andi	r24, 0x0F	; 15
    321e:	28 2f       	mov	r18, r24
    3220:	ea 81       	ldd	r30, Y+2	; 0x02
    3222:	fb 81       	ldd	r31, Y+3	; 0x03
    3224:	80 81       	ld	r24, Z
    3226:	82 95       	swap	r24
    3228:	8f 70       	andi	r24, 0x0F	; 15
    322a:	87 70       	andi	r24, 0x07	; 7
    322c:	98 2f       	mov	r25, r24
    322e:	82 2f       	mov	r24, r18
    3230:	69 2f       	mov	r22, r25
    3232:	0e 94 66 0d 	call	0x1acc	; 0x1acc <DIO_VoidTogglePinValue>
		ret = 1;
    3236:	81 e0       	ldi	r24, 0x01	; 1
    3238:	89 83       	std	Y+1, r24	; 0x01
    323a:	01 c0       	rjmp	.+2      	; 0x323e <LED_u8Toggle+0x6a>
	}
	else
	{
		ret = 0;
    323c:	19 82       	std	Y+1, r1	; 0x01
	}
	return ret;
    323e:	89 81       	ldd	r24, Y+1	; 0x01
}
    3240:	0f 90       	pop	r0
    3242:	0f 90       	pop	r0
    3244:	0f 90       	pop	r0
    3246:	cf 91       	pop	r28
    3248:	df 91       	pop	r29
    324a:	08 95       	ret

0000324c <LM35_voidInit>:




void LM35_voidInit(ISR_FuncPtr_t Copy_ISR_FuncPtr_tAdcIsR)
{
    324c:	df 93       	push	r29
    324e:	cf 93       	push	r28
    3250:	00 d0       	rcall	.+0      	; 0x3252 <LM35_voidInit+0x6>
    3252:	cd b7       	in	r28, 0x3d	; 61
    3254:	de b7       	in	r29, 0x3e	; 62
    3256:	9a 83       	std	Y+2, r25	; 0x02
    3258:	89 83       	std	Y+1, r24	; 0x01
	DIO_VoidSetPinDirection(DIO_PORTA_IDX ,LM35_ADC_CHANNEL_SELECT, DIO_PIN_DIR_INPUT);
    325a:	80 e0       	ldi	r24, 0x00	; 0
    325c:	60 e0       	ldi	r22, 0x00	; 0
    325e:	40 e0       	ldi	r20, 0x00	; 0
    3260:	0e 94 80 0c 	call	0x1900	; 0x1900 <DIO_VoidSetPinDirection>
#if ADC_INTERRUPT_CFG == ADC_INTERRUPT_DISABLE_CFG
	ADC_VoidInit();
    3264:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <ADC_VoidInit>
#endif
#if ADC_INTERRUPT_ENABLE_CFG == ADC_INTERRUPT_CFG
	ADC_VoidInit_interrupt(Copy_ISR_FuncPtr_tAdcIsR);
#endif
}
    3268:	0f 90       	pop	r0
    326a:	0f 90       	pop	r0
    326c:	cf 91       	pop	r28
    326e:	df 91       	pop	r29
    3270:	08 95       	ret

00003272 <LM35_voidStartConv>:



void LM35_voidStartConv(void)
{
    3272:	df 93       	push	r29
    3274:	cf 93       	push	r28
    3276:	cd b7       	in	r28, 0x3d	; 61
    3278:	de b7       	in	r29, 0x3e	; 62
	AD_CHANNEL_SELECT(LM35_ADC_CHANNEL_SELECT);
    327a:	a7 e2       	ldi	r26, 0x27	; 39
    327c:	b0 e0       	ldi	r27, 0x00	; 0
    327e:	e7 e2       	ldi	r30, 0x27	; 39
    3280:	f0 e0       	ldi	r31, 0x00	; 0
    3282:	80 81       	ld	r24, Z
    3284:	80 7e       	andi	r24, 0xE0	; 224
    3286:	8c 93       	st	X, r24
	AD_STARTCONV();
    3288:	a6 e2       	ldi	r26, 0x26	; 38
    328a:	b0 e0       	ldi	r27, 0x00	; 0
    328c:	e6 e2       	ldi	r30, 0x26	; 38
    328e:	f0 e0       	ldi	r31, 0x00	; 0
    3290:	80 81       	ld	r24, Z
    3292:	80 64       	ori	r24, 0x40	; 64
    3294:	8c 93       	st	X, r24
}
    3296:	cf 91       	pop	r28
    3298:	df 91       	pop	r29
    329a:	08 95       	ret

0000329c <LM35_voidReadDegree>:


void LM35_voidReadDegree(u8 copy_u8LM35_Channel,u16* copy_pu16Tempcelsius)
{
    329c:	df 93       	push	r29
    329e:	cf 93       	push	r28
    32a0:	00 d0       	rcall	.+0      	; 0x32a2 <LM35_voidReadDegree+0x6>
    32a2:	00 d0       	rcall	.+0      	; 0x32a4 <LM35_voidReadDegree+0x8>
    32a4:	0f 92       	push	r0
    32a6:	cd b7       	in	r28, 0x3d	; 61
    32a8:	de b7       	in	r29, 0x3e	; 62
    32aa:	8b 83       	std	Y+3, r24	; 0x03
    32ac:	7d 83       	std	Y+5, r23	; 0x05
    32ae:	6c 83       	std	Y+4, r22	; 0x04
	u16 adcVal = 0;
    32b0:	1a 82       	std	Y+2, r1	; 0x02
    32b2:	19 82       	std	Y+1, r1	; 0x01
#if ADC_INTERRUPT_CFG == ADC_INTERRUPT_DISABLE_CFG
	// wait till adc finsh conversion
	AD_CHANNEL_SELECT(copy_u8LM35_Channel);
    32b4:	a7 e2       	ldi	r26, 0x27	; 39
    32b6:	b0 e0       	ldi	r27, 0x00	; 0
    32b8:	e7 e2       	ldi	r30, 0x27	; 39
    32ba:	f0 e0       	ldi	r31, 0x00	; 0
    32bc:	80 81       	ld	r24, Z
    32be:	98 2f       	mov	r25, r24
    32c0:	90 7e       	andi	r25, 0xE0	; 224
    32c2:	8b 81       	ldd	r24, Y+3	; 0x03
    32c4:	89 2b       	or	r24, r25
    32c6:	8c 93       	st	X, r24
	AD_STARTCONV();
    32c8:	a6 e2       	ldi	r26, 0x26	; 38
    32ca:	b0 e0       	ldi	r27, 0x00	; 0
    32cc:	e6 e2       	ldi	r30, 0x26	; 38
    32ce:	f0 e0       	ldi	r31, 0x00	; 0
    32d0:	80 81       	ld	r24, Z
    32d2:	80 64       	ori	r24, 0x40	; 64
    32d4:	8c 93       	st	X, r24
	// wait till adc finsh conversion
	while( AD_READ_CONVSTAT() == ADC_CONV_INPROGRESS_CFG )
    32d6:	e6 e2       	ldi	r30, 0x26	; 38
    32d8:	f0 e0       	ldi	r31, 0x00	; 0
    32da:	80 81       	ld	r24, Z
    32dc:	82 95       	swap	r24
    32de:	86 95       	lsr	r24
    32e0:	86 95       	lsr	r24
    32e2:	83 70       	andi	r24, 0x03	; 3
    32e4:	88 2f       	mov	r24, r24
    32e6:	90 e0       	ldi	r25, 0x00	; 0
    32e8:	81 70       	andi	r24, 0x01	; 1
    32ea:	90 70       	andi	r25, 0x00	; 0
    32ec:	88 23       	and	r24, r24
    32ee:	99 f7       	brne	.-26     	; 0x32d6 <LM35_voidReadDegree+0x3a>
		;
	ADC_voidReadResult(&adcVal);
    32f0:	ce 01       	movw	r24, r28
    32f2:	01 96       	adiw	r24, 0x01	; 1
    32f4:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <ADC_voidReadResult>
	*copy_pu16Tempcelsius = (adcVal/LM35_AdcVal_Per_degree);
    32f8:	89 81       	ldd	r24, Y+1	; 0x01
    32fa:	9a 81       	ldd	r25, Y+2	; 0x02
    32fc:	cc 01       	movw	r24, r24
    32fe:	a0 e0       	ldi	r26, 0x00	; 0
    3300:	b0 e0       	ldi	r27, 0x00	; 0
    3302:	bc 01       	movw	r22, r24
    3304:	cd 01       	movw	r24, r26
    3306:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    330a:	dc 01       	movw	r26, r24
    330c:	cb 01       	movw	r24, r22
    330e:	bc 01       	movw	r22, r24
    3310:	cd 01       	movw	r24, r26
    3312:	2f e6       	ldi	r18, 0x6F	; 111
    3314:	32 e1       	ldi	r19, 0x12	; 18
    3316:	43 e0       	ldi	r20, 0x03	; 3
    3318:	50 e4       	ldi	r21, 0x40	; 64
    331a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    331e:	dc 01       	movw	r26, r24
    3320:	cb 01       	movw	r24, r22
    3322:	bc 01       	movw	r22, r24
    3324:	cd 01       	movw	r24, r26
    3326:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    332a:	dc 01       	movw	r26, r24
    332c:	cb 01       	movw	r24, r22
    332e:	ec 81       	ldd	r30, Y+4	; 0x04
    3330:	fd 81       	ldd	r31, Y+5	; 0x05
    3332:	91 83       	std	Z+1, r25	; 0x01
    3334:	80 83       	st	Z, r24
	ADC_voidReadResult(&adcVal);
	*copy_pu16Tempcelsius = (adcVal/LM35_AdcVal_Per_degree);
#endif


}
    3336:	0f 90       	pop	r0
    3338:	0f 90       	pop	r0
    333a:	0f 90       	pop	r0
    333c:	0f 90       	pop	r0
    333e:	0f 90       	pop	r0
    3340:	cf 91       	pop	r28
    3342:	df 91       	pop	r29
    3344:	08 95       	ret

00003346 <DCMOTOR_voidInit>:
	.PWM_OCR = PWM_OCR1B
};


void DCMOTOR_voidInit(DC_MOTOR_stConfig* Copy_pDC_MOTOR_stConfig)
{
    3346:	ef 92       	push	r14
    3348:	ff 92       	push	r15
    334a:	0f 93       	push	r16
    334c:	1f 93       	push	r17
    334e:	df 93       	push	r29
    3350:	cf 93       	push	r28
    3352:	cd b7       	in	r28, 0x3d	; 61
    3354:	de b7       	in	r29, 0x3e	; 62
    3356:	29 97       	sbiw	r28, 0x09	; 9
    3358:	0f b6       	in	r0, 0x3f	; 63
    335a:	f8 94       	cli
    335c:	de bf       	out	0x3e, r29	; 62
    335e:	0f be       	out	0x3f, r0	; 63
    3360:	cd bf       	out	0x3d, r28	; 61
    3362:	99 87       	std	Y+9, r25	; 0x09
    3364:	88 87       	std	Y+8, r24	; 0x08
	u8 l_Prescaler = 0;
    3366:	1f 82       	std	Y+7, r1	; 0x07
	u16 l_topValue = 0;
    3368:	1e 82       	std	Y+6, r1	; 0x06
    336a:	1d 82       	std	Y+5, r1	; 0x05
	u32 temp = 0;
    336c:	19 82       	std	Y+1, r1	; 0x01
    336e:	1a 82       	std	Y+2, r1	; 0x02
    3370:	1b 82       	std	Y+3, r1	; 0x03
    3372:	1c 82       	std	Y+4, r1	; 0x04
	if(Copy_pDC_MOTOR_stConfig)
    3374:	88 85       	ldd	r24, Y+8	; 0x08
    3376:	99 85       	ldd	r25, Y+9	; 0x09
    3378:	00 97       	sbiw	r24, 0x00	; 0
    337a:	09 f4       	brne	.+2      	; 0x337e <DCMOTOR_voidInit+0x38>
    337c:	d1 c0       	rjmp	.+418    	; 0x3520 <DCMOTOR_voidInit+0x1da>
	{
		DIO_voidPinInit(Copy_pDC_MOTOR_stConfig->MOTOR_Port,Copy_pDC_MOTOR_stConfig->MOTOR_IN1_Pin,DIO_PIN_DIR_OUTPUT , DIO_PIN_LOGIC_LOW);
    337e:	e8 85       	ldd	r30, Y+8	; 0x08
    3380:	f9 85       	ldd	r31, Y+9	; 0x09
    3382:	80 81       	ld	r24, Z
    3384:	83 70       	andi	r24, 0x03	; 3
    3386:	28 2f       	mov	r18, r24
    3388:	e8 85       	ldd	r30, Y+8	; 0x08
    338a:	f9 85       	ldd	r31, Y+9	; 0x09
    338c:	80 81       	ld	r24, Z
    338e:	86 95       	lsr	r24
    3390:	86 95       	lsr	r24
    3392:	87 70       	andi	r24, 0x07	; 7
    3394:	98 2f       	mov	r25, r24
    3396:	82 2f       	mov	r24, r18
    3398:	69 2f       	mov	r22, r25
    339a:	41 e0       	ldi	r20, 0x01	; 1
    339c:	20 e0       	ldi	r18, 0x00	; 0
    339e:	0e 94 21 0f 	call	0x1e42	; 0x1e42 <DIO_voidPinInit>
		DIO_voidPinInit(Copy_pDC_MOTOR_stConfig->MOTOR_Port,Copy_pDC_MOTOR_stConfig->MOTOR_IN2_Pin,DIO_PIN_DIR_OUTPUT , DIO_PIN_LOGIC_LOW);
    33a2:	e8 85       	ldd	r30, Y+8	; 0x08
    33a4:	f9 85       	ldd	r31, Y+9	; 0x09
    33a6:	80 81       	ld	r24, Z
    33a8:	83 70       	andi	r24, 0x03	; 3
    33aa:	28 2f       	mov	r18, r24
    33ac:	e8 85       	ldd	r30, Y+8	; 0x08
    33ae:	f9 85       	ldd	r31, Y+9	; 0x09
    33b0:	80 81       	ld	r24, Z
    33b2:	82 95       	swap	r24
    33b4:	86 95       	lsr	r24
    33b6:	87 70       	andi	r24, 0x07	; 7
    33b8:	98 2f       	mov	r25, r24
    33ba:	82 2f       	mov	r24, r18
    33bc:	69 2f       	mov	r22, r25
    33be:	41 e0       	ldi	r20, 0x01	; 1
    33c0:	20 e0       	ldi	r18, 0x00	; 0
    33c2:	0e 94 21 0f 	call	0x1e42	; 0x1e42 <DIO_voidPinInit>
		if(Copy_pDC_MOTOR_stConfig->MOTOR_PWN_Pin != MOTOR_PWM_DISABLE)
    33c6:	e8 85       	ldd	r30, Y+8	; 0x08
    33c8:	f9 85       	ldd	r31, Y+9	; 0x09
    33ca:	81 81       	ldd	r24, Z+1	; 0x01
    33cc:	82 30       	cpi	r24, 0x02	; 2
    33ce:	09 f4       	brne	.+2      	; 0x33d2 <DCMOTOR_voidInit+0x8c>
    33d0:	a7 c0       	rjmp	.+334    	; 0x3520 <DCMOTOR_voidInit+0x1da>
		{
			DIO_VoidSetPinDirection(DIO_PORTD_IDX, 5-Copy_pDC_MOTOR_stConfig->MOTOR_PWN_Pin,DIO_PIN_DIR_OUTPUT);
    33d2:	e8 85       	ldd	r30, Y+8	; 0x08
    33d4:	f9 85       	ldd	r31, Y+9	; 0x09
    33d6:	91 81       	ldd	r25, Z+1	; 0x01
    33d8:	85 e0       	ldi	r24, 0x05	; 5
    33da:	28 2f       	mov	r18, r24
    33dc:	29 1b       	sub	r18, r25
    33de:	92 2f       	mov	r25, r18
    33e0:	83 e0       	ldi	r24, 0x03	; 3
    33e2:	69 2f       	mov	r22, r25
    33e4:	41 e0       	ldi	r20, 0x01	; 1
    33e6:	0e 94 80 0c 	call	0x1900	; 0x1900 <DIO_VoidSetPinDirection>
			l_Prescaler = PrescalerCalculation(Copy_pDC_MOTOR_stConfig->MOTOR_PWM_Freq);
    33ea:	e8 85       	ldd	r30, Y+8	; 0x08
    33ec:	f9 85       	ldd	r31, Y+9	; 0x09
    33ee:	82 81       	ldd	r24, Z+2	; 0x02
    33f0:	93 81       	ldd	r25, Z+3	; 0x03
    33f2:	0e 94 6f 1b 	call	0x36de	; 0x36de <PrescalerCalculation>
    33f6:	8f 83       	std	Y+7, r24	; 0x07
			temp = ((f32)1.0/Copy_pDC_MOTOR_stConfig->MOTOR_PWM_Freq) * F_CPU;
    33f8:	e8 85       	ldd	r30, Y+8	; 0x08
    33fa:	f9 85       	ldd	r31, Y+9	; 0x09
    33fc:	82 81       	ldd	r24, Z+2	; 0x02
    33fe:	93 81       	ldd	r25, Z+3	; 0x03
    3400:	cc 01       	movw	r24, r24
    3402:	a0 e0       	ldi	r26, 0x00	; 0
    3404:	b0 e0       	ldi	r27, 0x00	; 0
    3406:	bc 01       	movw	r22, r24
    3408:	cd 01       	movw	r24, r26
    340a:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    340e:	9b 01       	movw	r18, r22
    3410:	ac 01       	movw	r20, r24
    3412:	60 e0       	ldi	r22, 0x00	; 0
    3414:	70 e0       	ldi	r23, 0x00	; 0
    3416:	80 e8       	ldi	r24, 0x80	; 128
    3418:	9f e3       	ldi	r25, 0x3F	; 63
    341a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    341e:	dc 01       	movw	r26, r24
    3420:	cb 01       	movw	r24, r22
    3422:	bc 01       	movw	r22, r24
    3424:	cd 01       	movw	r24, r26
    3426:	20 e0       	ldi	r18, 0x00	; 0
    3428:	34 e2       	ldi	r19, 0x24	; 36
    342a:	44 ef       	ldi	r20, 0xF4	; 244
    342c:	5a e4       	ldi	r21, 0x4A	; 74
    342e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3432:	dc 01       	movw	r26, r24
    3434:	cb 01       	movw	r24, r22
    3436:	bc 01       	movw	r22, r24
    3438:	cd 01       	movw	r24, r26
    343a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    343e:	dc 01       	movw	r26, r24
    3440:	cb 01       	movw	r24, r22
    3442:	89 83       	std	Y+1, r24	; 0x01
    3444:	9a 83       	std	Y+2, r25	; 0x02
    3446:	ab 83       	std	Y+3, r26	; 0x03
    3448:	bc 83       	std	Y+4, r27	; 0x04
			l_topValue = (u16)((f32)temp / PrescalerArr[l_Prescaler-1]);
    344a:	69 81       	ldd	r22, Y+1	; 0x01
    344c:	7a 81       	ldd	r23, Y+2	; 0x02
    344e:	8b 81       	ldd	r24, Y+3	; 0x03
    3450:	9c 81       	ldd	r25, Y+4	; 0x04
    3452:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    3456:	7b 01       	movw	r14, r22
    3458:	8c 01       	movw	r16, r24
    345a:	8f 81       	ldd	r24, Y+7	; 0x07
    345c:	88 2f       	mov	r24, r24
    345e:	90 e0       	ldi	r25, 0x00	; 0
    3460:	01 97       	sbiw	r24, 0x01	; 1
    3462:	88 0f       	add	r24, r24
    3464:	99 1f       	adc	r25, r25
    3466:	fc 01       	movw	r30, r24
    3468:	ec 53       	subi	r30, 0x3C	; 60
    346a:	fe 4f       	sbci	r31, 0xFE	; 254
    346c:	80 81       	ld	r24, Z
    346e:	91 81       	ldd	r25, Z+1	; 0x01
    3470:	cc 01       	movw	r24, r24
    3472:	a0 e0       	ldi	r26, 0x00	; 0
    3474:	b0 e0       	ldi	r27, 0x00	; 0
    3476:	bc 01       	movw	r22, r24
    3478:	cd 01       	movw	r24, r26
    347a:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    347e:	9b 01       	movw	r18, r22
    3480:	ac 01       	movw	r20, r24
    3482:	c8 01       	movw	r24, r16
    3484:	b7 01       	movw	r22, r14
    3486:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    348a:	dc 01       	movw	r26, r24
    348c:	cb 01       	movw	r24, r22
    348e:	bc 01       	movw	r22, r24
    3490:	cd 01       	movw	r24, r26
    3492:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3496:	dc 01       	movw	r26, r24
    3498:	cb 01       	movw	r24, r22
    349a:	9e 83       	std	Y+6, r25	; 0x06
    349c:	8d 83       	std	Y+5, r24	; 0x05

			if(Copy_pDC_MOTOR_stConfig->MOTOR_PWN_Pin == MOTOR_PWM_OCR1A)
    349e:	e8 85       	ldd	r30, Y+8	; 0x08
    34a0:	f9 85       	ldd	r31, Y+9	; 0x09
    34a2:	81 81       	ldd	r24, Z+1	; 0x01
    34a4:	88 23       	and	r24, r24
    34a6:	e1 f4       	brne	.+56     	; 0x34e0 <DCMOTOR_voidInit+0x19a>
			{
				G_PWM_OCR1A.PWM_topVal = l_topValue;
    34a8:	8d 81       	ldd	r24, Y+5	; 0x05
    34aa:	9e 81       	ldd	r25, Y+6	; 0x06
    34ac:	90 93 8d 01 	sts	0x018D, r25
    34b0:	80 93 8c 01 	sts	0x018C, r24
				G_PWM_OCR1A.PWM_prescaler = l_Prescaler;
    34b4:	8f 81       	ldd	r24, Y+7	; 0x07
    34b6:	80 93 86 01 	sts	0x0186, r24
				G_PWM_OCR1A.PWM_OCR1A_val = 0;
    34ba:	10 92 89 01 	sts	0x0189, r1
    34be:	10 92 88 01 	sts	0x0188, r1
				PWM_voidInit(&G_PWM_OCR1A);
    34c2:	83 e8       	ldi	r24, 0x83	; 131
    34c4:	91 e0       	ldi	r25, 0x01	; 1
    34c6:	0e 94 82 08 	call	0x1104	; 0x1104 <PWM_voidInit>
				PWM_VoidSetDuty(&G_PWM_OCR1A , Copy_pDC_MOTOR_stConfig->MOTOR_dutyCycle);
    34ca:	e8 85       	ldd	r30, Y+8	; 0x08
    34cc:	f9 85       	ldd	r31, Y+9	; 0x09
    34ce:	84 81       	ldd	r24, Z+4	; 0x04
    34d0:	8f 77       	andi	r24, 0x7F	; 127
    34d2:	28 2f       	mov	r18, r24
    34d4:	83 e8       	ldi	r24, 0x83	; 131
    34d6:	91 e0       	ldi	r25, 0x01	; 1
    34d8:	62 2f       	mov	r22, r18
    34da:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <PWM_VoidSetDuty>
    34de:	20 c0       	rjmp	.+64     	; 0x3520 <DCMOTOR_voidInit+0x1da>
			}
			else if (Copy_pDC_MOTOR_stConfig->MOTOR_PWN_Pin == MOTOR_PWM_OCR1B)
    34e0:	e8 85       	ldd	r30, Y+8	; 0x08
    34e2:	f9 85       	ldd	r31, Y+9	; 0x09
    34e4:	81 81       	ldd	r24, Z+1	; 0x01
    34e6:	81 30       	cpi	r24, 0x01	; 1
    34e8:	d9 f4       	brne	.+54     	; 0x3520 <DCMOTOR_voidInit+0x1da>
			{
				G_PWM_OCR1B.PWM_topVal = l_topValue;
    34ea:	8d 81       	ldd	r24, Y+5	; 0x05
    34ec:	9e 81       	ldd	r25, Y+6	; 0x06
    34ee:	90 93 98 01 	sts	0x0198, r25
    34f2:	80 93 97 01 	sts	0x0197, r24
				G_PWM_OCR1B.PWM_prescaler = l_Prescaler;
    34f6:	8f 81       	ldd	r24, Y+7	; 0x07
    34f8:	80 93 91 01 	sts	0x0191, r24
				G_PWM_OCR1B.PWM_OCR1A_val = 0;
    34fc:	10 92 94 01 	sts	0x0194, r1
    3500:	10 92 93 01 	sts	0x0193, r1
				PWM_voidInit(&G_PWM_OCR1B);
    3504:	8e e8       	ldi	r24, 0x8E	; 142
    3506:	91 e0       	ldi	r25, 0x01	; 1
    3508:	0e 94 82 08 	call	0x1104	; 0x1104 <PWM_voidInit>
				PWM_VoidSetDuty(&G_PWM_OCR1B , Copy_pDC_MOTOR_stConfig->MOTOR_dutyCycle);
    350c:	e8 85       	ldd	r30, Y+8	; 0x08
    350e:	f9 85       	ldd	r31, Y+9	; 0x09
    3510:	84 81       	ldd	r24, Z+4	; 0x04
    3512:	8f 77       	andi	r24, 0x7F	; 127
    3514:	28 2f       	mov	r18, r24
    3516:	8e e8       	ldi	r24, 0x8E	; 142
    3518:	91 e0       	ldi	r25, 0x01	; 1
    351a:	62 2f       	mov	r22, r18
    351c:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <PWM_VoidSetDuty>
	}
	else
	{
		// nothing
	}
}
    3520:	29 96       	adiw	r28, 0x09	; 9
    3522:	0f b6       	in	r0, 0x3f	; 63
    3524:	f8 94       	cli
    3526:	de bf       	out	0x3e, r29	; 62
    3528:	0f be       	out	0x3f, r0	; 63
    352a:	cd bf       	out	0x3d, r28	; 61
    352c:	cf 91       	pop	r28
    352e:	df 91       	pop	r29
    3530:	1f 91       	pop	r17
    3532:	0f 91       	pop	r16
    3534:	ff 90       	pop	r15
    3536:	ef 90       	pop	r14
    3538:	08 95       	ret

0000353a <DCMOTOR_voidStartClockWise>:


void DCMOTOR_voidStartClockWise(DC_MOTOR_stConfig* Copy_pDC_MOTOR_stConfig)
{
    353a:	df 93       	push	r29
    353c:	cf 93       	push	r28
    353e:	00 d0       	rcall	.+0      	; 0x3540 <DCMOTOR_voidStartClockWise+0x6>
    3540:	cd b7       	in	r28, 0x3d	; 61
    3542:	de b7       	in	r29, 0x3e	; 62
    3544:	9a 83       	std	Y+2, r25	; 0x02
    3546:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pDC_MOTOR_stConfig)
    3548:	89 81       	ldd	r24, Y+1	; 0x01
    354a:	9a 81       	ldd	r25, Y+2	; 0x02
    354c:	00 97       	sbiw	r24, 0x00	; 0
    354e:	89 f0       	breq	.+34     	; 0x3572 <DCMOTOR_voidStartClockWise+0x38>
	{
		DIO_VoidSetPinValue(Copy_pDC_MOTOR_stConfig->MOTOR_Port,Copy_pDC_MOTOR_stConfig->MOTOR_IN1_Pin, DIO_PIN_LOGIC_HIGH);
    3550:	e9 81       	ldd	r30, Y+1	; 0x01
    3552:	fa 81       	ldd	r31, Y+2	; 0x02
    3554:	80 81       	ld	r24, Z
    3556:	83 70       	andi	r24, 0x03	; 3
    3558:	28 2f       	mov	r18, r24
    355a:	e9 81       	ldd	r30, Y+1	; 0x01
    355c:	fa 81       	ldd	r31, Y+2	; 0x02
    355e:	80 81       	ld	r24, Z
    3560:	86 95       	lsr	r24
    3562:	86 95       	lsr	r24
    3564:	87 70       	andi	r24, 0x07	; 7
    3566:	98 2f       	mov	r25, r24
    3568:	82 2f       	mov	r24, r18
    356a:	69 2f       	mov	r22, r25
    356c:	41 e0       	ldi	r20, 0x01	; 1
    356e:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <DIO_VoidSetPinValue>
	}
	else
	{

	}
}
    3572:	0f 90       	pop	r0
    3574:	0f 90       	pop	r0
    3576:	cf 91       	pop	r28
    3578:	df 91       	pop	r29
    357a:	08 95       	ret

0000357c <DCMOTOR_voidStop>:
void DCMOTOR_voidStop(DC_MOTOR_stConfig* Copy_pDC_MOTOR_stConfig)
{
    357c:	df 93       	push	r29
    357e:	cf 93       	push	r28
    3580:	00 d0       	rcall	.+0      	; 0x3582 <DCMOTOR_voidStop+0x6>
    3582:	cd b7       	in	r28, 0x3d	; 61
    3584:	de b7       	in	r29, 0x3e	; 62
    3586:	9a 83       	std	Y+2, r25	; 0x02
    3588:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pDC_MOTOR_stConfig)
    358a:	89 81       	ldd	r24, Y+1	; 0x01
    358c:	9a 81       	ldd	r25, Y+2	; 0x02
    358e:	00 97       	sbiw	r24, 0x00	; 0
    3590:	89 f0       	breq	.+34     	; 0x35b4 <DCMOTOR_voidStop+0x38>
	{
		DIO_VoidSetPinValue(Copy_pDC_MOTOR_stConfig->MOTOR_Port,Copy_pDC_MOTOR_stConfig->MOTOR_IN1_Pin, DIO_PIN_LOGIC_LOW);
    3592:	e9 81       	ldd	r30, Y+1	; 0x01
    3594:	fa 81       	ldd	r31, Y+2	; 0x02
    3596:	80 81       	ld	r24, Z
    3598:	83 70       	andi	r24, 0x03	; 3
    359a:	28 2f       	mov	r18, r24
    359c:	e9 81       	ldd	r30, Y+1	; 0x01
    359e:	fa 81       	ldd	r31, Y+2	; 0x02
    35a0:	80 81       	ld	r24, Z
    35a2:	86 95       	lsr	r24
    35a4:	86 95       	lsr	r24
    35a6:	87 70       	andi	r24, 0x07	; 7
    35a8:	98 2f       	mov	r25, r24
    35aa:	82 2f       	mov	r24, r18
    35ac:	69 2f       	mov	r22, r25
    35ae:	40 e0       	ldi	r20, 0x00	; 0
    35b0:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <DIO_VoidSetPinValue>
	}
	else
	{

	}
}
    35b4:	0f 90       	pop	r0
    35b6:	0f 90       	pop	r0
    35b8:	cf 91       	pop	r28
    35ba:	df 91       	pop	r29
    35bc:	08 95       	ret

000035be <DCMOTOR_voidStartAntiClockWise>:
void DCMOTOR_voidStartAntiClockWise(DC_MOTOR_stConfig* Copy_pDC_MOTOR_stConfig)
{
    35be:	df 93       	push	r29
    35c0:	cf 93       	push	r28
    35c2:	00 d0       	rcall	.+0      	; 0x35c4 <DCMOTOR_voidStartAntiClockWise+0x6>
    35c4:	cd b7       	in	r28, 0x3d	; 61
    35c6:	de b7       	in	r29, 0x3e	; 62
    35c8:	9a 83       	std	Y+2, r25	; 0x02
    35ca:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pDC_MOTOR_stConfig)
    35cc:	89 81       	ldd	r24, Y+1	; 0x01
    35ce:	9a 81       	ldd	r25, Y+2	; 0x02
    35d0:	00 97       	sbiw	r24, 0x00	; 0
    35d2:	11 f1       	breq	.+68     	; 0x3618 <DCMOTOR_voidStartAntiClockWise+0x5a>
	{
		DIO_VoidSetPinValue(Copy_pDC_MOTOR_stConfig->MOTOR_Port,Copy_pDC_MOTOR_stConfig->MOTOR_IN1_Pin, DIO_PIN_LOGIC_LOW);
    35d4:	e9 81       	ldd	r30, Y+1	; 0x01
    35d6:	fa 81       	ldd	r31, Y+2	; 0x02
    35d8:	80 81       	ld	r24, Z
    35da:	83 70       	andi	r24, 0x03	; 3
    35dc:	28 2f       	mov	r18, r24
    35de:	e9 81       	ldd	r30, Y+1	; 0x01
    35e0:	fa 81       	ldd	r31, Y+2	; 0x02
    35e2:	80 81       	ld	r24, Z
    35e4:	86 95       	lsr	r24
    35e6:	86 95       	lsr	r24
    35e8:	87 70       	andi	r24, 0x07	; 7
    35ea:	98 2f       	mov	r25, r24
    35ec:	82 2f       	mov	r24, r18
    35ee:	69 2f       	mov	r22, r25
    35f0:	40 e0       	ldi	r20, 0x00	; 0
    35f2:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <DIO_VoidSetPinValue>
		DIO_VoidSetPinValue(Copy_pDC_MOTOR_stConfig->MOTOR_Port,Copy_pDC_MOTOR_stConfig->MOTOR_IN2_Pin, DIO_PIN_LOGIC_HIGH);
    35f6:	e9 81       	ldd	r30, Y+1	; 0x01
    35f8:	fa 81       	ldd	r31, Y+2	; 0x02
    35fa:	80 81       	ld	r24, Z
    35fc:	83 70       	andi	r24, 0x03	; 3
    35fe:	28 2f       	mov	r18, r24
    3600:	e9 81       	ldd	r30, Y+1	; 0x01
    3602:	fa 81       	ldd	r31, Y+2	; 0x02
    3604:	80 81       	ld	r24, Z
    3606:	82 95       	swap	r24
    3608:	86 95       	lsr	r24
    360a:	87 70       	andi	r24, 0x07	; 7
    360c:	98 2f       	mov	r25, r24
    360e:	82 2f       	mov	r24, r18
    3610:	69 2f       	mov	r22, r25
    3612:	41 e0       	ldi	r20, 0x01	; 1
    3614:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <DIO_VoidSetPinValue>
	}
	else
	{

	}
}
    3618:	0f 90       	pop	r0
    361a:	0f 90       	pop	r0
    361c:	cf 91       	pop	r28
    361e:	df 91       	pop	r29
    3620:	08 95       	ret

00003622 <DCMOTOR_voidSetSpeed>:
void DCMOTOR_voidSetSpeed(DC_MOTOR_stConfig* Copy_pDC_MOTOR_stConfig, u8 copy_u8DutyCycle)
{
    3622:	df 93       	push	r29
    3624:	cf 93       	push	r28
    3626:	00 d0       	rcall	.+0      	; 0x3628 <DCMOTOR_voidSetSpeed+0x6>
    3628:	0f 92       	push	r0
    362a:	cd b7       	in	r28, 0x3d	; 61
    362c:	de b7       	in	r29, 0x3e	; 62
    362e:	9a 83       	std	Y+2, r25	; 0x02
    3630:	89 83       	std	Y+1, r24	; 0x01
    3632:	6b 83       	std	Y+3, r22	; 0x03
	if(Copy_pDC_MOTOR_stConfig->MOTOR_PWN_Pin == MOTOR_PWM_OCR1A)
    3634:	e9 81       	ldd	r30, Y+1	; 0x01
    3636:	fa 81       	ldd	r31, Y+2	; 0x02
    3638:	81 81       	ldd	r24, Z+1	; 0x01
    363a:	88 23       	and	r24, r24
    363c:	59 f4       	brne	.+22     	; 0x3654 <DCMOTOR_voidSetSpeed+0x32>
	{
		PWM_VoidSetDuty(&G_PWM_OCR1A , Copy_pDC_MOTOR_stConfig->MOTOR_dutyCycle);
    363e:	e9 81       	ldd	r30, Y+1	; 0x01
    3640:	fa 81       	ldd	r31, Y+2	; 0x02
    3642:	84 81       	ldd	r24, Z+4	; 0x04
    3644:	8f 77       	andi	r24, 0x7F	; 127
    3646:	28 2f       	mov	r18, r24
    3648:	83 e8       	ldi	r24, 0x83	; 131
    364a:	91 e0       	ldi	r25, 0x01	; 1
    364c:	62 2f       	mov	r22, r18
    364e:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <PWM_VoidSetDuty>
    3652:	0f c0       	rjmp	.+30     	; 0x3672 <DCMOTOR_voidSetSpeed+0x50>
	}
	else if (Copy_pDC_MOTOR_stConfig->MOTOR_PWN_Pin == MOTOR_PWM_OCR1B)
    3654:	e9 81       	ldd	r30, Y+1	; 0x01
    3656:	fa 81       	ldd	r31, Y+2	; 0x02
    3658:	81 81       	ldd	r24, Z+1	; 0x01
    365a:	81 30       	cpi	r24, 0x01	; 1
    365c:	51 f4       	brne	.+20     	; 0x3672 <DCMOTOR_voidSetSpeed+0x50>
	{
		PWM_VoidSetDuty(&G_PWM_OCR1B , Copy_pDC_MOTOR_stConfig->MOTOR_dutyCycle);
    365e:	e9 81       	ldd	r30, Y+1	; 0x01
    3660:	fa 81       	ldd	r31, Y+2	; 0x02
    3662:	84 81       	ldd	r24, Z+4	; 0x04
    3664:	8f 77       	andi	r24, 0x7F	; 127
    3666:	28 2f       	mov	r18, r24
    3668:	8e e8       	ldi	r24, 0x8E	; 142
    366a:	91 e0       	ldi	r25, 0x01	; 1
    366c:	62 2f       	mov	r22, r18
    366e:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <PWM_VoidSetDuty>
	}
}
    3672:	0f 90       	pop	r0
    3674:	0f 90       	pop	r0
    3676:	0f 90       	pop	r0
    3678:	cf 91       	pop	r28
    367a:	df 91       	pop	r29
    367c:	08 95       	ret

0000367e <DCMOTOR_voidStartClockWise_withSpeed>:

void DCMOTOR_voidStartClockWise_withSpeed(DC_MOTOR_stConfig* Copy_pDC_MOTOR_stConfig,u8 copy_u8DutyCycle)
{
    367e:	df 93       	push	r29
    3680:	cf 93       	push	r28
    3682:	00 d0       	rcall	.+0      	; 0x3684 <DCMOTOR_voidStartClockWise_withSpeed+0x6>
    3684:	0f 92       	push	r0
    3686:	cd b7       	in	r28, 0x3d	; 61
    3688:	de b7       	in	r29, 0x3e	; 62
    368a:	9a 83       	std	Y+2, r25	; 0x02
    368c:	89 83       	std	Y+1, r24	; 0x01
    368e:	6b 83       	std	Y+3, r22	; 0x03
	DCMOTOR_voidStartClockWise(Copy_pDC_MOTOR_stConfig);
    3690:	89 81       	ldd	r24, Y+1	; 0x01
    3692:	9a 81       	ldd	r25, Y+2	; 0x02
    3694:	0e 94 9d 1a 	call	0x353a	; 0x353a <DCMOTOR_voidStartClockWise>
	DCMOTOR_voidSetSpeed(Copy_pDC_MOTOR_stConfig,copy_u8DutyCycle);
    3698:	89 81       	ldd	r24, Y+1	; 0x01
    369a:	9a 81       	ldd	r25, Y+2	; 0x02
    369c:	6b 81       	ldd	r22, Y+3	; 0x03
    369e:	0e 94 11 1b 	call	0x3622	; 0x3622 <DCMOTOR_voidSetSpeed>

}
    36a2:	0f 90       	pop	r0
    36a4:	0f 90       	pop	r0
    36a6:	0f 90       	pop	r0
    36a8:	cf 91       	pop	r28
    36aa:	df 91       	pop	r29
    36ac:	08 95       	ret

000036ae <DCMOTOR_voidStartAntiClockWise_withSpeed>:
void DCMOTOR_voidStartAntiClockWise_withSpeed(DC_MOTOR_stConfig* Copy_pDC_MOTOR_stConfig,u8 copy_u8DutyCycle)
{
    36ae:	df 93       	push	r29
    36b0:	cf 93       	push	r28
    36b2:	00 d0       	rcall	.+0      	; 0x36b4 <DCMOTOR_voidStartAntiClockWise_withSpeed+0x6>
    36b4:	0f 92       	push	r0
    36b6:	cd b7       	in	r28, 0x3d	; 61
    36b8:	de b7       	in	r29, 0x3e	; 62
    36ba:	9a 83       	std	Y+2, r25	; 0x02
    36bc:	89 83       	std	Y+1, r24	; 0x01
    36be:	6b 83       	std	Y+3, r22	; 0x03
	DCMOTOR_voidStartAntiClockWise(Copy_pDC_MOTOR_stConfig);
    36c0:	89 81       	ldd	r24, Y+1	; 0x01
    36c2:	9a 81       	ldd	r25, Y+2	; 0x02
    36c4:	0e 94 df 1a 	call	0x35be	; 0x35be <DCMOTOR_voidStartAntiClockWise>
	DCMOTOR_voidSetSpeed(Copy_pDC_MOTOR_stConfig,copy_u8DutyCycle);
    36c8:	89 81       	ldd	r24, Y+1	; 0x01
    36ca:	9a 81       	ldd	r25, Y+2	; 0x02
    36cc:	6b 81       	ldd	r22, Y+3	; 0x03
    36ce:	0e 94 11 1b 	call	0x3622	; 0x3622 <DCMOTOR_voidSetSpeed>
}
    36d2:	0f 90       	pop	r0
    36d4:	0f 90       	pop	r0
    36d6:	0f 90       	pop	r0
    36d8:	cf 91       	pop	r28
    36da:	df 91       	pop	r29
    36dc:	08 95       	ret

000036de <PrescalerCalculation>:


static u8 PrescalerCalculation(u16 Copy_u16Freq)
{
    36de:	df 93       	push	r29
    36e0:	cf 93       	push	r28
    36e2:	cd b7       	in	r28, 0x3d	; 61
    36e4:	de b7       	in	r29, 0x3e	; 62
    36e6:	2a 97       	sbiw	r28, 0x0a	; 10
    36e8:	0f b6       	in	r0, 0x3f	; 63
    36ea:	f8 94       	cli
    36ec:	de bf       	out	0x3e, r29	; 62
    36ee:	0f be       	out	0x3f, r0	; 63
    36f0:	cd bf       	out	0x3d, r28	; 61
    36f2:	9a 87       	std	Y+10, r25	; 0x0a
    36f4:	89 87       	std	Y+9, r24	; 0x09
	s8 local_counter = 4;
    36f6:	84 e0       	ldi	r24, 0x04	; 4
    36f8:	88 87       	std	Y+8, r24	; 0x08
	u16 local_min = 65535;
    36fa:	8f ef       	ldi	r24, 0xFF	; 255
    36fc:	9f ef       	ldi	r25, 0xFF	; 255
    36fe:	9f 83       	std	Y+7, r25	; 0x07
    3700:	8e 83       	std	Y+6, r24	; 0x06
	u8 local_min_idx = 0;
    3702:	1d 82       	std	Y+5, r1	; 0x05
	// top = period*F_CPU/n - > n prescaler
	u32 temp =	((f32)1.0/Copy_u16Freq) * F_CPU;
    3704:	89 85       	ldd	r24, Y+9	; 0x09
    3706:	9a 85       	ldd	r25, Y+10	; 0x0a
    3708:	cc 01       	movw	r24, r24
    370a:	a0 e0       	ldi	r26, 0x00	; 0
    370c:	b0 e0       	ldi	r27, 0x00	; 0
    370e:	bc 01       	movw	r22, r24
    3710:	cd 01       	movw	r24, r26
    3712:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    3716:	9b 01       	movw	r18, r22
    3718:	ac 01       	movw	r20, r24
    371a:	60 e0       	ldi	r22, 0x00	; 0
    371c:	70 e0       	ldi	r23, 0x00	; 0
    371e:	80 e8       	ldi	r24, 0x80	; 128
    3720:	9f e3       	ldi	r25, 0x3F	; 63
    3722:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3726:	dc 01       	movw	r26, r24
    3728:	cb 01       	movw	r24, r22
    372a:	bc 01       	movw	r22, r24
    372c:	cd 01       	movw	r24, r26
    372e:	20 e0       	ldi	r18, 0x00	; 0
    3730:	34 e2       	ldi	r19, 0x24	; 36
    3732:	44 ef       	ldi	r20, 0xF4	; 244
    3734:	5a e4       	ldi	r21, 0x4A	; 74
    3736:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    373a:	dc 01       	movw	r26, r24
    373c:	cb 01       	movw	r24, r22
    373e:	bc 01       	movw	r22, r24
    3740:	cd 01       	movw	r24, r26
    3742:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3746:	dc 01       	movw	r26, r24
    3748:	cb 01       	movw	r24, r22
    374a:	89 83       	std	Y+1, r24	; 0x01
    374c:	9a 83       	std	Y+2, r25	; 0x02
    374e:	ab 83       	std	Y+3, r26	; 0x03
    3750:	bc 83       	std	Y+4, r27	; 0x04
    3752:	44 c0       	rjmp	.+136    	; 0x37dc <PrescalerCalculation+0xfe>
	for(;local_counter >= 0 ; local_counter--)
	{
		if( (temp%PrescalerArr[local_counter]) < local_min )
    3754:	88 85       	ldd	r24, Y+8	; 0x08
    3756:	99 27       	eor	r25, r25
    3758:	87 fd       	sbrc	r24, 7
    375a:	90 95       	com	r25
    375c:	88 0f       	add	r24, r24
    375e:	99 1f       	adc	r25, r25
    3760:	fc 01       	movw	r30, r24
    3762:	ec 53       	subi	r30, 0x3C	; 60
    3764:	fe 4f       	sbci	r31, 0xFE	; 254
    3766:	80 81       	ld	r24, Z
    3768:	91 81       	ldd	r25, Z+1	; 0x01
    376a:	9c 01       	movw	r18, r24
    376c:	40 e0       	ldi	r20, 0x00	; 0
    376e:	50 e0       	ldi	r21, 0x00	; 0
    3770:	89 81       	ldd	r24, Y+1	; 0x01
    3772:	9a 81       	ldd	r25, Y+2	; 0x02
    3774:	ab 81       	ldd	r26, Y+3	; 0x03
    3776:	bc 81       	ldd	r27, Y+4	; 0x04
    3778:	bc 01       	movw	r22, r24
    377a:	cd 01       	movw	r24, r26
    377c:	0e 94 3d 1f 	call	0x3e7a	; 0x3e7a <__udivmodsi4>
    3780:	dc 01       	movw	r26, r24
    3782:	cb 01       	movw	r24, r22
    3784:	9c 01       	movw	r18, r24
    3786:	ad 01       	movw	r20, r26
    3788:	8e 81       	ldd	r24, Y+6	; 0x06
    378a:	9f 81       	ldd	r25, Y+7	; 0x07
    378c:	cc 01       	movw	r24, r24
    378e:	a0 e0       	ldi	r26, 0x00	; 0
    3790:	b0 e0       	ldi	r27, 0x00	; 0
    3792:	28 17       	cp	r18, r24
    3794:	39 07       	cpc	r19, r25
    3796:	4a 07       	cpc	r20, r26
    3798:	5b 07       	cpc	r21, r27
    379a:	e8 f4       	brcc	.+58     	; 0x37d6 <PrescalerCalculation+0xf8>
		{
			local_min = temp%PrescalerArr[local_counter];
    379c:	88 85       	ldd	r24, Y+8	; 0x08
    379e:	99 27       	eor	r25, r25
    37a0:	87 fd       	sbrc	r24, 7
    37a2:	90 95       	com	r25
    37a4:	88 0f       	add	r24, r24
    37a6:	99 1f       	adc	r25, r25
    37a8:	fc 01       	movw	r30, r24
    37aa:	ec 53       	subi	r30, 0x3C	; 60
    37ac:	fe 4f       	sbci	r31, 0xFE	; 254
    37ae:	80 81       	ld	r24, Z
    37b0:	91 81       	ldd	r25, Z+1	; 0x01
    37b2:	9c 01       	movw	r18, r24
    37b4:	40 e0       	ldi	r20, 0x00	; 0
    37b6:	50 e0       	ldi	r21, 0x00	; 0
    37b8:	89 81       	ldd	r24, Y+1	; 0x01
    37ba:	9a 81       	ldd	r25, Y+2	; 0x02
    37bc:	ab 81       	ldd	r26, Y+3	; 0x03
    37be:	bc 81       	ldd	r27, Y+4	; 0x04
    37c0:	bc 01       	movw	r22, r24
    37c2:	cd 01       	movw	r24, r26
    37c4:	0e 94 3d 1f 	call	0x3e7a	; 0x3e7a <__udivmodsi4>
    37c8:	dc 01       	movw	r26, r24
    37ca:	cb 01       	movw	r24, r22
    37cc:	9f 83       	std	Y+7, r25	; 0x07
    37ce:	8e 83       	std	Y+6, r24	; 0x06
			local_min_idx = local_counter+1;
    37d0:	88 85       	ldd	r24, Y+8	; 0x08
    37d2:	8f 5f       	subi	r24, 0xFF	; 255
    37d4:	8d 83       	std	Y+5, r24	; 0x05
	s8 local_counter = 4;
	u16 local_min = 65535;
	u8 local_min_idx = 0;
	// top = period*F_CPU/n - > n prescaler
	u32 temp =	((f32)1.0/Copy_u16Freq) * F_CPU;
	for(;local_counter >= 0 ; local_counter--)
    37d6:	88 85       	ldd	r24, Y+8	; 0x08
    37d8:	81 50       	subi	r24, 0x01	; 1
    37da:	88 87       	std	Y+8, r24	; 0x08
    37dc:	88 85       	ldd	r24, Y+8	; 0x08
    37de:	88 23       	and	r24, r24
    37e0:	0c f0       	brlt	.+2      	; 0x37e4 <PrescalerCalculation+0x106>
    37e2:	b8 cf       	rjmp	.-144    	; 0x3754 <PrescalerCalculation+0x76>
		{
			local_min = temp%PrescalerArr[local_counter];
			local_min_idx = local_counter+1;
		}
	}
	return local_min_idx;
    37e4:	8d 81       	ldd	r24, Y+5	; 0x05
}
    37e6:	2a 96       	adiw	r28, 0x0a	; 10
    37e8:	0f b6       	in	r0, 0x3f	; 63
    37ea:	f8 94       	cli
    37ec:	de bf       	out	0x3e, r29	; 62
    37ee:	0f be       	out	0x3f, r0	; 63
    37f0:	cd bf       	out	0x3d, r28	; 61
    37f2:	cf 91       	pop	r28
    37f4:	df 91       	pop	r29
    37f6:	08 95       	ret

000037f8 <main>:

// air conditions state
u8 AirA_stat = Air_Stat_off;
u8 AirB_stat = Air_Stat_off;
void main()
{
    37f8:	df 93       	push	r29
    37fa:	cf 93       	push	r28
    37fc:	cd b7       	in	r28, 0x3d	; 61
    37fe:	de b7       	in	r29, 0x3e	; 62
	SYSTEM_INIT();
    3800:	0e 94 09 1c 	call	0x3812	; 0x3812 <SYSTEM_INIT>
	while(1)
	{
		/**
		 * start adc converstion and update result for room a , room b , kitchen
		 */
		Sensors();
    3804:	0e 94 89 1c 	call	0x3912	; 0x3912 <Sensors>
		/**
		 * if air condition is on and room temperature more than or equal  to user temperature turn on air condition
		 * if air condition is on and room temperature less than user temperature turn off air condition
		 *
		 */
		Air_automate();
    3808:	0e 94 f0 1e 	call	0x3de0	; 0x3de0 <Air_automate>
		MasterCommandHanler();
    380c:	0e 94 c9 1d 	call	0x3b92	; 0x3b92 <MasterCommandHanler>
    3810:	f9 cf       	rjmp	.-14     	; 0x3804 <main+0xc>

00003812 <SYSTEM_INIT>:
	}
}


void SYSTEM_INIT(void)
{
    3812:	df 93       	push	r29
    3814:	cf 93       	push	r28
    3816:	cd b7       	in	r28, 0x3d	; 61
    3818:	de b7       	in	r29, 0x3e	; 62
	// firesignal init
	LED_u8Init(&FireSignal);
    381a:	83 ec       	ldi	r24, 0xC3	; 195
    381c:	91 e0       	ldi	r25, 0x01	; 1
    381e:	0e 94 a6 17 	call	0x2f4c	; 0x2f4c <LED_u8Init>
	//uart init
	UART_VoidInit();
    3822:	0e 94 75 07 	call	0xeea	; 0xeea <UART_VoidInit>
	UART_VoidSetRxCBF(UART_RXISR);
    3826:	85 e5       	ldi	r24, 0x55	; 85
    3828:	9c e1       	ldi	r25, 0x1C	; 28
    382a:	0e 94 bd 07 	call	0xf7a	; 0xf7a <UART_VoidSetRxCBF>
	// init adc pins as input
	DIO_VoidSetPinDirection(DIO_PORTA_IDX , DIO_PIN0 , DIO_PIN_DIR_INPUT);
    382e:	80 e0       	ldi	r24, 0x00	; 0
    3830:	60 e0       	ldi	r22, 0x00	; 0
    3832:	40 e0       	ldi	r20, 0x00	; 0
    3834:	0e 94 80 0c 	call	0x1900	; 0x1900 <DIO_VoidSetPinDirection>
	DIO_VoidSetPinDirection(DIO_PORTA_IDX , DIO_PIN1 , DIO_PIN_DIR_INPUT);
    3838:	80 e0       	ldi	r24, 0x00	; 0
    383a:	61 e0       	ldi	r22, 0x01	; 1
    383c:	40 e0       	ldi	r20, 0x00	; 0
    383e:	0e 94 80 0c 	call	0x1900	; 0x1900 <DIO_VoidSetPinDirection>
	DIO_VoidSetPinDirection(DIO_PORTA_IDX , DIO_PIN2 , DIO_PIN_DIR_INPUT);
    3842:	80 e0       	ldi	r24, 0x00	; 0
    3844:	62 e0       	ldi	r22, 0x02	; 2
    3846:	40 e0       	ldi	r20, 0x00	; 0
    3848:	0e 94 80 0c 	call	0x1900	; 0x1900 <DIO_VoidSetPinDirection>
	// sensors init
	LM35_voidInit(NULL);
    384c:	80 e0       	ldi	r24, 0x00	; 0
    384e:	90 e0       	ldi	r25, 0x00	; 0
    3850:	0e 94 26 19 	call	0x324c	; 0x324c <LM35_voidInit>

	/*ROOM A*/
	DCMOTOR_voidInit(&AIR_A);
    3854:	87 ea       	ldi	r24, 0xA7	; 167
    3856:	91 e0       	ldi	r25, 0x01	; 1
    3858:	0e 94 a3 19 	call	0x3346	; 0x3346 <DCMOTOR_voidInit>

	StepperMotor_VoidInit(&DOOR_A);
    385c:	80 ea       	ldi	r24, 0xA0	; 160
    385e:	91 e0       	ldi	r25, 0x01	; 1
    3860:	0e 94 49 10 	call	0x2092	; 0x2092 <StepperMotor_VoidInit>
	StepperMotor_VoidInit(&Window_A);
    3864:	89 e9       	ldi	r24, 0x99	; 153
    3866:	91 e0       	ldi	r25, 0x01	; 1
    3868:	0e 94 49 10 	call	0x2092	; 0x2092 <StepperMotor_VoidInit>
	LED_u8Init(&light_A);
    386c:	8c ea       	ldi	r24, 0xAC	; 172
    386e:	91 e0       	ldi	r25, 0x01	; 1
    3870:	0e 94 a6 17 	call	0x2f4c	; 0x2f4c <LED_u8Init>
	LED_u8Init(&TV_A);
    3874:	8d ea       	ldi	r24, 0xAD	; 173
    3876:	91 e0       	ldi	r25, 0x01	; 1
    3878:	0e 94 a6 17 	call	0x2f4c	; 0x2f4c <LED_u8Init>
	/****/
	/*ROOM B*/
	DCMOTOR_voidInit(&AIR_B);
    387c:	8c eb       	ldi	r24, 0xBC	; 188
    387e:	91 e0       	ldi	r25, 0x01	; 1
    3880:	0e 94 a3 19 	call	0x3346	; 0x3346 <DCMOTOR_voidInit>

	StepperMotor_VoidInit(&DOOR_B);
    3884:	85 eb       	ldi	r24, 0xB5	; 181
    3886:	91 e0       	ldi	r25, 0x01	; 1
    3888:	0e 94 49 10 	call	0x2092	; 0x2092 <StepperMotor_VoidInit>
	StepperMotor_VoidInit(&Window_B);
    388c:	8e ea       	ldi	r24, 0xAE	; 174
    388e:	91 e0       	ldi	r25, 0x01	; 1
    3890:	0e 94 49 10 	call	0x2092	; 0x2092 <StepperMotor_VoidInit>
	LED_u8Init(&light_B);
    3894:	81 ec       	ldi	r24, 0xC1	; 193
    3896:	91 e0       	ldi	r25, 0x01	; 1
    3898:	0e 94 a6 17 	call	0x2f4c	; 0x2f4c <LED_u8Init>
	LED_u8Init(&TV_B);
    389c:	82 ec       	ldi	r24, 0xC2	; 194
    389e:	91 e0       	ldi	r25, 0x01	; 1
    38a0:	0e 94 a6 17 	call	0x2f4c	; 0x2f4c <LED_u8Init>
	/****/

}
    38a4:	cf 91       	pop	r28
    38a6:	df 91       	pop	r29
    38a8:	08 95       	ret

000038aa <UART_RXISR>:
void UART_RXISR(void)
{
    38aa:	df 93       	push	r29
    38ac:	cf 93       	push	r28
    38ae:	cd b7       	in	r28, 0x3d	; 61
    38b0:	de b7       	in	r29, 0x3e	; 62
	static u8 counter = 0;
	if(counter == 0)
    38b2:	80 91 f8 01 	lds	r24, 0x01F8
    38b6:	88 23       	and	r24, r24
    38b8:	a1 f4       	brne	.+40     	; 0x38e2 <UART_RXISR+0x38>
	{
		UART_Receive_interrupt(&G_u8Command);
    38ba:	89 ee       	ldi	r24, 0xE9	; 233
    38bc:	91 e0       	ldi	r25, 0x01	; 1
    38be:	0e 94 07 08 	call	0x100e	; 0x100e <UART_Receive_interrupt>
		if(G_u8Command == ROOMA_AIR_OPEN)
    38c2:	80 91 e9 01 	lds	r24, 0x01E9
    38c6:	8c 33       	cpi	r24, 0x3C	; 60
    38c8:	21 f4       	brne	.+8      	; 0x38d2 <UART_RXISR+0x28>
		{
			counter = 1;
    38ca:	81 e0       	ldi	r24, 0x01	; 1
    38cc:	80 93 f8 01 	sts	0x01F8, r24
    38d0:	1d c0       	rjmp	.+58     	; 0x390c <UART_RXISR+0x62>
		}
		else if (G_u8Command == ROOMB_AIR_OPEN )
    38d2:	80 91 e9 01 	lds	r24, 0x01E9
    38d6:	8e 33       	cpi	r24, 0x3E	; 62
    38d8:	c9 f4       	brne	.+50     	; 0x390c <UART_RXISR+0x62>
		{
			counter = 2;
    38da:	82 e0       	ldi	r24, 0x02	; 2
    38dc:	80 93 f8 01 	sts	0x01F8, r24
    38e0:	15 c0       	rjmp	.+42     	; 0x390c <UART_RXISR+0x62>
		}
	}
	else if (counter == 1)
    38e2:	80 91 f8 01 	lds	r24, 0x01F8
    38e6:	81 30       	cpi	r24, 0x01	; 1
    38e8:	39 f4       	brne	.+14     	; 0x38f8 <UART_RXISR+0x4e>
	{
		UART_Receive_interrupt(&airA_usertemp);
    38ea:	8a ee       	ldi	r24, 0xEA	; 234
    38ec:	91 e0       	ldi	r25, 0x01	; 1
    38ee:	0e 94 07 08 	call	0x100e	; 0x100e <UART_Receive_interrupt>

		counter = 0;
    38f2:	10 92 f8 01 	sts	0x01F8, r1
    38f6:	0a c0       	rjmp	.+20     	; 0x390c <UART_RXISR+0x62>
	}
	else if (counter == 2)
    38f8:	80 91 f8 01 	lds	r24, 0x01F8
    38fc:	82 30       	cpi	r24, 0x02	; 2
    38fe:	31 f4       	brne	.+12     	; 0x390c <UART_RXISR+0x62>
	{
		UART_Receive_interrupt(&airB_usertemp);
    3900:	8b ee       	ldi	r24, 0xEB	; 235
    3902:	91 e0       	ldi	r25, 0x01	; 1
    3904:	0e 94 07 08 	call	0x100e	; 0x100e <UART_Receive_interrupt>
		counter = 0;
    3908:	10 92 f8 01 	sts	0x01F8, r1
	}
}
    390c:	cf 91       	pop	r28
    390e:	df 91       	pop	r29
    3910:	08 95       	ret

00003912 <Sensors>:
void Sensors(void)
{
    3912:	df 93       	push	r29
    3914:	cf 93       	push	r28
    3916:	cd b7       	in	r28, 0x3d	; 61
    3918:	de b7       	in	r29, 0x3e	; 62

	LM35_voidReadDegree(LM35_ROOMA , &RoomA_temp);
    391a:	20 ef       	ldi	r18, 0xF0	; 240
    391c:	31 e0       	ldi	r19, 0x01	; 1
    391e:	80 e0       	ldi	r24, 0x00	; 0
    3920:	b9 01       	movw	r22, r18
    3922:	0e 94 4e 19 	call	0x329c	; 0x329c <LM35_voidReadDegree>
	LM35_voidReadDegree(LM35_ROOMB , &RoomB_temp);
    3926:	22 ef       	ldi	r18, 0xF2	; 242
    3928:	31 e0       	ldi	r19, 0x01	; 1
    392a:	81 e0       	ldi	r24, 0x01	; 1
    392c:	b9 01       	movw	r22, r18
    392e:	0e 94 4e 19 	call	0x329c	; 0x329c <LM35_voidReadDegree>
	LM35_voidReadDegree(LM35_KITCHEN , &Kitchen_temp);
    3932:	24 ef       	ldi	r18, 0xF4	; 244
    3934:	31 e0       	ldi	r19, 0x01	; 1
    3936:	82 e0       	ldi	r24, 0x02	; 2
    3938:	b9 01       	movw	r22, r18
    393a:	0e 94 4e 19 	call	0x329c	; 0x329c <LM35_voidReadDegree>
	 * if any room temperature is more than or equal 100
	 * send a fire allarm signal to the master
	 * and open all doors and windows
	 * and disconnect any electrical device
	 */
	if(RoomA_temp >= 100 || RoomB_temp >= 100 || Kitchen_temp >= 100 )
    393e:	80 91 f0 01 	lds	r24, 0x01F0
    3942:	90 91 f1 01 	lds	r25, 0x01F1
    3946:	84 36       	cpi	r24, 0x64	; 100
    3948:	91 05       	cpc	r25, r1
    394a:	70 f4       	brcc	.+28     	; 0x3968 <Sensors+0x56>
    394c:	80 91 f2 01 	lds	r24, 0x01F2
    3950:	90 91 f3 01 	lds	r25, 0x01F3
    3954:	84 36       	cpi	r24, 0x64	; 100
    3956:	91 05       	cpc	r25, r1
    3958:	38 f4       	brcc	.+14     	; 0x3968 <Sensors+0x56>
    395a:	80 91 f4 01 	lds	r24, 0x01F4
    395e:	90 91 f5 01 	lds	r25, 0x01F5
    3962:	84 36       	cpi	r24, 0x64	; 100
    3964:	91 05       	cpc	r25, r1
    3966:	30 f1       	brcs	.+76     	; 0x39b4 <Sensors+0xa2>
	{
		LED_u8TurnOn(&FireSignal);
    3968:	83 ec       	ldi	r24, 0xC3	; 195
    396a:	91 e0       	ldi	r25, 0x01	; 1
    396c:	0e 94 7f 18 	call	0x30fe	; 0x30fe <LED_u8TurnOn>

		Air_Close(ROOM_A);
    3970:	80 e0       	ldi	r24, 0x00	; 0
    3972:	0e 94 ac 1d 	call	0x3b58	; 0x3b58 <Air_Close>
		Air_Close(ROOM_B);
    3976:	82 e0       	ldi	r24, 0x02	; 2
    3978:	0e 94 ac 1d 	call	0x3b58	; 0x3b58 <Air_Close>

		DOOR_OPEN(ROOM_A);
    397c:	80 e0       	ldi	r24, 0x00	; 0
    397e:	0e 94 dd 1c 	call	0x39ba	; 0x39ba <DOOR_OPEN>
		DOOR_OPEN(ROOM_B);
    3982:	82 e0       	ldi	r24, 0x02	; 2
    3984:	0e 94 dd 1c 	call	0x39ba	; 0x39ba <DOOR_OPEN>

		Wind_OPEN(ROOM_A);
    3988:	80 e0       	ldi	r24, 0x00	; 0
    398a:	0e 94 39 1d 	call	0x3a72	; 0x3a72 <Wind_OPEN>
		Wind_OPEN(ROOM_B);
    398e:	82 e0       	ldi	r24, 0x02	; 2
    3990:	0e 94 39 1d 	call	0x3a72	; 0x3a72 <Wind_OPEN>

		LED_u8TurnOff(&light_A);
    3994:	8c ea       	ldi	r24, 0xAC	; 172
    3996:	91 e0       	ldi	r25, 0x01	; 1
    3998:	0e 94 14 18 	call	0x3028	; 0x3028 <LED_u8TurnOff>
		LED_u8TurnOff(&light_B);
    399c:	81 ec       	ldi	r24, 0xC1	; 193
    399e:	91 e0       	ldi	r25, 0x01	; 1
    39a0:	0e 94 14 18 	call	0x3028	; 0x3028 <LED_u8TurnOff>

		LED_u8TurnOff(&TV_A);
    39a4:	8d ea       	ldi	r24, 0xAD	; 173
    39a6:	91 e0       	ldi	r25, 0x01	; 1
    39a8:	0e 94 14 18 	call	0x3028	; 0x3028 <LED_u8TurnOff>
		LED_u8TurnOff(&TV_B);
    39ac:	82 ec       	ldi	r24, 0xC2	; 194
    39ae:	91 e0       	ldi	r25, 0x01	; 1
    39b0:	0e 94 14 18 	call	0x3028	; 0x3028 <LED_u8TurnOff>
	}
	else {}
}
    39b4:	cf 91       	pop	r28
    39b6:	df 91       	pop	r29
    39b8:	08 95       	ret

000039ba <DOOR_OPEN>:
void DOOR_OPEN(u8 copy_u8Room)
{
    39ba:	df 93       	push	r29
    39bc:	cf 93       	push	r28
    39be:	0f 92       	push	r0
    39c0:	cd b7       	in	r28, 0x3d	; 61
    39c2:	de b7       	in	r29, 0x3e	; 62
    39c4:	89 83       	std	Y+1, r24	; 0x01
	if(copy_u8Room == ROOM_A && doorA_stat == DOOR_STAT_CLOSE)
    39c6:	89 81       	ldd	r24, Y+1	; 0x01
    39c8:	88 23       	and	r24, r24
    39ca:	81 f4       	brne	.+32     	; 0x39ec <DOOR_OPEN+0x32>
    39cc:	80 91 ec 01 	lds	r24, 0x01EC
    39d0:	88 23       	and	r24, r24
    39d2:	61 f4       	brne	.+24     	; 0x39ec <DOOR_OPEN+0x32>
	{
		StepperMotor_VoidSteps_ClockWise(&DOOR_A,11);
    39d4:	80 ea       	ldi	r24, 0xA0	; 160
    39d6:	91 e0       	ldi	r25, 0x01	; 1
    39d8:	4b e0       	ldi	r20, 0x0B	; 11
    39da:	50 e0       	ldi	r21, 0x00	; 0
    39dc:	60 e0       	ldi	r22, 0x00	; 0
    39de:	70 e0       	ldi	r23, 0x00	; 0
    39e0:	0e 94 32 17 	call	0x2e64	; 0x2e64 <StepperMotor_VoidSteps_ClockWise>
		doorA_stat = DOOR_STAT_OPEN;
    39e4:	81 e0       	ldi	r24, 0x01	; 1
    39e6:	80 93 ec 01 	sts	0x01EC, r24
    39ea:	12 c0       	rjmp	.+36     	; 0x3a10 <DOOR_OPEN+0x56>
	}
	else if(copy_u8Room == ROOM_B && doorB_stat == DOOR_STAT_CLOSE)
    39ec:	89 81       	ldd	r24, Y+1	; 0x01
    39ee:	82 30       	cpi	r24, 0x02	; 2
    39f0:	79 f4       	brne	.+30     	; 0x3a10 <DOOR_OPEN+0x56>
    39f2:	80 91 ed 01 	lds	r24, 0x01ED
    39f6:	88 23       	and	r24, r24
    39f8:	59 f4       	brne	.+22     	; 0x3a10 <DOOR_OPEN+0x56>
	{
		StepperMotor_VoidSteps_ClockWise(&DOOR_B,11);
    39fa:	85 eb       	ldi	r24, 0xB5	; 181
    39fc:	91 e0       	ldi	r25, 0x01	; 1
    39fe:	4b e0       	ldi	r20, 0x0B	; 11
    3a00:	50 e0       	ldi	r21, 0x00	; 0
    3a02:	60 e0       	ldi	r22, 0x00	; 0
    3a04:	70 e0       	ldi	r23, 0x00	; 0
    3a06:	0e 94 32 17 	call	0x2e64	; 0x2e64 <StepperMotor_VoidSteps_ClockWise>
		doorB_stat = DOOR_STAT_OPEN;
    3a0a:	81 e0       	ldi	r24, 0x01	; 1
    3a0c:	80 93 ed 01 	sts	0x01ED, r24
	}
}
    3a10:	0f 90       	pop	r0
    3a12:	cf 91       	pop	r28
    3a14:	df 91       	pop	r29
    3a16:	08 95       	ret

00003a18 <DOOR_Close>:
void DOOR_Close(u8 copy_u8Room)
{
    3a18:	df 93       	push	r29
    3a1a:	cf 93       	push	r28
    3a1c:	0f 92       	push	r0
    3a1e:	cd b7       	in	r28, 0x3d	; 61
    3a20:	de b7       	in	r29, 0x3e	; 62
    3a22:	89 83       	std	Y+1, r24	; 0x01
	if(copy_u8Room == ROOM_A && doorA_stat == DOOR_STAT_OPEN)
    3a24:	89 81       	ldd	r24, Y+1	; 0x01
    3a26:	88 23       	and	r24, r24
    3a28:	79 f4       	brne	.+30     	; 0x3a48 <DOOR_Close+0x30>
    3a2a:	80 91 ec 01 	lds	r24, 0x01EC
    3a2e:	81 30       	cpi	r24, 0x01	; 1
    3a30:	59 f4       	brne	.+22     	; 0x3a48 <DOOR_Close+0x30>
	{
		StepperMotor_VoidSteps_AntiClockWise(&DOOR_A,11);
    3a32:	80 ea       	ldi	r24, 0xA0	; 160
    3a34:	91 e0       	ldi	r25, 0x01	; 1
    3a36:	4b e0       	ldi	r20, 0x0B	; 11
    3a38:	50 e0       	ldi	r21, 0x00	; 0
    3a3a:	60 e0       	ldi	r22, 0x00	; 0
    3a3c:	70 e0       	ldi	r23, 0x00	; 0
    3a3e:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <StepperMotor_VoidSteps_AntiClockWise>
		doorA_stat = DOOR_STAT_CLOSE;
    3a42:	10 92 ec 01 	sts	0x01EC, r1
    3a46:	11 c0       	rjmp	.+34     	; 0x3a6a <DOOR_Close+0x52>
	}
	else if(copy_u8Room == ROOM_B && doorB_stat == DOOR_STAT_OPEN)
    3a48:	89 81       	ldd	r24, Y+1	; 0x01
    3a4a:	82 30       	cpi	r24, 0x02	; 2
    3a4c:	71 f4       	brne	.+28     	; 0x3a6a <DOOR_Close+0x52>
    3a4e:	80 91 ed 01 	lds	r24, 0x01ED
    3a52:	81 30       	cpi	r24, 0x01	; 1
    3a54:	51 f4       	brne	.+20     	; 0x3a6a <DOOR_Close+0x52>
	{
		StepperMotor_VoidSteps_AntiClockWise(&DOOR_B,11);
    3a56:	85 eb       	ldi	r24, 0xB5	; 181
    3a58:	91 e0       	ldi	r25, 0x01	; 1
    3a5a:	4b e0       	ldi	r20, 0x0B	; 11
    3a5c:	50 e0       	ldi	r21, 0x00	; 0
    3a5e:	60 e0       	ldi	r22, 0x00	; 0
    3a60:	70 e0       	ldi	r23, 0x00	; 0
    3a62:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <StepperMotor_VoidSteps_AntiClockWise>
		doorB_stat = DOOR_STAT_CLOSE;
    3a66:	10 92 ed 01 	sts	0x01ED, r1
	}
}
    3a6a:	0f 90       	pop	r0
    3a6c:	cf 91       	pop	r28
    3a6e:	df 91       	pop	r29
    3a70:	08 95       	ret

00003a72 <Wind_OPEN>:

void Wind_OPEN(u8 copy_u8Room)
{
    3a72:	df 93       	push	r29
    3a74:	cf 93       	push	r28
    3a76:	0f 92       	push	r0
    3a78:	cd b7       	in	r28, 0x3d	; 61
    3a7a:	de b7       	in	r29, 0x3e	; 62
    3a7c:	89 83       	std	Y+1, r24	; 0x01
	if(copy_u8Room == ROOM_A && WindA_stat == Wind_STAT_CLOSE)
    3a7e:	89 81       	ldd	r24, Y+1	; 0x01
    3a80:	88 23       	and	r24, r24
    3a82:	81 f4       	brne	.+32     	; 0x3aa4 <Wind_OPEN+0x32>
    3a84:	80 91 ee 01 	lds	r24, 0x01EE
    3a88:	88 23       	and	r24, r24
    3a8a:	61 f4       	brne	.+24     	; 0x3aa4 <Wind_OPEN+0x32>
	{
		StepperMotor_VoidSteps_ClockWise(&Window_A,11);
    3a8c:	89 e9       	ldi	r24, 0x99	; 153
    3a8e:	91 e0       	ldi	r25, 0x01	; 1
    3a90:	4b e0       	ldi	r20, 0x0B	; 11
    3a92:	50 e0       	ldi	r21, 0x00	; 0
    3a94:	60 e0       	ldi	r22, 0x00	; 0
    3a96:	70 e0       	ldi	r23, 0x00	; 0
    3a98:	0e 94 32 17 	call	0x2e64	; 0x2e64 <StepperMotor_VoidSteps_ClockWise>
		WindA_stat = Wind_STAT_OPEN;
    3a9c:	81 e0       	ldi	r24, 0x01	; 1
    3a9e:	80 93 ee 01 	sts	0x01EE, r24
    3aa2:	12 c0       	rjmp	.+36     	; 0x3ac8 <Wind_OPEN+0x56>
	}
	else if(copy_u8Room == ROOM_B && WindB_stat == Wind_STAT_CLOSE)
    3aa4:	89 81       	ldd	r24, Y+1	; 0x01
    3aa6:	82 30       	cpi	r24, 0x02	; 2
    3aa8:	79 f4       	brne	.+30     	; 0x3ac8 <Wind_OPEN+0x56>
    3aaa:	80 91 ef 01 	lds	r24, 0x01EF
    3aae:	88 23       	and	r24, r24
    3ab0:	59 f4       	brne	.+22     	; 0x3ac8 <Wind_OPEN+0x56>
	{
		StepperMotor_VoidSteps_ClockWise(&Window_B,11);
    3ab2:	8e ea       	ldi	r24, 0xAE	; 174
    3ab4:	91 e0       	ldi	r25, 0x01	; 1
    3ab6:	4b e0       	ldi	r20, 0x0B	; 11
    3ab8:	50 e0       	ldi	r21, 0x00	; 0
    3aba:	60 e0       	ldi	r22, 0x00	; 0
    3abc:	70 e0       	ldi	r23, 0x00	; 0
    3abe:	0e 94 32 17 	call	0x2e64	; 0x2e64 <StepperMotor_VoidSteps_ClockWise>
		WindB_stat = Wind_STAT_OPEN;
    3ac2:	81 e0       	ldi	r24, 0x01	; 1
    3ac4:	80 93 ef 01 	sts	0x01EF, r24
	}
}
    3ac8:	0f 90       	pop	r0
    3aca:	cf 91       	pop	r28
    3acc:	df 91       	pop	r29
    3ace:	08 95       	ret

00003ad0 <Wind_Close>:
void Wind_Close(u8 copy_u8Room)
{
    3ad0:	df 93       	push	r29
    3ad2:	cf 93       	push	r28
    3ad4:	0f 92       	push	r0
    3ad6:	cd b7       	in	r28, 0x3d	; 61
    3ad8:	de b7       	in	r29, 0x3e	; 62
    3ada:	89 83       	std	Y+1, r24	; 0x01
	if(copy_u8Room == ROOM_A && WindA_stat == Wind_STAT_OPEN)
    3adc:	89 81       	ldd	r24, Y+1	; 0x01
    3ade:	88 23       	and	r24, r24
    3ae0:	79 f4       	brne	.+30     	; 0x3b00 <Wind_Close+0x30>
    3ae2:	80 91 ee 01 	lds	r24, 0x01EE
    3ae6:	81 30       	cpi	r24, 0x01	; 1
    3ae8:	59 f4       	brne	.+22     	; 0x3b00 <Wind_Close+0x30>
	{
		StepperMotor_VoidSteps_AntiClockWise(&Window_A,11);
    3aea:	89 e9       	ldi	r24, 0x99	; 153
    3aec:	91 e0       	ldi	r25, 0x01	; 1
    3aee:	4b e0       	ldi	r20, 0x0B	; 11
    3af0:	50 e0       	ldi	r21, 0x00	; 0
    3af2:	60 e0       	ldi	r22, 0x00	; 0
    3af4:	70 e0       	ldi	r23, 0x00	; 0
    3af6:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <StepperMotor_VoidSteps_AntiClockWise>
		WindA_stat = DOOR_STAT_CLOSE;
    3afa:	10 92 ee 01 	sts	0x01EE, r1
    3afe:	11 c0       	rjmp	.+34     	; 0x3b22 <Wind_Close+0x52>
	}
	else if(copy_u8Room == ROOM_B && WindB_stat == Wind_STAT_OPEN)
    3b00:	89 81       	ldd	r24, Y+1	; 0x01
    3b02:	82 30       	cpi	r24, 0x02	; 2
    3b04:	71 f4       	brne	.+28     	; 0x3b22 <Wind_Close+0x52>
    3b06:	80 91 ef 01 	lds	r24, 0x01EF
    3b0a:	81 30       	cpi	r24, 0x01	; 1
    3b0c:	51 f4       	brne	.+20     	; 0x3b22 <Wind_Close+0x52>
	{
		StepperMotor_VoidSteps_AntiClockWise(&Window_B,11);
    3b0e:	8e ea       	ldi	r24, 0xAE	; 174
    3b10:	91 e0       	ldi	r25, 0x01	; 1
    3b12:	4b e0       	ldi	r20, 0x0B	; 11
    3b14:	50 e0       	ldi	r21, 0x00	; 0
    3b16:	60 e0       	ldi	r22, 0x00	; 0
    3b18:	70 e0       	ldi	r23, 0x00	; 0
    3b1a:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <StepperMotor_VoidSteps_AntiClockWise>
		WindB_stat = DOOR_STAT_CLOSE;
    3b1e:	10 92 ef 01 	sts	0x01EF, r1
	}
}
    3b22:	0f 90       	pop	r0
    3b24:	cf 91       	pop	r28
    3b26:	df 91       	pop	r29
    3b28:	08 95       	ret

00003b2a <Air_open>:

void Air_open(u8 copy_u8Room)
{
    3b2a:	df 93       	push	r29
    3b2c:	cf 93       	push	r28
    3b2e:	0f 92       	push	r0
    3b30:	cd b7       	in	r28, 0x3d	; 61
    3b32:	de b7       	in	r29, 0x3e	; 62
    3b34:	89 83       	std	Y+1, r24	; 0x01
	if(copy_u8Room == ROOM_A)
    3b36:	89 81       	ldd	r24, Y+1	; 0x01
    3b38:	88 23       	and	r24, r24
    3b3a:	21 f4       	brne	.+8      	; 0x3b44 <Air_open+0x1a>
	{
		AirA_stat = Air_Stat_ON;
    3b3c:	81 e0       	ldi	r24, 0x01	; 1
    3b3e:	80 93 f6 01 	sts	0x01F6, r24
    3b42:	06 c0       	rjmp	.+12     	; 0x3b50 <Air_open+0x26>
	}
	else if(copy_u8Room == ROOM_B)
    3b44:	89 81       	ldd	r24, Y+1	; 0x01
    3b46:	82 30       	cpi	r24, 0x02	; 2
    3b48:	19 f4       	brne	.+6      	; 0x3b50 <Air_open+0x26>
	{
		AirB_stat = Air_Stat_ON;
    3b4a:	81 e0       	ldi	r24, 0x01	; 1
    3b4c:	80 93 f7 01 	sts	0x01F7, r24
	}

}
    3b50:	0f 90       	pop	r0
    3b52:	cf 91       	pop	r28
    3b54:	df 91       	pop	r29
    3b56:	08 95       	ret

00003b58 <Air_Close>:
void Air_Close(u8 copy_u8Room)
{
    3b58:	df 93       	push	r29
    3b5a:	cf 93       	push	r28
    3b5c:	0f 92       	push	r0
    3b5e:	cd b7       	in	r28, 0x3d	; 61
    3b60:	de b7       	in	r29, 0x3e	; 62
    3b62:	89 83       	std	Y+1, r24	; 0x01
	if(copy_u8Room == ROOM_A)
    3b64:	89 81       	ldd	r24, Y+1	; 0x01
    3b66:	88 23       	and	r24, r24
    3b68:	39 f4       	brne	.+14     	; 0x3b78 <Air_Close+0x20>
	{

		DCMOTOR_voidStop(&AIR_A);
    3b6a:	87 ea       	ldi	r24, 0xA7	; 167
    3b6c:	91 e0       	ldi	r25, 0x01	; 1
    3b6e:	0e 94 be 1a 	call	0x357c	; 0x357c <DCMOTOR_voidStop>
		AirA_stat = Air_Stat_off;
    3b72:	10 92 f6 01 	sts	0x01F6, r1
    3b76:	09 c0       	rjmp	.+18     	; 0x3b8a <Air_Close+0x32>
	}
	else if(copy_u8Room == ROOM_B)
    3b78:	89 81       	ldd	r24, Y+1	; 0x01
    3b7a:	82 30       	cpi	r24, 0x02	; 2
    3b7c:	31 f4       	brne	.+12     	; 0x3b8a <Air_Close+0x32>
	{
		DCMOTOR_voidStop(&AIR_B);
    3b7e:	8c eb       	ldi	r24, 0xBC	; 188
    3b80:	91 e0       	ldi	r25, 0x01	; 1
    3b82:	0e 94 be 1a 	call	0x357c	; 0x357c <DCMOTOR_voidStop>
		AirB_stat = Air_Stat_off;
    3b86:	10 92 f7 01 	sts	0x01F7, r1
	}
}
    3b8a:	0f 90       	pop	r0
    3b8c:	cf 91       	pop	r28
    3b8e:	df 91       	pop	r29
    3b90:	08 95       	ret

00003b92 <MasterCommandHanler>:

void MasterCommandHanler(void)
{
    3b92:	df 93       	push	r29
    3b94:	cf 93       	push	r28
    3b96:	00 d0       	rcall	.+0      	; 0x3b98 <MasterCommandHanler+0x6>
    3b98:	cd b7       	in	r28, 0x3d	; 61
    3b9a:	de b7       	in	r29, 0x3e	; 62
	switch(G_u8Command)
    3b9c:	80 91 e9 01 	lds	r24, 0x01E9
    3ba0:	28 2f       	mov	r18, r24
    3ba2:	30 e0       	ldi	r19, 0x00	; 0
    3ba4:	3a 83       	std	Y+2, r19	; 0x02
    3ba6:	29 83       	std	Y+1, r18	; 0x01
    3ba8:	89 81       	ldd	r24, Y+1	; 0x01
    3baa:	9a 81       	ldd	r25, Y+2	; 0x02
    3bac:	88 32       	cpi	r24, 0x28	; 40
    3bae:	91 05       	cpc	r25, r1
    3bb0:	09 f4       	brne	.+2      	; 0x3bb4 <MasterCommandHanler+0x22>
    3bb2:	ba c0       	rjmp	.+372    	; 0x3d28 <MasterCommandHanler+0x196>
    3bb4:	29 81       	ldd	r18, Y+1	; 0x01
    3bb6:	3a 81       	ldd	r19, Y+2	; 0x02
    3bb8:	29 32       	cpi	r18, 0x29	; 41
    3bba:	31 05       	cpc	r19, r1
    3bbc:	0c f0       	brlt	.+2      	; 0x3bc0 <MasterCommandHanler+0x2e>
    3bbe:	43 c0       	rjmp	.+134    	; 0x3c46 <MasterCommandHanler+0xb4>
    3bc0:	89 81       	ldd	r24, Y+1	; 0x01
    3bc2:	9a 81       	ldd	r25, Y+2	; 0x02
    3bc4:	83 31       	cpi	r24, 0x13	; 19
    3bc6:	91 05       	cpc	r25, r1
    3bc8:	09 f4       	brne	.+2      	; 0x3bcc <MasterCommandHanler+0x3a>
    3bca:	9b c0       	rjmp	.+310    	; 0x3d02 <MasterCommandHanler+0x170>
    3bcc:	29 81       	ldd	r18, Y+1	; 0x01
    3bce:	3a 81       	ldd	r19, Y+2	; 0x02
    3bd0:	24 31       	cpi	r18, 0x14	; 20
    3bd2:	31 05       	cpc	r19, r1
    3bd4:	fc f4       	brge	.+62     	; 0x3c14 <MasterCommandHanler+0x82>
    3bd6:	89 81       	ldd	r24, Y+1	; 0x01
    3bd8:	9a 81       	ldd	r25, Y+2	; 0x02
    3bda:	8a 30       	cpi	r24, 0x0A	; 10
    3bdc:	91 05       	cpc	r25, r1
    3bde:	09 f4       	brne	.+2      	; 0x3be2 <MasterCommandHanler+0x50>
    3be0:	7b c0       	rjmp	.+246    	; 0x3cd8 <MasterCommandHanler+0x146>
    3be2:	29 81       	ldd	r18, Y+1	; 0x01
    3be4:	3a 81       	ldd	r19, Y+2	; 0x02
    3be6:	2b 30       	cpi	r18, 0x0B	; 11
    3be8:	31 05       	cpc	r19, r1
    3bea:	3c f4       	brge	.+14     	; 0x3bfa <MasterCommandHanler+0x68>
    3bec:	89 81       	ldd	r24, Y+1	; 0x01
    3bee:	9a 81       	ldd	r25, Y+2	; 0x02
    3bf0:	89 30       	cpi	r24, 0x09	; 9
    3bf2:	91 05       	cpc	r25, r1
    3bf4:	09 f4       	brne	.+2      	; 0x3bf8 <MasterCommandHanler+0x66>
    3bf6:	77 c0       	rjmp	.+238    	; 0x3ce6 <MasterCommandHanler+0x154>
    3bf8:	ee c0       	rjmp	.+476    	; 0x3dd6 <MasterCommandHanler+0x244>
    3bfa:	29 81       	ldd	r18, Y+1	; 0x01
    3bfc:	3a 81       	ldd	r19, Y+2	; 0x02
    3bfe:	2b 30       	cpi	r18, 0x0B	; 11
    3c00:	31 05       	cpc	r19, r1
    3c02:	09 f4       	brne	.+2      	; 0x3c06 <MasterCommandHanler+0x74>
    3c04:	b0 c0       	rjmp	.+352    	; 0x3d66 <MasterCommandHanler+0x1d4>
    3c06:	89 81       	ldd	r24, Y+1	; 0x01
    3c08:	9a 81       	ldd	r25, Y+2	; 0x02
    3c0a:	8c 30       	cpi	r24, 0x0C	; 12
    3c0c:	91 05       	cpc	r25, r1
    3c0e:	09 f4       	brne	.+2      	; 0x3c12 <MasterCommandHanler+0x80>
    3c10:	a3 c0       	rjmp	.+326    	; 0x3d58 <MasterCommandHanler+0x1c6>
    3c12:	e1 c0       	rjmp	.+450    	; 0x3dd6 <MasterCommandHanler+0x244>
    3c14:	29 81       	ldd	r18, Y+1	; 0x01
    3c16:	3a 81       	ldd	r19, Y+2	; 0x02
    3c18:	25 31       	cpi	r18, 0x15	; 21
    3c1a:	31 05       	cpc	r19, r1
    3c1c:	09 f4       	brne	.+2      	; 0x3c20 <MasterCommandHanler+0x8e>
    3c1e:	b1 c0       	rjmp	.+354    	; 0x3d82 <MasterCommandHanler+0x1f0>
    3c20:	89 81       	ldd	r24, Y+1	; 0x01
    3c22:	9a 81       	ldd	r25, Y+2	; 0x02
    3c24:	85 31       	cpi	r24, 0x15	; 21
    3c26:	91 05       	cpc	r25, r1
    3c28:	0c f4       	brge	.+2      	; 0x3c2c <MasterCommandHanler+0x9a>
    3c2a:	64 c0       	rjmp	.+200    	; 0x3cf4 <MasterCommandHanler+0x162>
    3c2c:	29 81       	ldd	r18, Y+1	; 0x01
    3c2e:	3a 81       	ldd	r19, Y+2	; 0x02
    3c30:	26 31       	cpi	r18, 0x16	; 22
    3c32:	31 05       	cpc	r19, r1
    3c34:	09 f4       	brne	.+2      	; 0x3c38 <MasterCommandHanler+0xa6>
    3c36:	9e c0       	rjmp	.+316    	; 0x3d74 <MasterCommandHanler+0x1e2>
    3c38:	89 81       	ldd	r24, Y+1	; 0x01
    3c3a:	9a 81       	ldd	r25, Y+2	; 0x02
    3c3c:	87 32       	cpi	r24, 0x27	; 39
    3c3e:	91 05       	cpc	r25, r1
    3c40:	09 f4       	brne	.+2      	; 0x3c44 <MasterCommandHanler+0xb2>
    3c42:	78 c0       	rjmp	.+240    	; 0x3d34 <MasterCommandHanler+0x1a2>
    3c44:	c8 c0       	rjmp	.+400    	; 0x3dd6 <MasterCommandHanler+0x244>
    3c46:	29 81       	ldd	r18, Y+1	; 0x01
    3c48:	3a 81       	ldd	r19, Y+2	; 0x02
    3c4a:	23 33       	cpi	r18, 0x33	; 51
    3c4c:	31 05       	cpc	r19, r1
    3c4e:	09 f4       	brne	.+2      	; 0x3c52 <MasterCommandHanler+0xc0>
    3c50:	a5 c0       	rjmp	.+330    	; 0x3d9c <MasterCommandHanler+0x20a>
    3c52:	89 81       	ldd	r24, Y+1	; 0x01
    3c54:	9a 81       	ldd	r25, Y+2	; 0x02
    3c56:	84 33       	cpi	r24, 0x34	; 52
    3c58:	91 05       	cpc	r25, r1
    3c5a:	cc f4       	brge	.+50     	; 0x3c8e <MasterCommandHanler+0xfc>
    3c5c:	29 81       	ldd	r18, Y+1	; 0x01
    3c5e:	3a 81       	ldd	r19, Y+2	; 0x02
    3c60:	2a 32       	cpi	r18, 0x2A	; 42
    3c62:	31 05       	cpc	r19, r1
    3c64:	09 f4       	brne	.+2      	; 0x3c68 <MasterCommandHanler+0xd6>
    3c66:	a0 c0       	rjmp	.+320    	; 0x3da8 <MasterCommandHanler+0x216>
    3c68:	89 81       	ldd	r24, Y+1	; 0x01
    3c6a:	9a 81       	ldd	r25, Y+2	; 0x02
    3c6c:	8a 32       	cpi	r24, 0x2A	; 42
    3c6e:	91 05       	cpc	r25, r1
    3c70:	0c f4       	brge	.+2      	; 0x3c74 <MasterCommandHanler+0xe2>
    3c72:	a0 c0       	rjmp	.+320    	; 0x3db4 <MasterCommandHanler+0x222>
    3c74:	29 81       	ldd	r18, Y+1	; 0x01
    3c76:	3a 81       	ldd	r19, Y+2	; 0x02
    3c78:	21 33       	cpi	r18, 0x31	; 49
    3c7a:	31 05       	cpc	r19, r1
    3c7c:	09 f4       	brne	.+2      	; 0x3c80 <MasterCommandHanler+0xee>
    3c7e:	4e c0       	rjmp	.+156    	; 0x3d1c <MasterCommandHanler+0x18a>
    3c80:	89 81       	ldd	r24, Y+1	; 0x01
    3c82:	9a 81       	ldd	r25, Y+2	; 0x02
    3c84:	82 33       	cpi	r24, 0x32	; 50
    3c86:	91 05       	cpc	r25, r1
    3c88:	09 f4       	brne	.+2      	; 0x3c8c <MasterCommandHanler+0xfa>
    3c8a:	42 c0       	rjmp	.+132    	; 0x3d10 <MasterCommandHanler+0x17e>
    3c8c:	a4 c0       	rjmp	.+328    	; 0x3dd6 <MasterCommandHanler+0x244>
    3c8e:	29 81       	ldd	r18, Y+1	; 0x01
    3c90:	3a 81       	ldd	r19, Y+2	; 0x02
    3c92:	2c 33       	cpi	r18, 0x3C	; 60
    3c94:	31 05       	cpc	r19, r1
    3c96:	09 f4       	brne	.+2      	; 0x3c9a <MasterCommandHanler+0x108>
    3c98:	53 c0       	rjmp	.+166    	; 0x3d40 <MasterCommandHanler+0x1ae>
    3c9a:	89 81       	ldd	r24, Y+1	; 0x01
    3c9c:	9a 81       	ldd	r25, Y+2	; 0x02
    3c9e:	8d 33       	cpi	r24, 0x3D	; 61
    3ca0:	91 05       	cpc	r25, r1
    3ca2:	6c f4       	brge	.+26     	; 0x3cbe <MasterCommandHanler+0x12c>
    3ca4:	29 81       	ldd	r18, Y+1	; 0x01
    3ca6:	3a 81       	ldd	r19, Y+2	; 0x02
    3ca8:	24 33       	cpi	r18, 0x34	; 52
    3caa:	31 05       	cpc	r19, r1
    3cac:	09 f4       	brne	.+2      	; 0x3cb0 <MasterCommandHanler+0x11e>
    3cae:	70 c0       	rjmp	.+224    	; 0x3d90 <MasterCommandHanler+0x1fe>
    3cb0:	89 81       	ldd	r24, Y+1	; 0x01
    3cb2:	9a 81       	ldd	r25, Y+2	; 0x02
    3cb4:	8b 33       	cpi	r24, 0x3B	; 59
    3cb6:	91 05       	cpc	r25, r1
    3cb8:	09 f4       	brne	.+2      	; 0x3cbc <MasterCommandHanler+0x12a>
    3cba:	48 c0       	rjmp	.+144    	; 0x3d4c <MasterCommandHanler+0x1ba>
    3cbc:	8c c0       	rjmp	.+280    	; 0x3dd6 <MasterCommandHanler+0x244>
    3cbe:	29 81       	ldd	r18, Y+1	; 0x01
    3cc0:	3a 81       	ldd	r19, Y+2	; 0x02
    3cc2:	2d 33       	cpi	r18, 0x3D	; 61
    3cc4:	31 05       	cpc	r19, r1
    3cc6:	09 f4       	brne	.+2      	; 0x3cca <MasterCommandHanler+0x138>
    3cc8:	81 c0       	rjmp	.+258    	; 0x3dcc <MasterCommandHanler+0x23a>
    3cca:	89 81       	ldd	r24, Y+1	; 0x01
    3ccc:	9a 81       	ldd	r25, Y+2	; 0x02
    3cce:	8e 33       	cpi	r24, 0x3E	; 62
    3cd0:	91 05       	cpc	r25, r1
    3cd2:	09 f4       	brne	.+2      	; 0x3cd6 <MasterCommandHanler+0x144>
    3cd4:	75 c0       	rjmp	.+234    	; 0x3dc0 <MasterCommandHanler+0x22e>
    3cd6:	7f c0       	rjmp	.+254    	; 0x3dd6 <MasterCommandHanler+0x244>
		{
			/*ROOM A*/
			case ROOMA_LIGHT_ON:
				LED_u8TurnOn(&light_A);
    3cd8:	8c ea       	ldi	r24, 0xAC	; 172
    3cda:	91 e0       	ldi	r25, 0x01	; 1
    3cdc:	0e 94 7f 18 	call	0x30fe	; 0x30fe <LED_u8TurnOn>
				G_u8Command = 0;
    3ce0:	10 92 e9 01 	sts	0x01E9, r1
    3ce4:	78 c0       	rjmp	.+240    	; 0x3dd6 <MasterCommandHanler+0x244>
				break;
			case ROOMA_LIGHT_OFF:
				LED_u8TurnOff(&light_A);
    3ce6:	8c ea       	ldi	r24, 0xAC	; 172
    3ce8:	91 e0       	ldi	r25, 0x01	; 1
    3cea:	0e 94 14 18 	call	0x3028	; 0x3028 <LED_u8TurnOff>
				G_u8Command = 0;
    3cee:	10 92 e9 01 	sts	0x01E9, r1
    3cf2:	71 c0       	rjmp	.+226    	; 0x3dd6 <MasterCommandHanler+0x244>
				break;

			case ROOMA_Tv_ON:
				LED_u8TurnOn(&TV_A);
    3cf4:	8d ea       	ldi	r24, 0xAD	; 173
    3cf6:	91 e0       	ldi	r25, 0x01	; 1
    3cf8:	0e 94 7f 18 	call	0x30fe	; 0x30fe <LED_u8TurnOn>
				G_u8Command = 0;
    3cfc:	10 92 e9 01 	sts	0x01E9, r1
    3d00:	6a c0       	rjmp	.+212    	; 0x3dd6 <MasterCommandHanler+0x244>
				break;
			case ROOMA_Tv_OFF:
				LED_u8TurnOff(&TV_A);
    3d02:	8d ea       	ldi	r24, 0xAD	; 173
    3d04:	91 e0       	ldi	r25, 0x01	; 1
    3d06:	0e 94 14 18 	call	0x3028	; 0x3028 <LED_u8TurnOff>
				G_u8Command = 0;
    3d0a:	10 92 e9 01 	sts	0x01E9, r1
    3d0e:	63 c0       	rjmp	.+198    	; 0x3dd6 <MasterCommandHanler+0x244>
				break;
			case ROOMA_WINDOW_OPEN:
				Wind_OPEN(ROOM_A);
    3d10:	80 e0       	ldi	r24, 0x00	; 0
    3d12:	0e 94 39 1d 	call	0x3a72	; 0x3a72 <Wind_OPEN>
				G_u8Command = 0;
    3d16:	10 92 e9 01 	sts	0x01E9, r1
    3d1a:	5d c0       	rjmp	.+186    	; 0x3dd6 <MasterCommandHanler+0x244>
				break;
			case ROOMA_WINDOW_CLOSE:
				Wind_Close(ROOM_A);
    3d1c:	80 e0       	ldi	r24, 0x00	; 0
    3d1e:	0e 94 68 1d 	call	0x3ad0	; 0x3ad0 <Wind_Close>
				G_u8Command = 0;
    3d22:	10 92 e9 01 	sts	0x01E9, r1
    3d26:	57 c0       	rjmp	.+174    	; 0x3dd6 <MasterCommandHanler+0x244>
				break;
			case ROOMA_DOOR_OPEN:
				DOOR_OPEN(ROOM_A);
    3d28:	80 e0       	ldi	r24, 0x00	; 0
    3d2a:	0e 94 dd 1c 	call	0x39ba	; 0x39ba <DOOR_OPEN>
				G_u8Command = 0;
    3d2e:	10 92 e9 01 	sts	0x01E9, r1
    3d32:	51 c0       	rjmp	.+162    	; 0x3dd6 <MasterCommandHanler+0x244>
				break;
			case ROOMA_DOOR_CLOSE:
				DOOR_Close(ROOM_A);
    3d34:	80 e0       	ldi	r24, 0x00	; 0
    3d36:	0e 94 0c 1d 	call	0x3a18	; 0x3a18 <DOOR_Close>
				G_u8Command = 0;
    3d3a:	10 92 e9 01 	sts	0x01E9, r1
    3d3e:	4b c0       	rjmp	.+150    	; 0x3dd6 <MasterCommandHanler+0x244>
				break;

			case ROOMA_AIR_OPEN:
				Air_open(ROOM_A);
    3d40:	80 e0       	ldi	r24, 0x00	; 0
    3d42:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <Air_open>
				G_u8Command = 0;
    3d46:	10 92 e9 01 	sts	0x01E9, r1
    3d4a:	45 c0       	rjmp	.+138    	; 0x3dd6 <MasterCommandHanler+0x244>
				break;

			case ROOMA_AIR_CLOSE:
				Air_Close(ROOM_A);
    3d4c:	80 e0       	ldi	r24, 0x00	; 0
    3d4e:	0e 94 ac 1d 	call	0x3b58	; 0x3b58 <Air_Close>
				G_u8Command = 0;
    3d52:	10 92 e9 01 	sts	0x01E9, r1
    3d56:	3f c0       	rjmp	.+126    	; 0x3dd6 <MasterCommandHanler+0x244>
				break;
			/********ROOM B***********/
			case ROOMB_LIGHT_ON:
				LED_u8TurnOn(&light_B);
    3d58:	81 ec       	ldi	r24, 0xC1	; 193
    3d5a:	91 e0       	ldi	r25, 0x01	; 1
    3d5c:	0e 94 7f 18 	call	0x30fe	; 0x30fe <LED_u8TurnOn>
				G_u8Command = 0;
    3d60:	10 92 e9 01 	sts	0x01E9, r1
    3d64:	38 c0       	rjmp	.+112    	; 0x3dd6 <MasterCommandHanler+0x244>
				break;
			case ROOMB_LIGHT_OFF:
				LED_u8TurnOff(&light_B);
    3d66:	81 ec       	ldi	r24, 0xC1	; 193
    3d68:	91 e0       	ldi	r25, 0x01	; 1
    3d6a:	0e 94 14 18 	call	0x3028	; 0x3028 <LED_u8TurnOff>
				G_u8Command = 0;
    3d6e:	10 92 e9 01 	sts	0x01E9, r1
    3d72:	31 c0       	rjmp	.+98     	; 0x3dd6 <MasterCommandHanler+0x244>
				break;

			case ROOMB_Tv_ON:
				LED_u8TurnOn(&TV_B);
    3d74:	82 ec       	ldi	r24, 0xC2	; 194
    3d76:	91 e0       	ldi	r25, 0x01	; 1
    3d78:	0e 94 7f 18 	call	0x30fe	; 0x30fe <LED_u8TurnOn>
				G_u8Command = 0;
    3d7c:	10 92 e9 01 	sts	0x01E9, r1
    3d80:	2a c0       	rjmp	.+84     	; 0x3dd6 <MasterCommandHanler+0x244>
				break;
			case ROOMB_Tv_OFF:
				LED_u8TurnOff(&TV_B);
    3d82:	82 ec       	ldi	r24, 0xC2	; 194
    3d84:	91 e0       	ldi	r25, 0x01	; 1
    3d86:	0e 94 14 18 	call	0x3028	; 0x3028 <LED_u8TurnOff>
				G_u8Command = 0;
    3d8a:	10 92 e9 01 	sts	0x01E9, r1
    3d8e:	23 c0       	rjmp	.+70     	; 0x3dd6 <MasterCommandHanler+0x244>
				break;
			case ROOMB_WINDOW_OPEN:
				Wind_OPEN(ROOM_B);
    3d90:	82 e0       	ldi	r24, 0x02	; 2
    3d92:	0e 94 39 1d 	call	0x3a72	; 0x3a72 <Wind_OPEN>
				G_u8Command = 0;
    3d96:	10 92 e9 01 	sts	0x01E9, r1
    3d9a:	1d c0       	rjmp	.+58     	; 0x3dd6 <MasterCommandHanler+0x244>
				break;
			case ROOMB_WINDOW_CLOSE:
				Wind_Close(ROOM_B);
    3d9c:	82 e0       	ldi	r24, 0x02	; 2
    3d9e:	0e 94 68 1d 	call	0x3ad0	; 0x3ad0 <Wind_Close>
				G_u8Command = 0;
    3da2:	10 92 e9 01 	sts	0x01E9, r1
    3da6:	17 c0       	rjmp	.+46     	; 0x3dd6 <MasterCommandHanler+0x244>
				break;
			case ROOMB_DOOR_OPEN:
				DOOR_OPEN(ROOM_B);
    3da8:	82 e0       	ldi	r24, 0x02	; 2
    3daa:	0e 94 dd 1c 	call	0x39ba	; 0x39ba <DOOR_OPEN>
				G_u8Command = 0;
    3dae:	10 92 e9 01 	sts	0x01E9, r1
    3db2:	11 c0       	rjmp	.+34     	; 0x3dd6 <MasterCommandHanler+0x244>
				break;
			case ROOMB_DOOR_CLOSE:
				DOOR_Close(ROOM_B);
    3db4:	82 e0       	ldi	r24, 0x02	; 2
    3db6:	0e 94 0c 1d 	call	0x3a18	; 0x3a18 <DOOR_Close>
				G_u8Command = 0;
    3dba:	10 92 e9 01 	sts	0x01E9, r1
    3dbe:	0b c0       	rjmp	.+22     	; 0x3dd6 <MasterCommandHanler+0x244>
				break;

			case ROOMB_AIR_OPEN:
				Air_open(ROOM_B);
    3dc0:	82 e0       	ldi	r24, 0x02	; 2
    3dc2:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <Air_open>
				G_u8Command = 0;
    3dc6:	10 92 e9 01 	sts	0x01E9, r1
    3dca:	05 c0       	rjmp	.+10     	; 0x3dd6 <MasterCommandHanler+0x244>
				break;

			case ROOMB_AIR_CLOSE:
				Air_Close(ROOM_B);
    3dcc:	82 e0       	ldi	r24, 0x02	; 2
    3dce:	0e 94 ac 1d 	call	0x3b58	; 0x3b58 <Air_Close>
				G_u8Command = 0;
    3dd2:	10 92 e9 01 	sts	0x01E9, r1
				break;
		}

}
    3dd6:	0f 90       	pop	r0
    3dd8:	0f 90       	pop	r0
    3dda:	cf 91       	pop	r28
    3ddc:	df 91       	pop	r29
    3dde:	08 95       	ret

00003de0 <Air_automate>:

void Air_automate(void)
{
    3de0:	df 93       	push	r29
    3de2:	cf 93       	push	r28
    3de4:	cd b7       	in	r28, 0x3d	; 61
    3de6:	de b7       	in	r29, 0x3e	; 62
	// if air condition is on
	if(AirA_stat == Air_Stat_ON)
    3de8:	80 91 f6 01 	lds	r24, 0x01F6
    3dec:	81 30       	cpi	r24, 0x01	; 1
    3dee:	f9 f4       	brne	.+62     	; 0x3e2e <Air_automate+0x4e>
	{
		// if room temperature  more than or equal to user temperature open the air condition
		if(RoomA_temp >= airA_usertemp)
    3df0:	80 91 ea 01 	lds	r24, 0x01EA
    3df4:	28 2f       	mov	r18, r24
    3df6:	30 e0       	ldi	r19, 0x00	; 0
    3df8:	80 91 f0 01 	lds	r24, 0x01F0
    3dfc:	90 91 f1 01 	lds	r25, 0x01F1
    3e00:	82 17       	cp	r24, r18
    3e02:	93 07       	cpc	r25, r19
    3e04:	28 f0       	brcs	.+10     	; 0x3e10 <Air_automate+0x30>
		{
				DCMOTOR_voidStartClockWise(&AIR_A);
    3e06:	87 ea       	ldi	r24, 0xA7	; 167
    3e08:	91 e0       	ldi	r25, 0x01	; 1
    3e0a:	0e 94 9d 1a 	call	0x353a	; 0x353a <DCMOTOR_voidStartClockWise>
    3e0e:	0f c0       	rjmp	.+30     	; 0x3e2e <Air_automate+0x4e>
		}
		// if room temperature less than user temperature close the air condition
		else if(RoomA_temp < airA_usertemp)
    3e10:	80 91 ea 01 	lds	r24, 0x01EA
    3e14:	28 2f       	mov	r18, r24
    3e16:	30 e0       	ldi	r19, 0x00	; 0
    3e18:	80 91 f0 01 	lds	r24, 0x01F0
    3e1c:	90 91 f1 01 	lds	r25, 0x01F1
    3e20:	82 17       	cp	r24, r18
    3e22:	93 07       	cpc	r25, r19
    3e24:	20 f4       	brcc	.+8      	; 0x3e2e <Air_automate+0x4e>
		{
				DCMOTOR_voidStop(&AIR_A);
    3e26:	87 ea       	ldi	r24, 0xA7	; 167
    3e28:	91 e0       	ldi	r25, 0x01	; 1
    3e2a:	0e 94 be 1a 	call	0x357c	; 0x357c <DCMOTOR_voidStop>
		}
	}
	// if air condition is on
	if (AirB_stat == Air_Stat_ON)
    3e2e:	80 91 f7 01 	lds	r24, 0x01F7
    3e32:	81 30       	cpi	r24, 0x01	; 1
    3e34:	f9 f4       	brne	.+62     	; 0x3e74 <Air_automate+0x94>
	{
		// if room temperature  more than or equal to user temperature open the air condition
		if(RoomB_temp >= airB_usertemp)
    3e36:	80 91 eb 01 	lds	r24, 0x01EB
    3e3a:	28 2f       	mov	r18, r24
    3e3c:	30 e0       	ldi	r19, 0x00	; 0
    3e3e:	80 91 f2 01 	lds	r24, 0x01F2
    3e42:	90 91 f3 01 	lds	r25, 0x01F3
    3e46:	82 17       	cp	r24, r18
    3e48:	93 07       	cpc	r25, r19
    3e4a:	28 f0       	brcs	.+10     	; 0x3e56 <Air_automate+0x76>
		{
				DCMOTOR_voidStartClockWise(&AIR_B);
    3e4c:	8c eb       	ldi	r24, 0xBC	; 188
    3e4e:	91 e0       	ldi	r25, 0x01	; 1
    3e50:	0e 94 9d 1a 	call	0x353a	; 0x353a <DCMOTOR_voidStartClockWise>
    3e54:	0f c0       	rjmp	.+30     	; 0x3e74 <Air_automate+0x94>
		}
		// if room temperature less than user temperature close the air condition
		else if(RoomA_temp < airA_usertemp)
    3e56:	80 91 ea 01 	lds	r24, 0x01EA
    3e5a:	28 2f       	mov	r18, r24
    3e5c:	30 e0       	ldi	r19, 0x00	; 0
    3e5e:	80 91 f0 01 	lds	r24, 0x01F0
    3e62:	90 91 f1 01 	lds	r25, 0x01F1
    3e66:	82 17       	cp	r24, r18
    3e68:	93 07       	cpc	r25, r19
    3e6a:	20 f4       	brcc	.+8      	; 0x3e74 <Air_automate+0x94>
		{
				DCMOTOR_voidStop(&AIR_B);
    3e6c:	8c eb       	ldi	r24, 0xBC	; 188
    3e6e:	91 e0       	ldi	r25, 0x01	; 1
    3e70:	0e 94 be 1a 	call	0x357c	; 0x357c <DCMOTOR_voidStop>
		}
	}
}
    3e74:	cf 91       	pop	r28
    3e76:	df 91       	pop	r29
    3e78:	08 95       	ret

00003e7a <__udivmodsi4>:
    3e7a:	a1 e2       	ldi	r26, 0x21	; 33
    3e7c:	1a 2e       	mov	r1, r26
    3e7e:	aa 1b       	sub	r26, r26
    3e80:	bb 1b       	sub	r27, r27
    3e82:	fd 01       	movw	r30, r26
    3e84:	0d c0       	rjmp	.+26     	; 0x3ea0 <__udivmodsi4_ep>

00003e86 <__udivmodsi4_loop>:
    3e86:	aa 1f       	adc	r26, r26
    3e88:	bb 1f       	adc	r27, r27
    3e8a:	ee 1f       	adc	r30, r30
    3e8c:	ff 1f       	adc	r31, r31
    3e8e:	a2 17       	cp	r26, r18
    3e90:	b3 07       	cpc	r27, r19
    3e92:	e4 07       	cpc	r30, r20
    3e94:	f5 07       	cpc	r31, r21
    3e96:	20 f0       	brcs	.+8      	; 0x3ea0 <__udivmodsi4_ep>
    3e98:	a2 1b       	sub	r26, r18
    3e9a:	b3 0b       	sbc	r27, r19
    3e9c:	e4 0b       	sbc	r30, r20
    3e9e:	f5 0b       	sbc	r31, r21

00003ea0 <__udivmodsi4_ep>:
    3ea0:	66 1f       	adc	r22, r22
    3ea2:	77 1f       	adc	r23, r23
    3ea4:	88 1f       	adc	r24, r24
    3ea6:	99 1f       	adc	r25, r25
    3ea8:	1a 94       	dec	r1
    3eaa:	69 f7       	brne	.-38     	; 0x3e86 <__udivmodsi4_loop>
    3eac:	60 95       	com	r22
    3eae:	70 95       	com	r23
    3eb0:	80 95       	com	r24
    3eb2:	90 95       	com	r25
    3eb4:	9b 01       	movw	r18, r22
    3eb6:	ac 01       	movw	r20, r24
    3eb8:	bd 01       	movw	r22, r26
    3eba:	cf 01       	movw	r24, r30
    3ebc:	08 95       	ret

00003ebe <__prologue_saves__>:
    3ebe:	2f 92       	push	r2
    3ec0:	3f 92       	push	r3
    3ec2:	4f 92       	push	r4
    3ec4:	5f 92       	push	r5
    3ec6:	6f 92       	push	r6
    3ec8:	7f 92       	push	r7
    3eca:	8f 92       	push	r8
    3ecc:	9f 92       	push	r9
    3ece:	af 92       	push	r10
    3ed0:	bf 92       	push	r11
    3ed2:	cf 92       	push	r12
    3ed4:	df 92       	push	r13
    3ed6:	ef 92       	push	r14
    3ed8:	ff 92       	push	r15
    3eda:	0f 93       	push	r16
    3edc:	1f 93       	push	r17
    3ede:	cf 93       	push	r28
    3ee0:	df 93       	push	r29
    3ee2:	cd b7       	in	r28, 0x3d	; 61
    3ee4:	de b7       	in	r29, 0x3e	; 62
    3ee6:	ca 1b       	sub	r28, r26
    3ee8:	db 0b       	sbc	r29, r27
    3eea:	0f b6       	in	r0, 0x3f	; 63
    3eec:	f8 94       	cli
    3eee:	de bf       	out	0x3e, r29	; 62
    3ef0:	0f be       	out	0x3f, r0	; 63
    3ef2:	cd bf       	out	0x3d, r28	; 61
    3ef4:	09 94       	ijmp

00003ef6 <__epilogue_restores__>:
    3ef6:	2a 88       	ldd	r2, Y+18	; 0x12
    3ef8:	39 88       	ldd	r3, Y+17	; 0x11
    3efa:	48 88       	ldd	r4, Y+16	; 0x10
    3efc:	5f 84       	ldd	r5, Y+15	; 0x0f
    3efe:	6e 84       	ldd	r6, Y+14	; 0x0e
    3f00:	7d 84       	ldd	r7, Y+13	; 0x0d
    3f02:	8c 84       	ldd	r8, Y+12	; 0x0c
    3f04:	9b 84       	ldd	r9, Y+11	; 0x0b
    3f06:	aa 84       	ldd	r10, Y+10	; 0x0a
    3f08:	b9 84       	ldd	r11, Y+9	; 0x09
    3f0a:	c8 84       	ldd	r12, Y+8	; 0x08
    3f0c:	df 80       	ldd	r13, Y+7	; 0x07
    3f0e:	ee 80       	ldd	r14, Y+6	; 0x06
    3f10:	fd 80       	ldd	r15, Y+5	; 0x05
    3f12:	0c 81       	ldd	r16, Y+4	; 0x04
    3f14:	1b 81       	ldd	r17, Y+3	; 0x03
    3f16:	aa 81       	ldd	r26, Y+2	; 0x02
    3f18:	b9 81       	ldd	r27, Y+1	; 0x01
    3f1a:	ce 0f       	add	r28, r30
    3f1c:	d1 1d       	adc	r29, r1
    3f1e:	0f b6       	in	r0, 0x3f	; 63
    3f20:	f8 94       	cli
    3f22:	de bf       	out	0x3e, r29	; 62
    3f24:	0f be       	out	0x3f, r0	; 63
    3f26:	cd bf       	out	0x3d, r28	; 61
    3f28:	ed 01       	movw	r28, r26
    3f2a:	08 95       	ret

00003f2c <_exit>:
    3f2c:	f8 94       	cli

00003f2e <__stop_program>:
    3f2e:	ff cf       	rjmp	.-2      	; 0x3f2e <__stop_program>
